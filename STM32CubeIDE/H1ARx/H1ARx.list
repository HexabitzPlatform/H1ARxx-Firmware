
H1ARx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000176f0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000315c  080177b0  080177b0  000277b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a90c  0801a90c  00030a58  2**0
                  CONTENTS
  4 .ARM          00000008  0801a90c  0801a90c  0002a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a914  0801a914  00030a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a914  0801a914  0002a914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a91c  0801a91c  0002a91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a58  20000000  0801a920  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006490  20000a58  0801b378  00030a58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006ee8  0801b378  00036ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005011d  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008a67  00000000  00000000  00080b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019a9e  00000000  00000000  00089604  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001c68  00000000  00000000  000a30a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fc8  00000000  00000000  000a4d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000163cb  00000000  00000000  000a6cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a558  00000000  00000000  000bd0a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c75fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006094  00000000  00000000  000c7678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a58 	.word	0x20000a58
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017794 	.word	0x08017794

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a5c 	.word	0x20000a5c
 8000100:	08017794 	.word	0x08017794

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	080177e4 	.word	0x080177e4
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017824 	.word	0x08017824
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017864 	.word	0x08017864
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <LoadROtopology+0x94>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <LoadROtopology+0x98>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d033      	beq.n	8002d9c <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002d36:	d039      	beq.n	8002dac <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d3a:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <LoadROtopology+0xa0>)
 8002d3e:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d42:	781e      	ldrb	r6, [r3, #0]
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	d035      	beq.n	8002db4 <LoadROtopology+0x90>
 8002d48:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002d4a:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	466b      	mov	r3, sp
 8002d4e:	1dd9      	adds	r1, r3, #7
 8002d50:	2300      	movs	r3, #0
 8002d52:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d54:	4d1c      	ldr	r5, [pc, #112]	; (8002dc8 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d56:	4663      	mov	r3, ip
 8002d58:	700b      	strb	r3, [r1, #0]
 8002d5a:	780b      	ldrb	r3, [r1, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d815      	bhi.n	8002d8e <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	0098      	lsls	r0, r3, #2
 8002d66:	18c0      	adds	r0, r0, r3
 8002d68:	0040      	lsls	r0, r0, #1
 8002d6a:	18c0      	adds	r0, r0, r3
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LoadROtopology+0x94>)
 8002d6e:	18d7      	adds	r7, r2, r3
 8002d70:	780b      	ldrb	r3, [r1, #0]
 8002d72:	883f      	ldrh	r7, [r7, #0]
 8002d74:	181b      	adds	r3, r3, r0
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002d7a:	3202      	adds	r2, #2
 8002d7c:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d7e:	780b      	ldrb	r3, [r1, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	700b      	strb	r3, [r1, #0]
 8002d86:	780b      	ldrb	r3, [r1, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d9ee      	bls.n	8002d6c <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002d8e:	3401      	adds	r4, #1
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	42b4      	cmp	r4, r6
 8002d94:	d9df      	bls.n	8002d56 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002d96:	2000      	movs	r0, #0
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LoadROtopology+0xa0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002da8:	20fa      	movs	r0, #250	; 0xfa
 8002daa:	e7f5      	b.n	8002d98 <LoadROtopology+0x74>
			N =1;
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LoadROtopology+0x9c>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	e7c3      	b.n	8002d3c <LoadROtopology+0x18>
	return result;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7ef      	b.n	8002d98 <LoadROtopology+0x74>
 8002db8:	0801d800 	.word	0x0801d800
 8002dbc:	0000ffff 	.word	0x0000ffff
 8002dc0:	2000001c 	.word	0x2000001c
 8002dc4:	20001076 	.word	0x20001076
 8002dc8:	20000a78 	.word	0x20000a78

08002dcc <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <LoadEEportsDir+0x40>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002dd2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dd8:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoadEEportsDir+0x44>)
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f004 fcd0 	bl	8007780 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002de0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002de2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002de4:	4f09      	ldr	r7, [pc, #36]	; (8002e0c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002de6:	4e0a      	ldr	r6, [pc, #40]	; (8002e10 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	783b      	ldrb	r3, [r7, #0]
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	d30a      	bcc.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002df2:	1e61      	subs	r1, r4, #1
 8002df4:	0049      	lsls	r1, r1, #1
 8002df6:	1989      	adds	r1, r1, r6
 8002df8:	1c60      	adds	r0, r4, #1
 8002dfa:	f004 fcc1 	bl	8007780 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002dfe:	1ca3      	adds	r3, r4, #2
 8002e00:	2b1b      	cmp	r3, #27
 8002e02:	ddf1      	ble.n	8002de8 <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002e04:	250a      	movs	r5, #10
 8002e06:	e7ef      	b.n	8002de8 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002e08:	0028      	movs	r0, r5
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0c:	2000001c 	.word	0x2000001c
 8002e10:	20006e40 	.word	0x20006e40

08002e14 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	46de      	mov	lr, fp
 8002e18:	4657      	mov	r7, sl
 8002e1a:	464e      	mov	r6, r9
 8002e1c:	4645      	mov	r5, r8
 8002e1e:	b5e0      	push	{r5, r6, r7, lr}
 8002e20:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e22:	466b      	mov	r3, sp
 8002e24:	2200      	movs	r2, #0
 8002e26:	80da      	strh	r2, [r3, #6]
 8002e28:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e2a:	2700      	movs	r7, #0
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <LoadEEalias+0x7c>)
 8002e2e:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e30:	469b      	mov	fp, r3
 8002e32:	e00c      	b.n	8002e4e <LoadEEalias+0x3a>
 8002e34:	464b      	mov	r3, r9
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	444b      	add	r3, r9
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	445b      	add	r3, fp
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e42:	3701      	adds	r7, #1
 8002e44:	b2ff      	uxtb	r7, r7
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <LoadEEalias+0x80>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	d317      	bcc.n	8002e7e <LoadEEalias+0x6a>
 8002e4e:	00bd      	lsls	r5, r7, #2
 8002e50:	19ed      	adds	r5, r5, r7
 8002e52:	006d      	lsls	r5, r5, #1
 8002e54:	4455      	add	r5, sl
 8002e56:	1d63      	adds	r3, r4, #5
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e5c:	466b      	mov	r3, sp
 8002e5e:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002e60:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e62:	0031      	movs	r1, r6
 8002e64:	0020      	movs	r0, r4
 8002e66:	f004 fc8b 	bl	8007780 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e6a:	8833      	ldrh	r3, [r6, #0]
 8002e6c:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	702b      	strb	r3, [r5, #0]
 8002e72:	3401      	adds	r4, #1
 8002e74:	b2a4      	uxth	r4, r4
 8002e76:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e78:	45a0      	cmp	r8, r4
 8002e7a:	d1f2      	bne.n	8002e62 <LoadEEalias+0x4e>
 8002e7c:	e7da      	b.n	8002e34 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	b003      	add	sp, #12
 8002e82:	bc3c      	pop	{r2, r3, r4, r5}
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	46ab      	mov	fp, r5
 8002e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000f68 	.word	0x20000f68
 8002e94:	2000001c 	.word	0x2000001c

08002e98 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	46d6      	mov	lr, sl
 8002e9c:	464f      	mov	r7, r9
 8002e9e:	4646      	mov	r6, r8
 8002ea0:	b5c0      	push	{r6, r7, lr}
 8002ea2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002ea4:	466b      	mov	r3, sp
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <LoadEEgroup+0x9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002eb2:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	4e20      	ldr	r6, [pc, #128]	; (8002f38 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002eb6:	4c1f      	ldr	r4, [pc, #124]	; (8002f34 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb8:	b2e9      	uxtb	r1, r5
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	1871      	adds	r1, r6, r1
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	30cb      	adds	r0, #203	; 0xcb
 8002ec2:	b280      	uxth	r0, r0
 8002ec4:	f004 fc5c 	bl	8007780 <EE_ReadVariable>
		add++;
 8002ec8:	3501      	adds	r5, #1
 8002eca:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ecc:	7822      	ldrb	r2, [r4, #0]
 8002ece:	b2eb      	uxtb	r3, r5
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f1      	bhi.n	8002eb8 <LoadEEgroup+0x20>
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <LoadEEgroup+0xa4>)
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	002c      	movs	r4, r5
 8002eda:	3499      	adds	r4, #153	; 0x99
 8002edc:	b2a4      	uxth	r4, r4
 8002ede:	35cb      	adds	r5, #203	; 0xcb
 8002ee0:	b2ab      	uxth	r3, r5
 8002ee2:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002ee4:	466b      	mov	r3, sp
 8002ee6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ee8:	2300      	movs	r3, #0
 8002eea:	469a      	mov	sl, r3
 8002eec:	e009      	b.n	8002f02 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002eee:	2500      	movs	r5, #0
 8002ef0:	e7f0      	b.n	8002ed4 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	725a      	strb	r2, [r3, #9]
 8002ef8:	230a      	movs	r3, #10
 8002efa:	469c      	mov	ip, r3
 8002efc:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002efe:	4544      	cmp	r4, r8
 8002f00:	d010      	beq.n	8002f24 <LoadEEgroup+0x8c>
 8002f02:	1d67      	adds	r7, r4, #5
 8002f04:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002f06:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f08:	0031      	movs	r1, r6
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f004 fc38 	bl	8007780 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f10:	8833      	ldrh	r3, [r6, #0]
 8002f12:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	702b      	strb	r3, [r5, #0]
 8002f18:	3401      	adds	r4, #1
 8002f1a:	b2a4      	uxth	r4, r4
 8002f1c:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f1e:	42bc      	cmp	r4, r7
 8002f20:	d1f2      	bne.n	8002f08 <LoadEEgroup+0x70>
 8002f22:	e7e6      	b.n	8002ef2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b002      	add	sp, #8
 8002f28:	bc1c      	pop	{r2, r3, r4}
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	2000001c 	.word	0x2000001c
 8002f38:	20000ec0 	.word	0x20000ec0
 8002f3c:	20000e5c 	.word	0x20000e5c

08002f40 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f44:	210e      	movs	r1, #14
 8002f46:	4469      	add	r1, sp
 8002f48:	2300      	movs	r3, #0
 8002f4a:	800b      	strh	r3, [r1, #0]
 8002f4c:	aa03      	add	r2, sp, #12
 8002f4e:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f50:	20e4      	movs	r0, #228	; 0xe4
 8002f52:	f004 fc15 	bl	8007780 <EE_ReadVariable>
	uint8_t direction =0;
 8002f56:	2600      	movs	r6, #0
	if(!status1){
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d102      	bne.n	8002f62 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002f5c:	230e      	movs	r3, #14
 8002f5e:	446b      	add	r3, sp
 8002f60:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f62:	210e      	movs	r1, #14
 8002f64:	4469      	add	r1, sp
 8002f66:	20e5      	movs	r0, #229	; 0xe5
 8002f68:	f004 fc0a 	bl	8007780 <EE_ReadVariable>
 8002f6c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f6e:	a903      	add	r1, sp, #12
 8002f70:	20e6      	movs	r0, #230	; 0xe6
 8002f72:	f004 fc05 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8002f76:	4304      	orrs	r4, r0
 8002f78:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002f7a:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d106      	bne.n	8002f8e <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f80:	230e      	movs	r3, #14
 8002f82:	446b      	add	r3, sp
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	042d      	lsls	r5, r5, #16
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8e:	210e      	movs	r1, #14
 8002f90:	4469      	add	r1, sp
 8002f92:	20e7      	movs	r0, #231	; 0xe7
 8002f94:	f004 fbf4 	bl	8007780 <EE_ReadVariable>
 8002f98:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f9a:	a903      	add	r1, sp, #12
 8002f9c:	20e8      	movs	r0, #232	; 0xe8
 8002f9e:	f004 fbef 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fa2:	4320      	orrs	r0, r4
 8002fa4:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002fa6:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d106      	bne.n	8002fba <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fac:	230e      	movs	r3, #14
 8002fae:	446b      	add	r3, sp
 8002fb0:	881c      	ldrh	r4, [r3, #0]
 8002fb2:	0424      	lsls	r4, r4, #16
 8002fb4:	ab03      	add	r3, sp, #12
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002fba:	210e      	movs	r1, #14
 8002fbc:	4469      	add	r1, sp
 8002fbe:	20e9      	movs	r0, #233	; 0xe9
 8002fc0:	f004 fbde 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d107      	bne.n	8002fd8 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8002fc8:	230e      	movs	r3, #14
 8002fca:	446b      	add	r3, sp
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <LoadEEstreams+0x134>)
 8002fd2:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <LoadEEstreams+0x138>)
 8002fd6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fd8:	210e      	movs	r1, #14
 8002fda:	4469      	add	r1, sp
 8002fdc:	20ea      	movs	r0, #234	; 0xea
 8002fde:	f004 fbcf 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d107      	bne.n	8002ff6 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8002fe6:	230e      	movs	r3, #14
 8002fe8:	446b      	add	r3, sp
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	0a19      	lsrs	r1, r3, #8
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <LoadEEstreams+0x13c>)
 8002ff0:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <LoadEEstreams+0x140>)
 8002ff4:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002ff6:	210e      	movs	r1, #14
 8002ff8:	4469      	add	r1, sp
 8002ffa:	20eb      	movs	r0, #235	; 0xeb
 8002ffc:	f004 fbc0 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8003000:	2800      	cmp	r0, #0
 8003002:	d107      	bne.n	8003014 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003004:	230e      	movs	r3, #14
 8003006:	446b      	add	r3, sp
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0a19      	lsrs	r1, r3, #8
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <LoadEEstreams+0x144>)
 800300e:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <LoadEEstreams+0x148>)
 8003012:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LoadEEstreams+0x134>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <LoadEEstreams+0xe4>
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <LoadEEstreams+0x138>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d112      	bne.n	800304a <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <LoadEEstreams+0x13c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <LoadEEstreams+0xf4>
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <LoadEEstreams+0x140>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d111      	bne.n	8003058 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoadEEstreams+0x144>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <LoadEEstreams+0x104>
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <LoadEEstreams+0x148>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	2a00      	cmp	r2, #0
 8003042:	d110      	bne.n	8003066 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003044:	2000      	movs	r0, #0
 8003046:	b004      	add	sp, #16
 8003048:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800304a:	9200      	str	r2, [sp, #0]
 800304c:	0022      	movs	r2, r4
 800304e:	0029      	movs	r1, r5
 8003050:	0030      	movs	r0, r6
 8003052:	f005 ffed 	bl	8009030 <SetupDMAStreams>
 8003056:	e7e5      	b.n	8003024 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	0022      	movs	r2, r4
 800305c:	0029      	movs	r1, r5
 800305e:	0030      	movs	r0, r6
 8003060:	f005 ffe6 	bl	8009030 <SetupDMAStreams>
 8003064:	e7e6      	b.n	8003034 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003066:	9200      	str	r2, [sp, #0]
 8003068:	0022      	movs	r2, r4
 800306a:	0029      	movs	r1, r5
 800306c:	0030      	movs	r0, r6
 800306e:	f005 ffdf 	bl	8009030 <SetupDMAStreams>
 8003072:	e7e7      	b.n	8003044 <LoadEEstreams+0x104>
 8003074:	2000114a 	.word	0x2000114a
 8003078:	20000e59 	.word	0x20000e59
 800307c:	2000114b 	.word	0x2000114b
 8003080:	20000e5a 	.word	0x20000e5a
 8003084:	2000114c 	.word	0x2000114c
 8003088:	20000e5b 	.word	0x20000e5b

0800308c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800308c:	b510      	push	{r4, lr}
 800308e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003090:	208a      	movs	r0, #138	; 0x8a
 8003092:	466b      	mov	r3, sp
 8003094:	1d99      	adds	r1, r3, #6
 8003096:	0040      	lsls	r0, r0, #1
 8003098:	f004 fb72 	bl	8007780 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d000      	beq.n	80030a2 <LoadEEparams+0x16>
 80030a0:	e064      	b.n	800316c <LoadEEparams+0xe0>
		BOS.response =(uint8_t )temp1;
 80030a2:	466b      	mov	r3, sp
 80030a4:	3306      	adds	r3, #6
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4a49      	ldr	r2, [pc, #292]	; (80031d0 <LoadEEparams+0x144>)
 80030aa:	7193      	strb	r3, [r2, #6]
		BOS.trace =(traceOptions_t )(temp1 >> 8);
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	71d3      	strb	r3, [r2, #7]
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030b0:	2016      	movs	r0, #22
 80030b2:	466b      	mov	r3, sp
 80030b4:	1d99      	adds	r1, r3, #6
 80030b6:	30ff      	adds	r0, #255	; 0xff
 80030b8:	f004 fb62 	bl	8007780 <EE_ReadVariable>
	if(!status1)
 80030bc:	2800      	cmp	r0, #0
 80030be:	d15c      	bne.n	800317a <LoadEEparams+0xee>
		BOS.buttons.debounce =temp1;
 80030c0:	466b      	mov	r3, sp
 80030c2:	88da      	ldrh	r2, [r3, #6]
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <LoadEEparams+0x144>)
 80030c6:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030c8:	208b      	movs	r0, #139	; 0x8b
 80030ca:	466b      	mov	r3, sp
 80030cc:	1d99      	adds	r1, r3, #6
 80030ce:	0040      	lsls	r0, r0, #1
 80030d0:	f004 fb56 	bl	8007780 <EE_ReadVariable>
	if(!status1)
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d155      	bne.n	8003184 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime =temp1;
 80030d8:	466b      	mov	r3, sp
 80030da:	88da      	ldrh	r2, [r3, #6]
 80030dc:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <LoadEEparams+0x144>)
 80030de:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030e0:	2018      	movs	r0, #24
 80030e2:	466b      	mov	r3, sp
 80030e4:	1d99      	adds	r1, r3, #6
 80030e6:	30ff      	adds	r0, #255	; 0xff
 80030e8:	f004 fb4a 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d14e      	bne.n	800318e <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030f0:	466b      	mov	r3, sp
 80030f2:	3306      	adds	r3, #6
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	4a36      	ldr	r2, [pc, #216]	; (80031d0 <LoadEEparams+0x144>)
 80030f8:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030fe:	208c      	movs	r0, #140	; 0x8c
 8003100:	466b      	mov	r3, sp
 8003102:	1d99      	adds	r1, r3, #6
 8003104:	0040      	lsls	r0, r0, #1
 8003106:	f004 fb3b 	bl	8007780 <EE_ReadVariable>
 800310a:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800310c:	201a      	movs	r0, #26
 800310e:	a901      	add	r1, sp, #4
 8003110:	30ff      	adds	r0, #255	; 0xff
 8003112:	f004 fb35 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8003116:	4304      	orrs	r4, r0
 8003118:	b2a4      	uxth	r4, r4
 800311a:	2c00      	cmp	r4, #0
 800311c:	d13e      	bne.n	800319c <LoadEEparams+0x110>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800311e:	ab01      	add	r3, sp, #4
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	466a      	mov	r2, sp
 8003126:	3206      	adds	r2, #6
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <LoadEEparams+0x144>)
 800312e:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003130:	208d      	movs	r0, #141	; 0x8d
 8003132:	466b      	mov	r3, sp
 8003134:	1d99      	adds	r1, r3, #6
 8003136:	0040      	lsls	r0, r0, #1
 8003138:	f004 fb22 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 800313c:	2800      	cmp	r0, #0
 800313e:	d13b      	bne.n	80031b8 <LoadEEparams+0x12c>
		BOS.daylightsaving =(int8_t )temp1;
 8003140:	466b      	mov	r3, sp
 8003142:	3306      	adds	r3, #6
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <LoadEEparams+0x144>)
 8003148:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800314e:	201c      	movs	r0, #28
 8003150:	466b      	mov	r3, sp
 8003152:	1d99      	adds	r1, r3, #6
 8003154:	30ff      	adds	r0, #255	; 0xff
 8003156:	f004 fb13 	bl	8007780 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800315a:	2800      	cmp	r0, #0
 800315c:	d032      	beq.n	80031c4 <LoadEEparams+0x138>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <LoadEEparams+0x148>)
 8003160:	7eda      	ldrb	r2, [r3, #27]
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <LoadEEparams+0x144>)
 8003164:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 8003166:	2000      	movs	r0, #0
 8003168:	b002      	add	sp, #8
 800316a:	bd10      	pop	{r4, pc}
		BOS.response =BOS_default.response;
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <LoadEEparams+0x144>)
 800316e:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <LoadEEparams+0x148>)
 8003170:	7991      	ldrb	r1, [r2, #6]
 8003172:	7199      	strb	r1, [r3, #6]
		BOS.trace =BOS_default.trace;
 8003174:	79d2      	ldrb	r2, [r2, #7]
 8003176:	71da      	strb	r2, [r3, #7]
 8003178:	e79a      	b.n	80030b0 <LoadEEparams+0x24>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <LoadEEparams+0x148>)
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <LoadEEparams+0x144>)
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e7a1      	b.n	80030c8 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <LoadEEparams+0x148>)
 8003186:	885a      	ldrh	r2, [r3, #2]
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <LoadEEparams+0x144>)
 800318a:	805a      	strh	r2, [r3, #2]
 800318c:	e7a8      	b.n	80030e0 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <LoadEEparams+0x144>)
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <LoadEEparams+0x148>)
 8003192:	7911      	ldrb	r1, [r2, #4]
 8003194:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003196:	7952      	ldrb	r2, [r2, #5]
 8003198:	715a      	strb	r2, [r3, #5]
 800319a:	e7b0      	b.n	80030fe <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <LoadEEparams+0x14c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <LoadEEparams+0x144>)
 80031a6:	22e1      	movs	r2, #225	; 0xe1
 80031a8:	0252      	lsls	r2, r2, #9
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e7c0      	b.n	8003130 <LoadEEparams+0xa4>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <LoadEEparams+0x148>)
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <LoadEEparams+0x144>)
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e7bb      	b.n	8003130 <LoadEEparams+0xa4>
		BOS.hourformat =24;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LoadEEparams+0x144>)
 80031ba:	2218      	movs	r2, #24
 80031bc:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031be:	2200      	movs	r2, #0
 80031c0:	731a      	strb	r2, [r3, #12]
 80031c2:	e7c4      	b.n	800314e <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031c4:	466b      	mov	r3, sp
 80031c6:	88da      	ldrh	r2, [r3, #6]
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <LoadEEparams+0x144>)
 80031ca:	76da      	strb	r2, [r3, #27]
 80031cc:	e7cb      	b.n	8003166 <LoadEEparams+0xda>
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	200069c4 	.word	0x200069c4
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000a76 	.word	0x20000a76

080031dc <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	46ce      	mov	lr, r9
 80031e0:	4647      	mov	r7, r8
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031e6:	231e      	movs	r3, #30
 80031e8:	446b      	add	r3, sp
 80031ea:	2200      	movs	r2, #0
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	2501      	movs	r5, #1
 80031f0:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80031f2:	001e      	movs	r6, r3
 80031f4:	230f      	movs	r3, #15
 80031f6:	4698      	mov	r8, r3
 80031f8:	e004      	b.n	8003204 <LoadEEbuttons+0x28>
 80031fa:	3404      	adds	r4, #4
 80031fc:	b2a4      	uxth	r4, r4
 80031fe:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003200:	2d08      	cmp	r5, #8
 8003202:	d058      	beq.n	80032b6 <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003204:	0031      	movs	r1, r6
 8003206:	0020      	movs	r0, r4
 8003208:	f004 faba 	bl	8007780 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 800320c:	2800      	cmp	r0, #0
 800320e:	d1f4      	bne.n	80031fa <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003210:	8831      	ldrh	r1, [r6, #0]
 8003212:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003214:	091a      	lsrs	r2, r3, #4
 8003216:	42aa      	cmp	r2, r5
 8003218:	d1ef      	bne.n	80031fa <LoadEEbuttons+0x1e>
 800321a:	4640      	mov	r0, r8
 800321c:	4003      	ands	r3, r0
 800321e:	d0ec      	beq.n	80031fa <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003220:	00d0      	lsls	r0, r2, #3
 8003222:	1882      	adds	r2, r0, r2
 8003224:	4827      	ldr	r0, [pc, #156]	; (80032c4 <LoadEEbuttons+0xe8>)
 8003226:	4681      	mov	r9, r0
 8003228:	4491      	add	r9, r2
 800322a:	464a      	mov	r2, r9
 800322c:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 800322e:	7211      	strb	r1, [r2, #8]
 8003230:	00af      	lsls	r7, r5, #2
 8003232:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0038      	movs	r0, r7
 8003236:	30e9      	adds	r0, #233	; 0xe9
 8003238:	b280      	uxth	r0, r0
 800323a:	0031      	movs	r1, r6
 800323c:	f004 faa0 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003240:	8833      	ldrh	r3, [r6, #0]
 8003242:	0a1a      	lsrs	r2, r3, #8
 8003244:	4649      	mov	r1, r9
 8003246:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003248:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324a:	0038      	movs	r0, r7
 800324c:	30ea      	adds	r0, #234	; 0xea
 800324e:	b280      	uxth	r0, r0
 8003250:	0031      	movs	r1, r6
 8003252:	f004 fa95 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003256:	8833      	ldrh	r3, [r6, #0]
 8003258:	0a1a      	lsrs	r2, r3, #8
 800325a:	4649      	mov	r1, r9
 800325c:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800325e:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003260:	37eb      	adds	r7, #235	; 0xeb
 8003262:	b2b8      	uxth	r0, r7
 8003264:	0031      	movs	r1, r6
 8003266:	f004 fa8b 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800326a:	8833      	ldrh	r3, [r6, #0]
 800326c:	0a1a      	lsrs	r2, r3, #8
 800326e:	4649      	mov	r1, r9
 8003270:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003272:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	b2ef      	uxtb	r7, r5
 8003276:	7848      	ldrb	r0, [r1, #1]
 8003278:	0039      	movs	r1, r7
 800327a:	f004 ff97 	bl	80081ac <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800327e:	464b      	mov	r3, r9
 8003280:	7a19      	ldrb	r1, [r3, #8]
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	104a      	asrs	r2, r1, #1
 8003286:	2001      	movs	r0, #1
 8003288:	4002      	ands	r2, r0
 800328a:	4001      	ands	r1, r0
 800328c:	2000      	movs	r0, #0
 800328e:	9005      	str	r0, [sp, #20]
 8003290:	4648      	mov	r0, r9
 8003292:	79c0      	ldrb	r0, [r0, #7]
 8003294:	9004      	str	r0, [sp, #16]
 8003296:	4648      	mov	r0, r9
 8003298:	7980      	ldrb	r0, [r0, #6]
 800329a:	9003      	str	r0, [sp, #12]
 800329c:	4648      	mov	r0, r9
 800329e:	7940      	ldrb	r0, [r0, #5]
 80032a0:	9002      	str	r0, [sp, #8]
 80032a2:	4648      	mov	r0, r9
 80032a4:	7900      	ldrb	r0, [r0, #4]
 80032a6:	9001      	str	r0, [sp, #4]
 80032a8:	4648      	mov	r0, r9
 80032aa:	78c0      	ldrb	r0, [r0, #3]
 80032ac:	9000      	str	r0, [sp, #0]
 80032ae:	0038      	movs	r0, r7
 80032b0:	f005 f896 	bl	80083e0 <SetButtonEvents>
 80032b4:	e7a1      	b.n	80031fa <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 80032b6:	2000      	movs	r0, #0
 80032b8:	b009      	add	sp, #36	; 0x24
 80032ba:	bc0c      	pop	{r2, r3}
 80032bc:	4690      	mov	r8, r2
 80032be:	4699      	mov	r9, r3
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	2000151c 	.word	0x2000151c

080032c8 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	46de      	mov	lr, fp
 80032cc:	4657      	mov	r7, sl
 80032ce:	464e      	mov	r6, r9
 80032d0:	b5c0      	push	{r6, r7, lr}
 80032d2:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032d4:	2032      	movs	r0, #50	; 0x32
 80032d6:	f00f fc1b 	bl	8012b10 <malloc>
 80032da:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 80032dc:	d100      	bne.n	80032e0 <LoadROsnippets+0x18>
 80032de:	e071      	b.n	80033c4 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <LoadROsnippets+0x100>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 80032e4:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032e6:	2bfe      	cmp	r3, #254	; 0xfe
 80032e8:	d166      	bne.n	80033b8 <LoadROsnippets+0xf0>
 80032ea:	4e38      	ldr	r6, [pc, #224]	; (80033cc <LoadROsnippets+0x104>)
 80032ec:	3b9a      	subs	r3, #154	; 0x9a
 80032ee:	469b      	mov	fp, r3
 80032f0:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 80032f2:	4d35      	ldr	r5, [pc, #212]	; (80033c8 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80032f4:	1c7b      	adds	r3, r7, #1
 80032f6:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <LoadROsnippets+0x108>)
 80032fa:	4699      	mov	r9, r3
 80032fc:	e023      	b.n	8003346 <LoadROsnippets+0x7e>
		i =0;
 80032fe:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 8003300:	193b      	adds	r3, r7, r4
 8003302:	3b01      	subs	r3, #1
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 800330a:	3401      	adds	r4, #1
 800330c:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 800330e:	0020      	movs	r0, r4
 8003310:	f00f fbfe 	bl	8012b10 <malloc>
 8003314:	4653      	mov	r3, sl
 8003316:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003318:	2800      	cmp	r0, #0
 800331a:	d03f      	beq.n	800339c <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 800331c:	0022      	movs	r2, r4
 800331e:	0039      	movs	r1, r7
 8003320:	f00f fe43 	bl	8012faa <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003324:	464b      	mov	r3, r9
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	464a      	mov	r2, r9
 800332c:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800332e:	0022      	movs	r2, r4
 8003330:	2100      	movs	r1, #0
 8003332:	0038      	movs	r0, r7
 8003334:	f00f fe42 	bl	8012fbc <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003338:	9b00      	ldr	r3, [sp, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2bfe      	cmp	r3, #254	; 0xfe
 800333e:	d137      	bne.n	80033b0 <LoadROsnippets+0xe8>
 8003340:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003342:	455e      	cmp	r6, fp
 8003344:	d034      	beq.n	80033b0 <LoadROsnippets+0xe8>
 8003346:	0028      	movs	r0, r5
 8003348:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 800334a:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800334c:	1b79      	subs	r1, r7, r5
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	54ca      	strb	r2, [r1, r3]
 8003352:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003354:	4283      	cmp	r3, r0
 8003356:	d1fa      	bne.n	800334e <LoadROsnippets+0x86>
 8003358:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800335a:	46b2      	mov	sl, r6
 800335c:	2214      	movs	r2, #20
 800335e:	9901      	ldr	r1, [sp, #4]
 8003360:	0030      	movs	r0, r6
 8003362:	f00f fe22 	bl	8012faa <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003366:	2214      	movs	r2, #20
 8003368:	2100      	movs	r1, #0
 800336a:	0038      	movs	r0, r7
 800336c:	f00f fe26 	bl	8012fbc <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003370:	9500      	str	r5, [sp, #0]
 8003372:	782a      	ldrb	r2, [r5, #0]
 8003374:	1c93      	adds	r3, r2, #2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d9c0      	bls.n	80032fe <LoadROsnippets+0x36>
 800337c:	0039      	movs	r1, r7
		i =0;
 800337e:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003380:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 8003382:	3501      	adds	r5, #1
			++i;
 8003384:	3401      	adds	r4, #1
 8003386:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003388:	9500      	str	r5, [sp, #0]
 800338a:	782a      	ldrb	r2, [r5, #0]
 800338c:	1c93      	adds	r3, r2, #2
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d9b5      	bls.n	8003300 <LoadROsnippets+0x38>
 8003394:	3101      	adds	r1, #1
 8003396:	2c32      	cmp	r4, #50	; 0x32
 8003398:	d1f2      	bne.n	8003380 <LoadROsnippets+0xb8>
 800339a:	e7b1      	b.n	8003300 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 800339c:	2214      	movs	r2, #20
 800339e:	2100      	movs	r1, #0
 80033a0:	4650      	mov	r0, sl
 80033a2:	f00f fe0b 	bl	8012fbc <memset>
			free(snipBuffer);
 80033a6:	0038      	movs	r0, r7
 80033a8:	f00f fbbc 	bl	8012b24 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033ac:	200e      	movs	r0, #14
 80033ae:	e003      	b.n	80033b8 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 80033b0:	0038      	movs	r0, r7
 80033b2:	f00f fbb7 	bl	8012b24 <free>
	return BOS_OK;
 80033b6:	2000      	movs	r0, #0
}
 80033b8:	b002      	add	sp, #8
 80033ba:	bc1c      	pop	{r2, r3, r4}
 80033bc:	4691      	mov	r9, r2
 80033be:	469a      	mov	sl, r3
 80033c0:	46a3      	mov	fp, r4
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 80033c4:	20fb      	movs	r0, #251	; 0xfb
 80033c6:	e7f7      	b.n	80033b8 <LoadROsnippets+0xf0>
 80033c8:	0801dc00 	.word	0x0801dc00
 80033cc:	200069e0 	.word	0x200069e0
 80033d0:	2000121f 	.word	0x2000121f

080033d4 <LoadEEvars>:
void LoadEEvars(void){
 80033d4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033d6:	f7ff fca5 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033da:	f7ff fcf7 	bl	8002dcc <LoadEEportsDir>
	LoadEEalias();
 80033de:	f7ff fd19 	bl	8002e14 <LoadEEalias>
	LoadEEgroup();
 80033e2:	f7ff fd59 	bl	8002e98 <LoadEEgroup>
	LoadEEstreams();
 80033e6:	f7ff fdab 	bl	8002f40 <LoadEEstreams>
	LoadEEparams();
 80033ea:	f7ff fe4f 	bl	800308c <LoadEEparams>
	LoadEEbuttons();
 80033ee:	f7ff fef5 	bl	80031dc <LoadEEbuttons>
	LoadROsnippets();
 80033f2:	f7ff ff69 	bl	80032c8 <LoadROsnippets>
}
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <SaveEEportsDir+0x4c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01a      	beq.n	800343a <SaveEEportsDir+0x42>
 8003404:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 800340a:	4e0f      	ldr	r6, [pc, #60]	; (8003448 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 800340c:	4f0d      	ldr	r7, [pc, #52]	; (8003444 <SaveEEportsDir+0x4c>)
 800340e:	e008      	b.n	8003422 <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003410:	1c60      	adds	r0, r4, #1
 8003412:	f004 f9e5 	bl	80077e0 <EE_WriteVariable>
 8003416:	e00a      	b.n	800342e <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003418:	3401      	adds	r4, #1
 800341a:	b2e4      	uxtb	r4, r4
 800341c:	783b      	ldrb	r3, [r7, #0]
 800341e:	42a3      	cmp	r3, r4
 8003420:	d30d      	bcc.n	800343e <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 8003422:	0025      	movs	r5, r4
 8003424:	1e63      	subs	r3, r4, #1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	5b99      	ldrh	r1, [r3, r6]
 800342a:	2900      	cmp	r1, #0
 800342c:	d1f0      	bne.n	8003410 <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800342e:	3502      	adds	r5, #2
 8003430:	2d1b      	cmp	r5, #27
 8003432:	ddf1      	ble.n	8003418 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003434:	230a      	movs	r3, #10
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	e7ee      	b.n	8003418 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800343e:	9801      	ldr	r0, [sp, #4]
 8003440:	b003      	add	sp, #12
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	2000001c 	.word	0x2000001c
 8003448:	20006e40 	.word	0x20006e40

0800344c <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	46d6      	mov	lr, sl
 8003450:	464f      	mov	r7, r9
 8003452:	4646      	mov	r6, r8
 8003454:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003456:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
 800345a:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <SaveEEalias+0x7c>)
 800345e:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <SaveEEalias+0x80>)
 8003462:	4699      	mov	r9, r3
 8003464:	e005      	b.n	8003472 <SaveEEalias+0x26>
 8003466:	3601      	adds	r6, #1
 8003468:	b2f6      	uxtb	r6, r6
 800346a:	464b      	mov	r3, r9
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	42b3      	cmp	r3, r6
 8003470:	d324      	bcc.n	80034bc <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 8003472:	00b3      	lsls	r3, r6, #2
 8003474:	199b      	adds	r3, r3, r6
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4652      	mov	r2, sl
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f2      	beq.n	8003466 <SaveEEalias+0x1a>
 8003480:	00b5      	lsls	r5, r6, #2
 8003482:	19ad      	adds	r5, r5, r6
 8003484:	006d      	lsls	r5, r5, #1
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <SaveEEalias+0x7c>)
 8003488:	469c      	mov	ip, r3
 800348a:	4465      	add	r5, ip
 800348c:	4644      	mov	r4, r8
 800348e:	341c      	adds	r4, #28
 8003490:	b2a4      	uxth	r4, r4
 8003492:	4647      	mov	r7, r8
 8003494:	3721      	adds	r7, #33	; 0x21
 8003496:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003498:	782b      	ldrb	r3, [r5, #0]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	7869      	ldrb	r1, [r5, #1]
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	b289      	uxth	r1, r1
 80034a2:	0020      	movs	r0, r4
 80034a4:	f004 f99c 	bl	80077e0 <EE_WriteVariable>
 80034a8:	3502      	adds	r5, #2
 80034aa:	3401      	adds	r4, #1
 80034ac:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bc      	cmp	r4, r7
 80034b0:	d1f2      	bne.n	8003498 <SaveEEalias+0x4c>
 80034b2:	4643      	mov	r3, r8
 80034b4:	3305      	adds	r3, #5
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4698      	mov	r8, r3
 80034ba:	e7d4      	b.n	8003466 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 80034bc:	2000      	movs	r0, #0
 80034be:	bc1c      	pop	{r2, r3, r4}
 80034c0:	4690      	mov	r8, r2
 80034c2:	4699      	mov	r9, r3
 80034c4:	46a2      	mov	sl, r4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c8:	20000f68 	.word	0x20000f68
 80034cc:	2000001c 	.word	0x2000001c

080034d0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	46de      	mov	lr, fp
 80034d4:	4657      	mov	r7, sl
 80034d6:	464e      	mov	r6, r9
 80034d8:	4645      	mov	r5, r8
 80034da:	b5e0      	push	{r5, r6, r7, lr}
 80034dc:	000f      	movs	r7, r1
 80034de:	0016      	movs	r6, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	ab0a      	add	r3, sp, #40	; 0x28
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	469b      	mov	fp, r3
 80034e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034ea:	781d      	ldrb	r5, [r3, #0]
 80034ec:	ab0c      	add	r3, sp, #48	; 0x30
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	469a      	mov	sl, r3
 80034f2:	ab0d      	add	r3, sp, #52	; 0x34
 80034f4:	781c      	ldrb	r4, [r3, #0]
 80034f6:	ab0e      	add	r3, sp, #56	; 0x38
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034fc:	b281      	uxth	r1, r0
 80034fe:	20e4      	movs	r0, #228	; 0xe4
 8003500:	f004 f96e 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003504:	0a39      	lsrs	r1, r7, #8
 8003506:	b289      	uxth	r1, r1
 8003508:	20e5      	movs	r0, #229	; 0xe5
 800350a:	f004 f969 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800350e:	b2b9      	uxth	r1, r7
 8003510:	20e6      	movs	r0, #230	; 0xe6
 8003512:	f004 f965 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003516:	0a31      	lsrs	r1, r6, #8
 8003518:	b289      	uxth	r1, r1
 800351a:	20e7      	movs	r0, #231	; 0xe7
 800351c:	f004 f960 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003520:	b2b1      	uxth	r1, r6
 8003522:	20e8      	movs	r0, #232	; 0xe8
 8003524:	f004 f95c 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003528:	464b      	mov	r3, r9
 800352a:	0219      	lsls	r1, r3, #8
 800352c:	4459      	add	r1, fp
 800352e:	b289      	uxth	r1, r1
 8003530:	20e9      	movs	r0, #233	; 0xe9
 8003532:	f004 f955 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003536:	022d      	lsls	r5, r5, #8
 8003538:	4455      	add	r5, sl
 800353a:	b2a9      	uxth	r1, r5
 800353c:	20ea      	movs	r0, #234	; 0xea
 800353e:	f004 f94f 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003542:	0224      	lsls	r4, r4, #8
 8003544:	4444      	add	r4, r8
 8003546:	b2a1      	uxth	r1, r4
 8003548:	20eb      	movs	r0, #235	; 0xeb
 800354a:	f004 f949 	bl	80077e0 <EE_WriteVariable>
	
	return result;
}
 800354e:	2000      	movs	r0, #0
 8003550:	bc3c      	pop	{r2, r3, r4, r5}
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	46a2      	mov	sl, r4
 8003558:	46ab      	mov	fp, r5
 800355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800355c <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 800355c:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 800355e:	4c1a      	ldr	r4, [pc, #104]	; (80035c8 <SaveEEparams+0x6c>)
 8003560:	79e3      	ldrb	r3, [r4, #7]
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	79a1      	ldrb	r1, [r4, #6]
 8003566:	4319      	orrs	r1, r3
 8003568:	208a      	movs	r0, #138	; 0x8a
 800356a:	0040      	lsls	r0, r0, #1
 800356c:	f004 f938 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003570:	8821      	ldrh	r1, [r4, #0]
 8003572:	2016      	movs	r0, #22
 8003574:	30ff      	adds	r0, #255	; 0xff
 8003576:	f004 f933 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800357a:	8861      	ldrh	r1, [r4, #2]
 800357c:	208b      	movs	r0, #139	; 0x8b
 800357e:	0040      	lsls	r0, r0, #1
 8003580:	f004 f92e 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003584:	7963      	ldrb	r3, [r4, #5]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	7b21      	ldrb	r1, [r4, #12]
 800358a:	4319      	orrs	r1, r3
 800358c:	2018      	movs	r0, #24
 800358e:	30ff      	adds	r0, #255	; 0xff
 8003590:	f004 f926 	bl	80077e0 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003594:	8921      	ldrh	r1, [r4, #8]
 8003596:	208c      	movs	r0, #140	; 0x8c
 8003598:	0040      	lsls	r0, r0, #1
 800359a:	f004 f921 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800359e:	8961      	ldrh	r1, [r4, #10]
 80035a0:	201a      	movs	r0, #26
 80035a2:	30ff      	adds	r0, #255	; 0xff
 80035a4:	f004 f91c 	bl	80077e0 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035a8:	7b63      	ldrb	r3, [r4, #13]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	7921      	ldrb	r1, [r4, #4]
 80035ae:	4319      	orrs	r1, r3
 80035b0:	208d      	movs	r0, #141	; 0x8d
 80035b2:	0040      	lsls	r0, r0, #1
 80035b4:	f004 f914 	bl	80077e0 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035b8:	7ee1      	ldrb	r1, [r4, #27]
 80035ba:	201c      	movs	r0, #28
 80035bc:	30ff      	adds	r0, #255	; 0xff
 80035be:	f004 f90f 	bl	80077e0 <EE_WriteVariable>
	
	return result;
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	200069c4 	.word	0x200069c4

080035cc <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035d0:	2234      	movs	r2, #52	; 0x34
 80035d2:	2100      	movs	r1, #0
 80035d4:	4813      	ldr	r0, [pc, #76]	; (8003624 <ClearEEportsDir+0x58>)
 80035d6:	f00f fcf1 	bl	8012fbc <memset>
	
	for(uint8_t i =1; i <= N; i++){
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <ClearEEportsDir+0x5c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01a      	beq.n	8003618 <ClearEEportsDir+0x4c>
 80035e2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80035e8:	4e0e      	ldr	r6, [pc, #56]	; (8003624 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 80035ea:	4f0f      	ldr	r7, [pc, #60]	; (8003628 <ClearEEportsDir+0x5c>)
 80035ec:	e008      	b.n	8003600 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80035ee:	1c60      	adds	r0, r4, #1
 80035f0:	f004 f8f6 	bl	80077e0 <EE_WriteVariable>
 80035f4:	e00a      	b.n	800360c <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 80035f6:	3401      	adds	r4, #1
 80035f8:	b2e4      	uxtb	r4, r4
 80035fa:	783b      	ldrb	r3, [r7, #0]
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d30d      	bcc.n	800361c <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003600:	0025      	movs	r5, r4
 8003602:	1e63      	subs	r3, r4, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	5b99      	ldrh	r1, [r3, r6]
 8003608:	2900      	cmp	r1, #0
 800360a:	d1f0      	bne.n	80035ee <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800360c:	3502      	adds	r5, #2
 800360e:	2d1b      	cmp	r5, #27
 8003610:	ddf1      	ble.n	80035f6 <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 8003612:	230a      	movs	r3, #10
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	e7ee      	b.n	80035f6 <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800361c:	9801      	ldr	r0, [sp, #4]
 800361e:	b003      	add	sp, #12
 8003620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	20006e40 	.word	0x20006e40
 8003628:	2000001c 	.word	0x2000001c

0800362c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800362c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <EE_FormatForFactoryReset+0x1c>)
 8003630:	4a06      	ldr	r2, [pc, #24]	; (800364c <EE_FormatForFactoryReset+0x20>)
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d006      	beq.n	8003646 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003638:	f004 f97a 	bl	8007930 <EE_Format>
 800363c:	2800      	cmp	r0, #0
 800363e:	d102      	bne.n	8003646 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <EE_FormatForFactoryReset+0x20>)
 8003642:	4a01      	ldr	r2, [pc, #4]	; (8003648 <EE_FormatForFactoryReset+0x1c>)
 8003644:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003646:	bd10      	pop	{r4, pc}
 8003648:	beefdead 	.word	0xbeefdead
 800364c:	20007ff0 	.word	0x20007ff0

08003650 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003654:	2512      	movs	r5, #18
 8003656:	446d      	add	r5, sp
 8003658:	ab04      	add	r3, sp, #16
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	ab07      	add	r3, sp, #28
 800365e:	002a      	movs	r2, r5
 8003660:	a908      	add	r1, sp, #32
 8003662:	2001      	movs	r0, #1
 8003664:	f009 f91a 	bl	800c89c <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003668:	ac03      	add	r4, sp, #12
 800366a:	9400      	str	r4, [sp, #0]
 800366c:	ab05      	add	r3, sp, #20
 800366e:	220e      	movs	r2, #14
 8003670:	446a      	add	r2, sp
 8003672:	a906      	add	r1, sp, #24
 8003674:	2002      	movs	r0, #2
 8003676:	f009 f911 	bl	800c89c <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
 800367c:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2600      	movs	r6, #0
 8003680:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003682:	882b      	ldrh	r3, [r5, #0]
 8003684:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003686:	a909      	add	r1, sp, #36	; 0x24
 8003688:	9808      	ldr	r0, [sp, #32]
 800368a:	f00d faf5 	bl	8010c78 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368e:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003690:	2302      	movs	r3, #2
 8003692:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003694:	8823      	ldrh	r3, [r4, #0]
 8003696:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003698:	a909      	add	r1, sp, #36	; 0x24
 800369a:	9805      	ldr	r0, [sp, #20]
 800369c:	f00d faec 	bl	8010c78 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9808      	ldr	r0, [sp, #32]
 80036a6:	f00d fc5b 	bl	8010f60 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f009 fc9a 	bl	800cfe4 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9805      	ldr	r0, [sp, #20]
 80036b4:	f00d fc4e 	bl	8010f54 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036b8:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d002      	beq.n	80036c4 <IsLowerCLIbaud+0x74>
}
 80036be:	0018      	movs	r0, r3
 80036c0:	b00e      	add	sp, #56	; 0x38
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c4:	3312      	adds	r3, #18
 80036c6:	446b      	add	r3, sp
 80036c8:	8819      	ldrh	r1, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	9808      	ldr	r0, [sp, #32]
 80036ce:	f00d fc47 	bl	8010f60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036d2:	2005      	movs	r0, #5
 80036d4:	f009 fc86 	bl	800cfe4 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d8:	ab03      	add	r3, sp, #12
 80036da:	8819      	ldrh	r1, [r3, #0]
 80036dc:	9805      	ldr	r0, [sp, #20]
 80036de:	f00d fc39 	bl	8010f54 <HAL_GPIO_ReadPin>
 80036e2:	3801      	subs	r0, #1
 80036e4:	4243      	negs	r3, r0
 80036e6:	4143      	adcs	r3, r0
			return 1;
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e7e8      	b.n	80036be <IsLowerCLIbaud+0x6e>

080036ec <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80036ec:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80036ee:	f009 fe53 	bl	800d398 <GetUart>
 80036f2:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 80036f4:	23e1      	movs	r3, #225	; 0xe1
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	015b      	lsls	r3, r3, #5
 8003704:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003706:	f00f f861 	bl	80127cc <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	2120      	movs	r1, #32
 8003710:	430b      	orrs	r3, r1
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bd10      	pop	{r4, pc}
	...

08003718 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003718:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <IsModuleParameter+0x14>)
 800371c:	6899      	ldr	r1, [r3, #8]
 800371e:	f7fc fcf1 	bl	8000104 <strcmp>
 8003722:	4243      	negs	r3, r0
 8003724:	4158      	adcs	r0, r3
 8003726:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 8003728:	bd10      	pop	{r4, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	20000084 	.word	0x20000084

08003730 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003734:	491b      	ldr	r1, [pc, #108]	; (80037a4 <IsMathOperator+0x74>)
 8003736:	f7fc fce5 	bl	8000104 <strcmp>
 800373a:	0006      	movs	r6, r0
 800373c:	2506      	movs	r5, #6
 800373e:	2e00      	cmp	r6, #0
 8003740:	d023      	beq.n	800378a <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003742:	4919      	ldr	r1, [pc, #100]	; (80037a8 <IsMathOperator+0x78>)
 8003744:	0020      	movs	r0, r4
 8003746:	f7fc fcdd 	bl	8000104 <strcmp>
 800374a:	2800      	cmp	r0, #0
 800374c:	d01f      	beq.n	800378e <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800374e:	4917      	ldr	r1, [pc, #92]	; (80037ac <IsMathOperator+0x7c>)
 8003750:	0020      	movs	r0, r4
 8003752:	f7fc fcd7 	bl	8000104 <strcmp>
 8003756:	2800      	cmp	r0, #0
 8003758:	d01b      	beq.n	8003792 <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800375a:	4915      	ldr	r1, [pc, #84]	; (80037b0 <IsMathOperator+0x80>)
 800375c:	0020      	movs	r0, r4
 800375e:	f7fc fcd1 	bl	8000104 <strcmp>
 8003762:	2800      	cmp	r0, #0
 8003764:	d017      	beq.n	8003796 <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003766:	4913      	ldr	r1, [pc, #76]	; (80037b4 <IsMathOperator+0x84>)
 8003768:	0020      	movs	r0, r4
 800376a:	f7fc fccb 	bl	8000104 <strcmp>
 800376e:	2800      	cmp	r0, #0
 8003770:	d013      	beq.n	800379a <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003772:	4911      	ldr	r1, [pc, #68]	; (80037b8 <IsMathOperator+0x88>)
 8003774:	0020      	movs	r0, r4
 8003776:	f7fc fcc5 	bl	8000104 <strcmp>
 800377a:	2800      	cmp	r0, #0
 800377c:	d00f      	beq.n	800379e <IsMathOperator+0x6e>
 800377e:	3d01      	subs	r5, #1
 8003780:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003782:	2d00      	cmp	r5, #0
 8003784:	d1db      	bne.n	800373e <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 8003786:	2000      	movs	r0, #0
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 800378a:	2001      	movs	r0, #1
 800378c:	e7fc      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_GREATER;
 800378e:	2002      	movs	r0, #2
 8003790:	e7fa      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003792:	2003      	movs	r0, #3
 8003794:	e7f8      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003796:	2004      	movs	r0, #4
 8003798:	e7f6      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 800379a:	2005      	movs	r0, #5
 800379c:	e7f4      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 800379e:	2006      	movs	r0, #6
 80037a0:	e7f2      	b.n	8003788 <IsMathOperator+0x58>
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	08017b10 	.word	0x08017b10
 80037a8:	08017b14 	.word	0x08017b14
 80037ac:	08017b18 	.word	0x08017b18
 80037b0:	08017b1c 	.word	0x08017b1c
 80037b4:	08017b20 	.word	0x08017b20
 80037b8:	08017b24 	.word	0x08017b24

080037bc <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037be:	46c6      	mov	lr, r8
 80037c0:	b500      	push	{lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037c6:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <ExploreNeighbors+0x4c>)
 80037ca:	4698      	mov	r8, r3
 80037cc:	4d0f      	ldr	r5, [pc, #60]	; (800380c <ExploreNeighbors+0x50>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037ce:	2703      	movs	r7, #3
		if(port != ignore){
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d00f      	beq.n	80037f4 <ExploreNeighbors+0x38>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037d4:	4643      	mov	r3, r8
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	0a1a      	lsrs	r2, r3, #8
 80037da:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 80037dc:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 80037de:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037e0:	9700      	str	r7, [sp, #0]
 80037e2:	230a      	movs	r3, #10
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	0020      	movs	r0, r4
 80037ea:	f005 fd43 	bl	8009274 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 80037ee:	200a      	movs	r0, #10
 80037f0:	f009 ff21 	bl	800d636 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037f4:	3401      	adds	r4, #1
 80037f6:	b2e4      	uxtb	r4, r4
 80037f8:	2c07      	cmp	r4, #7
 80037fa:	d1e9      	bne.n	80037d0 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	b002      	add	sp, #8
 8003800:	bc04      	pop	{r2}
 8003802:	4690      	mov	r8, r2
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	20000050 	.word	0x20000050
 800380c:	20000f38 	.word	0x20000f38

08003810 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	46de      	mov	lr, fp
 8003814:	4657      	mov	r7, sl
 8003816:	464e      	mov	r6, r9
 8003818:	4645      	mov	r5, r8
 800381a:	b5e0      	push	{r5, r6, r7, lr}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003820:	4b47      	ldr	r3, [pc, #284]	; (8003940 <FindBroadcastRoutes+0x130>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	469c      	mov	ip, r3
 8003826:	3307      	adds	r3, #7
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	466a      	mov	r2, sp
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	469d      	mov	sp, r3
 8003832:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003834:	4663      	mov	r3, ip
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <FindBroadcastRoutes+0x46>
 800383a:	0023      	movs	r3, r4
 800383c:	4a41      	ldr	r2, [pc, #260]	; (8003944 <FindBroadcastRoutes+0x134>)
 800383e:	4661      	mov	r1, ip
 8003840:	1e4d      	subs	r5, r1, #1
 8003842:	b2ed      	uxtb	r5, r5
 8003844:	3501      	adds	r5, #1
 8003846:	192d      	adds	r5, r5, r4
		modules[m] =0;
 8003848:	2100      	movs	r1, #0
 800384a:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 800384c:	8011      	strh	r1, [r2, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003852:	42ab      	cmp	r3, r5
 8003854:	d1f9      	bne.n	800384a <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 8003856:	3801      	subs	r0, #1
 8003858:	2301      	movs	r3, #1
 800385a:	5423      	strb	r3, [r4, r0]
 800385c:	2216      	movs	r2, #22
 800385e:	4342      	muls	r2, r0
 8003860:	3202      	adds	r2, #2
 8003862:	4b39      	ldr	r3, [pc, #228]	; (8003948 <FindBroadcastRoutes+0x138>)
 8003864:	18d2      	adds	r2, r2, r3
 8003866:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= NumOfPorts; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003868:	4d36      	ldr	r5, [pc, #216]	; (8003944 <FindBroadcastRoutes+0x134>)
 800386a:	0040      	lsls	r0, r0, #1
 800386c:	2301      	movs	r3, #1
 800386e:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003870:	46a3      	mov	fp, r4
 8003872:	e003      	b.n	800387c <FindBroadcastRoutes+0x6c>
 8003874:	3101      	adds	r1, #1
 8003876:	3202      	adds	r2, #2
	for(p =1; p <= NumOfPorts; p++){
 8003878:	2906      	cmp	r1, #6
 800387a:	d011      	beq.n	80038a0 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 800387c:	8813      	ldrh	r3, [r2, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f8      	beq.n	8003874 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003882:	5b46      	ldrh	r6, [r0, r5]
 8003884:	46b1      	mov	r9, r6
 8003886:	4646      	mov	r6, r8
 8003888:	408e      	lsls	r6, r1
 800388a:	46b2      	mov	sl, r6
 800388c:	464e      	mov	r6, r9
 800388e:	4654      	mov	r4, sl
 8003890:	4326      	orrs	r6, r4
 8003892:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	445b      	add	r3, fp
 8003898:	3b01      	subs	r3, #1
 800389a:	2402      	movs	r4, #2
 800389c:	701c      	strb	r4, [r3, #0]
 800389e:	e7e9      	b.n	8003874 <FindBroadcastRoutes+0x64>
 80038a0:	465c      	mov	r4, fp
	++level;												// Move one level
 80038a2:	2602      	movs	r6, #2
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <FindBroadcastRoutes+0x138>)
 80038a6:	3302      	adds	r3, #2
 80038a8:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038aa:	2301      	movs	r3, #1
 80038ac:	469b      	mov	fp, r3
 80038ae:	46b0      	mov	r8, r6
 80038b0:	0026      	movs	r6, r4
		++level;											// Move one level
 80038b2:	4643      	mov	r3, r8
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ba:	4663      	mov	r3, ip
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d035      	beq.n	800392c <FindBroadcastRoutes+0x11c>
 80038c0:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038c6:	3b01      	subs	r3, #1
 80038c8:	4443      	add	r3, r8
 80038ca:	4699      	mov	r9, r3
 80038cc:	e01e      	b.n	800390c <FindBroadcastRoutes+0xfc>
 80038ce:	3001      	adds	r0, #1
 80038d0:	3102      	adds	r1, #2
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 80038d2:	2806      	cmp	r0, #6
 80038d4:	d015      	beq.n	8003902 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 80038d6:	880b      	ldrh	r3, [r1, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f8      	beq.n	80038ce <FindBroadcastRoutes+0xbe>
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	3b01      	subs	r3, #1
 80038e0:	5cf5      	ldrb	r5, [r6, r3]
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	d1f3      	bne.n	80038ce <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038e6:	4a17      	ldr	r2, [pc, #92]	; (8003944 <FindBroadcastRoutes+0x134>)
 80038e8:	5aa5      	ldrh	r5, [r4, r2]
 80038ea:	465a      	mov	r2, fp
 80038ec:	4082      	lsls	r2, r0
 80038ee:	4315      	orrs	r5, r2
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <FindBroadcastRoutes+0x134>)
 80038f2:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 80038f4:	4642      	mov	r2, r8
 80038f6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e7e5      	b.n	80038ce <FindBroadcastRoutes+0xbe>
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003906:	b2d3      	uxtb	r3, r2
 8003908:	4563      	cmp	r3, ip
 800390a:	d20c      	bcs.n	8003926 <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 800390c:	5cb3      	ldrb	r3, [r6, r2]
 800390e:	454b      	cmp	r3, r9
 8003910:	d1f8      	bne.n	8003904 <FindBroadcastRoutes+0xf4>
 8003912:	2116      	movs	r1, #22
 8003914:	4351      	muls	r1, r2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	469a      	mov	sl, r3
 800391a:	4451      	add	r1, sl
 800391c:	0053      	lsls	r3, r2, #1
 800391e:	2000      	movs	r0, #0
 8003920:	60ba      	str	r2, [r7, #8]
 8003922:	001c      	movs	r4, r3
 8003924:	e7d7      	b.n	80038d6 <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1c2      	bne.n	80038b2 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 800392c:	2000      	movs	r0, #0
 800392e:	46bd      	mov	sp, r7
 8003930:	b005      	add	sp, #20
 8003932:	bc3c      	pop	{r2, r3, r4, r5}
 8003934:	4690      	mov	r8, r2
 8003936:	4699      	mov	r9, r3
 8003938:	46a2      	mov	sl, r4
 800393a:	46ab      	mov	fp, r5
 800393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000001c 	.word	0x2000001c
 8003944:	20000cb8 	.word	0x20000cb8
 8003948:	20000a78 	.word	0x20000a78

0800394c <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 800394e:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003950:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003952:	2b00      	cmp	r3, #0
 8003954:	d100      	bne.n	8003958 <minArr+0xc>
		smallest =arr[0];
 8003956:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <minArr+0x38>)
 800395a:	781d      	ldrb	r5, [r3, #0]
 800395c:	2d00      	cmp	r5, #0
 800395e:	dd0e      	ble.n	800397e <minArr+0x32>
 8003960:	2300      	movs	r3, #0
 8003962:	2700      	movs	r7, #0
 8003964:	e002      	b.n	800396c <minArr+0x20>
 8003966:	3301      	adds	r3, #1
 8003968:	42ab      	cmp	r3, r5
 800396a:	da09      	bge.n	8003980 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 800396c:	5cc2      	ldrb	r2, [r0, r3]
 800396e:	42a2      	cmp	r2, r4
 8003970:	d2f9      	bcs.n	8003966 <minArr+0x1a>
 8003972:	5cce      	ldrb	r6, [r1, r3]
 8003974:	2e00      	cmp	r6, #0
 8003976:	d1f6      	bne.n	8003966 <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003978:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 800397a:	0014      	movs	r4, r2
 800397c:	e7f3      	b.n	8003966 <minArr+0x1a>
	for(int i =0; i < N; i++){
 800397e:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003980:	0038      	movs	r0, r7
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003984:	2000001c 	.word	0x2000001c

08003988 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <QnotEmpty+0x20>)
 800398a:	7819      	ldrb	r1, [r3, #0]
 800398c:	2900      	cmp	r1, #0
 800398e:	d008      	beq.n	80039a2 <QnotEmpty+0x1a>
 8003990:	0003      	movs	r3, r0
 8003992:	1841      	adds	r1, r0, r1
	char temp =1;
 8003994:	2001      	movs	r0, #1
		temp &=Q[i];
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	4010      	ands	r0, r2
 800399a:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 800399c:	428b      	cmp	r3, r1
 800399e:	d1fa      	bne.n	8003996 <QnotEmpty+0xe>
	}
	
	return temp;
}
 80039a0:	4770      	bx	lr
	char temp =1;
 80039a2:	2001      	movs	r0, #1
 80039a4:	e7fc      	b.n	80039a0 <QnotEmpty+0x18>
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	2000001c 	.word	0x2000001c

080039ac <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	46de      	mov	lr, fp
 80039b0:	4657      	mov	r7, sl
 80039b2:	464e      	mov	r6, r9
 80039b4:	4645      	mov	r5, r8
 80039b6:	b5e0      	push	{r5, r6, r7, lr}
 80039b8:	b08f      	sub	sp, #60	; 0x3c
 80039ba:	0005      	movs	r5, r0
 80039bc:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 80039be:	2232      	movs	r2, #50	; 0x32
 80039c0:	2100      	movs	r1, #0
 80039c2:	a801      	add	r0, sp, #4
 80039c4:	f00f fafa 	bl	8012fbc <memset>
	memset(route,0,sizeof(route));
 80039c8:	221a      	movs	r2, #26
 80039ca:	2100      	movs	r1, #0
 80039cc:	485a      	ldr	r0, [pc, #360]	; (8003b38 <FindRoute+0x18c>)
 80039ce:	f00f faf5 	bl	8012fbc <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039d2:	0029      	movs	r1, r5
 80039d4:	1e68      	subs	r0, r5, #1
 80039d6:	2300      	movs	r3, #0
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <FindRoute+0x190>)
 80039da:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <FindRoute+0x194>)
 80039de:	5413      	strb	r3, [r2, r0]
 80039e0:	2516      	movs	r5, #22
 80039e2:	4345      	muls	r5, r0
 80039e4:	3502      	adds	r5, #2
 80039e6:	4b57      	ldr	r3, [pc, #348]	; (8003b44 <FindRoute+0x198>)
 80039e8:	18ed      	adds	r5, r5, r3
 80039ea:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 80039ec:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039ee:	4653      	mov	r3, sl
 80039f0:	b29c      	uxth	r4, r3
 80039f2:	e003      	b.n	80039fc <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 80039f4:	3001      	adds	r0, #1
 80039f6:	3202      	adds	r2, #2
 80039f8:	2807      	cmp	r0, #7
 80039fa:	d00f      	beq.n	8003a1c <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039fc:	8813      	ldrh	r3, [r2, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f8      	beq.n	80039f4 <FindRoute+0x48>
 8003a02:	08db      	lsrs	r3, r3, #3
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	d1f5      	bne.n	80039f4 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <FindRoute+0x190>)
 8003a0a:	4453      	add	r3, sl
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003a12:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <FindRoute+0x18c>)
 8003a14:	4652      	mov	r2, sl
 8003a16:	701a      	strb	r2, [r3, #0]
			return col;
 8003a18:	b2c0      	uxtb	r0, r0
 8003a1a:	e085      	b.n	8003b28 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <FindRoute+0x19c>)
 8003a1e:	781e      	ldrb	r6, [r3, #0]
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	dd11      	ble.n	8003a48 <FindRoute+0x9c>
 8003a24:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a26:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a28:	4f45      	ldr	r7, [pc, #276]	; (8003b40 <FindRoute+0x194>)
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	46ac      	mov	ip, r5
 8003a2e:	e002      	b.n	8003a36 <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003a30:	3301      	adds	r3, #1
 8003a32:	42b3      	cmp	r3, r6
 8003a34:	dc07      	bgt.n	8003a46 <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a36:	4299      	cmp	r1, r3
 8003a38:	d0fa      	beq.n	8003a30 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	4d3f      	ldr	r5, [pc, #252]	; (8003b3c <FindRoute+0x190>)
 8003a3e:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a40:	18ba      	adds	r2, r7, r2
 8003a42:	7010      	strb	r0, [r2, #0]
 8003a44:	e7f4      	b.n	8003a30 <FindRoute+0x84>
 8003a46:	4665      	mov	r5, ip
	uint8_t u =0;
 8003a48:	2400      	movs	r4, #0
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <FindRoute+0x198>)
 8003a4c:	4698      	mov	r8, r3
 8003a4e:	230e      	movs	r3, #14
 8003a50:	4443      	add	r3, r8
 8003a52:	4656      	mov	r6, sl
 8003a54:	469b      	mov	fp, r3
 8003a56:	46a9      	mov	r9, r5
 8003a58:	e01d      	b.n	8003a96 <FindRoute+0xea>
 8003a5a:	464d      	mov	r5, r9
 8003a5c:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a5e:	0034      	movs	r4, r6
 8003a60:	e034      	b.n	8003acc <FindRoute+0x120>
 8003a62:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003a64:	4281      	cmp	r1, r0
 8003a66:	d015      	beq.n	8003a94 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a68:	880b      	ldrh	r3, [r1, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f9      	beq.n	8003a62 <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003a6e:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	5cd7      	ldrb	r7, [r2, r3]
 8003a76:	2f00      	cmp	r7, #0
 8003a78:	d1f3      	bne.n	8003a62 <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a7a:	4f30      	ldr	r7, [pc, #192]	; (8003b3c <FindRoute+0x190>)
 8003a7c:	5d7f      	ldrb	r7, [r7, r5]
 8003a7e:	3701      	adds	r7, #1
 8003a80:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a82:	4e2e      	ldr	r6, [pc, #184]	; (8003b3c <FindRoute+0x190>)
 8003a84:	5cf6      	ldrb	r6, [r6, r3]
 8003a86:	42be      	cmp	r6, r7
 8003a88:	d9eb      	bls.n	8003a62 <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003a8a:	4e2c      	ldr	r6, [pc, #176]	; (8003b3c <FindRoute+0x190>)
 8003a8c:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003a8e:	4e2c      	ldr	r6, [pc, #176]	; (8003b40 <FindRoute+0x194>)
 8003a90:	54f4      	strb	r4, [r6, r3]
 8003a92:	e7e6      	b.n	8003a62 <FindRoute+0xb6>
 8003a94:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003a96:	a801      	add	r0, sp, #4
 8003a98:	f7ff ff76 	bl	8003988 <QnotEmpty>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d113      	bne.n	8003ac8 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003aa0:	a901      	add	r1, sp, #4
 8003aa2:	4826      	ldr	r0, [pc, #152]	; (8003b3c <FindRoute+0x190>)
 8003aa4:	f7ff ff52 	bl	800394c <minArr>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003aac:	42b4      	cmp	r4, r6
 8003aae:	d0d4      	beq.n	8003a5a <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003ab0:	1e65      	subs	r5, r4, #1
 8003ab2:	ab01      	add	r3, sp, #4
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	555a      	strb	r2, [r3, r5]
 8003ab8:	2016      	movs	r0, #22
 8003aba:	4368      	muls	r0, r5
 8003abc:	1c81      	adds	r1, r0, #2
 8003abe:	4441      	add	r1, r8
 8003ac0:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	46b2      	mov	sl, r6
 8003ac6:	e7cf      	b.n	8003a68 <FindRoute+0xbc>
 8003ac8:	464d      	mov	r5, r9
 8003aca:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <FindRoute+0x194>)
 8003ace:	191b      	adds	r3, r3, r4
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d00e      	beq.n	8003af8 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003ada:	4917      	ldr	r1, [pc, #92]	; (8003b38 <FindRoute+0x18c>)
 8003adc:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ade:	4e18      	ldr	r6, [pc, #96]	; (8003b40 <FindRoute+0x194>)
 8003ae0:	e000      	b.n	8003ae4 <FindRoute+0x138>
 8003ae2:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003ae4:	1c58      	adds	r0, r3, #1
 8003ae6:	4661      	mov	r1, ip
 8003ae8:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003aea:	18b3      	adds	r3, r6, r2
 8003aec:	3b01      	subs	r3, #1
 8003aee:	7819      	ldrb	r1, [r3, #0]
 8003af0:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003af2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d1f4      	bne.n	8003ae2 <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003af8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003afa:	490f      	ldr	r1, [pc, #60]	; (8003b38 <FindRoute+0x18c>)
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <FindRoute+0x190>)
 8003afe:	4453      	add	r3, sl
 8003b00:	001f      	movs	r7, r3
 8003b02:	3f01      	subs	r7, #1
 8003b04:	e003      	b.n	8003b0e <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003b06:	3001      	adds	r0, #1
 8003b08:	3502      	adds	r5, #2
 8003b0a:	2807      	cmp	r0, #7
 8003b0c:	d00b      	beq.n	8003b26 <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003b0e:	882b      	ldrh	r3, [r5, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f8      	beq.n	8003b06 <FindRoute+0x15a>
 8003b14:	783a      	ldrb	r2, [r7, #0]
 8003b16:	188a      	adds	r2, r1, r2
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d1f1      	bne.n	8003b06 <FindRoute+0x15a>
			return col;
 8003b22:	b2c0      	uxtb	r0, r0
 8003b24:	e000      	b.n	8003b28 <FindRoute+0x17c>
	return 0;
 8003b26:	2000      	movs	r0, #0
}
 8003b28:	b00f      	add	sp, #60	; 0x3c
 8003b2a:	bc3c      	pop	{r2, r3, r4, r5}
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	46a2      	mov	sl, r4
 8003b32:	46ab      	mov	fp, r5
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	20006ac8 	.word	0x20006ac8
 8003b3c:	20001114 	.word	0x20001114
 8003b40:	20001130 	.word	0x20001130
 8003b44:	20000a78 	.word	0x20000a78
 8003b48:	2000001c 	.word	0x2000001c

08003b4c <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	0007      	movs	r7, r0
 8003b52:	000e      	movs	r6, r1
 8003b54:	9205      	str	r2, [sp, #20]
 8003b56:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 8003b58:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b5a:	7818      	ldrb	r0, [r3, #0]
 8003b5c:	f7ff ff26 	bl	80039ac <FindRoute>
 8003b60:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	d020      	beq.n	8003ba8 <remoteBootloaderUpdate+0x5c>
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b68:	781c      	ldrb	r4, [r3, #0]
 8003b6a:	42b4      	cmp	r4, r6
 8003b6c:	d05f      	beq.n	8003c2e <remoteBootloaderUpdate+0xe2>
	if(src == myID){
 8003b6e:	42bc      	cmp	r4, r7
 8003b70:	d034      	beq.n	8003bdc <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003b72:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003b74:	9805      	ldr	r0, [sp, #20]
 8003b76:	f7ff fdb9 	bl	80036ec <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003b7a:	9804      	ldr	r0, [sp, #16]
 8003b7c:	f7ff fdb6 	bl	80036ec <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	42a3      	cmp	r3, r4
 8003b86:	d046      	beq.n	8003c16 <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b8a:	7819      	ldrb	r1, [r3, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	9302      	str	r3, [sp, #8]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	3303      	adds	r3, #3
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	000b      	movs	r3, r1
 8003b9c:	9a04      	ldr	r2, [sp, #16]
 8003b9e:	9805      	ldr	r0, [sp, #20]
 8003ba0:	f005 fdb6 	bl	8009710 <StartScastDMAStream>
}
 8003ba4:	b007      	add	sp, #28
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <remoteBootloaderUpdate+0xf0>)
 8003baa:	199b      	adds	r3, r3, r6
 8003bac:	3b01      	subs	r3, #1
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	2a01      	cmp	r2, #1
 8003bb2:	d010      	beq.n	8003bd6 <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <remoteBootloaderUpdate+0xf4>)
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	781c      	ldrb	r4, [r3, #0]
	if(src == myID){
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	42bb      	cmp	r3, r7
 8003bc2:	d1d7      	bne.n	8003b74 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003bc4:	f009 fe4c 	bl	800d860 <FreeRTOS_CLIGetOutputBuffer>
 8003bc8:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <remoteBootloaderUpdate+0xf8>)
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	0032      	movs	r2, r6
 8003bd0:	f00f fbee 	bl	80133b0 <sprintf>
 8003bd4:	e00d      	b.n	8003bf2 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003bd8:	781c      	ldrb	r4, [r3, #0]
 8003bda:	e7ef      	b.n	8003bbc <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003bdc:	f009 fe40 	bl	800d860 <FreeRTOS_CLIGetOutputBuffer>
 8003be0:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003be2:	2400      	movs	r4, #0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <remoteBootloaderUpdate+0xfc>)
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	002b      	movs	r3, r5
 8003bea:	0032      	movs	r2, r6
 8003bec:	0038      	movs	r0, r7
 8003bee:	f00f fbdf 	bl	80133b0 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <remoteBootloaderUpdate+0x100>)
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	0038      	movs	r0, r7
 8003bf8:	f00f fbfa 	bl	80133f0 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003bfc:	0038      	movs	r0, r7
 8003bfe:	f7fc fa8b 	bl	8000118 <strlen>
 8003c02:	b282      	uxth	r2, r0
 8003c04:	2332      	movs	r3, #50	; 0x32
 8003c06:	0039      	movs	r1, r7
 8003c08:	9805      	ldr	r0, [sp, #20]
 8003c0a:	f009 fc0f 	bl	800d42c <writePxITMutex>
		Delay_ms(100);
 8003c0e:	2064      	movs	r0, #100	; 0x64
 8003c10:	f00b fd3c 	bl	800f68c <HAL_Delay>
 8003c14:	e7ae      	b.n	8003b74 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003c16:	9804      	ldr	r0, [sp, #16]
 8003c18:	f009 fbbe 	bl	800d398 <GetUart>
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f009 fc55 	bl	800d4cc <SwapUartPins>
 8003c22:	e7b1      	b.n	8003b88 <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c24:	f009 fe1c 	bl	800d860 <FreeRTOS_CLIGetOutputBuffer>
 8003c28:	0007      	movs	r7, r0
		myOutport =outport;
 8003c2a:	9504      	str	r5, [sp, #16]
 8003c2c:	e7da      	b.n	8003be4 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8003c2e:	42bc      	cmp	r4, r7
 8003c30:	d0f8      	beq.n	8003c24 <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003c32:	9504      	str	r5, [sp, #16]
 8003c34:	e79e      	b.n	8003b74 <remoteBootloaderUpdate+0x28>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	20001076 	.word	0x20001076
 8003c3c:	20001114 	.word	0x20001114
 8003c40:	20006ac8 	.word	0x20006ac8
 8003c44:	20000078 	.word	0x20000078
 8003c48:	2000007c 	.word	0x2000007c
 8003c4c:	20000080 	.word	0x20000080

08003c50 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	46d6      	mov	lr, sl
 8003c54:	464f      	mov	r7, r9
 8003c56:	4646      	mov	r6, r8
 8003c58:	b5c0      	push	{r6, r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	0005      	movs	r5, r0
 8003c5e:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	4c56      	ldr	r4, [pc, #344]	; (8003dbc <DisplayTopology+0x16c>)
 8003c62:	4b57      	ldr	r3, [pc, #348]	; (8003dc0 <DisplayTopology+0x170>)
 8003c64:	0022      	movs	r2, r4
 8003c66:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003c68:	c243      	stmia	r2!, {r0, r1, r6}
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	889b      	ldrh	r3, [r3, #4]
 8003c70:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c72:	0020      	movs	r0, r4
 8003c74:	f7fc fa50 	bl	8000118 <strlen>
 8003c78:	b282      	uxth	r2, r0
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	3333      	adds	r3, #51	; 0x33
 8003c82:	0021      	movs	r1, r4
 8003c84:	0028      	movs	r0, r5
 8003c86:	f009 fba9 	bl	800d3dc <writePxMutex>
 8003c8a:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003c8c:	4f4d      	ldr	r7, [pc, #308]	; (8003dc4 <DisplayTopology+0x174>)
 8003c8e:	4d4b      	ldr	r5, [pc, #300]	; (8003dbc <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c90:	2601      	movs	r6, #1
 8003c92:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003c94:	0022      	movs	r2, r4
 8003c96:	0039      	movs	r1, r7
 8003c98:	0028      	movs	r0, r5
 8003c9a:	f00f fb89 	bl	80133b0 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c9e:	0028      	movs	r0, r5
 8003ca0:	f7fc fa3a 	bl	8000118 <strlen>
 8003ca4:	b282      	uxth	r2, r0
 8003ca6:	9600      	str	r6, [sp, #0]
 8003ca8:	2332      	movs	r3, #50	; 0x32
 8003caa:	0029      	movs	r1, r5
 8003cac:	9803      	ldr	r0, [sp, #12]
 8003cae:	f009 fb95 	bl	800d3dc <writePxMutex>
 8003cb2:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cb4:	2c07      	cmp	r4, #7
 8003cb6:	d1ed      	bne.n	8003c94 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cb8:	2301      	movs	r3, #1
 8003cba:	425b      	negs	r3, r3
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	3333      	adds	r3, #51	; 0x33
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	4941      	ldr	r1, [pc, #260]	; (8003dc8 <DisplayTopology+0x178>)
 8003cc4:	9803      	ldr	r0, [sp, #12]
 8003cc6:	f009 fb89 	bl	800d3dc <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <DisplayTopology+0x17c>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d065      	beq.n	8003d9e <DisplayTopology+0x14e>
 8003cd2:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cd4:	2701      	movs	r7, #1
 8003cd6:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <DisplayTopology+0x180>)
 8003cda:	4699      	mov	r9, r3
 8003cdc:	230e      	movs	r3, #14
 8003cde:	444b      	add	r3, r9
 8003ce0:	469a      	mov	sl, r3
 8003ce2:	e02a      	b.n	8003d3a <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce4:	2307      	movs	r3, #7
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	08d2      	lsrs	r2, r2, #3
 8003cea:	493a      	ldr	r1, [pc, #232]	; (8003dd4 <DisplayTopology+0x184>)
 8003cec:	4833      	ldr	r0, [pc, #204]	; (8003dbc <DisplayTopology+0x16c>)
 8003cee:	f00f fb5f 	bl	80133b0 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf2:	4d32      	ldr	r5, [pc, #200]	; (8003dbc <DisplayTopology+0x16c>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f7fc fa0f 	bl	8000118 <strlen>
 8003cfa:	b282      	uxth	r2, r0
 8003cfc:	9700      	str	r7, [sp, #0]
 8003cfe:	2332      	movs	r3, #50	; 0x32
 8003d00:	0029      	movs	r1, r5
 8003d02:	9803      	ldr	r0, [sp, #12]
 8003d04:	f009 fb6a 	bl	800d3dc <writePxMutex>
 8003d08:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d0a:	42b4      	cmp	r4, r6
 8003d0c:	d007      	beq.n	8003d1e <DisplayTopology+0xce>
			if(!array[row][col])
 8003d0e:	8822      	ldrh	r2, [r4, #0]
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	d1e7      	bne.n	8003ce4 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003d14:	4930      	ldr	r1, [pc, #192]	; (8003dd8 <DisplayTopology+0x188>)
 8003d16:	4829      	ldr	r0, [pc, #164]	; (8003dbc <DisplayTopology+0x16c>)
 8003d18:	f00f fb4a 	bl	80133b0 <sprintf>
 8003d1c:	e7e9      	b.n	8003cf2 <DisplayTopology+0xa2>
 8003d1e:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d20:	9700      	str	r7, [sp, #0]
 8003d22:	2332      	movs	r3, #50	; 0x32
 8003d24:	2202      	movs	r2, #2
 8003d26:	492d      	ldr	r1, [pc, #180]	; (8003ddc <DisplayTopology+0x18c>)
 8003d28:	9803      	ldr	r0, [sp, #12]
 8003d2a:	f009 fb57 	bl	800d3dc <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d2e:	3601      	adds	r6, #1
 8003d30:	b2f6      	uxtb	r6, r6
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <DisplayTopology+0x17c>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	42b3      	cmp	r3, r6
 8003d38:	d931      	bls.n	8003d9e <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d3a:	1c72      	adds	r2, r6, #1
 8003d3c:	4c1f      	ldr	r4, [pc, #124]	; (8003dbc <DisplayTopology+0x16c>)
 8003d3e:	4928      	ldr	r1, [pc, #160]	; (8003de0 <DisplayTopology+0x190>)
 8003d40:	0020      	movs	r0, r4
 8003d42:	f00f fb35 	bl	80133b0 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d46:	0020      	movs	r0, r4
 8003d48:	f7fc f9e6 	bl	8000118 <strlen>
 8003d4c:	b282      	uxth	r2, r0
 8003d4e:	9700      	str	r7, [sp, #0]
 8003d50:	2332      	movs	r3, #50	; 0x32
 8003d52:	0021      	movs	r1, r4
 8003d54:	9803      	ldr	r0, [sp, #12]
 8003d56:	f009 fb41 	bl	800d3dc <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d5a:	2516      	movs	r5, #22
 8003d5c:	4375      	muls	r5, r6
 8003d5e:	464b      	mov	r3, r9
 8003d60:	5aeb      	ldrh	r3, [r5, r3]
 8003d62:	0059      	lsls	r1, r3, #1
 8003d64:	18c9      	adds	r1, r1, r3
 8003d66:	0049      	lsls	r1, r1, #1
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <DisplayTopology+0x194>)
 8003d6a:	18c9      	adds	r1, r1, r3
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f00f fb73 	bl	801345a <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d74:	9700      	str	r7, [sp, #0]
 8003d76:	2332      	movs	r3, #50	; 0x32
 8003d78:	2205      	movs	r2, #5
 8003d7a:	0021      	movs	r1, r4
 8003d7c:	9c03      	ldr	r4, [sp, #12]
 8003d7e:	0020      	movs	r0, r4
 8003d80:	f009 fb2c 	bl	800d3dc <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d84:	9700      	str	r7, [sp, #0]
 8003d86:	2332      	movs	r3, #50	; 0x32
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4917      	ldr	r1, [pc, #92]	; (8003de8 <DisplayTopology+0x198>)
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f009 fb25 	bl	800d3dc <writePxMutex>
 8003d92:	1cac      	adds	r4, r5, #2
 8003d94:	444c      	add	r4, r9
 8003d96:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8003d98:	46b0      	mov	r8, r6
 8003d9a:	002e      	movs	r6, r5
 8003d9c:	e7b7      	b.n	8003d0e <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003d9e:	2301      	movs	r3, #1
 8003da0:	425b      	negs	r3, r3
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	3333      	adds	r3, #51	; 0x33
 8003da6:	2201      	movs	r2, #1
 8003da8:	4910      	ldr	r1, [pc, #64]	; (8003dec <DisplayTopology+0x19c>)
 8003daa:	9803      	ldr	r0, [sp, #12]
 8003dac:	f009 fb16 	bl	800d3dc <writePxMutex>
}
 8003db0:	b004      	add	sp, #16
 8003db2:	bc1c      	pop	{r2, r3, r4}
 8003db4:	4690      	mov	r8, r2
 8003db6:	4699      	mov	r9, r3
 8003db8:	46a2      	mov	sl, r4
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	200010a8 	.word	0x200010a8
 8003dc0:	08017ad4 	.word	0x08017ad4
 8003dc4:	08017ae8 	.word	0x08017ae8
 8003dc8:	08018f6c 	.word	0x08018f6c
 8003dcc:	2000001c 	.word	0x2000001c
 8003dd0:	20000a78 	.word	0x20000a78
 8003dd4:	08017b00 	.word	0x08017b00
 8003dd8:	08017afc 	.word	0x08017afc
 8003ddc:	0801797c 	.word	0x0801797c
 8003de0:	08017af0 	.word	0x08017af0
 8003de4:	08017b3c 	.word	0x08017b3c
 8003de8:	08017ae4 	.word	0x08017ae4
 8003dec:	08019130 	.word	0x08019130

08003df0 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df2:	46c6      	mov	lr, r8
 8003df4:	b500      	push	{lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	0005      	movs	r5, r0
 8003dfa:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003dfc:	4c30      	ldr	r4, [pc, #192]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <DisplayPortsDir+0xd4>)
 8003e00:	0022      	movs	r2, r4
 8003e02:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e04:	c243      	stmia	r2!, {r0, r1, r6}
 8003e06:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e08:	c243      	stmia	r2!, {r0, r1, r6}
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e0e:	0020      	movs	r0, r4
 8003e10:	f7fc f982 	bl	8000118 <strlen>
 8003e14:	b282      	uxth	r2, r0
 8003e16:	2301      	movs	r3, #1
 8003e18:	425b      	negs	r3, r3
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	3333      	adds	r3, #51	; 0x33
 8003e1e:	0021      	movs	r1, r4
 8003e20:	0028      	movs	r0, r5
 8003e22:	f009 fadb 	bl	800d3dc <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <DisplayPortsDir+0xd8>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02c      	beq.n	8003e8c <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e32:	4e26      	ldr	r6, [pc, #152]	; (8003ecc <DisplayPortsDir+0xdc>)
 8003e34:	e025      	b.n	8003e82 <DisplayPortsDir+0x92>
 8003e36:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e38:	2c0a      	cmp	r4, #10
 8003e3a:	d01a      	beq.n	8003e72 <DisplayPortsDir+0x82>
 8003e3c:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e3e:	5ba9      	ldrh	r1, [r5, r6]
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	0212      	lsls	r2, r2, #8
 8003e44:	411a      	asrs	r2, r3
 8003e46:	420a      	tst	r2, r1
 8003e48:	d0f5      	beq.n	8003e36 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e4a:	4f1d      	ldr	r7, [pc, #116]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003e4c:	0023      	movs	r3, r4
 8003e4e:	4642      	mov	r2, r8
 8003e50:	491f      	ldr	r1, [pc, #124]	; (8003ed0 <DisplayPortsDir+0xe0>)
 8003e52:	0038      	movs	r0, r7
 8003e54:	f00f faac 	bl	80133b0 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e58:	0038      	movs	r0, r7
 8003e5a:	f7fc f95d 	bl	8000118 <strlen>
 8003e5e:	b282      	uxth	r2, r0
 8003e60:	2301      	movs	r3, #1
 8003e62:	425b      	negs	r3, r3
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	3333      	adds	r3, #51	; 0x33
 8003e68:	0039      	movs	r1, r7
 8003e6a:	9803      	ldr	r0, [sp, #12]
 8003e6c:	f009 fab6 	bl	800d3dc <writePxMutex>
 8003e70:	e7e1      	b.n	8003e36 <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003e72:	4643      	mov	r3, r8
 8003e74:	3301      	adds	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4698      	mov	r8, r3
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <DisplayPortsDir+0xd8>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	4543      	cmp	r3, r8
 8003e80:	d304      	bcc.n	8003e8c <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003e82:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e84:	4642      	mov	r2, r8
 8003e86:	1e55      	subs	r5, r2, #1
 8003e88:	006d      	lsls	r5, r5, #1
 8003e8a:	e7d7      	b.n	8003e3c <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003e8c:	4c0c      	ldr	r4, [pc, #48]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <DisplayPortsDir+0xe4>)
 8003e90:	0022      	movs	r2, r4
 8003e92:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e94:	c223      	stmia	r2!, {r0, r1, r5}
 8003e96:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e98:	c223      	stmia	r2!, {r0, r1, r5}
 8003e9a:	cb03      	ldmia	r3!, {r0, r1}
 8003e9c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e9e:	0020      	movs	r0, r4
 8003ea0:	f7fc f93a 	bl	8000118 <strlen>
 8003ea4:	b282      	uxth	r2, r0
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	3333      	adds	r3, #51	; 0x33
 8003eae:	0021      	movs	r1, r4
 8003eb0:	9803      	ldr	r0, [sp, #12]
 8003eb2:	f009 fa93 	bl	800d3dc <writePxMutex>
	HAL_MAX_DELAY);
}
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bc04      	pop	{r2}
 8003eba:	4690      	mov	r8, r2
 8003ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	200010a8 	.word	0x200010a8
 8003ec4:	08017a84 	.word	0x08017a84
 8003ec8:	2000001c 	.word	0x2000001c
 8003ecc:	20006e40 	.word	0x20006e40
 8003ed0:	08017aa0 	.word	0x08017aa0
 8003ed4:	08017ab4 	.word	0x08017ab4

08003ed8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	46d6      	mov	lr, sl
 8003edc:	b500      	push	{lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003ee2:	f009 fcbd 	bl	800d860 <FreeRTOS_CLIGetOutputBuffer>
 8003ee6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003ee8:	2300      	movs	r3, #0
 8003eea:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003eec:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <DisplayModuleStatus+0x24c>)
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	4d8d      	ldr	r5, [pc, #564]	; (8004128 <DisplayModuleStatus+0x250>)
 8003ef2:	498e      	ldr	r1, [pc, #568]	; (800412c <DisplayModuleStatus+0x254>)
 8003ef4:	0028      	movs	r0, r5
 8003ef6:	f00f fa5b 	bl	80133b0 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003efa:	0029      	movs	r1, r5
 8003efc:	0020      	movs	r0, r4
 8003efe:	f00f fa77 	bl	80133f0 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <DisplayModuleStatus+0x258>)
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	498b      	ldr	r1, [pc, #556]	; (8004134 <DisplayModuleStatus+0x25c>)
 8003f08:	0028      	movs	r0, r5
 8003f0a:	f00f fa51 	bl	80133b0 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f0e:	0029      	movs	r1, r5
 8003f10:	0020      	movs	r0, r4
 8003f12:	f00f fa6d 	bl	80133f0 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f16:	2305      	movs	r3, #5
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	3b03      	subs	r3, #3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4986      	ldr	r1, [pc, #536]	; (8004138 <DisplayModuleStatus+0x260>)
 8003f20:	0028      	movs	r0, r5
 8003f22:	f00f fa45 	bl	80133b0 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f26:	0029      	movs	r1, r5
 8003f28:	0020      	movs	r0, r4
 8003f2a:	f00f fa61 	bl	80133f0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f2e:	4a83      	ldr	r2, [pc, #524]	; (800413c <DisplayModuleStatus+0x264>)
 8003f30:	4983      	ldr	r1, [pc, #524]	; (8004140 <DisplayModuleStatus+0x268>)
 8003f32:	0028      	movs	r0, r5
 8003f34:	f00f fa3c 	bl	80133b0 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f38:	0029      	movs	r1, r5
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	f00f fa58 	bl	80133f0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f40:	4a80      	ldr	r2, [pc, #512]	; (8004144 <DisplayModuleStatus+0x26c>)
 8003f42:	4981      	ldr	r1, [pc, #516]	; (8004148 <DisplayModuleStatus+0x270>)
 8003f44:	0028      	movs	r0, r5
 8003f46:	f00f fa33 	bl	80133b0 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f4a:	0029      	movs	r1, r5
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f00f fa4f 	bl	80133f0 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f52:	4b7e      	ldr	r3, [pc, #504]	; (800414c <DisplayModuleStatus+0x274>)
 8003f54:	002a      	movs	r2, r5
 8003f56:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f58:	c243      	stmia	r2!, {r0, r1, r6}
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	8899      	ldrh	r1, [r3, #4]
 8003f60:	8091      	strh	r1, [r2, #4]
 8003f62:	799b      	ldrb	r3, [r3, #6]
 8003f64:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f66:	0029      	movs	r1, r5
 8003f68:	0020      	movs	r0, r4
 8003f6a:	f00f fa41 	bl	80133f0 <strcat>
 8003f6e:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8003f70:	4d6d      	ldr	r5, [pc, #436]	; (8004128 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <DisplayModuleStatus+0x278>)
 8003f74:	469a      	mov	sl, r3
 8003f76:	e00e      	b.n	8003f96 <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003f78:	4b6b      	ldr	r3, [pc, #428]	; (8004128 <DisplayModuleStatus+0x250>)
 8003f7a:	4a76      	ldr	r2, [pc, #472]	; (8004154 <DisplayModuleStatus+0x27c>)
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	8891      	ldrh	r1, [r2, #4]
 8003f82:	8099      	strh	r1, [r3, #4]
 8003f84:	7992      	ldrb	r2, [r2, #6]
 8003f86:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	4967      	ldr	r1, [pc, #412]	; (8004128 <DisplayModuleStatus+0x250>)
 8003f8a:	0020      	movs	r0, r4
 8003f8c:	f00f fa30 	bl	80133f0 <strcat>
 8003f90:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f92:	2f07      	cmp	r7, #7
 8003f94:	d039      	beq.n	800400a <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8003f96:	003a      	movs	r2, r7
 8003f98:	496f      	ldr	r1, [pc, #444]	; (8004158 <DisplayModuleStatus+0x280>)
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	f00f fa08 	bl	80133b0 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fa0:	0029      	movs	r1, r5
 8003fa2:	0020      	movs	r0, r4
 8003fa4:	f00f fa24 	bl	80133f0 <strcat>
		switch(portStatus[i]){
 8003fa8:	4653      	mov	r3, sl
 8003faa:	5cfb      	ldrb	r3, [r7, r3]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d8eb      	bhi.n	8003f88 <DisplayModuleStatus+0xb0>
 8003fb0:	4653      	mov	r3, sl
 8003fb2:	5cfb      	ldrb	r3, [r7, r3]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a69      	ldr	r2, [pc, #420]	; (800415c <DisplayModuleStatus+0x284>)
 8003fb8:	58d3      	ldr	r3, [r2, r3]
 8003fba:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8003fbc:	495a      	ldr	r1, [pc, #360]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fbe:	4b68      	ldr	r3, [pc, #416]	; (8004160 <DisplayModuleStatus+0x288>)
 8003fc0:	000a      	movs	r2, r1
 8003fc2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fc4:	c243      	stmia	r2!, {r0, r1, r6}
 8003fc6:	cb03      	ldmia	r3!, {r0, r1}
 8003fc8:	c203      	stmia	r2!, {r0, r1}
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	7013      	strb	r3, [r2, #0]
				break;
 8003fce:	e7db      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8003fd0:	4a55      	ldr	r2, [pc, #340]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <DisplayModuleStatus+0x28c>)
 8003fd4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fd6:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 8003fd8:	e7d6      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fda:	4953      	ldr	r1, [pc, #332]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fdc:	4b62      	ldr	r3, [pc, #392]	; (8004168 <DisplayModuleStatus+0x290>)
 8003fde:	000a      	movs	r2, r1
 8003fe0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe2:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe6:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	8013      	strh	r3, [r2, #0]
				break;
 8003fec:	e7cc      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003fee:	494e      	ldr	r1, [pc, #312]	; (8004128 <DisplayModuleStatus+0x250>)
 8003ff0:	4b5e      	ldr	r3, [pc, #376]	; (800416c <DisplayModuleStatus+0x294>)
 8003ff2:	000a      	movs	r2, r1
 8003ff4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff6:	c243      	stmia	r2!, {r0, r1, r6}
 8003ff8:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ffa:	c243      	stmia	r2!, {r0, r1, r6}
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	6011      	str	r1, [r2, #0]
 8004000:	8899      	ldrh	r1, [r3, #4]
 8004002:	8091      	strh	r1, [r2, #4]
 8004004:	799b      	ldrb	r3, [r3, #6]
 8004006:	7193      	strb	r3, [r2, #6]
				break;
 8004008:	e7be      	b.n	8003f88 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800400a:	4947      	ldr	r1, [pc, #284]	; (8004128 <DisplayModuleStatus+0x250>)
 800400c:	4b58      	ldr	r3, [pc, #352]	; (8004170 <DisplayModuleStatus+0x298>)
 800400e:	000a      	movs	r2, r1
 8004010:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004012:	c261      	stmia	r2!, {r0, r5, r6}
 8004014:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004016:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004018:	0020      	movs	r0, r4
 800401a:	f00f f9e9 	bl	80133f0 <strcat>
 800401e:	4f55      	ldr	r7, [pc, #340]	; (8004174 <DisplayModuleStatus+0x29c>)
 8004020:	2601      	movs	r6, #1
 8004022:	e00d      	b.n	8004040 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004024:	4d40      	ldr	r5, [pc, #256]	; (8004128 <DisplayModuleStatus+0x250>)
 8004026:	0032      	movs	r2, r6
 8004028:	4953      	ldr	r1, [pc, #332]	; (8004178 <DisplayModuleStatus+0x2a0>)
 800402a:	0028      	movs	r0, r5
 800402c:	f00f f9c0 	bl	80133b0 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004030:	0029      	movs	r1, r5
 8004032:	0020      	movs	r0, r4
 8004034:	f00f f9dc 	bl	80133f0 <strcat>
 8004038:	3601      	adds	r6, #1
 800403a:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++){
 800403c:	2e07      	cmp	r6, #7
 800403e:	d018      	beq.n	8004072 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ee      	beq.n	8004024 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004048:	f007 fb22 	bl	800b690 <GetPort>
 800404c:	0005      	movs	r5, r0
 800404e:	00b3      	lsls	r3, r6, #2
 8004050:	3b04      	subs	r3, #4
 8004052:	4a4a      	ldr	r2, [pc, #296]	; (800417c <DisplayModuleStatus+0x2a4>)
 8004054:	58d0      	ldr	r0, [r2, r3]
 8004056:	f007 fb1b 	bl	800b690 <GetPort>
 800405a:	9000      	str	r0, [sp, #0]
 800405c:	002b      	movs	r3, r5
 800405e:	0032      	movs	r2, r6
 8004060:	4947      	ldr	r1, [pc, #284]	; (8004180 <DisplayModuleStatus+0x2a8>)
 8004062:	4831      	ldr	r0, [pc, #196]	; (8004128 <DisplayModuleStatus+0x250>)
 8004064:	f00f f9a4 	bl	80133b0 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004068:	492f      	ldr	r1, [pc, #188]	; (8004128 <DisplayModuleStatus+0x250>)
 800406a:	0020      	movs	r0, r4
 800406c:	f00f f9c0 	bl	80133f0 <strcat>
 8004070:	e7e2      	b.n	8004038 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004072:	0020      	movs	r0, r4
 8004074:	f7fc f850 	bl	8000118 <strlen>
 8004078:	1820      	adds	r0, r4, r0
 800407a:	2203      	movs	r2, #3
 800407c:	4941      	ldr	r1, [pc, #260]	; (8004184 <DisplayModuleStatus+0x2ac>)
 800407e:	f00e ff94 	bl	8012faa <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004082:	0020      	movs	r0, r4
 8004084:	f7fc f848 	bl	8000118 <strlen>
 8004088:	1820      	adds	r0, r4, r0
 800408a:	221d      	movs	r2, #29
 800408c:	493e      	ldr	r1, [pc, #248]	; (8004188 <DisplayModuleStatus+0x2b0>)
 800408e:	f00e ff8c 	bl	8012faa <memcpy>
	temp =strlen((char* )pcOutputString);
 8004092:	0020      	movs	r0, r4
 8004094:	f7fc f840 	bl	8000118 <strlen>
 8004098:	4682      	mov	sl, r0
 800409a:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800409c:	4f3b      	ldr	r7, [pc, #236]	; (800418c <DisplayModuleStatus+0x2b4>)
 800409e:	4e21      	ldr	r6, [pc, #132]	; (8004124 <DisplayModuleStatus+0x24c>)
 80040a0:	e002      	b.n	80040a8 <DisplayModuleStatus+0x1d0>
 80040a2:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040a4:	2d06      	cmp	r5, #6
 80040a6:	d013      	beq.n	80040d0 <DisplayModuleStatus+0x1f8>
 80040a8:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040aa:	7833      	ldrb	r3, [r6, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	5bd9      	ldrh	r1, [r3, r7]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4113      	asrs	r3, r2
 80040b8:	420b      	tst	r3, r1
 80040ba:	d0f2      	beq.n	80040a2 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040bc:	002a      	movs	r2, r5
 80040be:	4934      	ldr	r1, [pc, #208]	; (8004190 <DisplayModuleStatus+0x2b8>)
 80040c0:	4819      	ldr	r0, [pc, #100]	; (8004128 <DisplayModuleStatus+0x250>)
 80040c2:	f00f f975 	bl	80133b0 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040c6:	4918      	ldr	r1, [pc, #96]	; (8004128 <DisplayModuleStatus+0x250>)
 80040c8:	0020      	movs	r0, r4
 80040ca:	f00f f991 	bl	80133f0 <strcat>
 80040ce:	e7e8      	b.n	80040a2 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040d0:	0020      	movs	r0, r4
 80040d2:	f7fc f821 	bl	8000118 <strlen>
 80040d6:	4653      	mov	r3, sl
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	4298      	cmp	r0, r3
 80040de:	d00e      	beq.n	80040fe <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040e0:	0020      	movs	r0, r4
 80040e2:	f7fc f819 	bl	8000118 <strlen>
 80040e6:	1820      	adds	r0, r4, r0
 80040e8:	2203      	movs	r2, #3
 80040ea:	4926      	ldr	r1, [pc, #152]	; (8004184 <DisplayModuleStatus+0x2ac>)
 80040ec:	f00e ff5d 	bl	8012faa <memcpy>
	
	/* Display output */
	if(port)
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80040f6:	b004      	add	sp, #16
 80040f8:	bc04      	pop	{r2}
 80040fa:	4692      	mov	sl, r2
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80040fe:	1820      	adds	r0, r4, r0
 8004100:	2205      	movs	r2, #5
 8004102:	4924      	ldr	r1, [pc, #144]	; (8004194 <DisplayModuleStatus+0x2bc>)
 8004104:	f00e ff51 	bl	8012faa <memcpy>
 8004108:	e7ea      	b.n	80040e0 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800410a:	0020      	movs	r0, r4
 800410c:	f7fc f804 	bl	8000118 <strlen>
 8004110:	b282      	uxth	r2, r0
 8004112:	2301      	movs	r3, #1
 8004114:	425b      	negs	r3, r3
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	3333      	adds	r3, #51	; 0x33
 800411a:	0021      	movs	r1, r4
 800411c:	9803      	ldr	r0, [sp, #12]
 800411e:	f009 f95d 	bl	800d3dc <writePxMutex>
}
 8004122:	e7e8      	b.n	80040f6 <DisplayModuleStatus+0x21e>
 8004124:	20001076 	.word	0x20001076
 8004128:	200010a8 	.word	0x200010a8
 800412c:	080178c8 	.word	0x080178c8
 8004130:	20000a77 	.word	0x20000a77
 8004134:	080178e4 	.word	0x080178e4
 8004138:	08017900 	.word	0x08017900
 800413c:	08017920 	.word	0x08017920
 8004140:	0801792c 	.word	0x0801792c
 8004144:	08017944 	.word	0x08017944
 8004148:	08017950 	.word	0x08017950
 800414c:	0801796c 	.word	0x0801796c
 8004150:	200010f8 	.word	0x200010f8
 8004154:	08017988 	.word	0x08017988
 8004158:	08017980 	.word	0x08017980
 800415c:	080178a4 	.word	0x080178a4
 8004160:	08017990 	.word	0x08017990
 8004164:	080179a8 	.word	0x080179a8
 8004168:	080179b4 	.word	0x080179b4
 800416c:	080179d0 	.word	0x080179d0
 8004170:	080179f0 	.word	0x080179f0
 8004174:	20001994 	.word	0x20001994
 8004178:	08017a08 	.word	0x08017a08
 800417c:	200014a8 	.word	0x200014a8
 8004180:	08017a24 	.word	0x08017a24
 8004184:	0801797c 	.word	0x0801797c
 8004188:	08017a54 	.word	0x08017a54
 800418c:	20006e40 	.word	0x20006e40
 8004190:	08017a74 	.word	0x08017a74
 8004194:	08017a7c 	.word	0x08017a7c

08004198 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	46c6      	mov	lr, r8
 800419c:	b500      	push	{lr}
 800419e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041a0:	4929      	ldr	r1, [pc, #164]	; (8004248 <GetID+0xb0>)
 80041a2:	f7fb ffaf 	bl	8000104 <strcmp>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d010      	beq.n	80041cc <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 80041aa:	4928      	ldr	r1, [pc, #160]	; (800424c <GetID+0xb4>)
 80041ac:	0028      	movs	r0, r5
 80041ae:	f7fb ffa9 	bl	8000104 <strcmp>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d045      	beq.n	8004242 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041b6:	782b      	ldrb	r3, [r5, #0]
 80041b8:	4698      	mov	r8, r3
 80041ba:	2b23      	cmp	r3, #35	; 0x23
 80041bc:	d00b      	beq.n	80041d6 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <GetID+0xb8>)
 80041c0:	781f      	ldrb	r7, [r3, #0]
 80041c2:	2f00      	cmp	r7, #0
 80041c4:	d02a      	beq.n	800421c <GetID+0x84>
 80041c6:	4e23      	ldr	r6, [pc, #140]	; (8004254 <GetID+0xbc>)
 80041c8:	2400      	movs	r4, #0
 80041ca:	e01c      	b.n	8004206 <GetID+0x6e>
		return myID;
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <GetID+0xc0>)
 80041ce:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 80041d0:	bc04      	pop	{r2}
 80041d2:	4690      	mov	r8, r2
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 80041d6:	1c68      	adds	r0, r5, #1
 80041d8:	f00e fc5d 	bl	8012a96 <atol>
 80041dc:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <GetID+0x52>
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <GetID+0xb8>)
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d206      	bcs.n	80041f8 <GetID+0x60>
		else if(id == myID)
 80041ea:	4a1b      	ldr	r2, [pc, #108]	; (8004258 <GetID+0xc0>)
 80041ec:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 80041ee:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1ed      	bne.n	80041d0 <GetID+0x38>
			return myID;
 80041f4:	b210      	sxth	r0, r2
 80041f6:	e7eb      	b.n	80041d0 <GetID+0x38>
			return id;
 80041f8:	b218      	sxth	r0, r3
 80041fa:	e7e9      	b.n	80041d0 <GetID+0x38>
		for(i =0; i < N; i++){
 80041fc:	3401      	adds	r4, #1
 80041fe:	b2e4      	uxtb	r4, r4
 8004200:	360a      	adds	r6, #10
 8004202:	42bc      	cmp	r4, r7
 8004204:	d00a      	beq.n	800421c <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004206:	0031      	movs	r1, r6
 8004208:	0028      	movs	r0, r5
 800420a:	f7fb ff7b 	bl	8000104 <strcmp>
 800420e:	2800      	cmp	r0, #0
 8004210:	d1f4      	bne.n	80041fc <GetID+0x64>
 8004212:	4643      	mov	r3, r8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f1      	beq.n	80041fc <GetID+0x64>
				return (i);
 8004218:	b220      	sxth	r0, r4
 800421a:	e7d9      	b.n	80041d0 <GetID+0x38>
 800421c:	4f0f      	ldr	r7, [pc, #60]	; (800425c <GetID+0xc4>)
		for(i =0; i < N; i++){
 800421e:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 8004220:	0039      	movs	r1, r7
 8004222:	0028      	movs	r0, r5
 8004224:	f7fb ff6e 	bl	8000104 <strcmp>
 8004228:	2800      	cmp	r0, #0
 800422a:	d005      	beq.n	8004238 <GetID+0xa0>
 800422c:	3601      	adds	r6, #1
 800422e:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004230:	2e0a      	cmp	r6, #10
 8004232:	d1f5      	bne.n	8004220 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004234:	2064      	movs	r0, #100	; 0x64
 8004236:	e7cb      	b.n	80041d0 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 8004238:	0234      	lsls	r4, r6, #8
 800423a:	20fe      	movs	r0, #254	; 0xfe
 800423c:	4320      	orrs	r0, r4
 800423e:	b200      	sxth	r0, r0
 8004240:	e7c6      	b.n	80041d0 <GetID+0x38>
		return BOS_BROADCAST;
 8004242:	20ff      	movs	r0, #255	; 0xff
 8004244:	e7c4      	b.n	80041d0 <GetID+0x38>
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	08017b08 	.word	0x08017b08
 800424c:	08017b0c 	.word	0x08017b0c
 8004250:	2000001c 	.word	0x2000001c
 8004254:	20000f68 	.word	0x20000f68
 8004258:	20001076 	.word	0x20001076
 800425c:	20000e5c 	.word	0x20000e5c

08004260 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b083      	sub	sp, #12
 8004264:	9001      	str	r0, [sp, #4]
 8004266:	000d      	movs	r5, r1
 8004268:	4c2a      	ldr	r4, [pc, #168]	; (8004314 <NameModule+0xb4>)
 800426a:	0027      	movs	r7, r4
 800426c:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800426e:	0021      	movs	r1, r4
 8004270:	0028      	movs	r0, r5
 8004272:	f7fb ff47 	bl	8000104 <strcmp>
 8004276:	2800      	cmp	r0, #0
 8004278:	d043      	beq.n	8004302 <NameModule+0xa2>
 800427a:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800427c:	42bc      	cmp	r4, r7
 800427e:	d1f6      	bne.n	800426e <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <NameModule+0xb8>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d90f      	bls.n	80042a8 <NameModule+0x48>
 8004288:	4c24      	ldr	r4, [pc, #144]	; (800431c <NameModule+0xbc>)
 800428a:	009f      	lsls	r7, r3, #2
 800428c:	18ff      	adds	r7, r7, r3
 800428e:	007f      	lsls	r7, r7, #1
 8004290:	0023      	movs	r3, r4
 8004292:	3b0a      	subs	r3, #10
 8004294:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8004296:	0021      	movs	r1, r4
 8004298:	0028      	movs	r0, r5
 800429a:	f7fb ff33 	bl	8000104 <strcmp>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d031      	beq.n	8004306 <NameModule+0xa6>
 80042a2:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 80042a4:	42bc      	cmp	r4, r7
 80042a6:	d1f6      	bne.n	8004296 <NameModule+0x36>
 80042a8:	4c1d      	ldr	r4, [pc, #116]	; (8004320 <NameModule+0xc0>)
 80042aa:	0027      	movs	r7, r4
 80042ac:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 80042ae:	0021      	movs	r1, r4
 80042b0:	0028      	movs	r0, r5
 80042b2:	f7fb ff27 	bl	8000104 <strcmp>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d028      	beq.n	800430c <NameModule+0xac>
 80042ba:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 80042bc:	42bc      	cmp	r4, r7
 80042be:	d1f6      	bne.n	80042ae <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042c0:	4c18      	ldr	r4, [pc, #96]	; (8004324 <NameModule+0xc4>)
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <NameModule+0xc8>)
 80042c4:	601c      	str	r4, [r3, #0]
 80042c6:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80042cc:	0038      	movs	r0, r7
 80042ce:	f7fb ff23 	bl	8000118 <strlen>
 80042d2:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80042d4:	0039      	movs	r1, r7
 80042d6:	0028      	movs	r0, r5
 80042d8:	f00f f8ae 	bl	8013438 <strncmp>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d017      	beq.n	8004310 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042e0:	6864      	ldr	r4, [r4, #4]
 80042e2:	6034      	str	r4, [r6, #0]
 80042e4:	2c00      	cmp	r4, #0
 80042e6:	d1ef      	bne.n	80042c8 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	0098      	lsls	r0, r3, #2
 80042ec:	469c      	mov	ip, r3
 80042ee:	4460      	add	r0, ip
 80042f0:	0040      	lsls	r0, r0, #1
 80042f2:	4e0e      	ldr	r6, [pc, #56]	; (800432c <NameModule+0xcc>)
 80042f4:	1980      	adds	r0, r0, r6
 80042f6:	0029      	movs	r1, r5
 80042f8:	f00f f896 	bl	8013428 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80042fc:	f7ff f8a6 	bl	800344c <SaveEEalias>
	
	return result;
 8004300:	e002      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004302:	2006      	movs	r0, #6
 8004304:	e000      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 8004306:	2007      	movs	r0, #7
}
 8004308:	b003      	add	sp, #12
 800430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800430c:	2007      	movs	r0, #7
 800430e:	e7fb      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004310:	2008      	movs	r0, #8
 8004312:	e7f9      	b.n	8004308 <NameModule+0xa8>
 8004314:	080178b8 	.word	0x080178b8
 8004318:	2000001c 	.word	0x2000001c
 800431c:	20000f72 	.word	0x20000f72
 8004320:	20000e5c 	.word	0x20000e5c
 8004324:	20000098 	.word	0x20000098
 8004328:	20001100 	.word	0x20001100
 800432c:	20000f68 	.word	0x20000f68

08004330 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	46c6      	mov	lr, r8
 8004334:	b500      	push	{lr}
 8004336:	0007      	movs	r7, r0
 8004338:	000e      	movs	r6, r1
 800433a:	4d3a      	ldr	r5, [pc, #232]	; (8004424 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 800433c:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800433e:	0029      	movs	r1, r5
 8004340:	0030      	movs	r0, r6
 8004342:	f7fb fedf 	bl	8000104 <strcmp>
 8004346:	2800      	cmp	r0, #0
 8004348:	d050      	beq.n	80043ec <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 800434a:	3401      	adds	r4, #1
 800434c:	350a      	adds	r5, #10
 800434e:	2c0a      	cmp	r4, #10
 8004350:	d1f5      	bne.n	800433e <AddModuleToGroup+0xe>
 8004352:	4c35      	ldr	r4, [pc, #212]	; (8004428 <AddModuleToGroup+0xf8>)
 8004354:	0025      	movs	r5, r4
 8004356:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004358:	0021      	movs	r1, r4
 800435a:	0030      	movs	r0, r6
 800435c:	f7fb fed2 	bl	8000104 <strcmp>
 8004360:	2800      	cmp	r0, #0
 8004362:	d058      	beq.n	8004416 <AddModuleToGroup+0xe6>
 8004364:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004366:	42ac      	cmp	r4, r5
 8004368:	d1f6      	bne.n	8004358 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800436a:	4b30      	ldr	r3, [pc, #192]	; (800442c <AddModuleToGroup+0xfc>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d90f      	bls.n	8004392 <AddModuleToGroup+0x62>
 8004372:	4c2f      	ldr	r4, [pc, #188]	; (8004430 <AddModuleToGroup+0x100>)
 8004374:	009d      	lsls	r5, r3, #2
 8004376:	18ed      	adds	r5, r5, r3
 8004378:	006d      	lsls	r5, r5, #1
 800437a:	0023      	movs	r3, r4
 800437c:	3b0a      	subs	r3, #10
 800437e:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8004380:	0021      	movs	r1, r4
 8004382:	0030      	movs	r0, r6
 8004384:	f7fb febe 	bl	8000104 <strcmp>
 8004388:	2800      	cmp	r0, #0
 800438a:	d046      	beq.n	800441a <AddModuleToGroup+0xea>
 800438c:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 800438e:	42ac      	cmp	r4, r5
 8004390:	d1f6      	bne.n	8004380 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004392:	4c28      	ldr	r4, [pc, #160]	; (8004434 <AddModuleToGroup+0x104>)
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <AddModuleToGroup+0x108>)
 8004396:	601c      	str	r4, [r3, #0]
 8004398:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800439e:	0028      	movs	r0, r5
 80043a0:	f7fb feba 	bl	8000118 <strlen>
 80043a4:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80043a6:	0029      	movs	r1, r5
 80043a8:	0030      	movs	r0, r6
 80043aa:	f00f f845 	bl	8013438 <strncmp>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d035      	beq.n	800441e <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043b2:	6864      	ldr	r4, [r4, #4]
 80043b4:	4643      	mov	r3, r8
 80043b6:	601c      	str	r4, [r3, #0]
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1ee      	bne.n	800439a <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <AddModuleToGroup+0xf4>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01e      	beq.n	8004402 <AddModuleToGroup+0xd2>
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <AddModuleToGroup+0xf4>)
 80043c6:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 80043c8:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d019      	beq.n	8004404 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 80043d0:	3401      	adds	r4, #1
 80043d2:	330a      	adds	r3, #10
 80043d4:	2c0a      	cmp	r4, #10
 80043d6:	d1f8      	bne.n	80043ca <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 80043d8:	3f01      	subs	r7, #1
 80043da:	4918      	ldr	r1, [pc, #96]	; (800443c <AddModuleToGroup+0x10c>)
 80043dc:	007f      	lsls	r7, r7, #1
 80043de:	2201      	movs	r2, #1
 80043e0:	40a2      	lsls	r2, r4
 80043e2:	5a7b      	ldrh	r3, [r7, r1]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 80043e8:	2000      	movs	r0, #0
 80043ea:	e007      	b.n	80043fc <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 80043ec:	3f01      	subs	r7, #1
 80043ee:	4913      	ldr	r1, [pc, #76]	; (800443c <AddModuleToGroup+0x10c>)
 80043f0:	007f      	lsls	r7, r7, #1
 80043f2:	2201      	movs	r2, #1
 80043f4:	40a2      	lsls	r2, r4
 80043f6:	5a7b      	ldrh	r3, [r7, r1]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	527b      	strh	r3, [r7, r1]
}
 80043fc:	bc04      	pop	{r2}
 80043fe:	4690      	mov	r8, r2
 8004400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 8004402:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8004404:	00a0      	lsls	r0, r4, #2
 8004406:	1900      	adds	r0, r0, r4
 8004408:	0040      	lsls	r0, r0, #1
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <AddModuleToGroup+0xf4>)
 800440c:	1818      	adds	r0, r3, r0
 800440e:	0031      	movs	r1, r6
 8004410:	f00f f80a 	bl	8013428 <strcpy>
			break;
 8004414:	e7e0      	b.n	80043d8 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 8004416:	2006      	movs	r0, #6
 8004418:	e7f0      	b.n	80043fc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800441a:	2007      	movs	r0, #7
 800441c:	e7ee      	b.n	80043fc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 800441e:	2008      	movs	r0, #8
 8004420:	e7ec      	b.n	80043fc <AddModuleToGroup+0xcc>
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000e5c 	.word	0x20000e5c
 8004428:	080178b8 	.word	0x080178b8
 800442c:	2000001c 	.word	0x2000001c
 8004430:	20000f72 	.word	0x20000f72
 8004434:	20000098 	.word	0x20000098
 8004438:	20001104 	.word	0x20001104
 800443c:	20000ec0 	.word	0x20000ec0

08004440 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	46ce      	mov	lr, r9
 8004444:	4647      	mov	r7, r8
 8004446:	b580      	push	{r7, lr}
 8004448:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <ReadPortsDir+0x9c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d03c      	beq.n	80044cc <ReadPortsDir+0x8c>
 8004452:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	9301      	str	r3, [sp, #4]
		if(i != myID){
 8004458:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <ReadPortsDir+0xa0>)
 800445a:	4699      	mov	r9, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <ReadPortsDir+0xa4>)
 800445e:	4698      	mov	r8, r3
 8004460:	e021      	b.n	80044a6 <ReadPortsDir+0x66>
 8004462:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004464:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004466:	2780      	movs	r7, #128	; 0x80
 8004468:	023f      	lsls	r7, r7, #8
 800446a:	e004      	b.n	8004476 <ReadPortsDir+0x36>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 800446c:	3401      	adds	r4, #1
 800446e:	b2e4      	uxtb	r4, r4
 8004470:	3601      	adds	r6, #1
 8004472:	2c07      	cmp	r4, #7
 8004474:	d011      	beq.n	800449a <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004476:	0020      	movs	r0, r4
 8004478:	f008 ff8e 	bl	800d398 <GetUart>
 800447c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800447e:	42bb      	cmp	r3, r7
 8004480:	d1f4      	bne.n	800446c <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <ReadPortsDir+0xa0>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4642      	mov	r2, r8
 800448c:	5a9a      	ldrh	r2, [r3, r2]
 800448e:	0039      	movs	r1, r7
 8004490:	4131      	asrs	r1, r6
 8004492:	430a      	orrs	r2, r1
 8004494:	4641      	mov	r1, r8
 8004496:	525a      	strh	r2, [r3, r1]
 8004498:	e7e8      	b.n	800446c <ReadPortsDir+0x2c>
	for(uint8_t i =1; i <= N; i++){
 800449a:	3501      	adds	r5, #1
 800449c:	b2ed      	uxtb	r5, r5
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <ReadPortsDir+0x9c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	42ab      	cmp	r3, r5
 80044a4:	d314      	bcc.n	80044d0 <ReadPortsDir+0x90>
		if(i != myID){
 80044a6:	464b      	mov	r3, r9
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	42ab      	cmp	r3, r5
 80044ac:	d0d9      	beq.n	8004462 <ReadPortsDir+0x22>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80044ae:	2200      	movs	r2, #0
 80044b0:	2113      	movs	r1, #19
 80044b2:	0028      	movs	r0, r5
 80044b4:	f005 f906 	bl	80096c4 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044b8:	2032      	movs	r0, #50	; 0x32
 80044ba:	f008 fd93 	bl	800cfe4 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <ReadPortsDir+0xa8>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0e9      	beq.n	800449a <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 80044c6:	2302      	movs	r3, #2
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	e7e6      	b.n	800449a <ReadPortsDir+0x5a>
	BOS_Status result =BOS_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 80044d0:	9801      	ldr	r0, [sp, #4]
 80044d2:	b003      	add	sp, #12
 80044d4:	bc0c      	pop	{r2, r3}
 80044d6:	4690      	mov	r8, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044dc:	2000001c 	.word	0x2000001c
 80044e0:	20001076 	.word	0x20001076
 80044e4:	20006e40 	.word	0x20006e40
 80044e8:	20001110 	.word	0x20001110

080044ec <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	46c6      	mov	lr, r8
 80044f0:	b500      	push	{lr}
 80044f2:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80044f4:	2401      	movs	r4, #1
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <UpdateMyPortsDir+0x54>)
 80044f8:	4698      	mov	r8, r3
 80044fa:	4f12      	ldr	r7, [pc, #72]	; (8004544 <UpdateMyPortsDir+0x58>)
 80044fc:	2680      	movs	r6, #128	; 0x80
 80044fe:	0236      	lsls	r6, r6, #8
 8004500:	e00a      	b.n	8004518 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004502:	0020      	movs	r0, r4
 8004504:	f008 ff48 	bl	800d398 <GetUart>
 8004508:	2101      	movs	r1, #1
 800450a:	f008 ffdf 	bl	800d4cc <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800450e:	3401      	adds	r4, #1
 8004510:	b2e4      	uxtb	r4, r4
 8004512:	3501      	adds	r5, #1
 8004514:	2c07      	cmp	r4, #7
 8004516:	d00f      	beq.n	8004538 <UpdateMyPortsDir+0x4c>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004518:	783b      	ldrb	r3, [r7, #0]
 800451a:	3b01      	subs	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4642      	mov	r2, r8
 8004520:	5a9b      	ldrh	r3, [r3, r2]
 8004522:	0032      	movs	r2, r6
 8004524:	412a      	asrs	r2, r5
 8004526:	421a      	tst	r2, r3
 8004528:	d1eb      	bne.n	8004502 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p),NORMAL);
 800452a:	0020      	movs	r0, r4
 800452c:	f008 ff34 	bl	800d398 <GetUart>
 8004530:	2100      	movs	r1, #0
 8004532:	f008 ffcb 	bl	800d4cc <SwapUartPins>
 8004536:	e7ea      	b.n	800450e <UpdateMyPortsDir+0x22>
		}
	}
	
	return result;
}
 8004538:	2000      	movs	r0, #0
 800453a:	bc04      	pop	{r2}
 800453c:	4690      	mov	r8, r2
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004540:	20006e40 	.word	0x20006e40
 8004544:	20001076 	.word	0x20001076

08004548 <BOS_Init>:
void BOS_Init(void){
 8004548:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 800454a:	f008 fc03 	bl	800cd54 <RTC_Init>
	GetTimeDate();
 800454e:	f008 fca1 	bl	800ce94 <GetTimeDate>
	EE_Init();
 8004552:	f003 fa51 	bl	80079f8 <EE_Init>
	GPIO_Init();
 8004556:	f008 f96b 	bl	800c830 <GPIO_Init>
	DMA_Init();
 800455a:	f007 f8eb 	bl	800b734 <DMA_Init>
	TIM_USEC_Init();
 800455e:	f008 fccd 	bl	800cefc <TIM_USEC_Init>
	CRC_Init();
 8004562:	f008 f911 	bl	800c788 <CRC_Init>
	TIM_MSEC_Init();
 8004566:	f008 fcfb 	bl	800cf60 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 800456a:	f008 fa03 	bl	800c974 <IsFactoryReset>
 800456e:	2800      	cmp	r0, #0
 8004570:	d11a      	bne.n	80045a8 <BOS_Init+0x60>
	if(IsLowerCLIbaud()){
 8004572:	f7ff f86d 	bl	8003650 <IsLowerCLIbaud>
 8004576:	2800      	cmp	r0, #0
 8004578:	d021      	beq.n	80045be <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <BOS_Init+0x10c>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004580:	2032      	movs	r0, #50	; 0x32
 8004582:	f008 fd2f 	bl	800cfe4 <StartMilliDelay>
		Module_Peripheral_Init();
 8004586:	f007 f867 	bl	800b658 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800458a:	4b33      	ldr	r3, [pc, #204]	; (8004658 <BOS_Init+0x110>)
 800458c:	22e1      	movs	r2, #225	; 0xe1
 800458e:	0252      	lsls	r2, r2, #9
 8004590:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004592:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 8004594:	001d      	movs	r5, r3
 8004596:	68a9      	ldr	r1, [r5, #8]
 8004598:	0020      	movs	r0, r4
 800459a:	f008 ff8d 	bl	800d4b8 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800459e:	3401      	adds	r4, #1
 80045a0:	b2e4      	uxtb	r4, r4
 80045a2:	2c07      	cmp	r4, #7
 80045a4:	d1f7      	bne.n	8004596 <BOS_Init+0x4e>
 80045a6:	e00f      	b.n	80045c8 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80045a8:	f7ff f840 	bl	800362c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045ac:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b0:	4b2a      	ldr	r3, [pc, #168]	; (800465c <BOS_Init+0x114>)
 80045b2:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <BOS_Init+0x118>)
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	e7fd      	b.n	80045ba <BOS_Init+0x72>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045be:	2032      	movs	r0, #50	; 0x32
 80045c0:	f008 fd10 	bl	800cfe4 <StartMilliDelay>
		Module_Peripheral_Init();
 80045c4:	f007 f848 	bl	800b658 <Module_Peripheral_Init>
	LoadEEvars();
 80045c8:	f7fe ff04 	bl	80033d4 <LoadEEvars>
	UpdateMyPortsDir();
 80045cc:	f7ff ff8e 	bl	80044ec <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 80045d0:	f007 fd18 	bl	800c004 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 80045d4:	4b23      	ldr	r3, [pc, #140]	; (8004664 <BOS_Init+0x11c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d027      	beq.n	800462c <BOS_Init+0xe4>
		IND_ON();
 80045dc:	2580      	movs	r5, #128	; 0x80
 80045de:	012d      	lsls	r5, r5, #4
 80045e0:	2490      	movs	r4, #144	; 0x90
 80045e2:	05e4      	lsls	r4, r4, #23
 80045e4:	2201      	movs	r2, #1
 80045e6:	0029      	movs	r1, r5
 80045e8:	0020      	movs	r0, r4
 80045ea:	f00c fcb9 	bl	8010f60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80045ee:	20fa      	movs	r0, #250	; 0xfa
 80045f0:	0040      	lsls	r0, r0, #1
 80045f2:	f008 fcf7 	bl	800cfe4 <StartMilliDelay>
		IND_OFF();
 80045f6:	2200      	movs	r2, #0
 80045f8:	0029      	movs	r1, r5
 80045fa:	0020      	movs	r0, r4
 80045fc:	f00c fcb0 	bl	8010f60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004600:	2064      	movs	r0, #100	; 0x64
 8004602:	f008 fcef 	bl	800cfe4 <StartMilliDelay>
		IND_ON();
 8004606:	2201      	movs	r2, #1
 8004608:	0029      	movs	r1, r5
 800460a:	0020      	movs	r0, r4
 800460c:	f00c fca8 	bl	8010f60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004610:	2064      	movs	r0, #100	; 0x64
 8004612:	f008 fce7 	bl	800cfe4 <StartMilliDelay>
		IND_OFF();
 8004616:	2200      	movs	r2, #0
 8004618:	0029      	movs	r1, r5
 800461a:	0020      	movs	r0, r4
 800461c:	f00c fca0 	bl	8010f60 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004620:	f003 f826 	bl	8007670 <ResetUartORE>
	BOS_initialized =1;
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <BOS_Init+0x120>)
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
}
 800462a:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 800462c:	2580      	movs	r5, #128	; 0x80
 800462e:	012d      	lsls	r5, r5, #4
 8004630:	2490      	movs	r4, #144	; 0x90
 8004632:	05e4      	lsls	r4, r4, #23
 8004634:	2201      	movs	r2, #1
 8004636:	0029      	movs	r1, r5
 8004638:	0020      	movs	r0, r4
 800463a:	f00c fc91 	bl	8010f60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800463e:	20fa      	movs	r0, #250	; 0xfa
 8004640:	0040      	lsls	r0, r0, #1
 8004642:	f008 fccf 	bl	800cfe4 <StartMilliDelay>
 8004646:	2200      	movs	r2, #0
 8004648:	0029      	movs	r1, r5
 800464a:	0020      	movs	r0, r4
 800464c:	f00c fc88 	bl	8010f60 <HAL_GPIO_WritePin>
 8004650:	e7e6      	b.n	8004620 <BOS_Init+0xd8>
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	20000a76 	.word	0x20000a76
 8004658:	200069c4 	.word	0x200069c4
 800465c:	e000ed00 	.word	0xe000ed00
 8004660:	05fa0004 	.word	0x05fa0004
 8004664:	20001076 	.word	0x20001076
 8004668:	20000a75 	.word	0x20000a75

0800466c <Module_Init>:
void Module_Init(void){
 800466c:	b510      	push	{r4, lr}
	HAL_Init();
 800466e:	f00a ffef 	bl	800f650 <HAL_Init>
	SystemClock_Config();
 8004672:	f006 fe7b 	bl	800b36c <SystemClock_Config>
	BOS_Init();
 8004676:	f7ff ff67 	bl	8004548 <BOS_Init>
	MX_FREERTOS_Init();
 800467a:	f003 fbe7 	bl	8007e4c <MX_FREERTOS_Init>
	osKernelStart();
 800467e:	f008 ffd5 	bl	800d62c <osKernelStart>
}
 8004682:	bd10      	pop	{r4, pc}

08004684 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004684:	b510      	push	{r4, lr}
 8004686:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004688:	201e      	movs	r0, #30
 800468a:	f00e fa41 	bl	8012b10 <malloc>
 800468e:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004690:	221e      	movs	r2, #30
 8004692:	2100      	movs	r1, #0
 8004694:	f00e fc92 	bl	8012fbc <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004698:	4908      	ldr	r1, [pc, #32]	; (80046bc <GetDateString+0x38>)
 800469a:	7d8b      	ldrb	r3, [r1, #22]
 800469c:	7d0a      	ldrb	r2, [r1, #20]
 800469e:	3a01      	subs	r2, #1
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4807      	ldr	r0, [pc, #28]	; (80046c0 <GetDateString+0x3c>)
 80046a4:	5812      	ldr	r2, [r2, r0]
 80046a6:	8b08      	ldrh	r0, [r1, #24]
 80046a8:	9001      	str	r0, [sp, #4]
 80046aa:	7d49      	ldrb	r1, [r1, #21]
 80046ac:	9100      	str	r1, [sp, #0]
 80046ae:	4905      	ldr	r1, [pc, #20]	; (80046c4 <GetDateString+0x40>)
 80046b0:	0020      	movs	r0, r4
 80046b2:	f00e fe7d 	bl	80133b0 <sprintf>
	return buffer;
}
 80046b6:	0020      	movs	r0, r4
 80046b8:	b002      	add	sp, #8
 80046ba:	bd10      	pop	{r4, pc}
 80046bc:	200069c4 	.word	0x200069c4
 80046c0:	08017e1c 	.word	0x08017e1c
 80046c4:	08017b28 	.word	0x08017b28

080046c8 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 80046c8:	b500      	push	{lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <Bridge+0x24>)
 80046d0:	7819      	ldrb	r1, [r3, #0]
 80046d2:	2301      	movs	r3, #1
 80046d4:	9303      	str	r3, [sp, #12]
 80046d6:	3b02      	subs	r3, #2
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	3303      	adds	r3, #3
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	000b      	movs	r3, r1
 80046e2:	f005 f815 	bl	8009710 <StartScastDMAStream>
}
 80046e6:	b005      	add	sp, #20
 80046e8:	bd00      	pop	{pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	20001076 	.word	0x20001076

080046f0 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80046f0:	b530      	push	{r4, r5, lr}
 80046f2:	b087      	sub	sp, #28
 80046f4:	0004      	movs	r4, r0
 80046f6:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80046f8:	2300      	movs	r3, #0
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	9303      	str	r3, [sp, #12]
 80046fe:	9302      	str	r3, [sp, #8]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	2100      	movs	r1, #0
 8004708:	2000      	movs	r0, #0
 800470a:	f7fe fee1 	bl	80034d0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800470e:	1e62      	subs	r2, r4, #1
 8004710:	00d3      	lsls	r3, r2, #3
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4a14      	ldr	r2, [pc, #80]	; (8004768 <Unbridge+0x78>)
 8004718:	589b      	ldr	r3, [r3, r2]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d015      	beq.n	800474a <Unbridge+0x5a>
 800471e:	1e6a      	subs	r2, r5, #1
 8004720:	00d3      	lsls	r3, r2, #3
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <Unbridge+0x78>)
 8004728:	589b      	ldr	r3, [r3, r2]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 800472e:	0020      	movs	r0, r4
 8004730:	f002 ff12 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004734:	2000      	movs	r0, #0
 8004736:	e006      	b.n	8004746 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004738:	0020      	movs	r0, r4
 800473a:	f002 ff0d 	bl	8007558 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800473e:	0028      	movs	r0, r5
 8004740:	f002 ff0a 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004744:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004746:	b007      	add	sp, #28
 8004748:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 800474a:	1e6a      	subs	r2, r5, #1
 800474c:	00d3      	lsls	r3, r2, #3
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4a05      	ldr	r2, [pc, #20]	; (8004768 <Unbridge+0x78>)
 8004754:	589b      	ldr	r3, [r3, r2]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 800475a:	0028      	movs	r0, r5
 800475c:	f002 fefc 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004760:	2000      	movs	r0, #0
 8004762:	e7f0      	b.n	8004746 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 8004764:	2068      	movs	r0, #104	; 0x68
 8004766:	e7ee      	b.n	8004746 <Unbridge+0x56>
 8004768:	20001994 	.word	0x20001994

0800476c <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004770:	7804      	ldrb	r4, [r0, #0]
 8004772:	2c00      	cmp	r4, #0
 8004774:	d010      	beq.n	8004798 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004776:	2603      	movs	r6, #3
 8004778:	e004      	b.n	8004784 <StringToLowerCase+0x18>
 800477a:	702a      	strb	r2, [r5, #0]
 800477c:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 800477e:	782c      	ldrb	r4, [r5, #0]
 8004780:	2c00      	cmp	r4, #0
 8004782:	d009      	beq.n	8004798 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004784:	f00e f9b6 	bl	8012af4 <__locale_ctype_ptr>
 8004788:	1900      	adds	r0, r0, r4
 800478a:	7843      	ldrb	r3, [r0, #1]
 800478c:	4033      	ands	r3, r6
 800478e:	0022      	movs	r2, r4
 8004790:	2b01      	cmp	r3, #1
 8004792:	d1f2      	bne.n	800477a <StringToLowerCase+0xe>
 8004794:	3220      	adds	r2, #32
 8004796:	e7f0      	b.n	800477a <StringToLowerCase+0xe>
	}
}
 8004798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800479c <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	46c6      	mov	lr, r8
 80047a0:	b500      	push	{lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80047a6:	4bdc      	ldr	r3, [pc, #880]	; (8004b18 <ParseSnippetCondition+0x37c>)
 80047a8:	781c      	ldrb	r4, [r3, #0]
 80047aa:	2c05      	cmp	r4, #5
 80047ac:	d100      	bne.n	80047b0 <ParseSnippetCondition+0x14>
 80047ae:	e210      	b.n	8004bd2 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80047b0:	49da      	ldr	r1, [pc, #872]	; (8004b1c <ParseSnippetCondition+0x380>)
 80047b2:	00a3      	lsls	r3, r4, #2
 80047b4:	191a      	adds	r2, r3, r4
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	2000      	movs	r0, #0
 80047ba:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 80047bc:	191a      	adds	r2, r3, r4
 80047be:	0092      	lsls	r2, r2, #2
 80047c0:	188a      	adds	r2, r1, r2
 80047c2:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80047c4:	1918      	adds	r0, r3, r4
 80047c6:	0080      	lsls	r0, r0, #2
 80047c8:	3002      	adds	r0, #2
 80047ca:	1840      	adds	r0, r0, r1
 80047cc:	2204      	movs	r2, #4
 80047ce:	2100      	movs	r1, #0
 80047d0:	f00e fbf4 	bl	8012fbc <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 80047d4:	782b      	ldrb	r3, [r5, #0]
 80047d6:	2b62      	cmp	r3, #98	; 0x62
 80047d8:	d102      	bne.n	80047e0 <ParseSnippetCondition+0x44>
 80047da:	78ab      	ldrb	r3, [r5, #2]
 80047dc:	2b2e      	cmp	r3, #46	; 0x2e
 80047de:	d032      	beq.n	8004846 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 80047e0:	4ecf      	ldr	r6, [pc, #828]	; (8004b20 <ParseSnippetCondition+0x384>)
 80047e2:	0029      	movs	r1, r5
 80047e4:	0030      	movs	r0, r6
 80047e6:	f00e fe1f 	bl	8013428 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 80047ea:	4cce      	ldr	r4, [pc, #824]	; (8004b24 <ParseSnippetCondition+0x388>)
 80047ec:	0021      	movs	r1, r4
 80047ee:	0030      	movs	r0, r6
 80047f0:	f00f fc9a 	bl	8014128 <strtok>
 80047f4:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 80047f6:	0021      	movs	r1, r4
 80047f8:	2000      	movs	r0, #0
 80047fa:	f00f fc95 	bl	8014128 <strtok>
 80047fe:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004800:	0021      	movs	r1, r4
 8004802:	2000      	movs	r0, #0
 8004804:	f00f fc90 	bl	8014128 <strtok>
 8004808:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 800480a:	2d00      	cmp	r5, #0
 800480c:	d100      	bne.n	8004810 <ParseSnippetCondition+0x74>
 800480e:	e1e5      	b.n	8004bdc <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004810:	0028      	movs	r0, r5
 8004812:	f7fe ff81 	bl	8003718 <IsModuleParameter>
 8004816:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004818:	d100      	bne.n	800481c <ParseSnippetCondition+0x80>
 800481a:	e18f      	b.n	8004b3c <ParseSnippetCondition+0x3a0>
 800481c:	2e00      	cmp	r6, #0
 800481e:	d000      	beq.n	8004822 <ParseSnippetCondition+0x86>
 8004820:	e18e      	b.n	8004b40 <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 8004822:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004824:	2c00      	cmp	r4, #0
 8004826:	d000      	beq.n	800482a <ParseSnippetCondition+0x8e>
 8004828:	e1d4      	b.n	8004bd4 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 800482a:	4cbb      	ldr	r4, [pc, #748]	; (8004b18 <ParseSnippetCondition+0x37c>)
 800482c:	7823      	ldrb	r3, [r4, #0]
 800482e:	49bb      	ldr	r1, [pc, #748]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004830:	009a      	lsls	r2, r3, #2
 8004832:	18d0      	adds	r0, r2, r3
 8004834:	0080      	lsls	r0, r0, #2
 8004836:	3602      	adds	r6, #2
 8004838:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800483a:	180a      	adds	r2, r1, r0
 800483c:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800483e:	3301      	adds	r3, #1
 8004840:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004842:	2000      	movs	r0, #0
 8004844:	e1c6      	b.n	8004bd4 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004846:	786e      	ldrb	r6, [r5, #1]
 8004848:	3e30      	subs	r6, #48	; 0x30
 800484a:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 800484c:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 800484e:	2e06      	cmp	r6, #6
 8004850:	d900      	bls.n	8004854 <ParseSnippetCondition+0xb8>
 8004852:	e1bf      	b.n	8004bd4 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004854:	4ab1      	ldr	r2, [pc, #708]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004856:	00a3      	lsls	r3, r4, #2
 8004858:	1919      	adds	r1, r3, r4
 800485a:	0089      	lsls	r1, r1, #2
 800485c:	3001      	adds	r0, #1
 800485e:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004860:	1853      	adds	r3, r2, r1
 8004862:	2200      	movs	r2, #0
 8004864:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004866:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004868:	1cef      	adds	r7, r5, #3
 800486a:	3207      	adds	r2, #7
 800486c:	49ae      	ldr	r1, [pc, #696]	; (8004b28 <ParseSnippetCondition+0x38c>)
 800486e:	0038      	movs	r0, r7
 8004870:	f00e fde2 	bl	8013438 <strncmp>
 8004874:	2800      	cmp	r0, #0
 8004876:	d121      	bne.n	80048bc <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004878:	00a3      	lsls	r3, r4, #2
 800487a:	191c      	adds	r4, r3, r4
 800487c:	00a4      	lsls	r4, r4, #2
 800487e:	4ba7      	ldr	r3, [pc, #668]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004880:	191c      	adds	r4, r3, r4
 8004882:	2305      	movs	r3, #5
 8004884:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004886:	00f2      	lsls	r2, r6, #3
 8004888:	1992      	adds	r2, r2, r6
 800488a:	4ba8      	ldr	r3, [pc, #672]	; (8004b2c <ParseSnippetCondition+0x390>)
 800488c:	189b      	adds	r3, r3, r2
 800488e:	7a1b      	ldrb	r3, [r3, #8]
 8004890:	07db      	lsls	r3, r3, #31
 8004892:	d504      	bpl.n	800489e <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004894:	4aa0      	ldr	r2, [pc, #640]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004896:	7813      	ldrb	r3, [r2, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	7013      	strb	r3, [r2, #0]
 800489c:	e19a      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 800489e:	2301      	movs	r3, #1
 80048a0:	9305      	str	r3, [sp, #20]
 80048a2:	2300      	movs	r3, #0
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2101      	movs	r1, #1
 80048b2:	0030      	movs	r0, r6
 80048b4:	f003 fd94 	bl	80083e0 <SetButtonEvents>
				status =BOS_OK;
 80048b8:	2000      	movs	r0, #0
 80048ba:	e7eb      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80048bc:	220e      	movs	r2, #14
 80048be:	499c      	ldr	r1, [pc, #624]	; (8004b30 <ParseSnippetCondition+0x394>)
 80048c0:	0038      	movs	r0, r7
 80048c2:	f00e fdb9 	bl	8013438 <strncmp>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d11c      	bne.n	8004904 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 80048ca:	00a3      	lsls	r3, r4, #2
 80048cc:	191c      	adds	r4, r3, r4
 80048ce:	00a4      	lsls	r4, r4, #2
 80048d0:	4b92      	ldr	r3, [pc, #584]	; (8004b1c <ParseSnippetCondition+0x380>)
 80048d2:	191c      	adds	r4, r3, r4
 80048d4:	2306      	movs	r3, #6
 80048d6:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 80048d8:	00f2      	lsls	r2, r6, #3
 80048da:	1992      	adds	r2, r2, r6
 80048dc:	4b93      	ldr	r3, [pc, #588]	; (8004b2c <ParseSnippetCondition+0x390>)
 80048de:	189b      	adds	r3, r3, r2
 80048e0:	7a1b      	ldrb	r3, [r3, #8]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	d4d6      	bmi.n	8004894 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80048e6:	2301      	movs	r3, #1
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	9302      	str	r3, [sp, #8]
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	2100      	movs	r1, #0
 80048fa:	0030      	movs	r0, r6
 80048fc:	f003 fd70 	bl	80083e0 <SetButtonEvents>
				status =BOS_OK;
 8004900:	2000      	movs	r0, #0
 8004902:	e7c7      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004904:	220c      	movs	r2, #12
 8004906:	498b      	ldr	r1, [pc, #556]	; (8004b34 <ParseSnippetCondition+0x398>)
 8004908:	0038      	movs	r0, r7
 800490a:	f00e fd95 	bl	8013438 <strncmp>
 800490e:	2800      	cmp	r0, #0
 8004910:	d17a      	bne.n	8004a08 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 8004912:	00f2      	lsls	r2, r6, #3
 8004914:	1992      	adds	r2, r2, r6
 8004916:	4b85      	ldr	r3, [pc, #532]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004918:	189b      	adds	r3, r3, r2
 800491a:	789b      	ldrb	r3, [r3, #2]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d030      	beq.n	8004982 <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 8004920:	00f2      	lsls	r2, r6, #3
 8004922:	1992      	adds	r2, r2, r6
 8004924:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004926:	189b      	adds	r3, r3, r2
 8004928:	78db      	ldrb	r3, [r3, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04a      	beq.n	80049c4 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 800492e:	00f2      	lsls	r2, r6, #3
 8004930:	1992      	adds	r2, r2, r6
 8004932:	4b7e      	ldr	r3, [pc, #504]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004934:	189b      	adds	r3, r3, r2
 8004936:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004938:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1aa      	bne.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 800493e:	4f77      	ldr	r7, [pc, #476]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004940:	00a3      	lsls	r3, r4, #2
 8004942:	191b      	adds	r3, r3, r4
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	220b      	movs	r2, #11
 800494a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800494c:	0028      	movs	r0, r5
 800494e:	300f      	adds	r0, #15
 8004950:	f00e f89b 	bl	8012a8a <atoi>
 8004954:	b2c0      	uxtb	r0, r0
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	0093      	lsls	r3, r2, #2
 800495c:	189b      	adds	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	18ff      	adds	r7, r7, r3
 8004962:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004964:	2301      	movs	r3, #1
 8004966:	9305      	str	r3, [sp, #20]
 8004968:	2300      	movs	r3, #0
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	9001      	str	r0, [sp, #4]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	2100      	movs	r1, #0
 8004978:	0030      	movs	r0, r6
 800497a:	f003 fd31 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 800497e:	2000      	movs	r0, #0
 8004980:	e788      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004982:	4f66      	ldr	r7, [pc, #408]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004984:	00a3      	lsls	r3, r4, #2
 8004986:	191b      	adds	r3, r3, r4
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	2209      	movs	r2, #9
 800498e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004990:	0028      	movs	r0, r5
 8004992:	300f      	adds	r0, #15
 8004994:	f00e f879 	bl	8012a8a <atoi>
 8004998:	b2c3      	uxtb	r3, r0
 800499a:	4a5f      	ldr	r2, [pc, #380]	; (8004b18 <ParseSnippetCondition+0x37c>)
 800499c:	7811      	ldrb	r1, [r2, #0]
 800499e:	008a      	lsls	r2, r1, #2
 80049a0:	1852      	adds	r2, r2, r1
 80049a2:	0092      	lsls	r2, r2, #2
 80049a4:	18bf      	adds	r7, r7, r2
 80049a6:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049a8:	2201      	movs	r2, #1
 80049aa:	9205      	str	r2, [sp, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	9204      	str	r2, [sp, #16]
 80049b0:	9203      	str	r2, [sp, #12]
 80049b2:	9202      	str	r2, [sp, #8]
 80049b4:	9201      	str	r2, [sp, #4]
 80049b6:	9200      	str	r2, [sp, #0]
 80049b8:	2100      	movs	r1, #0
 80049ba:	0030      	movs	r0, r6
 80049bc:	f003 fd10 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 80049c0:	2000      	movs	r0, #0
 80049c2:	e767      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 80049c4:	4f55      	ldr	r7, [pc, #340]	; (8004b1c <ParseSnippetCondition+0x380>)
 80049c6:	00a3      	lsls	r3, r4, #2
 80049c8:	191b      	adds	r3, r3, r4
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	220a      	movs	r2, #10
 80049d0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049d2:	0028      	movs	r0, r5
 80049d4:	300f      	adds	r0, #15
 80049d6:	f00e f858 	bl	8012a8a <atoi>
 80049da:	b2c0      	uxtb	r0, r0
 80049dc:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <ParseSnippetCondition+0x37c>)
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	0093      	lsls	r3, r2, #2
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	18ff      	adds	r7, r7, r3
 80049e8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049ea:	2301      	movs	r3, #1
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	9303      	str	r3, [sp, #12]
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	9000      	str	r0, [sp, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	0030      	movs	r0, r6
 8004a00:	f003 fcee 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004a04:	2000      	movs	r0, #0
 8004a06:	e745      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a08:	220d      	movs	r2, #13
 8004a0a:	494b      	ldr	r1, [pc, #300]	; (8004b38 <ParseSnippetCondition+0x39c>)
 8004a0c:	0038      	movs	r0, r7
 8004a0e:	f00e fd13 	bl	8013438 <strncmp>
 8004a12:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004a14:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d000      	beq.n	8004a1c <ParseSnippetCondition+0x280>
 8004a1a:	e73b      	b.n	8004894 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004a1c:	00f2      	lsls	r2, r6, #3
 8004a1e:	1992      	adds	r2, r2, r6
 8004a20:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	795b      	ldrb	r3, [r3, #5]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d031      	beq.n	8004a8e <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004a2a:	00f2      	lsls	r2, r6, #3
 8004a2c:	1992      	adds	r2, r2, r6
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a30:	189b      	adds	r3, r3, r2
 8004a32:	799b      	ldrb	r3, [r3, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d04c      	beq.n	8004ad2 <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004a38:	00f2      	lsls	r2, r6, #3
 8004a3a:	1992      	adds	r2, r2, r6
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004a42:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d000      	beq.n	8004a4a <ParseSnippetCondition+0x2ae>
 8004a48:	e724      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004a4a:	4f34      	ldr	r7, [pc, #208]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	4698      	mov	r8, r3
 8004a50:	435c      	muls	r4, r3
 8004a52:	193c      	adds	r4, r7, r4
 8004a54:	3b06      	subs	r3, #6
 8004a56:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a58:	0028      	movs	r0, r5
 8004a5a:	3010      	adds	r0, #16
 8004a5c:	f00e f815 	bl	8012a8a <atoi>
 8004a60:	b2c0      	uxtb	r0, r0
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	4642      	mov	r2, r8
 8004a68:	4353      	muls	r3, r2
 8004a6a:	18ff      	adds	r7, r7, r3
 8004a6c:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004a6e:	2301      	movs	r3, #1
 8004a70:	9305      	str	r3, [sp, #20]
 8004a72:	9004      	str	r0, [sp, #16]
 8004a74:	2400      	movs	r4, #0
 8004a76:	9403      	str	r4, [sp, #12]
 8004a78:	9402      	str	r4, [sp, #8]
 8004a7a:	9401      	str	r4, [sp, #4]
 8004a7c:	9400      	str	r4, [sp, #0]
 8004a7e:	0023      	movs	r3, r4
 8004a80:	0022      	movs	r2, r4
 8004a82:	0021      	movs	r1, r4
 8004a84:	0030      	movs	r0, r6
 8004a86:	f003 fcab 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004a8a:	0020      	movs	r0, r4
 8004a8c:	e702      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004a8e:	4f23      	ldr	r7, [pc, #140]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004a90:	00a3      	lsls	r3, r4, #2
 8004a92:	191b      	adds	r3, r3, r4
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	220c      	movs	r2, #12
 8004a9a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	3010      	adds	r0, #16
 8004aa0:	f00d fff3 	bl	8012a8a <atoi>
 8004aa4:	b2c0      	uxtb	r0, r0
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	0093      	lsls	r3, r2, #2
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18ff      	adds	r7, r7, r3
 8004ab2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9305      	str	r3, [sp, #20]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	9303      	str	r3, [sp, #12]
 8004abe:	9002      	str	r0, [sp, #8]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	0030      	movs	r0, r6
 8004aca:	f003 fc89 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e6e0      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004ad2:	4f12      	ldr	r7, [pc, #72]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004ad4:	00a3      	lsls	r3, r4, #2
 8004ad6:	191b      	adds	r3, r3, r4
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	220d      	movs	r2, #13
 8004ade:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	3010      	adds	r0, #16
 8004ae4:	f00d ffd1 	bl	8012a8a <atoi>
 8004ae8:	b2c0      	uxtb	r0, r0
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	0093      	lsls	r3, r2, #2
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	18ff      	adds	r7, r7, r3
 8004af6:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004af8:	2301      	movs	r3, #1
 8004afa:	9305      	str	r3, [sp, #20]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	9003      	str	r0, [sp, #12]
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	0030      	movs	r0, r6
 8004b0e:	f003 fc67 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004b12:	2000      	movs	r0, #0
 8004b14:	e6be      	b.n	8004894 <ParseSnippetCondition+0xf8>
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	2000121f 	.word	0x2000121f
 8004b1c:	200069e0 	.word	0x200069e0
 8004b20:	20001184 	.word	0x20001184
 8004b24:	08017984 	.word	0x08017984
 8004b28:	08018fa0 	.word	0x08018fa0
 8004b2c:	2000151c 	.word	0x2000151c
 8004b30:	08018020 	.word	0x08018020
 8004b34:	08018030 	.word	0x08018030
 8004b38:	08018040 	.word	0x08018040
			else if(secondPart != NULL && thirdPart != NULL){
 8004b3c:	2e00      	cmp	r6, #0
 8004b3e:	d04f      	beq.n	8004be0 <ParseSnippetCondition+0x444>
 8004b40:	2c00      	cmp	r4, #0
 8004b42:	d04f      	beq.n	8004be4 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004b44:	0020      	movs	r0, r4
 8004b46:	f7fe fde7 	bl	8003718 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d024      	beq.n	8004b98 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b50:	781c      	ldrb	r4, [r3, #0]
 8004b52:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004b54:	00a3      	lsls	r3, r4, #2
 8004b56:	1919      	adds	r1, r3, r4
 8004b58:	0089      	lsls	r1, r1, #2
 8004b5a:	2704      	movs	r7, #4
 8004b5c:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b5e:	1919      	adds	r1, r3, r4
 8004b60:	0089      	lsls	r1, r1, #2
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b66:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b68:	4d20      	ldr	r5, [pc, #128]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b6a:	782c      	ldrb	r4, [r5, #0]
 8004b6c:	0030      	movs	r0, r6
 8004b6e:	f7fe fddf 	bl	8003730 <IsMathOperator>
 8004b72:	491f      	ldr	r1, [pc, #124]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004b74:	00a3      	lsls	r3, r4, #2
 8004b76:	191b      	adds	r3, r3, r4
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	18cb      	adds	r3, r1, r3
 8004b7c:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b7e:	782a      	ldrb	r2, [r5, #0]
 8004b80:	0093      	lsls	r3, r2, #2
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	18cb      	adds	r3, r1, r3
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02c      	beq.n	8004be8 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004b8e:	3201      	adds	r2, #1
 8004b90:	4b16      	ldr	r3, [pc, #88]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b92:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004b94:	2000      	movs	r0, #0
 8004b96:	e01d      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b9a:	4698      	mov	r8, r3
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	4f14      	ldr	r7, [pc, #80]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004ba0:	0093      	lsls	r3, r2, #2
 8004ba2:	1899      	adds	r1, r3, r2
 8004ba4:	0089      	lsls	r1, r1, #2
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004bae:	0020      	movs	r0, r4
 8004bb0:	f00d ff66 	bl	8012a80 <atof>
 8004bb4:	f7fe f808 	bl	8002bc8 <__aeabi_d2f>
 8004bb8:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004bba:	4643      	mov	r3, r8
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	0098      	lsls	r0, r3, #2
 8004bc0:	18c0      	adds	r0, r0, r3
 8004bc2:	0080      	lsls	r0, r0, #2
 8004bc4:	3006      	adds	r0, #6
 8004bc6:	19c0      	adds	r0, r0, r7
 8004bc8:	2204      	movs	r2, #4
 8004bca:	a907      	add	r1, sp, #28
 8004bcc:	f00e f9ed 	bl	8012faa <memcpy>
 8004bd0:	e7ca      	b.n	8004b68 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004bd2:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bd4:	b008      	add	sp, #32
 8004bd6:	bc04      	pop	{r2}
 8004bd8:	4690      	mov	r8, r2
 8004bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004bdc:	2067      	movs	r0, #103	; 0x67
 8004bde:	e7f9      	b.n	8004bd4 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004be0:	2067      	movs	r0, #103	; 0x67
 8004be2:	e7f7      	b.n	8004bd4 <ParseSnippetCondition+0x438>
 8004be4:	2067      	movs	r0, #103	; 0x67
 8004be6:	e7f5      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004be8:	2067      	movs	r0, #103	; 0x67
 8004bea:	e7f3      	b.n	8004bd4 <ParseSnippetCondition+0x438>
 8004bec:	2000121f 	.word	0x2000121f
 8004bf0:	200069e0 	.word	0x200069e0

08004bf4 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	000c      	movs	r4, r1
	switch(code){
 8004bf8:	2802      	cmp	r0, #2
 8004bfa:	d017      	beq.n	8004c2c <AddSnippet+0x38>
 8004bfc:	2803      	cmp	r0, #3
 8004bfe:	d003      	beq.n	8004c08 <AddSnippet+0x14>
 8004c00:	2801      	cmp	r0, #1
 8004c02:	d00f      	beq.n	8004c24 <AddSnippet+0x30>
	return BOS_OK;
 8004c04:	2000      	movs	r0, #0
 8004c06:	e00c      	b.n	8004c22 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <AddSnippet+0xec>)
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	3a01      	subs	r2, #1
 8004c0e:	0093      	lsls	r3, r2, #2
 8004c10:	189b      	adds	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <AddSnippet+0xf0>)
 8004c16:	18d3      	adds	r3, r2, r3
 8004c18:	2201      	movs	r2, #1
 8004c1a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004c1c:	f006 fbfe 	bl	800b41c <SaveToRO>
	return BOS_OK;
 8004c20:	2000      	movs	r0, #0
}
 8004c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004c24:	0008      	movs	r0, r1
 8004c26:	f7ff fdb9 	bl	800479c <ParseSnippetCondition>
 8004c2a:	e7fa      	b.n	8004c22 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <AddSnippet+0xec>)
 8004c2e:	781d      	ldrb	r5, [r3, #0]
 8004c30:	3d01      	subs	r5, #1
 8004c32:	00ab      	lsls	r3, r5, #2
 8004c34:	195b      	adds	r3, r3, r5
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <AddSnippet+0xf0>)
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	68de      	ldr	r6, [r3, #12]
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d03d      	beq.n	8004cbe <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004c42:	0030      	movs	r0, r6
 8004c44:	f7fb fa68 	bl	8000118 <strlen>
 8004c48:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	f7fb fa64 	bl	8000118 <strlen>
 8004c50:	1839      	adds	r1, r7, r0
 8004c52:	3102      	adds	r1, #2
 8004c54:	0030      	movs	r0, r6
 8004c56:	f00e f9e3 	bl	8013020 <realloc>
 8004c5a:	4e22      	ldr	r6, [pc, #136]	; (8004ce4 <AddSnippet+0xf0>)
 8004c5c:	00ab      	lsls	r3, r5, #2
 8004c5e:	195d      	adds	r5, r3, r5
 8004c60:	00ad      	lsls	r5, r5, #2
 8004c62:	1975      	adds	r5, r6, r5
 8004c64:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004c66:	4d1e      	ldr	r5, [pc, #120]	; (8004ce0 <AddSnippet+0xec>)
 8004c68:	782a      	ldrb	r2, [r5, #0]
 8004c6a:	3a01      	subs	r2, #1
 8004c6c:	0093      	lsls	r3, r2, #2
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	18f3      	adds	r3, r6, r3
 8004c74:	1c7a      	adds	r2, r7, #1
 8004c76:	68d8      	ldr	r0, [r3, #12]
 8004c78:	1880      	adds	r0, r0, r2
 8004c7a:	0021      	movs	r1, r4
 8004c7c:	f00e fbd4 	bl	8013428 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004c80:	782a      	ldrb	r2, [r5, #0]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0093      	lsls	r3, r2, #2
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	18f6      	adds	r6, r6, r3
 8004c8c:	68f3      	ldr	r3, [r6, #12]
 8004c8e:	2213      	movs	r2, #19
 8004c90:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004c92:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <AddSnippet+0xec>)
 8004c94:	781a      	ldrb	r2, [r3, #0]
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0093      	lsls	r3, r2, #2
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <AddSnippet+0xf0>)
 8004ca0:	18cb      	adds	r3, r1, r3
 8004ca2:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004ca4:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1bb      	bne.n	8004c22 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004caa:	0090      	lsls	r0, r2, #2
 8004cac:	1880      	adds	r0, r0, r2
 8004cae:	0080      	lsls	r0, r0, #2
 8004cb0:	1840      	adds	r0, r0, r1
 8004cb2:	2214      	movs	r2, #20
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f00e f981 	bl	8012fbc <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004cba:	200e      	movs	r0, #14
 8004cbc:	e7b1      	b.n	8004c22 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004cbe:	0008      	movs	r0, r1
 8004cc0:	f7fb fa2a 	bl	8000118 <strlen>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f00d ff23 	bl	8012b10 <malloc>
 8004cca:	00ab      	lsls	r3, r5, #2
 8004ccc:	195d      	adds	r5, r3, r5
 8004cce:	00ad      	lsls	r5, r5, #2
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <AddSnippet+0xf0>)
 8004cd2:	195d      	adds	r5, r3, r5
 8004cd4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004cd6:	0021      	movs	r1, r4
 8004cd8:	f00e fba6 	bl	8013428 <strcpy>
 8004cdc:	e7d9      	b.n	8004c92 <AddSnippet+0x9e>
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	2000121f 	.word	0x2000121f
 8004ce4:	200069e0 	.word	0x200069e0

08004ce8 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	46de      	mov	lr, fp
 8004cec:	4657      	mov	r7, sl
 8004cee:	464e      	mov	r6, r9
 8004cf0:	4645      	mov	r5, r8
 8004cf2:	b5e0      	push	{r5, r6, r7, lr}
 8004cf4:	b08b      	sub	sp, #44	; 0x2c
 8004cf6:	9004      	str	r0, [sp, #16]
 8004cf8:	4688      	mov	r8, r1
 8004cfa:	9203      	str	r2, [sp, #12]
 8004cfc:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004cfe:	2209      	movs	r2, #9
 8004d00:	2100      	movs	r1, #0
 8004d02:	a807      	add	r0, sp, #28
 8004d04:	f00e f95a 	bl	8012fbc <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d08:	4fd5      	ldr	r7, [pc, #852]	; (8005060 <CLI_CommandParser+0x378>)
				if(id == myID){
 8004d0a:	002e      	movs	r6, r5
 8004d0c:	e034      	b.n	8004d78 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d0e:	2252      	movs	r2, #82	; 0x52
 8004d10:	49d4      	ldr	r1, [pc, #848]	; (8005064 <CLI_CommandParser+0x37c>)
 8004d12:	0020      	movs	r0, r4
 8004d14:	f00e f949 	bl	8012faa <memcpy>
				recordSnippet =0;
 8004d18:	4bd1      	ldr	r3, [pc, #836]	; (8005060 <CLI_CommandParser+0x378>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e044      	b.n	8004daa <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004d20:	2206      	movs	r2, #6
 8004d22:	49d1      	ldr	r1, [pc, #836]	; (8005068 <CLI_CommandParser+0x380>)
 8004d24:	9803      	ldr	r0, [sp, #12]
 8004d26:	f00e fb87 	bl	8013438 <strncmp>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d053      	beq.n	8004dd6 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004d2e:	2d02      	cmp	r5, #2
 8004d30:	d05e      	beq.n	8004df0 <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004d32:	212e      	movs	r1, #46	; 0x2e
 8004d34:	9803      	ldr	r0, [sp, #12]
 8004d36:	f00e fb69 	bl	801340c <strchr>
 8004d3a:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004d3c:	d006      	beq.n	8004d4c <CLI_CommandParser+0x64>
 8004d3e:	3803      	subs	r0, #3
 8004d40:	2203      	movs	r2, #3
 8004d42:	49ca      	ldr	r1, [pc, #808]	; (800506c <CLI_CommandParser+0x384>)
 8004d44:	f00e fb78 	bl	8013438 <strncmp>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d160      	bne.n	8004e0e <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004d4c:	2299      	movs	r2, #153	; 0x99
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	0021      	movs	r1, r4
 8004d52:	9803      	ldr	r0, [sp, #12]
 8004d54:	f008 fd06 	bl	800d764 <FreeRTOS_CLIProcessCommand>
 8004d58:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d5a:	7823      	ldrb	r3, [r4, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d000      	beq.n	8004d62 <CLI_CommandParser+0x7a>
 8004d60:	e16f      	b.n	8005042 <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d62:	0020      	movs	r0, r4
 8004d64:	f7fb f9d8 	bl	8000118 <strlen>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	0020      	movs	r0, r4
 8004d6e:	f00e f925 	bl	8012fbc <memset>
	} while(xReturned != pdFALSE);
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	d100      	bne.n	8004d78 <CLI_CommandParser+0x90>
 8004d76:	e1ab      	b.n	80050d0 <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004d78:	9803      	ldr	r0, [sp, #12]
 8004d7a:	f7ff fcf7 	bl	800476c <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d7e:	783d      	ldrb	r5, [r7, #0]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	d1cd      	bne.n	8004d20 <CLI_CommandParser+0x38>
 8004d84:	2203      	movs	r2, #3
 8004d86:	49ba      	ldr	r1, [pc, #744]	; (8005070 <CLI_CommandParser+0x388>)
 8004d88:	9803      	ldr	r0, [sp, #12]
 8004d8a:	f00e fb55 	bl	8013438 <strncmp>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d1cf      	bne.n	8004d32 <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	1cd9      	adds	r1, r3, #3
 8004d96:	3001      	adds	r0, #1
 8004d98:	f7ff ff2c 	bl	8004bf4 <AddSnippet>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d1b6      	bne.n	8004d0e <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004da0:	4baf      	ldr	r3, [pc, #700]	; (8005060 <CLI_CommandParser+0x378>)
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004da6:	230d      	movs	r3, #13
 8004da8:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004daa:	7823      	ldrb	r3, [r4, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d100      	bne.n	8004db2 <CLI_CommandParser+0xca>
 8004db0:	e186      	b.n	80050c0 <CLI_CommandParser+0x3d8>
 8004db2:	4643      	mov	r3, r8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d100      	bne.n	8004dba <CLI_CommandParser+0xd2>
 8004db8:	e19d      	b.n	80050f6 <CLI_CommandParser+0x40e>
 8004dba:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004dbc:	0020      	movs	r0, r4
 8004dbe:	f7fb f9ab 	bl	8000118 <strlen>
 8004dc2:	b282      	uxth	r2, r0
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	425b      	negs	r3, r3
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	3333      	adds	r3, #51	; 0x33
 8004dcc:	0021      	movs	r1, r4
 8004dce:	9804      	ldr	r0, [sp, #16]
 8004dd0:	f008 fb04 	bl	800d3dc <writePxMutex>
 8004dd4:	e7c5      	b.n	8004d62 <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004dd6:	4ba2      	ldr	r3, [pc, #648]	; (8005060 <CLI_CommandParser+0x378>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004ddc:	49a5      	ldr	r1, [pc, #660]	; (8005074 <CLI_CommandParser+0x38c>)
 8004dde:	3003      	adds	r0, #3
 8004de0:	f7ff ff08 	bl	8004bf4 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004de4:	2241      	movs	r2, #65	; 0x41
 8004de6:	49a4      	ldr	r1, [pc, #656]	; (8005078 <CLI_CommandParser+0x390>)
 8004de8:	0020      	movs	r0, r4
 8004dea:	f00e f8de 	bl	8012faa <memcpy>
			xReturned = pdFALSE;
 8004dee:	e7dc      	b.n	8004daa <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004df0:	9903      	ldr	r1, [sp, #12]
 8004df2:	2002      	movs	r0, #2
 8004df4:	f7ff fefe 	bl	8004bf4 <AddSnippet>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d102      	bne.n	8004e02 <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004dfc:	230d      	movs	r3, #13
 8004dfe:	7023      	strb	r3, [r4, #0]
 8004e00:	e7d3      	b.n	8004daa <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e02:	2252      	movs	r2, #82	; 0x52
 8004e04:	4997      	ldr	r1, [pc, #604]	; (8005064 <CLI_CommandParser+0x37c>)
 8004e06:	0020      	movs	r0, r4
 8004e08:	f00e f8cf 	bl	8012faa <memcpy>
 8004e0c:	e7cd      	b.n	8004daa <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004e0e:	f00d fe71 	bl	8012af4 <__locale_ctype_ptr>
 8004e12:	786b      	ldrb	r3, [r5, #1]
 8004e14:	18c0      	adds	r0, r0, r3
 8004e16:	7843      	ldrb	r3, [r0, #1]
 8004e18:	075b      	lsls	r3, r3, #29
 8004e1a:	d497      	bmi.n	8004d4c <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004e1c:	9903      	ldr	r1, [sp, #12]
 8004e1e:	1a6a      	subs	r2, r5, r1
 8004e20:	a807      	add	r0, sp, #28
 8004e22:	f00e fb1a 	bl	801345a <strncpy>
				id =GetID(idString);
 8004e26:	a807      	add	r0, sp, #28
 8004e28:	f7ff f9b6 	bl	8004198 <GetID>
 8004e2c:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004e2e:	4a93      	ldr	r2, [pc, #588]	; (800507c <CLI_CommandParser+0x394>)
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	4693      	mov	fp, r2
 8004e34:	4290      	cmp	r0, r2
 8004e36:	d03d      	beq.n	8004eb4 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004e38:	2864      	cmp	r0, #100	; 0x64
 8004e3a:	d043      	beq.n	8004ec4 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004e3c:	2866      	cmp	r0, #102	; 0x66
 8004e3e:	d047      	beq.n	8004ed0 <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004e40:	28ff      	cmp	r0, #255	; 0xff
 8004e42:	d04b      	beq.n	8004edc <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004e44:	466b      	mov	r3, sp
 8004e46:	7d1b      	ldrb	r3, [r3, #20]
 8004e48:	469a      	mov	sl, r3
 8004e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e4c:	d078      	beq.n	8004f40 <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004e4e:	3501      	adds	r5, #1
 8004e50:	2206      	movs	r2, #6
 8004e52:	498b      	ldr	r1, [pc, #556]	; (8005080 <CLI_CommandParser+0x398>)
 8004e54:	0028      	movs	r0, r5
 8004e56:	f00e faef 	bl	8013438 <strncmp>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d000      	beq.n	8004e60 <CLI_CommandParser+0x178>
 8004e5e:	e0b4      	b.n	8004fca <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;
 8004e60:	4b88      	ldr	r3, [pc, #544]	; (8005084 <CLI_CommandParser+0x39c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	719a      	strb	r2, [r3, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e66:	2119      	movs	r1, #25
 8004e68:	4650      	mov	r0, sl
 8004e6a:	f004 fc2b 	bl	80096c4 <SendMessageToModule>
						osDelay(100);
 8004e6e:	2064      	movs	r0, #100	; 0x64
 8004e70:	f008 fbe1 	bl	800d636 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e74:	4b84      	ldr	r3, [pc, #528]	; (8005088 <CLI_CommandParser+0x3a0>)
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	4b80      	ldr	r3, [pc, #512]	; (800507c <CLI_CommandParser+0x394>)
 8004e7a:	7818      	ldrb	r0, [r3, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4651      	mov	r1, sl
 8004e80:	f7fe fe64 	bl	8003b4c <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL){
 8004e84:	4b7f      	ldr	r3, [pc, #508]	; (8005084 <CLI_CommandParser+0x39c>)
 8004e86:	799b      	ldrb	r3, [r3, #6]
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d18e      	bne.n	8004daa <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004e8c:	21fa      	movs	r1, #250	; 0xfa
 8004e8e:	0089      	lsls	r1, r1, #2
 8004e90:	2001      	movs	r0, #1
 8004e92:	f009 ffa3 	bl	800eddc <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004e96:	4b7d      	ldr	r3, [pc, #500]	; (800508c <CLI_CommandParser+0x3a4>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d085      	beq.n	8004daa <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004e9e:	4a7c      	ldr	r2, [pc, #496]	; (8005090 <CLI_CommandParser+0x3a8>)
 8004ea0:	8813      	ldrh	r3, [r2, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004ea6:	9b05      	ldr	r3, [sp, #20]
 8004ea8:	0022      	movs	r2, r4
 8004eaa:	497a      	ldr	r1, [pc, #488]	; (8005094 <CLI_CommandParser+0x3ac>)
 8004eac:	0020      	movs	r0, r4
 8004eae:	f00e fa7f 	bl	80133b0 <sprintf>
 8004eb2:	e77a      	b.n	8004daa <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004eb4:	2299      	movs	r2, #153	; 0x99
 8004eb6:	1c68      	adds	r0, r5, #1
 8004eb8:	0092      	lsls	r2, r2, #2
 8004eba:	0021      	movs	r1, r4
 8004ebc:	f008 fc52 	bl	800d764 <FreeRTOS_CLIProcessCommand>
 8004ec0:	0006      	movs	r6, r0
 8004ec2:	e74a      	b.n	8004d5a <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004ec4:	2227      	movs	r2, #39	; 0x27
 8004ec6:	4974      	ldr	r1, [pc, #464]	; (8005098 <CLI_CommandParser+0x3b0>)
 8004ec8:	0020      	movs	r0, r4
 8004eca:	f00e f86e 	bl	8012faa <memcpy>
 8004ece:	e76c      	b.n	8004daa <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004ed0:	2225      	movs	r2, #37	; 0x25
 8004ed2:	4972      	ldr	r1, [pc, #456]	; (800509c <CLI_CommandParser+0x3b4>)
 8004ed4:	0020      	movs	r0, r4
 8004ed6:	f00e f868 	bl	8012faa <memcpy>
 8004eda:	e766      	b.n	8004daa <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004edc:	221a      	movs	r2, #26
 8004ede:	2100      	movs	r1, #0
 8004ee0:	486f      	ldr	r0, [pc, #444]	; (80050a0 <CLI_CommandParser+0x3b8>)
 8004ee2:	f00e f86b 	bl	8012fbc <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	9803      	ldr	r0, [sp, #12]
 8004eea:	f7fb f915 	bl	8000118 <strlen>
 8004eee:	0006      	movs	r6, r0
 8004ef0:	ab07      	add	r3, sp, #28
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7fb f910 	bl	8000118 <strlen>
 8004ef8:	1e72      	subs	r2, r6, #1
 8004efa:	1a12      	subs	r2, r2, r0
 8004efc:	0029      	movs	r1, r5
 8004efe:	4869      	ldr	r0, [pc, #420]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004f00:	f00e faab 	bl	801345a <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f04:	9803      	ldr	r0, [sp, #12]
 8004f06:	f7fb f907 	bl	8000118 <strlen>
 8004f0a:	0006      	movs	r6, r0
 8004f0c:	a807      	add	r0, sp, #28
 8004f0e:	f7fb f903 	bl	8000118 <strlen>
 8004f12:	1a33      	subs	r3, r6, r0
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2217      	movs	r2, #23
 8004f18:	21ff      	movs	r1, #255	; 0xff
 8004f1a:	4658      	mov	r0, fp
 8004f1c:	f004 fbaa 	bl	8009674 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f20:	2299      	movs	r2, #153	; 0x99
 8004f22:	0092      	lsls	r2, r2, #2
 8004f24:	0021      	movs	r1, r4
 8004f26:	0028      	movs	r0, r5
 8004f28:	f008 fc1c 	bl	800d764 <FreeRTOS_CLIProcessCommand>
 8004f2c:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f2e:	0020      	movs	r0, r4
 8004f30:	f7fb f8f2 	bl	8000118 <strlen>
 8004f34:	1820      	adds	r0, r4, r0
 8004f36:	221d      	movs	r2, #29
 8004f38:	495b      	ldr	r1, [pc, #364]	; (80050a8 <CLI_CommandParser+0x3c0>)
 8004f3a:	f00e f836 	bl	8012faa <memcpy>
 8004f3e:	e70c      	b.n	8004d5a <CLI_CommandParser+0x72>
					group =id >> 8;
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	121b      	asrs	r3, r3, #8
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	469a      	mov	sl, r3
 8004f48:	4b58      	ldr	r3, [pc, #352]	; (80050ac <CLI_CommandParser+0x3c4>)
 8004f4a:	4699      	mov	r9, r3
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f50:	221a      	movs	r2, #26
 8004f52:	2100      	movs	r1, #0
 8004f54:	4852      	ldr	r0, [pc, #328]	; (80050a0 <CLI_CommandParser+0x3b8>)
 8004f56:	f00e f831 	bl	8012fbc <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f5a:	1c6b      	adds	r3, r5, #1
 8004f5c:	9305      	str	r3, [sp, #20]
 8004f5e:	9803      	ldr	r0, [sp, #12]
 8004f60:	f7fb f8da 	bl	8000118 <strlen>
 8004f64:	0005      	movs	r5, r0
 8004f66:	aa07      	add	r2, sp, #28
 8004f68:	0010      	movs	r0, r2
 8004f6a:	f7fb f8d5 	bl	8000118 <strlen>
 8004f6e:	3d01      	subs	r5, #1
 8004f70:	1a2a      	subs	r2, r5, r0
 8004f72:	9905      	ldr	r1, [sp, #20]
 8004f74:	484b      	ldr	r0, [pc, #300]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004f76:	f00e fa70 	bl	801345a <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f7a:	9803      	ldr	r0, [sp, #12]
 8004f7c:	f7fb f8cc 	bl	8000118 <strlen>
 8004f80:	0005      	movs	r5, r0
 8004f82:	a807      	add	r0, sp, #28
 8004f84:	f7fb f8c8 	bl	8000118 <strlen>
 8004f88:	1a2b      	subs	r3, r5, r0
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2217      	movs	r2, #23
 8004f8e:	4651      	mov	r1, sl
 8004f90:	4658      	mov	r0, fp
 8004f92:	f004 fb6f 	bl	8009674 <BroadcastMessage>
					if(InGroup(myID,group))
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <CLI_CommandParser+0x394>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4a44      	ldr	r2, [pc, #272]	; (80050b0 <CLI_CommandParser+0x3c8>)
 8004fa0:	5a9b      	ldrh	r3, [r3, r2]
 8004fa2:	464a      	mov	r2, r9
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	4113      	asrs	r3, r2
 8004fa8:	07db      	lsls	r3, r3, #31
 8004faa:	d406      	bmi.n	8004fba <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004fac:	ab07      	add	r3, sp, #28
 8004fae:	0022      	movs	r2, r4
 8004fb0:	4940      	ldr	r1, [pc, #256]	; (80050b4 <CLI_CommandParser+0x3cc>)
 8004fb2:	0020      	movs	r0, r4
 8004fb4:	f00e f9fc 	bl	80133b0 <sprintf>
 8004fb8:	e6cf      	b.n	8004d5a <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004fba:	2299      	movs	r2, #153	; 0x99
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	9805      	ldr	r0, [sp, #20]
 8004fc2:	f008 fbcf 	bl	800d764 <FreeRTOS_CLIProcessCommand>
 8004fc6:	0006      	movs	r6, r0
 8004fc8:	e7f0      	b.n	8004fac <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004fca:	9803      	ldr	r0, [sp, #12]
 8004fcc:	f7fb f8a4 	bl	8000118 <strlen>
 8004fd0:	0006      	movs	r6, r0
 8004fd2:	ab07      	add	r3, sp, #28
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7fb f89f 	bl	8000118 <strlen>
 8004fda:	1e72      	subs	r2, r6, #1
 8004fdc:	1a12      	subs	r2, r2, r0
 8004fde:	0029      	movs	r1, r5
 8004fe0:	4830      	ldr	r0, [pc, #192]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004fe2:	f00e fa3a 	bl	801345a <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004fe6:	9803      	ldr	r0, [sp, #12]
 8004fe8:	f7fb f896 	bl	8000118 <strlen>
 8004fec:	0005      	movs	r5, r0
 8004fee:	a807      	add	r0, sp, #28
 8004ff0:	f7fb f892 	bl	8000118 <strlen>
 8004ff4:	3d01      	subs	r5, #1
 8004ff6:	1a2a      	subs	r2, r5, r0
 8004ff8:	b292      	uxth	r2, r2
 8004ffa:	2117      	movs	r1, #23
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f004 fb61 	bl	80096c4 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005002:	9a05      	ldr	r2, [sp, #20]
 8005004:	492c      	ldr	r1, [pc, #176]	; (80050b8 <CLI_CommandParser+0x3d0>)
 8005006:	0020      	movs	r0, r4
 8005008:	f00e f9d2 	bl	80133b0 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800500c:	7823      	ldrb	r3, [r4, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <CLI_CommandParser+0x330>
 8005012:	4643      	mov	r3, r8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005018:	0020      	movs	r0, r4
 800501a:	f7fb f87d 	bl	8000118 <strlen>
 800501e:	0002      	movs	r2, r0
 8005020:	2100      	movs	r1, #0
 8005022:	0020      	movs	r0, r4
 8005024:	f00d ffca 	bl	8012fbc <memset>
 8005028:	e72c      	b.n	8004e84 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 800502a:	0020      	movs	r0, r4
 800502c:	f7fb f874 	bl	8000118 <strlen>
 8005030:	b282      	uxth	r2, r0
 8005032:	2301      	movs	r3, #1
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	3331      	adds	r3, #49	; 0x31
 8005038:	0021      	movs	r1, r4
 800503a:	9804      	ldr	r0, [sp, #16]
 800503c:	f008 f9ce 	bl	800d3dc <writePxMutex>
 8005040:	e7ea      	b.n	8005018 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005042:	4643      	mov	r3, r8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d100      	bne.n	800504a <CLI_CommandParser+0x362>
 8005048:	e68b      	b.n	8004d62 <CLI_CommandParser+0x7a>
 800504a:	e6b7      	b.n	8004dbc <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 800504c:	2301      	movs	r3, #1
 800504e:	425b      	negs	r3, r3
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	3333      	adds	r3, #51	; 0x33
 8005054:	2238      	movs	r2, #56	; 0x38
 8005056:	4919      	ldr	r1, [pc, #100]	; (80050bc <CLI_CommandParser+0x3d4>)
 8005058:	9804      	ldr	r0, [sp, #16]
 800505a:	f008 f9bf 	bl	800d3dc <writePxMutex>
}
 800505e:	e043      	b.n	80050e8 <CLI_CommandParser+0x400>
 8005060:	2000124c 	.word	0x2000124c
 8005064:	08017e58 	.word	0x08017e58
 8005068:	08017eac 	.word	0x08017eac
 800506c:	08017ef8 	.word	0x08017ef8
 8005070:	08017e54 	.word	0x08017e54
 8005074:	08017aec 	.word	0x08017aec
 8005078:	08017eb4 	.word	0x08017eb4
 800507c:	20001076 	.word	0x20001076
 8005080:	08017f98 	.word	0x08017f98
 8005084:	200069c4 	.word	0x200069c4
 8005088:	20000a77 	.word	0x20000a77
 800508c:	20001110 	.word	0x20001110
 8005090:	2000179a 	.word	0x2000179a
 8005094:	08017fc4 	.word	0x08017fc4
 8005098:	08017efc 	.word	0x08017efc
 800509c:	08017f24 	.word	0x08017f24
 80050a0:	20000cec 	.word	0x20000cec
 80050a4:	20000f38 	.word	0x20000f38
 80050a8:	08017f4c 	.word	0x08017f4c
 80050ac:	2000121e 	.word	0x2000121e
 80050b0:	20000ec0 	.word	0x20000ec0
 80050b4:	08017f6c 	.word	0x08017f6c
 80050b8:	08017fa0 	.word	0x08017fa0
 80050bc:	08017fe4 	.word	0x08017fe4
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050c0:	0020      	movs	r0, r4
 80050c2:	f7fb f829 	bl	8000118 <strlen>
 80050c6:	0002      	movs	r2, r0
 80050c8:	2100      	movs	r1, #0
 80050ca:	0020      	movs	r0, r4
 80050cc:	f00d ff76 	bl	8012fbc <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 80050d0:	2209      	movs	r2, #9
 80050d2:	2100      	movs	r1, #0
 80050d4:	a807      	add	r0, sp, #28
 80050d6:	f00d ff71 	bl	8012fbc <memset>
	if(!recordSnippet && enableOutput)
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <CLI_CommandParser+0x420>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <CLI_CommandParser+0x400>
 80050e2:	4643      	mov	r3, r8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1b1      	bne.n	800504c <CLI_CommandParser+0x364>
}
 80050e8:	b00b      	add	sp, #44	; 0x2c
 80050ea:	bc3c      	pop	{r2, r3, r4, r5}
 80050ec:	4690      	mov	r8, r2
 80050ee:	4699      	mov	r9, r3
 80050f0:	46a2      	mov	sl, r4
 80050f2:	46ab      	mov	fp, r5
 80050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050f6:	0020      	movs	r0, r4
 80050f8:	f7fb f80e 	bl	8000118 <strlen>
 80050fc:	0002      	movs	r2, r0
 80050fe:	2100      	movs	r1, #0
 8005100:	0020      	movs	r0, r4
 8005102:	f00d ff5b 	bl	8012fbc <memset>
 8005106:	e7e3      	b.n	80050d0 <CLI_CommandParser+0x3e8>
 8005108:	2000124c 	.word	0x2000124c

0800510c <prvCLITask>:
void prvCLITask(void *pvParameters){
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	46de      	mov	lr, fp
 8005110:	4657      	mov	r7, sl
 8005112:	464e      	mov	r6, r9
 8005114:	b5c0      	push	{r6, r7, lr}
 8005116:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005118:	2101      	movs	r1, #1
 800511a:	4249      	negs	r1, r1
 800511c:	2001      	movs	r0, #1
 800511e:	f009 fe5d 	bl	800eddc <ulTaskNotifyTake>
	cRxedChar ='\0';
 8005122:	230f      	movs	r3, #15
 8005124:	aa02      	add	r2, sp, #8
 8005126:	4694      	mov	ip, r2
 8005128:	4463      	add	r3, ip
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800512e:	f008 fb97 	bl	800d860 <FreeRTOS_CLIGetOutputBuffer>
 8005132:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005134:	23e1      	movs	r3, #225	; 0xe1
 8005136:	031b      	lsls	r3, r3, #12
 8005138:	4a5f      	ldr	r2, [pc, #380]	; (80052b8 <prvCLITask+0x1ac>)
 800513a:	6892      	ldr	r2, [r2, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d009      	beq.n	8005154 <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005140:	2401      	movs	r4, #1
			if(port != PcPort)
 8005142:	4e5e      	ldr	r6, [pc, #376]	; (80052bc <prvCLITask+0x1b0>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005144:	001d      	movs	r5, r3
			if(port != PcPort)
 8005146:	7833      	ldrb	r3, [r6, #0]
 8005148:	42a3      	cmp	r3, r4
 800514a:	d12d      	bne.n	80051a8 <prvCLITask+0x9c>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800514c:	3401      	adds	r4, #1
 800514e:	b2e4      	uxtb	r4, r4
 8005150:	2c07      	cmp	r4, #7
 8005152:	d1f8      	bne.n	8005146 <prvCLITask+0x3a>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005154:	4b5a      	ldr	r3, [pc, #360]	; (80052c0 <prvCLITask+0x1b4>)
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	0053      	lsls	r3, r2, #1
 800515a:	189b      	adds	r3, r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4a59      	ldr	r2, [pc, #356]	; (80052c4 <prvCLITask+0x1b8>)
 8005160:	189b      	adds	r3, r3, r2
 8005162:	4a59      	ldr	r2, [pc, #356]	; (80052c8 <prvCLITask+0x1bc>)
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	4c59      	ldr	r4, [pc, #356]	; (80052cc <prvCLITask+0x1c0>)
 8005168:	4d54      	ldr	r5, [pc, #336]	; (80052bc <prvCLITask+0x1b0>)
 800516a:	7829      	ldrb	r1, [r5, #0]
 800516c:	9100      	str	r1, [sp, #0]
 800516e:	4958      	ldr	r1, [pc, #352]	; (80052d0 <prvCLITask+0x1c4>)
 8005170:	0020      	movs	r0, r4
 8005172:	f00e f91d 	bl	80133b0 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005176:	22a4      	movs	r2, #164	; 0xa4
 8005178:	7828      	ldrb	r0, [r5, #0]
 800517a:	230a      	movs	r3, #10
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	4955      	ldr	r1, [pc, #340]	; (80052d4 <prvCLITask+0x1c8>)
 8005180:	f008 f954 	bl	800d42c <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005184:	0020      	movs	r0, r4
 8005186:	f7fa ffc7 	bl	8000118 <strlen>
 800518a:	b282      	uxth	r2, r0
 800518c:	7828      	ldrb	r0, [r5, #0]
 800518e:	230a      	movs	r3, #10
 8005190:	0021      	movs	r1, r4
 8005192:	f008 f94b 	bl	800d42c <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005196:	2300      	movs	r3, #0
 8005198:	469b      	mov	fp, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <prvCLITask+0x1b0>)
 800519c:	469a      	mov	sl, r3
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <prvCLITask+0x1cc>)
 80051a0:	4699      	mov	r9, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80051a2:	001f      	movs	r7, r3
			if(UARTRxBuf[PcPort - 1][chr]){
 80051a4:	4656      	mov	r6, sl
 80051a6:	e066      	b.n	8005276 <prvCLITask+0x16a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80051a8:	0029      	movs	r1, r5
 80051aa:	0020      	movs	r0, r4
 80051ac:	f008 f984 	bl	800d4b8 <UpdateBaudrate>
 80051b0:	e7cc      	b.n	800514c <prvCLITask+0x40>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80051b2:	200f      	movs	r0, #15
 80051b4:	ad02      	add	r5, sp, #8
 80051b6:	46ac      	mov	ip, r5
 80051b8:	4460      	add	r0, ip
 80051ba:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 80051bc:	0198      	lsls	r0, r3, #6
 80051be:	4a47      	ldr	r2, [pc, #284]	; (80052dc <prvCLITask+0x1d0>)
 80051c0:	1812      	adds	r2, r2, r0
 80051c2:	2000      	movs	r0, #0
 80051c4:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 80051c6:	4a44      	ldr	r2, [pc, #272]	; (80052d8 <prvCLITask+0x1cc>)
 80051c8:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80051ca:	240f      	movs	r4, #15
 80051cc:	ab02      	add	r3, sp, #8
 80051ce:	469c      	mov	ip, r3
 80051d0:	4464      	add	r4, ip
 80051d2:	4b3a      	ldr	r3, [pc, #232]	; (80052bc <prvCLITask+0x1b0>)
 80051d4:	7818      	ldrb	r0, [r3, #0]
 80051d6:	230a      	movs	r3, #10
 80051d8:	2201      	movs	r2, #1
 80051da:	0021      	movs	r1, r4
 80051dc:	f008 f926 	bl	800d42c <writePxITMutex>
		if(cRxedChar == '\r'){
 80051e0:	7823      	ldrb	r3, [r4, #0]
 80051e2:	2b0d      	cmp	r3, #13
 80051e4:	d028      	beq.n	8005238 <prvCLITask+0x12c>
			if(cRxedChar == '\n'){
 80051e6:	2b0a      	cmp	r3, #10
 80051e8:	d043      	beq.n	8005272 <prvCLITask+0x166>
			else if(cRxedChar == '\b'){
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d059      	beq.n	80052a2 <prvCLITask+0x196>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80051ee:	001a      	movs	r2, r3
 80051f0:	3a20      	subs	r2, #32
 80051f2:	2a5e      	cmp	r2, #94	; 0x5e
 80051f4:	d83d      	bhi.n	8005272 <prvCLITask+0x166>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 80051f6:	465a      	mov	r2, fp
 80051f8:	2a31      	cmp	r2, #49	; 0x31
 80051fa:	dc3a      	bgt.n	8005272 <prvCLITask+0x166>
						cInputString[cInputIndex] =cRxedChar;
 80051fc:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <prvCLITask+0x1d4>)
 80051fe:	4659      	mov	r1, fp
 8005200:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005202:	465b      	mov	r3, fp
 8005204:	3301      	adds	r3, #1
 8005206:	b25b      	sxtb	r3, r3
 8005208:	469b      	mov	fp, r3
 800520a:	e032      	b.n	8005272 <prvCLITask+0x166>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800520c:	2200      	movs	r2, #0
 800520e:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005210:	f00a f8be 	bl	800f390 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005214:	3c3e      	subs	r4, #62	; 0x3e
			if(UARTRxBuf[PcPort - 1][chr]){
 8005216:	7833      	ldrb	r3, [r6, #0]
 8005218:	3b01      	subs	r3, #1
 800521a:	0021      	movs	r1, r4
 800521c:	019a      	lsls	r2, r3, #6
 800521e:	18aa      	adds	r2, r5, r2
 8005220:	5d12      	ldrb	r2, [r2, r4]
 8005222:	2a00      	cmp	r2, #0
 8005224:	d1c5      	bne.n	80051b2 <prvCLITask+0xa6>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005226:	2c3f      	cmp	r4, #63	; 0x3f
 8005228:	d0f0      	beq.n	800520c <prvCLITask+0x100>
			taskYIELD();
 800522a:	f00a f8b1 	bl	800f390 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800522e:	3401      	adds	r4, #1
 8005230:	b2a4      	uxth	r4, r4
 8005232:	2c3f      	cmp	r4, #63	; 0x3f
 8005234:	d9ef      	bls.n	8005216 <prvCLITask+0x10a>
 8005236:	e7c8      	b.n	80051ca <prvCLITask+0xbe>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <prvCLITask+0x1b0>)
 800523a:	7818      	ldrb	r0, [r3, #0]
 800523c:	230a      	movs	r3, #10
 800523e:	2202      	movs	r2, #2
 8005240:	4928      	ldr	r1, [pc, #160]	; (80052e4 <prvCLITask+0x1d8>)
 8005242:	f008 f8f3 	bl	800d42c <writePxITMutex>
			if(cInputIndex == 0){
 8005246:	465b      	mov	r3, fp
 8005248:	2b00      	cmp	r3, #0
 800524a:	d025      	beq.n	8005298 <prvCLITask+0x18c>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800524c:	4c24      	ldr	r4, [pc, #144]	; (80052e0 <prvCLITask+0x1d4>)
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <prvCLITask+0x1b0>)
 8005250:	7818      	ldrb	r0, [r3, #0]
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	0022      	movs	r2, r4
 8005256:	2101      	movs	r1, #1
 8005258:	f7ff fd46 	bl	8004ce8 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800525c:	0021      	movs	r1, r4
 800525e:	4822      	ldr	r0, [pc, #136]	; (80052e8 <prvCLITask+0x1dc>)
 8005260:	f00e f8e2 	bl	8013428 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005264:	2232      	movs	r2, #50	; 0x32
 8005266:	2100      	movs	r1, #0
 8005268:	0020      	movs	r0, r4
 800526a:	f00d fea7 	bl	8012fbc <memset>
			cInputIndex =0;
 800526e:	2300      	movs	r3, #0
 8005270:	469b      	mov	fp, r3
		taskYIELD();
 8005272:	f00a f88d 	bl	800f390 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005276:	4653      	mov	r3, sl
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	3b01      	subs	r3, #1
 800527c:	464a      	mov	r2, r9
 800527e:	5cd2      	ldrb	r2, [r2, r3]
 8005280:	b294      	uxth	r4, r2
 8005282:	2c3f      	cmp	r4, #63	; 0x3f
 8005284:	d8a1      	bhi.n	80051ca <prvCLITask+0xbe>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005286:	0011      	movs	r1, r2
 8005288:	019d      	lsls	r5, r3, #6
 800528a:	4814      	ldr	r0, [pc, #80]	; (80052dc <prvCLITask+0x1d0>)
 800528c:	1940      	adds	r0, r0, r5
 800528e:	5c82      	ldrb	r2, [r0, r2]
 8005290:	2a00      	cmp	r2, #0
 8005292:	d18e      	bne.n	80051b2 <prvCLITask+0xa6>
 8005294:	4d11      	ldr	r5, [pc, #68]	; (80052dc <prvCLITask+0x1d0>)
 8005296:	e7c6      	b.n	8005226 <prvCLITask+0x11a>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005298:	4913      	ldr	r1, [pc, #76]	; (80052e8 <prvCLITask+0x1dc>)
 800529a:	4811      	ldr	r0, [pc, #68]	; (80052e0 <prvCLITask+0x1d4>)
 800529c:	f00e f8c4 	bl	8013428 <strcpy>
 80052a0:	e7d4      	b.n	800524c <prvCLITask+0x140>
				if(cInputIndex > 0){
 80052a2:	465b      	mov	r3, fp
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	dde4      	ble.n	8005272 <prvCLITask+0x166>
					cInputIndex--;
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	469b      	mov	fp, r3
					cInputString[cInputIndex] ='\0';
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <prvCLITask+0x1d4>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	4659      	mov	r1, fp
 80052b4:	545a      	strb	r2, [r3, r1]
 80052b6:	e7dc      	b.n	8005272 <prvCLITask+0x166>
 80052b8:	200069c4 	.word	0x200069c4
 80052bc:	20000a77 	.word	0x20000a77
 80052c0:	20000050 	.word	0x20000050
 80052c4:	08017b3c 	.word	0x08017b3c
 80052c8:	20001076 	.word	0x20001076
 80052cc:	20001220 	.word	0x20001220
 80052d0:	08018050 	.word	0x08018050
 80052d4:	0801807c 	.word	0x0801807c
 80052d8:	20001450 	.word	0x20001450
 80052dc:	200012d0 	.word	0x200012d0
 80052e0:	20001150 	.word	0x20001150
 80052e4:	0801993c 	.word	0x0801993c
 80052e8:	200011ec 	.word	0x200011ec

080052ec <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <ParseSnippetCommand+0x78>)
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	3a01      	subs	r2, #1
 80052f6:	0093      	lsls	r3, r2, #2
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <ParseSnippetCommand+0x7c>)
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02c      	beq.n	8005360 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005306:	4b19      	ldr	r3, [pc, #100]	; (800536c <ParseSnippetCommand+0x80>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d014      	beq.n	8005338 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <ParseSnippetCommand+0x80>)
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	782b      	ldrb	r3, [r5, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005318:	2113      	movs	r1, #19
 800531a:	0028      	movs	r0, r5
 800531c:	f00e f876 	bl	801340c <strchr>
 8005320:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005322:	d011      	beq.n	8005348 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005324:	1b42      	subs	r2, r0, r5
 8005326:	0029      	movs	r1, r5
 8005328:	0020      	movs	r0, r4
 800532a:	f00e f896 	bl	801345a <strncpy>
		ptrStart =ptrEnd + 1;
 800532e:	3601      	adds	r6, #1
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <ParseSnippetCommand+0x80>)
 8005332:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005334:	2001      	movs	r0, #1
 8005336:	e006      	b.n	8005346 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <ParseSnippetCommand+0x80>)
 800533a:	6018      	str	r0, [r3, #0]
 800533c:	e7e7      	b.n	800530e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <ParseSnippetCommand+0x80>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
		return false;
 8005344:	2000      	movs	r0, #0
}
 8005346:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005348:	0029      	movs	r1, r5
 800534a:	0020      	movs	r0, r4
 800534c:	f00e f86c 	bl	8013428 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005350:	0020      	movs	r0, r4
 8005352:	f7fa fee1 	bl	8000118 <strlen>
 8005356:	182d      	adds	r5, r5, r0
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <ParseSnippetCommand+0x80>)
 800535a:	601d      	str	r5, [r3, #0]
	return true;
 800535c:	2001      	movs	r0, #1
 800535e:	e7f2      	b.n	8005346 <ParseSnippetCommand+0x5a>
		return false;
 8005360:	2000      	movs	r0, #0
 8005362:	e7f0      	b.n	8005346 <ParseSnippetCommand+0x5a>
 8005364:	2000121f 	.word	0x2000121f
 8005368:	200069e0 	.word	0x200069e0
 800536c:	20001248 	.word	0x20001248

08005370 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005372:	b083      	sub	sp, #12
 8005374:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005376:	0083      	lsls	r3, r0, #2
 8005378:	181b      	adds	r3, r3, r0
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4a3f      	ldr	r2, [pc, #252]	; (800547c <CheckSnippetCondition+0x10c>)
 800537e:	5c9b      	ldrb	r3, [r3, r2]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d003      	beq.n	800538c <CheckSnippetCondition+0x1c>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d015      	beq.n	80053b4 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 8005388:	2000      	movs	r0, #0
 800538a:	e011      	b.n	80053b0 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800538c:	493b      	ldr	r1, [pc, #236]	; (800547c <CheckSnippetCondition+0x10c>)
 800538e:	0083      	lsls	r3, r0, #2
 8005390:	181a      	adds	r2, r3, r0
 8005392:	0092      	lsls	r2, r2, #2
 8005394:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005396:	7890      	ldrb	r0, [r2, #2]
 8005398:	00c2      	lsls	r2, r0, #3
 800539a:	1812      	adds	r2, r2, r0
 800539c:	191b      	adds	r3, r3, r4
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	18cb      	adds	r3, r1, r3
 80053a2:	4937      	ldr	r1, [pc, #220]	; (8005480 <CheckSnippetCondition+0x110>)
 80053a4:	5c50      	ldrb	r0, [r2, r1]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	1ac0      	subs	r0, r0, r3
 80053aa:	4243      	negs	r3, r0
 80053ac:	4158      	adcs	r0, r3
 80053ae:	b2c0      	uxtb	r0, r0
}
 80053b0:	b003      	add	sp, #12
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80053b4:	4e31      	ldr	r6, [pc, #196]	; (800547c <CheckSnippetCondition+0x10c>)
 80053b6:	0085      	lsls	r5, r0, #2
 80053b8:	182b      	adds	r3, r5, r0
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	18f3      	adds	r3, r6, r3
 80053be:	78da      	ldrb	r2, [r3, #3]
 80053c0:	3a01      	subs	r2, #1
 80053c2:	0053      	lsls	r3, r2, #1
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <CheckSnippetCondition+0x114>)
 80053ca:	589b      	ldr	r3, [r3, r2]
 80053cc:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80053ce:	1829      	adds	r1, r5, r0
 80053d0:	0089      	lsls	r1, r1, #2
 80053d2:	3106      	adds	r1, #6
 80053d4:	1989      	adds	r1, r1, r6
 80053d6:	2204      	movs	r2, #4
 80053d8:	a801      	add	r0, sp, #4
 80053da:	f00d fde6 	bl	8012faa <memcpy>
			switch(snippets[index].cond.mathOperator){
 80053de:	192d      	adds	r5, r5, r4
 80053e0:	00ad      	lsls	r5, r5, #2
 80053e2:	1975      	adds	r5, r6, r5
 80053e4:	786b      	ldrb	r3, [r5, #1]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d83f      	bhi.n	800546a <CheckSnippetCondition+0xfa>
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4a26      	ldr	r2, [pc, #152]	; (8005488 <CheckSnippetCondition+0x118>)
 80053ee:	58d3      	ldr	r3, [r2, r3]
 80053f0:	469f      	mov	pc, r3
					if(flt1 == flt2)
 80053f2:	1c39      	adds	r1, r7, #0
 80053f4:	9801      	ldr	r0, [sp, #4]
 80053f6:	f7fb f86b 	bl	80004d0 <__aeabi_fcmpeq>
 80053fa:	1e43      	subs	r3, r0, #1
 80053fc:	4198      	sbcs	r0, r3
 80053fe:	e7d7      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005400:	1c39      	adds	r1, r7, #0
 8005402:	9801      	ldr	r0, [sp, #4]
 8005404:	f7fb f86a 	bl	80004dc <__aeabi_fcmplt>
 8005408:	1e43      	subs	r3, r0, #1
 800540a:	4198      	sbcs	r0, r3
 800540c:	e7d0      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 800540e:	1c39      	adds	r1, r7, #0
 8005410:	9801      	ldr	r0, [sp, #4]
 8005412:	f7fb f877 	bl	8000504 <__aeabi_fcmpgt>
 8005416:	2800      	cmp	r0, #0
 8005418:	d029      	beq.n	800546e <CheckSnippetCondition+0xfe>
 800541a:	2100      	movs	r1, #0
 800541c:	1c38      	adds	r0, r7, #0
 800541e:	f7fb f857 	bl	80004d0 <__aeabi_fcmpeq>
 8005422:	4243      	negs	r3, r0
 8005424:	4158      	adcs	r0, r3
 8005426:	e7c3      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005428:	1c39      	adds	r1, r7, #0
 800542a:	9801      	ldr	r0, [sp, #4]
 800542c:	f7fb f860 	bl	80004f0 <__aeabi_fcmple>
 8005430:	1e43      	subs	r3, r0, #1
 8005432:	4198      	sbcs	r0, r3
 8005434:	e7bc      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005436:	1c39      	adds	r1, r7, #0
 8005438:	9801      	ldr	r0, [sp, #4]
 800543a:	f7fb f86d 	bl	8000518 <__aeabi_fcmpge>
 800543e:	2800      	cmp	r0, #0
 8005440:	d017      	beq.n	8005472 <CheckSnippetCondition+0x102>
 8005442:	2100      	movs	r1, #0
 8005444:	1c38      	adds	r0, r7, #0
 8005446:	f7fb f843 	bl	80004d0 <__aeabi_fcmpeq>
 800544a:	4243      	negs	r3, r0
 800544c:	4158      	adcs	r0, r3
 800544e:	e7af      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005450:	1c39      	adds	r1, r7, #0
 8005452:	9801      	ldr	r0, [sp, #4]
 8005454:	f7fb f83c 	bl	80004d0 <__aeabi_fcmpeq>
 8005458:	2800      	cmp	r0, #0
 800545a:	d10c      	bne.n	8005476 <CheckSnippetCondition+0x106>
 800545c:	2100      	movs	r1, #0
 800545e:	1c38      	adds	r0, r7, #0
 8005460:	f7fb f836 	bl	80004d0 <__aeabi_fcmpeq>
 8005464:	4243      	negs	r3, r0
 8005466:	4158      	adcs	r0, r3
 8005468:	e7a2      	b.n	80053b0 <CheckSnippetCondition+0x40>
	return false;
 800546a:	2000      	movs	r0, #0
 800546c:	e7a0      	b.n	80053b0 <CheckSnippetCondition+0x40>
 800546e:	2000      	movs	r0, #0
 8005470:	e79e      	b.n	80053b0 <CheckSnippetCondition+0x40>
 8005472:	2000      	movs	r0, #0
 8005474:	e79c      	b.n	80053b0 <CheckSnippetCondition+0x40>
 8005476:	2000      	movs	r0, #0
 8005478:	e79a      	b.n	80053b0 <CheckSnippetCondition+0x40>
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	200069e0 	.word	0x200069e0
 8005480:	2000151c 	.word	0x2000151c
 8005484:	20000084 	.word	0x20000084
 8005488:	08017e38 	.word	0x08017e38

0800548c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800548e:	f008 f9e7 	bl	800d860 <FreeRTOS_CLIGetOutputBuffer>
 8005492:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005494:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <ExecuteSnippet+0x7c>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d032      	beq.n	8005502 <ExecuteSnippet+0x76>
 800549c:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 800549e:	4f1b      	ldr	r7, [pc, #108]	; (800550c <ExecuteSnippet+0x80>)
 80054a0:	e01a      	b.n	80054d8 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <ExecuteSnippet+0x84>)
 80054a4:	7818      	ldrb	r0, [r3, #0]
 80054a6:	002b      	movs	r3, r5
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <ExecuteSnippet+0x88>)
 80054aa:	2100      	movs	r1, #0
 80054ac:	f7ff fc1c 	bl	8004ce8 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80054b0:	0028      	movs	r0, r5
 80054b2:	f7fa fe31 	bl	8000118 <strlen>
 80054b6:	0002      	movs	r2, r0
 80054b8:	2100      	movs	r1, #0
 80054ba:	0028      	movs	r0, r5
 80054bc:	f00d fd7e 	bl	8012fbc <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054c0:	4914      	ldr	r1, [pc, #80]	; (8005514 <ExecuteSnippet+0x88>)
 80054c2:	68f0      	ldr	r0, [r6, #12]
 80054c4:	f7ff ff12 	bl	80052ec <ParseSnippetCommand>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d1ea      	bne.n	80054a2 <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 80054cc:	3401      	adds	r4, #1
 80054ce:	b2a4      	uxth	r4, r4
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <ExecuteSnippet+0x7c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d914      	bls.n	8005502 <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 80054d8:	00a3      	lsls	r3, r4, #2
 80054da:	191b      	adds	r3, r3, r4
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	7c1b      	ldrb	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f2      	beq.n	80054cc <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80054e6:	b2e0      	uxtb	r0, r4
 80054e8:	f7ff ff42 	bl	8005370 <CheckSnippetCondition>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d0ed      	beq.n	80054cc <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <ExecuteSnippet+0x8c>)
 80054f2:	2220      	movs	r2, #32
 80054f4:	719a      	strb	r2, [r3, #6]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054f6:	00a3      	lsls	r3, r4, #2
 80054f8:	191e      	adds	r6, r3, r4
 80054fa:	00b6      	lsls	r6, r6, #2
 80054fc:	4b03      	ldr	r3, [pc, #12]	; (800550c <ExecuteSnippet+0x80>)
 80054fe:	199e      	adds	r6, r3, r6
 8005500:	e7de      	b.n	80054c0 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 8005502:	2000      	movs	r0, #0
 8005504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	2000121f 	.word	0x2000121f
 800550c:	200069e0 	.word	0x200069e0
 8005510:	20000a77 	.word	0x20000a77
 8005514:	200011b8 	.word	0x200011b8
 8005518:	200069c4 	.word	0x200069c4

0800551c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800551c:	2000      	movs	r0, #0
 800551e:	4770      	bx	lr

08005520 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	0004      	movs	r4, r0
 8005526:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005528:	2300      	movs	r3, #0
 800552a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800552c:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800552e:	2800      	cmp	r0, #0
 8005530:	d101      	bne.n	8005536 <setBaudrateCommand+0x16>
 8005532:	b672      	cpsid	i
 8005534:	e7fe      	b.n	8005534 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005536:	aa01      	add	r2, sp, #4
 8005538:	2101      	movs	r1, #1
 800553a:	0028      	movs	r0, r5
 800553c:	f008 f994 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005540:	2300      	movs	r3, #0
 8005542:	56c3      	ldrsb	r3, [r0, r3]
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d00c      	beq.n	8005562 <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005548:	466a      	mov	r2, sp
 800554a:	2102      	movs	r1, #2
 800554c:	0028      	movs	r0, r5
 800554e:	f008 f98b 	bl	800d868 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005552:	f00d faa0 	bl	8012a96 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005556:	2213      	movs	r2, #19
 8005558:	490f      	ldr	r1, [pc, #60]	; (8005598 <setBaudrateCommand+0x78>)
 800555a:	0020      	movs	r0, r4
 800555c:	f00d fd25 	bl	8012faa <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005560:	e016      	b.n	8005590 <setBaudrateCommand+0x70>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005562:	3001      	adds	r0, #1
 8005564:	f00d fa97 	bl	8012a96 <atol>
 8005568:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800556a:	466a      	mov	r2, sp
 800556c:	2102      	movs	r1, #2
 800556e:	0028      	movs	r0, r5
 8005570:	f008 f97a 	bl	800d868 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005574:	f00d fa8f 	bl	8012a96 <atol>
 8005578:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800557a:	b2f0      	uxtb	r0, r6
 800557c:	0029      	movs	r1, r5
 800557e:	f007 ff9b 	bl	800d4b8 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005582:	23ff      	movs	r3, #255	; 0xff
 8005584:	4033      	ands	r3, r6
 8005586:	002a      	movs	r2, r5
 8005588:	4904      	ldr	r1, [pc, #16]	; (800559c <setBaudrateCommand+0x7c>)
 800558a:	0020      	movs	r0, r4
 800558c:	f00d ff10 	bl	80133b0 <sprintf>
}
 8005590:	2000      	movs	r0, #0
 8005592:	b002      	add	sp, #8
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	08018d08 	.word	0x08018d08
 800559c:	08018ce0 	.word	0x08018ce0

080055a0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055a0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d101      	bne.n	80055aa <flashsizeCommand+0xa>
 80055a6:	b672      	cpsid	i
 80055a8:	e7fe      	b.n	80055a8 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80055aa:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <flashsizeCommand+0x18>)
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	4903      	ldr	r1, [pc, #12]	; (80055bc <flashsizeCommand+0x1c>)
 80055b0:	f00d fefe 	bl	80133b0 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80055b4:	2000      	movs	r0, #0
 80055b6:	bd10      	pop	{r4, pc}
 80055b8:	1ffff7cc 	.word	0x1ffff7cc
 80055bc:	080186d4 	.word	0x080186d4

080055c0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c0:	b510      	push	{r4, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	0004      	movs	r4, r0
 80055c6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	d101      	bne.n	80055d8 <GetReadPrecentageCommand+0x18>
 80055d4:	b672      	cpsid	i
 80055d6:	e7fe      	b.n	80055d6 <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d8:	aa01      	add	r2, sp, #4
 80055da:	2101      	movs	r1, #1
 80055dc:	f008 f944 	bl	800d868 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80055e0:	7803      	ldrb	r3, [r0, #0]
 80055e2:	3b32      	subs	r3, #50	; 0x32
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d907      	bls.n	80055f8 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80055e8:	2215      	movs	r2, #21
 80055ea:	490b      	ldr	r1, [pc, #44]	; (8005618 <GetReadPrecentageCommand+0x58>)
 80055ec:	0020      	movs	r0, r4
 80055ee:	f00d fcdc 	bl	8012faa <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80055f2:	2000      	movs	r0, #0
 80055f4:	b002      	add	sp, #8
 80055f6:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80055f8:	f00d fa4d 	bl	8012a96 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80055fc:	b2c0      	uxtb	r0, r0
 80055fe:	4669      	mov	r1, sp
 8005600:	f003 f98a 	bl	8008918 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005604:	9800      	ldr	r0, [sp, #0]
 8005606:	f7fd fa8d 	bl	8002b24 <__aeabi_f2d>
 800560a:	0002      	movs	r2, r0
 800560c:	000b      	movs	r3, r1
 800560e:	4903      	ldr	r1, [pc, #12]	; (800561c <GetReadPrecentageCommand+0x5c>)
 8005610:	0020      	movs	r0, r4
 8005612:	f00d fecd 	bl	80133b0 <sprintf>
 8005616:	e7ec      	b.n	80055f2 <GetReadPrecentageCommand+0x32>
 8005618:	080183d0 	.word	0x080183d0
 800561c:	080183ac 	.word	0x080183ac

08005620 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005620:	b510      	push	{r4, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005626:	2300      	movs	r3, #0
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800562c:	2800      	cmp	r0, #0
 800562e:	d101      	bne.n	8005634 <ReadVrefCommand+0x14>
 8005630:	b672      	cpsid	i
 8005632:	e7fe      	b.n	8005632 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005634:	4669      	mov	r1, sp
 8005636:	a801      	add	r0, sp, #4
 8005638:	f003 f8b0 	bl	800879c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800563c:	a901      	add	r1, sp, #4
 800563e:	0020      	movs	r0, r4
 8005640:	f00d fef2 	bl	8013428 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005644:	9800      	ldr	r0, [sp, #0]
 8005646:	f7fd fa6d 	bl	8002b24 <__aeabi_f2d>
 800564a:	0002      	movs	r2, r0
 800564c:	000b      	movs	r3, r1
 800564e:	4903      	ldr	r1, [pc, #12]	; (800565c <ReadVrefCommand+0x3c>)
 8005650:	0020      	movs	r0, r4
 8005652:	f00d fead 	bl	80133b0 <sprintf>
}
 8005656:	2000      	movs	r0, #0
 8005658:	b002      	add	sp, #8
 800565a:	bd10      	pop	{r4, pc}
 800565c:	0801841c 	.word	0x0801841c

08005660 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005660:	b510      	push	{r4, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005666:	2300      	movs	r3, #0
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800566c:	2800      	cmp	r0, #0
 800566e:	d101      	bne.n	8005674 <ReadTempCommand+0x14>
 8005670:	b672      	cpsid	i
 8005672:	e7fe      	b.n	8005672 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005674:	4669      	mov	r1, sp
 8005676:	a801      	add	r0, sp, #4
 8005678:	f003 f890 	bl	800879c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800567c:	a901      	add	r1, sp, #4
 800567e:	0020      	movs	r0, r4
 8005680:	f00d fed2 	bl	8013428 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005684:	9801      	ldr	r0, [sp, #4]
 8005686:	f7fd fa4d 	bl	8002b24 <__aeabi_f2d>
 800568a:	0002      	movs	r2, r0
 800568c:	000b      	movs	r3, r1
 800568e:	4903      	ldr	r1, [pc, #12]	; (800569c <ReadTempCommand+0x3c>)
 8005690:	0020      	movs	r0, r4
 8005692:	f00d fe8d 	bl	80133b0 <sprintf>
}
 8005696:	2000      	movs	r0, #0
 8005698:	b002      	add	sp, #8
 800569a:	bd10      	pop	{r4, pc}
 800569c:	080183e8 	.word	0x080183e8

080056a0 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	0004      	movs	r4, r0
 80056a6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80056ac:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d101      	bne.n	80056ba <ADCReadCommand+0x1a>
 80056b6:	b672      	cpsid	i
 80056b8:	e7fe      	b.n	80056b8 <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80056ba:	aa03      	add	r2, sp, #12
 80056bc:	2101      	movs	r1, #1
 80056be:	0030      	movs	r0, r6
 80056c0:	f008 f8d2 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80056c4:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056c6:	aa02      	add	r2, sp, #8
 80056c8:	2102      	movs	r1, #2
 80056ca:	0030      	movs	r0, r6
 80056cc:	f008 f8cc 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80056d0:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80056d2:	782b      	ldrb	r3, [r5, #0]
 80056d4:	3b32      	subs	r3, #50	; 0x32
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d907      	bls.n	80056ea <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056da:	2215      	movs	r2, #21
 80056dc:	4919      	ldr	r1, [pc, #100]	; (8005744 <ADCReadCommand+0xa4>)
 80056de:	0020      	movs	r0, r4
 80056e0:	f00d fc63 	bl	8012faa <memcpy>
}
 80056e4:	2000      	movs	r0, #0
 80056e6:	b004      	add	sp, #16
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80056ea:	0028      	movs	r0, r5
 80056ec:	f00d f9d3 	bl	8012a96 <atol>
 80056f0:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80056f2:	4915      	ldr	r1, [pc, #84]	; (8005748 <ADCReadCommand+0xa8>)
 80056f4:	0030      	movs	r0, r6
 80056f6:	f7fa fd05 	bl	8000104 <strcmp>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d005      	beq.n	800570a <ADCReadCommand+0x6a>
 80056fe:	4913      	ldr	r1, [pc, #76]	; (800574c <ADCReadCommand+0xac>)
 8005700:	0030      	movs	r0, r6
 8005702:	f7fa fcff 	bl	8000104 <strcmp>
 8005706:	2800      	cmp	r0, #0
 8005708:	d116      	bne.n	8005738 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 800570a:	4e0f      	ldr	r6, [pc, #60]	; (8005748 <ADCReadCommand+0xa8>)
 800570c:	0031      	movs	r1, r6
 800570e:	0028      	movs	r0, r5
 8005710:	f003 f9cc 	bl	8008aac <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005714:	aa01      	add	r2, sp, #4
 8005716:	0031      	movs	r1, r6
 8005718:	0028      	movs	r0, r5
 800571a:	f003 f9f5 	bl	8008b08 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800571e:	a901      	add	r1, sp, #4
 8005720:	0020      	movs	r0, r4
 8005722:	f00d fe81 	bl	8013428 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005726:	9801      	ldr	r0, [sp, #4]
 8005728:	f7fa ff4a 	bl	80005c0 <__aeabi_f2uiz>
 800572c:	b282      	uxth	r2, r0
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <ADCReadCommand+0xb0>)
 8005730:	0020      	movs	r0, r4
 8005732:	f00d fe3d 	bl	80133b0 <sprintf>
 8005736:	e7d5      	b.n	80056e4 <ADCReadCommand+0x44>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005738:	2212      	movs	r2, #18
 800573a:	4906      	ldr	r1, [pc, #24]	; (8005754 <ADCReadCommand+0xb4>)
 800573c:	0020      	movs	r0, r4
 800573e:	f00d fc34 	bl	8012faa <memcpy>
 8005742:	e7cf      	b.n	80056e4 <ADCReadCommand+0x44>
 8005744:	080183d0 	.word	0x080183d0
 8005748:	0801835c 	.word	0x0801835c
 800574c:	08018360 	.word	0x08018360
 8005750:	08018368 	.word	0x08018368
 8005754:	08018378 	.word	0x08018378

08005758 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575a:	46d6      	mov	lr, sl
 800575c:	4647      	mov	r7, r8
 800575e:	b580      	push	{r7, lr}
 8005760:	b085      	sub	sp, #20
 8005762:	0004      	movs	r4, r0
 8005764:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005766:	2300      	movs	r3, #0
 8005768:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 800576a:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <testportCommand+0x19c>)
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	ab02      	add	r3, sp, #8
 8005770:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005772:	2c00      	cmp	r4, #0
 8005774:	d101      	bne.n	800577a <testportCommand+0x22>
 8005776:	b672      	cpsid	i
 8005778:	e7fe      	b.n	8005778 <testportCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800577a:	aa03      	add	r2, sp, #12
 800577c:	2101      	movs	r1, #1
 800577e:	f008 f873 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8005782:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005784:	495c      	ldr	r1, [pc, #368]	; (80058f8 <testportCommand+0x1a0>)
 8005786:	f7fa fcbd 	bl	8000104 <strcmp>
 800578a:	2800      	cmp	r0, #0
 800578c:	d173      	bne.n	8005876 <testportCommand+0x11e>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800578e:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <testportCommand+0x1a4>)
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <testportCommand+0x1a8>)
 8005794:	189b      	adds	r3, r3, r2
 8005796:	3b01      	subs	r3, #1
 8005798:	781e      	ldrb	r6, [r3, #0]
 800579a:	2501      	movs	r5, #1
			if(PcPort != ports){
 800579c:	4b57      	ldr	r3, [pc, #348]	; (80058fc <testportCommand+0x1a4>)
 800579e:	4698      	mov	r8, r3
 80057a0:	e015      	b.n	80057ce <testportCommand+0x76>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80057a2:	002a      	movs	r2, r5
 80057a4:	4957      	ldr	r1, [pc, #348]	; (8005904 <testportCommand+0x1ac>)
 80057a6:	0020      	movs	r0, r4
 80057a8:	f00d fe02 	bl	80133b0 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80057ac:	0020      	movs	r0, r4
 80057ae:	f7fa fcb3 	bl	8000118 <strlen>
 80057b2:	b282      	uxth	r2, r0
 80057b4:	4b51      	ldr	r3, [pc, #324]	; (80058fc <testportCommand+0x1a4>)
 80057b6:	7818      	ldrb	r0, [r3, #0]
 80057b8:	2364      	movs	r3, #100	; 0x64
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	3b5a      	subs	r3, #90	; 0x5a
 80057be:	0021      	movs	r1, r4
 80057c0:	f007 fe0c 	bl	800d3dc <writePxMutex>
 80057c4:	e02f      	b.n	8005826 <testportCommand+0xce>
 80057c6:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80057c8:	2d07      	cmp	r5, #7
 80057ca:	d100      	bne.n	80057ce <testportCommand+0x76>
 80057cc:	e07f      	b.n	80058ce <testportCommand+0x176>
 80057ce:	b2eb      	uxtb	r3, r5
 80057d0:	469a      	mov	sl, r3
			if(PcPort != ports){
 80057d2:	4643      	mov	r3, r8
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	4553      	cmp	r3, sl
 80057d8:	d0f5      	beq.n	80057c6 <testportCommand+0x6e>
				WriteVaule[0] =rand();
 80057da:	f00d fc07 	bl	8012fec <rand>
 80057de:	af02      	add	r7, sp, #8
 80057e0:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 80057e2:	2364      	movs	r3, #100	; 0x64
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	3b5a      	subs	r3, #90	; 0x5a
 80057e8:	2201      	movs	r2, #1
 80057ea:	0039      	movs	r1, r7
 80057ec:	4650      	mov	r0, sl
 80057ee:	f007 fdf5 	bl	800d3dc <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80057f2:	4650      	mov	r0, sl
 80057f4:	f007 fdd0 	bl	800d398 <GetUart>
 80057f8:	6803      	ldr	r3, [r0, #0]
 80057fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 80057fc:	783a      	ldrb	r2, [r7, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	429a      	cmp	r2, r3
 8005802:	d0ce      	beq.n	80057a2 <testportCommand+0x4a>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005804:	002a      	movs	r2, r5
 8005806:	4940      	ldr	r1, [pc, #256]	; (8005908 <testportCommand+0x1b0>)
 8005808:	0020      	movs	r0, r4
 800580a:	f00d fdd1 	bl	80133b0 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800580e:	0020      	movs	r0, r4
 8005810:	f7fa fc82 	bl	8000118 <strlen>
 8005814:	b282      	uxth	r2, r0
 8005816:	4b39      	ldr	r3, [pc, #228]	; (80058fc <testportCommand+0x1a4>)
 8005818:	7818      	ldrb	r0, [r3, #0]
 800581a:	2364      	movs	r3, #100	; 0x64
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	3b5a      	subs	r3, #90	; 0x5a
 8005820:	0021      	movs	r1, r4
 8005822:	f007 fddb 	bl	800d3dc <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005826:	2254      	movs	r2, #84	; 0x54
 8005828:	4938      	ldr	r1, [pc, #224]	; (800590c <testportCommand+0x1b4>)
 800582a:	0020      	movs	r0, r4
 800582c:	f00d fbbd 	bl	8012faa <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005830:	0020      	movs	r0, r4
 8005832:	f7fa fc71 	bl	8000118 <strlen>
 8005836:	b282      	uxth	r2, r0
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <testportCommand+0x1a4>)
 800583a:	7818      	ldrb	r0, [r3, #0]
 800583c:	2364      	movs	r3, #100	; 0x64
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	3b5a      	subs	r3, #90	; 0x5a
 8005842:	0021      	movs	r1, r4
 8005844:	f007 fdca 	bl	800d3dc <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005848:	3601      	adds	r6, #1
 800584a:	4b2c      	ldr	r3, [pc, #176]	; (80058fc <testportCommand+0x1a4>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	4a2f      	ldr	r2, [pc, #188]	; (8005910 <testportCommand+0x1b8>)
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	5d9b      	ldrb	r3, [r3, r6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1b4      	bne.n	80057c6 <testportCommand+0x6e>
 800585c:	4692      	mov	sl, r2
 800585e:	4f27      	ldr	r7, [pc, #156]	; (80058fc <testportCommand+0x1a4>)
					Delay_ms(1);
 8005860:	2001      	movs	r0, #1
 8005862:	f009 ff13 	bl	800f68c <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005866:	783b      	ldrb	r3, [r7, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	019b      	lsls	r3, r3, #6
 800586c:	4453      	add	r3, sl
 800586e:	5d9b      	ldrb	r3, [r3, r6]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f5      	beq.n	8005860 <testportCommand+0x108>
 8005874:	e7a7      	b.n	80057c6 <testportCommand+0x6e>
	else if(pcParameterString1[0] == 'p'){
 8005876:	2300      	movs	r3, #0
 8005878:	56eb      	ldrsb	r3, [r5, r3]
 800587a:	2b70      	cmp	r3, #112	; 0x70
 800587c:	d005      	beq.n	800588a <testportCommand+0x132>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800587e:	220f      	movs	r2, #15
 8005880:	4924      	ldr	r1, [pc, #144]	; (8005914 <testportCommand+0x1bc>)
 8005882:	0020      	movs	r0, r4
 8005884:	f00d fb91 	bl	8012faa <memcpy>
 8005888:	e021      	b.n	80058ce <testportCommand+0x176>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 800588a:	1c68      	adds	r0, r5, #1
 800588c:	f00d f903 	bl	8012a96 <atol>
 8005890:	0005      	movs	r5, r0
 8005892:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005894:	1e7b      	subs	r3, r7, #1
 8005896:	2b05      	cmp	r3, #5
 8005898:	d825      	bhi.n	80058e6 <testportCommand+0x18e>
				WriteVaule[0] =rand();
 800589a:	f00d fba7 	bl	8012fec <rand>
 800589e:	ae02      	add	r6, sp, #8
 80058a0:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80058a2:	2364      	movs	r3, #100	; 0x64
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	3b32      	subs	r3, #50	; 0x32
 80058a8:	2201      	movs	r2, #1
 80058aa:	0031      	movs	r1, r6
 80058ac:	0038      	movs	r0, r7
 80058ae:	f007 fd95 	bl	800d3dc <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 80058b2:	0038      	movs	r0, r7
 80058b4:	f007 fd70 	bl	800d398 <GetUart>
 80058b8:	6803      	ldr	r3, [r0, #0]
 80058ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 80058bc:	7832      	ldrb	r2, [r6, #0]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d10a      	bne.n	80058da <testportCommand+0x182>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 80058c4:	b2ea      	uxtb	r2, r5
 80058c6:	490f      	ldr	r1, [pc, #60]	; (8005904 <testportCommand+0x1ac>)
 80058c8:	0020      	movs	r0, r4
 80058ca:	f00d fd71 	bl	80133b0 <sprintf>
}
 80058ce:	2000      	movs	r0, #0
 80058d0:	b005      	add	sp, #20
 80058d2:	bc0c      	pop	{r2, r3}
 80058d4:	4690      	mov	r8, r2
 80058d6:	469a      	mov	sl, r3
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80058da:	b2ea      	uxtb	r2, r5
 80058dc:	490a      	ldr	r1, [pc, #40]	; (8005908 <testportCommand+0x1b0>)
 80058de:	0020      	movs	r0, r4
 80058e0:	f00d fd66 	bl	80133b0 <sprintf>
 80058e4:	e7f3      	b.n	80058ce <testportCommand+0x176>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80058e6:	221b      	movs	r2, #27
 80058e8:	490b      	ldr	r1, [pc, #44]	; (8005918 <testportCommand+0x1c0>)
 80058ea:	0020      	movs	r0, r4
 80058ec:	f00d fb5d 	bl	8012faa <memcpy>
	return pdFALSE;
 80058f0:	e7ed      	b.n	80058ce <testportCommand+0x176>
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	080177b0 	.word	0x080177b0
 80058f8:	08017b0c 	.word	0x08017b0c
 80058fc:	20000a77 	.word	0x20000a77
 8005900:	20001450 	.word	0x20001450
 8005904:	08019fcc 	.word	0x08019fcc
 8005908:	08019fe8 	.word	0x08019fe8
 800590c:	08019ffc 	.word	0x08019ffc
 8005910:	200012d0 	.word	0x200012d0
 8005914:	0801a050 	.word	0x0801a050
 8005918:	0801a060 	.word	0x0801a060

0800591c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	b083      	sub	sp, #12
 8005920:	0004      	movs	r4, r0
 8005922:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005924:	2300      	movs	r3, #0
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800592a:	2800      	cmp	r0, #0
 800592c:	d101      	bne.n	8005932 <unbridgeCommand+0x16>
 800592e:	b672      	cpsid	i
 8005930:	e7fe      	b.n	8005930 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005932:	aa01      	add	r2, sp, #4
 8005934:	2101      	movs	r1, #1
 8005936:	0028      	movs	r0, r5
 8005938:	f007 ff96 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800593c:	2300      	movs	r3, #0
 800593e:	56c3      	ldrsb	r3, [r0, r3]
 8005940:	2b70      	cmp	r3, #112	; 0x70
 8005942:	d00e      	beq.n	8005962 <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005944:	466a      	mov	r2, sp
 8005946:	2102      	movs	r1, #2
 8005948:	0028      	movs	r0, r5
 800594a:	f007 ff8d 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800594e:	2300      	movs	r3, #0
 8005950:	56c3      	ldrsb	r3, [r0, r3]
 8005952:	2b70      	cmp	r3, #112	; 0x70
 8005954:	d01e      	beq.n	8005994 <unbridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005956:	220f      	movs	r2, #15
 8005958:	491a      	ldr	r1, [pc, #104]	; (80059c4 <unbridgeCommand+0xa8>)
 800595a:	0020      	movs	r0, r4
 800595c:	f00d fb25 	bl	8012faa <memcpy>
 8005960:	e015      	b.n	800598e <unbridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005962:	3001      	adds	r0, #1
 8005964:	f00d f897 	bl	8012a96 <atol>
 8005968:	0006      	movs	r6, r0
 800596a:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800596c:	466a      	mov	r2, sp
 800596e:	2102      	movs	r1, #2
 8005970:	0028      	movs	r0, r5
 8005972:	f007 ff79 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005976:	2300      	movs	r3, #0
 8005978:	56c3      	ldrsb	r3, [r0, r3]
 800597a:	2b70      	cmp	r3, #112	; 0x70
 800597c:	d00e      	beq.n	800599c <unbridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 800597e:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005980:	2867      	cmp	r0, #103	; 0x67
 8005982:	d0e8      	beq.n	8005956 <unbridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005984:	2219      	movs	r2, #25
 8005986:	4910      	ldr	r1, [pc, #64]	; (80059c8 <unbridgeCommand+0xac>)
 8005988:	0020      	movs	r0, r4
 800598a:	f00d fb0e 	bl	8012faa <memcpy>
}
 800598e:	2000      	movs	r0, #0
 8005990:	b003      	add	sp, #12
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005994:	3001      	adds	r0, #1
 8005996:	f00d f87e 	bl	8012a96 <atol>
 800599a:	e7dc      	b.n	8005956 <unbridgeCommand+0x3a>
 800599c:	3001      	adds	r0, #1
 800599e:	f00d f87a 	bl	8012a96 <atol>
 80059a2:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 80059a4:	b2c1      	uxtb	r1, r0
 80059a6:	0038      	movs	r0, r7
 80059a8:	f7fe fea2 	bl	80046f0 <Unbridge>
	if(result == BOS_OK)
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d1e7      	bne.n	8005980 <unbridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	002b      	movs	r3, r5
 80059b4:	4013      	ands	r3, r2
 80059b6:	4032      	ands	r2, r6
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <unbridgeCommand+0xb0>)
 80059ba:	0020      	movs	r0, r4
 80059bc:	f00d fcf8 	bl	80133b0 <sprintf>
 80059c0:	e7e5      	b.n	800598e <unbridgeCommand+0x72>
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	0801a050 	.word	0x0801a050
 80059c8:	0801a118 	.word	0x0801a118
 80059cc:	0801a0f8 	.word	0x0801a0f8

080059d0 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	b083      	sub	sp, #12
 80059d4:	0004      	movs	r4, r0
 80059d6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80059d8:	2300      	movs	r3, #0
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80059de:	2800      	cmp	r0, #0
 80059e0:	d101      	bne.n	80059e6 <bridgeCommand+0x16>
 80059e2:	b672      	cpsid	i
 80059e4:	e7fe      	b.n	80059e4 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059e6:	aa01      	add	r2, sp, #4
 80059e8:	2101      	movs	r1, #1
 80059ea:	0028      	movs	r0, r5
 80059ec:	f007 ff3c 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80059f0:	2300      	movs	r3, #0
 80059f2:	56c3      	ldrsb	r3, [r0, r3]
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d00e      	beq.n	8005a16 <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059f8:	466a      	mov	r2, sp
 80059fa:	2102      	movs	r1, #2
 80059fc:	0028      	movs	r0, r5
 80059fe:	f007 ff33 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a02:	2300      	movs	r3, #0
 8005a04:	56c3      	ldrsb	r3, [r0, r3]
 8005a06:	2b70      	cmp	r3, #112	; 0x70
 8005a08:	d01e      	beq.n	8005a48 <bridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a0a:	220f      	movs	r2, #15
 8005a0c:	491a      	ldr	r1, [pc, #104]	; (8005a78 <bridgeCommand+0xa8>)
 8005a0e:	0020      	movs	r0, r4
 8005a10:	f00d facb 	bl	8012faa <memcpy>
 8005a14:	e015      	b.n	8005a42 <bridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a16:	3001      	adds	r0, #1
 8005a18:	f00d f83d 	bl	8012a96 <atol>
 8005a1c:	0006      	movs	r6, r0
 8005a1e:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a20:	466a      	mov	r2, sp
 8005a22:	2102      	movs	r1, #2
 8005a24:	0028      	movs	r0, r5
 8005a26:	f007 ff1f 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	56c3      	ldrsb	r3, [r0, r3]
 8005a2e:	2b70      	cmp	r3, #112	; 0x70
 8005a30:	d00e      	beq.n	8005a50 <bridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005a32:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005a34:	2867      	cmp	r0, #103	; 0x67
 8005a36:	d0e8      	beq.n	8005a0a <bridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a38:	2217      	movs	r2, #23
 8005a3a:	4910      	ldr	r1, [pc, #64]	; (8005a7c <bridgeCommand+0xac>)
 8005a3c:	0020      	movs	r0, r4
 8005a3e:	f00d fab4 	bl	8012faa <memcpy>
}
 8005a42:	2000      	movs	r0, #0
 8005a44:	b003      	add	sp, #12
 8005a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f00d f824 	bl	8012a96 <atol>
 8005a4e:	e7dc      	b.n	8005a0a <bridgeCommand+0x3a>
 8005a50:	3001      	adds	r0, #1
 8005a52:	f00d f820 	bl	8012a96 <atol>
 8005a56:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005a58:	b2c1      	uxtb	r1, r0
 8005a5a:	0038      	movs	r0, r7
 8005a5c:	f7fe fe34 	bl	80046c8 <Bridge>
	if(result == BOS_OK)
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1e7      	bne.n	8005a34 <bridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	002b      	movs	r3, r5
 8005a68:	4013      	ands	r3, r2
 8005a6a:	4032      	ands	r2, r6
 8005a6c:	4904      	ldr	r1, [pc, #16]	; (8005a80 <bridgeCommand+0xb0>)
 8005a6e:	0020      	movs	r0, r4
 8005a70:	f00d fc9e 	bl	80133b0 <sprintf>
 8005a74:	e7e5      	b.n	8005a42 <bridgeCommand+0x72>
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	0801a050 	.word	0x0801a050
 8005a7c:	08018570 	.word	0x08018570
 8005a80:	0801854c 	.word	0x0801854c

08005a84 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a86:	b085      	sub	sp, #20
 8005a88:	0005      	movs	r5, r0
 8005a8a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	d101      	bne.n	8005a98 <delSnipCommand+0x14>
 8005a94:	b672      	cpsid	i
 8005a96:	e7fe      	b.n	8005a96 <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a98:	aa03      	add	r2, sp, #12
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	f007 fee4 	bl	800d868 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005aa0:	f00c fff3 	bl	8012a8a <atoi>
 8005aa4:	9001      	str	r0, [sp, #4]
 8005aa6:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	d003      	beq.n	8005ab4 <delSnipCommand+0x30>
 8005aac:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <delSnipCommand+0xc8>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	42b3      	cmp	r3, r6
 8005ab2:	d207      	bcs.n	8005ac4 <delSnipCommand+0x40>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ab4:	2223      	movs	r2, #35	; 0x23
 8005ab6:	4926      	ldr	r1, [pc, #152]	; (8005b50 <delSnipCommand+0xcc>)
 8005ab8:	0028      	movs	r0, r5
 8005aba:	f00d fa76 	bl	8012faa <memcpy>
}
 8005abe:	2000      	movs	r0, #0
 8005ac0:	b005      	add	sp, #20
 8005ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005ac4:	466b      	mov	r3, sp
 8005ac6:	791a      	ldrb	r2, [r3, #4]
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	4822      	ldr	r0, [pc, #136]	; (8005b54 <delSnipCommand+0xd0>)
 8005acc:	2314      	movs	r3, #20
 8005ace:	4353      	muls	r3, r2
 8005ad0:	2700      	movs	r7, #0
 8005ad2:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005ad4:	18c4      	adds	r4, r0, r3
 8005ad6:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005ad8:	3302      	adds	r3, #2
 8005ada:	1818      	adds	r0, r3, r0
 8005adc:	2204      	movs	r2, #4
 8005ade:	0039      	movs	r1, r7
 8005ae0:	f00d fa6c 	bl	8012fbc <memset>
		snippets[index - 1].state = false;
 8005ae4:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005ae6:	68e0      	ldr	r0, [r4, #12]
 8005ae8:	f00d f81c 	bl	8012b24 <free>
		snippets[index - 1].cmd = NULL;
 8005aec:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005aee:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <delSnipCommand+0xc8>)
 8005af0:	781f      	ldrb	r7, [r3, #0]
 8005af2:	42be      	cmp	r6, r7
 8005af4:	d213      	bcs.n	8005b1e <delSnipCommand+0x9a>
 8005af6:	466b      	mov	r3, sp
 8005af8:	7919      	ldrb	r1, [r3, #4]
 8005afa:	2214      	movs	r2, #20
 8005afc:	0014      	movs	r4, r2
 8005afe:	434c      	muls	r4, r1
 8005b00:	4814      	ldr	r0, [pc, #80]	; (8005b54 <delSnipCommand+0xd0>)
 8005b02:	1824      	adds	r4, r4, r0
 8005b04:	1e7b      	subs	r3, r7, #1
 8005b06:	1b9b      	subs	r3, r3, r6
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	185b      	adds	r3, r3, r1
 8005b0c:	4353      	muls	r3, r2
 8005b0e:	1880      	adds	r0, r0, r2
 8005b10:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType){
 8005b12:	7823      	ldrb	r3, [r4, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <delSnipCommand+0xb0>
 8005b18:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b1a:	42b4      	cmp	r4, r6
 8005b1c:	d1f9      	bne.n	8005b12 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005b1e:	1e7b      	subs	r3, r7, #1
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <delSnipCommand+0xc8>)
 8005b22:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005b24:	f005 fc7a 	bl	800b41c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b28:	2236      	movs	r2, #54	; 0x36
 8005b2a:	490b      	ldr	r1, [pc, #44]	; (8005b58 <delSnipCommand+0xd4>)
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	f00d fa3c 	bl	8012faa <memcpy>
 8005b32:	e7c4      	b.n	8005abe <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b34:	2214      	movs	r2, #20
 8005b36:	0021      	movs	r1, r4
 8005b38:	0020      	movs	r0, r4
 8005b3a:	3814      	subs	r0, #20
 8005b3c:	f00d fa35 	bl	8012faa <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b40:	2214      	movs	r2, #20
 8005b42:	2100      	movs	r1, #0
 8005b44:	0020      	movs	r0, r4
 8005b46:	f00d fa39 	bl	8012fbc <memset>
 8005b4a:	e7e5      	b.n	8005b18 <delSnipCommand+0x94>
 8005b4c:	2000121f 	.word	0x2000121f
 8005b50:	08018690 	.word	0x08018690
 8005b54:	200069e0 	.word	0x200069e0
 8005b58:	08018658 	.word	0x08018658

08005b5c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	0004      	movs	r4, r0
 8005b62:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	d101      	bne.n	8005b70 <pauseSnipCommand+0x14>
 8005b6c:	b672      	cpsid	i
 8005b6e:	e7fe      	b.n	8005b6e <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b70:	aa01      	add	r2, sp, #4
 8005b72:	2101      	movs	r1, #1
 8005b74:	f007 fe78 	bl	800d868 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005b78:	f00c ff87 	bl	8012a8a <atoi>
 8005b7c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <pauseSnipCommand+0x2e>
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <pauseSnipCommand+0x60>)
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d207      	bcs.n	8005b9a <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b8a:	2223      	movs	r2, #35	; 0x23
 8005b8c:	490c      	ldr	r1, [pc, #48]	; (8005bc0 <pauseSnipCommand+0x64>)
 8005b8e:	0020      	movs	r0, r4
 8005b90:	f00d fa0b 	bl	8012faa <memcpy>
}
 8005b94:	2000      	movs	r0, #0
 8005b96:	b002      	add	sp, #8
 8005b98:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005b9a:	b2c0      	uxtb	r0, r0
 8005b9c:	3801      	subs	r0, #1
 8005b9e:	2314      	movs	r3, #20
 8005ba0:	4343      	muls	r3, r0
 8005ba2:	4808      	ldr	r0, [pc, #32]	; (8005bc4 <pauseSnipCommand+0x68>)
 8005ba4:	18c0      	adds	r0, r0, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005baa:	f005 fc37 	bl	800b41c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005bae:	2235      	movs	r2, #53	; 0x35
 8005bb0:	4905      	ldr	r1, [pc, #20]	; (8005bc8 <pauseSnipCommand+0x6c>)
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	f00d f9f9 	bl	8012faa <memcpy>
 8005bb8:	e7ec      	b.n	8005b94 <pauseSnipCommand+0x38>
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	2000121f 	.word	0x2000121f
 8005bc0:	08018690 	.word	0x08018690
 8005bc4:	200069e0 	.word	0x200069e0
 8005bc8:	08018aa0 	.word	0x08018aa0

08005bcc <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	0004      	movs	r4, r0
 8005bd2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005bd8:	2c00      	cmp	r4, #0
 8005bda:	d101      	bne.n	8005be0 <actSnipCommand+0x14>
 8005bdc:	b672      	cpsid	i
 8005bde:	e7fe      	b.n	8005bde <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005be0:	aa01      	add	r2, sp, #4
 8005be2:	2101      	movs	r1, #1
 8005be4:	f007 fe40 	bl	800d868 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005be8:	f00c ff4f 	bl	8012a8a <atoi>
 8005bec:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <actSnipCommand+0x2e>
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <actSnipCommand+0x60>)
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d207      	bcs.n	8005c0a <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bfa:	2223      	movs	r2, #35	; 0x23
 8005bfc:	490c      	ldr	r1, [pc, #48]	; (8005c30 <actSnipCommand+0x64>)
 8005bfe:	0020      	movs	r0, r4
 8005c00:	f00d f9d3 	bl	8012faa <memcpy>
}
 8005c04:	2000      	movs	r0, #0
 8005c06:	b002      	add	sp, #8
 8005c08:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c0a:	b2c0      	uxtb	r0, r0
 8005c0c:	3801      	subs	r0, #1
 8005c0e:	2314      	movs	r3, #20
 8005c10:	4343      	muls	r3, r0
 8005c12:	4808      	ldr	r0, [pc, #32]	; (8005c34 <actSnipCommand+0x68>)
 8005c14:	18c0      	adds	r0, r0, r3
 8005c16:	2301      	movs	r3, #1
 8005c18:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c1a:	f005 fbff 	bl	800b41c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c1e:	2238      	movs	r2, #56	; 0x38
 8005c20:	4905      	ldr	r1, [pc, #20]	; (8005c38 <actSnipCommand+0x6c>)
 8005c22:	0020      	movs	r0, r4
 8005c24:	f00d f9c1 	bl	8012faa <memcpy>
 8005c28:	e7ec      	b.n	8005c04 <actSnipCommand+0x38>
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	2000121f 	.word	0x2000121f
 8005c30:	08018690 	.word	0x08018690
 8005c34:	200069e0 	.word	0x200069e0
 8005c38:	08018454 	.word	0x08018454

08005c3c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	46d6      	mov	lr, sl
 8005c40:	464f      	mov	r7, r9
 8005c42:	4646      	mov	r6, r8
 8005c44:	b5c0      	push	{r6, r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005c4a:	aa06      	add	r2, sp, #24
 8005c4c:	4b7a      	ldr	r3, [pc, #488]	; (8005e38 <snipCommand+0x1fc>)
 8005c4e:	3304      	adds	r3, #4
 8005c50:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005c52:	c223      	stmia	r2!, {r0, r1, r5}
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005c58:	2c00      	cmp	r4, #0
 8005c5a:	d101      	bne.n	8005c60 <snipCommand+0x24>
 8005c5c:	b672      	cpsid	i
 8005c5e:	e7fe      	b.n	8005c5e <snipCommand+0x22>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005c60:	4b76      	ldr	r3, [pc, #472]	; (8005e3c <snipCommand+0x200>)
 8005c62:	7818      	ldrb	r0, [r3, #0]
 8005c64:	2301      	movs	r3, #1
 8005c66:	425b      	negs	r3, r3
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	3333      	adds	r3, #51	; 0x33
 8005c6c:	2237      	movs	r2, #55	; 0x37
 8005c6e:	4974      	ldr	r1, [pc, #464]	; (8005e40 <snipCommand+0x204>)
 8005c70:	f007 fbb4 	bl	800d3dc <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005c74:	4b73      	ldr	r3, [pc, #460]	; (8005e44 <snipCommand+0x208>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d100      	bne.n	8005c7e <snipCommand+0x42>
 8005c7c:	e0d0      	b.n	8005e20 <snipCommand+0x1e4>
 8005c7e:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005c80:	4b71      	ldr	r3, [pc, #452]	; (8005e48 <snipCommand+0x20c>)
 8005c82:	4698      	mov	r8, r3
 8005c84:	e0ba      	b.n	8005dfc <snipCommand+0x1c0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005c86:	4b70      	ldr	r3, [pc, #448]	; (8005e48 <snipCommand+0x20c>)
 8005c88:	4699      	mov	r9, r3
 8005c8a:	00ab      	lsls	r3, r5, #2
 8005c8c:	469a      	mov	sl, r3
 8005c8e:	195b      	adds	r3, r3, r5
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	444b      	add	r3, r9
 8005c94:	7c1a      	ldrb	r2, [r3, #16]
 8005c96:	00d3      	lsls	r3, r2, #3
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	aa06      	add	r2, sp, #24
 8005c9c:	4694      	mov	ip, r2
 8005c9e:	4463      	add	r3, ip
 8005ca0:	003a      	movs	r2, r7
 8005ca2:	496a      	ldr	r1, [pc, #424]	; (8005e4c <snipCommand+0x210>)
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	f00d fb83 	bl	80133b0 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005caa:	4653      	mov	r3, sl
 8005cac:	195b      	adds	r3, r3, r5
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	464a      	mov	r2, r9
 8005cb2:	5c9b      	ldrb	r3, [r3, r2]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d02d      	beq.n	8005d14 <snipCommand+0xd8>
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d000      	beq.n	8005cbe <snipCommand+0x82>
 8005cbc:	e0a9      	b.n	8005e12 <snipCommand+0x1d6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005cbe:	00a9      	lsls	r1, r5, #2
 8005cc0:	1949      	adds	r1, r1, r5
 8005cc2:	0089      	lsls	r1, r1, #2
 8005cc4:	3106      	adds	r1, #6
 8005cc6:	4b60      	ldr	r3, [pc, #384]	; (8005e48 <snipCommand+0x20c>)
 8005cc8:	4699      	mov	r9, r3
 8005cca:	4449      	add	r1, r9
 8005ccc:	2204      	movs	r2, #4
 8005cce:	a805      	add	r0, sp, #20
 8005cd0:	f00d f96b 	bl	8012faa <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005cd4:	00ad      	lsls	r5, r5, #2
 8005cd6:	19ad      	adds	r5, r5, r6
 8005cd8:	00ad      	lsls	r5, r5, #2
 8005cda:	444d      	add	r5, r9
 8005cdc:	78ea      	ldrb	r2, [r5, #3]
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0053      	lsls	r3, r2, #1
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4a5a      	ldr	r2, [pc, #360]	; (8005e50 <snipCommand+0x214>)
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4699      	mov	r9, r3
 8005cee:	9805      	ldr	r0, [sp, #20]
 8005cf0:	f7fc ff18 	bl	8002b24 <__aeabi_f2d>
 8005cf4:	9002      	str	r0, [sp, #8]
 8005cf6:	9103      	str	r1, [sp, #12]
 8005cf8:	786b      	ldrb	r3, [r5, #1]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	005a      	lsls	r2, r3, #1
 8005cfe:	18d2      	adds	r2, r2, r3
 8005d00:	4b54      	ldr	r3, [pc, #336]	; (8005e54 <snipCommand+0x218>)
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	464b      	mov	r3, r9
 8005d08:	0022      	movs	r2, r4
 8005d0a:	4953      	ldr	r1, [pc, #332]	; (8005e58 <snipCommand+0x21c>)
 8005d0c:	0020      	movs	r0, r4
 8005d0e:	f00d fb4f 	bl	80133b0 <sprintf>
				break;
 8005d12:	e07e      	b.n	8005e12 <snipCommand+0x1d6>
				switch(snippets[s].cond.buffer1[1]){
 8005d14:	00ab      	lsls	r3, r5, #2
 8005d16:	195b      	adds	r3, r3, r5
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4a4b      	ldr	r2, [pc, #300]	; (8005e48 <snipCommand+0x20c>)
 8005d1c:	18d3      	adds	r3, r2, r3
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	3b05      	subs	r3, #5
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	2a09      	cmp	r2, #9
 8005d26:	d874      	bhi.n	8005e12 <snipCommand+0x1d6>
 8005d28:	0093      	lsls	r3, r2, #2
 8005d2a:	4a4c      	ldr	r2, [pc, #304]	; (8005e5c <snipCommand+0x220>)
 8005d2c:	58d3      	ldr	r3, [r2, r3]
 8005d2e:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d30:	2314      	movs	r3, #20
 8005d32:	436b      	muls	r3, r5
 8005d34:	4a44      	ldr	r2, [pc, #272]	; (8005e48 <snipCommand+0x20c>)
 8005d36:	18d2      	adds	r2, r2, r3
 8005d38:	7893      	ldrb	r3, [r2, #2]
 8005d3a:	68d2      	ldr	r2, [r2, #12]
 8005d3c:	9200      	str	r2, [sp, #0]
 8005d3e:	0022      	movs	r2, r4
 8005d40:	4947      	ldr	r1, [pc, #284]	; (8005e60 <snipCommand+0x224>)
 8005d42:	0020      	movs	r0, r4
 8005d44:	f00d fb34 	bl	80133b0 <sprintf>
						break;
 8005d48:	e063      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d4a:	2314      	movs	r3, #20
 8005d4c:	436b      	muls	r3, r5
 8005d4e:	4a3e      	ldr	r2, [pc, #248]	; (8005e48 <snipCommand+0x20c>)
 8005d50:	18d2      	adds	r2, r2, r3
 8005d52:	7893      	ldrb	r3, [r2, #2]
 8005d54:	68d2      	ldr	r2, [r2, #12]
 8005d56:	9200      	str	r2, [sp, #0]
 8005d58:	0022      	movs	r2, r4
 8005d5a:	4942      	ldr	r1, [pc, #264]	; (8005e64 <snipCommand+0x228>)
 8005d5c:	0020      	movs	r0, r4
 8005d5e:	f00d fb27 	bl	80133b0 <sprintf>
						break;
 8005d62:	e056      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005d64:	2314      	movs	r3, #20
 8005d66:	436b      	muls	r3, r5
 8005d68:	4a37      	ldr	r2, [pc, #220]	; (8005e48 <snipCommand+0x20c>)
 8005d6a:	18d2      	adds	r2, r2, r3
 8005d6c:	7893      	ldrb	r3, [r2, #2]
 8005d6e:	68d1      	ldr	r1, [r2, #12]
 8005d70:	9101      	str	r1, [sp, #4]
 8005d72:	7912      	ldrb	r2, [r2, #4]
 8005d74:	9200      	str	r2, [sp, #0]
 8005d76:	0022      	movs	r2, r4
 8005d78:	493b      	ldr	r1, [pc, #236]	; (8005e68 <snipCommand+0x22c>)
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	f00d fb18 	bl	80133b0 <sprintf>
						break;
 8005d80:	e047      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005d82:	2314      	movs	r3, #20
 8005d84:	436b      	muls	r3, r5
 8005d86:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <snipCommand+0x20c>)
 8005d88:	18d2      	adds	r2, r2, r3
 8005d8a:	7893      	ldrb	r3, [r2, #2]
 8005d8c:	68d1      	ldr	r1, [r2, #12]
 8005d8e:	9101      	str	r1, [sp, #4]
 8005d90:	7912      	ldrb	r2, [r2, #4]
 8005d92:	9200      	str	r2, [sp, #0]
 8005d94:	0022      	movs	r2, r4
 8005d96:	4935      	ldr	r1, [pc, #212]	; (8005e6c <snipCommand+0x230>)
 8005d98:	0020      	movs	r0, r4
 8005d9a:	f00d fb09 	bl	80133b0 <sprintf>
						break;
 8005d9e:	e038      	b.n	8005e12 <snipCommand+0x1d6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005da0:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <snipCommand+0x234>)
 8005da2:	0022      	movs	r2, r4
 8005da4:	4933      	ldr	r1, [pc, #204]	; (8005e74 <snipCommand+0x238>)
 8005da6:	0020      	movs	r0, r4
 8005da8:	f00d fb02 	bl	80133b0 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005dac:	4830      	ldr	r0, [pc, #192]	; (8005e70 <snipCommand+0x234>)
 8005dae:	f7fa f9b3 	bl	8000118 <strlen>
 8005db2:	0002      	movs	r2, r0
 8005db4:	2100      	movs	r1, #0
 8005db6:	482e      	ldr	r0, [pc, #184]	; (8005e70 <snipCommand+0x234>)
 8005db8:	f00d f900 	bl	8012fbc <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005dbc:	0029      	movs	r1, r5
 8005dbe:	68f0      	ldr	r0, [r6, #12]
 8005dc0:	f7ff fa94 	bl	80052ec <ParseSnippetCommand>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1eb      	bne.n	8005da0 <snipCommand+0x164>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f7fa f9a5 	bl	8000118 <strlen>
 8005dce:	1820      	adds	r0, r4, r0
 8005dd0:	220c      	movs	r2, #12
 8005dd2:	4929      	ldr	r1, [pc, #164]	; (8005e78 <snipCommand+0x23c>)
 8005dd4:	f00d f8e9 	bl	8012faa <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005dd8:	0020      	movs	r0, r4
 8005dda:	f7fa f99d 	bl	8000118 <strlen>
 8005dde:	b282      	uxth	r2, r0
 8005de0:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <snipCommand+0x200>)
 8005de2:	7818      	ldrb	r0, [r3, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	425b      	negs	r3, r3
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	3333      	adds	r3, #51	; 0x33
 8005dec:	0021      	movs	r1, r4
 8005dee:	f007 faf5 	bl	800d3dc <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005df2:	003d      	movs	r5, r7
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <snipCommand+0x208>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	42bb      	cmp	r3, r7
 8005dfa:	d911      	bls.n	8005e20 <snipCommand+0x1e4>
 8005dfc:	1c6f      	adds	r7, r5, #1
 8005dfe:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005e00:	002e      	movs	r6, r5
 8005e02:	00ab      	lsls	r3, r5, #2
 8005e04:	195b      	adds	r3, r3, r5
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4642      	mov	r2, r8
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d000      	beq.n	8005e12 <snipCommand+0x1d6>
 8005e10:	e739      	b.n	8005c86 <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e12:	4d17      	ldr	r5, [pc, #92]	; (8005e70 <snipCommand+0x234>)
 8005e14:	00b3      	lsls	r3, r6, #2
 8005e16:	199b      	adds	r3, r3, r6
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4e0b      	ldr	r6, [pc, #44]	; (8005e48 <snipCommand+0x20c>)
 8005e1c:	18f6      	adds	r6, r6, r3
 8005e1e:	e7cd      	b.n	8005dbc <snipCommand+0x180>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005e20:	22b5      	movs	r2, #181	; 0xb5
 8005e22:	4916      	ldr	r1, [pc, #88]	; (8005e7c <snipCommand+0x240>)
 8005e24:	0020      	movs	r0, r4
 8005e26:	f00d f8c0 	bl	8012faa <memcpy>
}
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	b00a      	add	sp, #40	; 0x28
 8005e2e:	bc1c      	pop	{r2, r3, r4}
 8005e30:	4690      	mov	r8, r2
 8005e32:	4699      	mov	r9, r3
 8005e34:	46a2      	mov	sl, r4
 8005e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e38:	080177b0 	.word	0x080177b0
 8005e3c:	20000a77 	.word	0x20000a77
 8005e40:	08018f38 	.word	0x08018f38
 8005e44:	2000121f 	.word	0x2000121f
 8005e48:	200069e0 	.word	0x200069e0
 8005e4c:	08018f70 	.word	0x08018f70
 8005e50:	20000084 	.word	0x20000084
 8005e54:	08018a64 	.word	0x08018a64
 8005e58:	08018fdc 	.word	0x08018fdc
 8005e5c:	08018310 	.word	0x08018310
 8005e60:	08018f7c 	.word	0x08018f7c
 8005e64:	08018f90 	.word	0x08018f90
 8005e68:	08018fa8 	.word	0x08018fa8
 8005e6c:	08018fc0 	.word	0x08018fc0
 8005e70:	20001250 	.word	0x20001250
 8005e74:	08018fec 	.word	0x08018fec
 8005e78:	08018ff4 	.word	0x08018ff4
 8005e7c:	08019000 	.word	0x08019000

08005e80 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e80:	b510      	push	{r4, lr}
 8005e82:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005e84:	d101      	bne.n	8005e8a <idcodeCommand+0xa>
 8005e86:	b672      	cpsid	i
 8005e88:	e7fe      	b.n	8005e88 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8005e8a:	f009 fc13 	bl	800f6b4 <HAL_GetDEVID>
	switch(dev){
 8005e8e:	0403      	lsls	r3, r0, #16
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <idcodeCommand+0x80>)
 8005e94:	4694      	mov	ip, r2
 8005e96:	4463      	add	r3, ip
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d82a      	bhi.n	8005ef2 <idcodeCommand+0x72>
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <idcodeCommand+0x84>)
 8005ea0:	58d3      	ldr	r3, [r2, r3]
 8005ea2:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005ea4:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <idcodeCommand+0x88>)
 8005ea6:	4919      	ldr	r1, [pc, #100]	; (8005f0c <idcodeCommand+0x8c>)
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	f00d fa81 	bl	80133b0 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005eae:	f009 fbfb 	bl	800f6a8 <HAL_GetREVID>
 8005eb2:	0b03      	lsrs	r3, r0, #12
 8005eb4:	0022      	movs	r2, r4
 8005eb6:	4916      	ldr	r1, [pc, #88]	; (8005f10 <idcodeCommand+0x90>)
 8005eb8:	0020      	movs	r0, r4
 8005eba:	f00d fa79 	bl	80133b0 <sprintf>
}
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005ec2:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <idcodeCommand+0x94>)
 8005ec4:	4911      	ldr	r1, [pc, #68]	; (8005f0c <idcodeCommand+0x8c>)
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	f00d fa72 	bl	80133b0 <sprintf>
			break;
 8005ecc:	e7ef      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <idcodeCommand+0x98>)
 8005ed0:	490e      	ldr	r1, [pc, #56]	; (8005f0c <idcodeCommand+0x8c>)
 8005ed2:	0020      	movs	r0, r4
 8005ed4:	f00d fa6c 	bl	80133b0 <sprintf>
			break;
 8005ed8:	e7e9      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005eda:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <idcodeCommand+0x9c>)
 8005edc:	490b      	ldr	r1, [pc, #44]	; (8005f0c <idcodeCommand+0x8c>)
 8005ede:	0020      	movs	r0, r4
 8005ee0:	f00d fa66 	bl	80133b0 <sprintf>
			break;
 8005ee4:	e7e3      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <idcodeCommand+0xa0>)
 8005ee8:	4908      	ldr	r1, [pc, #32]	; (8005f0c <idcodeCommand+0x8c>)
 8005eea:	0020      	movs	r0, r4
 8005eec:	f00d fa60 	bl	80133b0 <sprintf>
			break;
 8005ef0:	e7dd      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005ef2:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <idcodeCommand+0xa4>)
 8005ef4:	4905      	ldr	r1, [pc, #20]	; (8005f0c <idcodeCommand+0x8c>)
 8005ef6:	0020      	movs	r0, r4
 8005ef8:	f00d fa5a 	bl	80133b0 <sprintf>
			break;
 8005efc:	e7d7      	b.n	8005eae <idcodeCommand+0x2e>
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	fffffbc0 	.word	0xfffffbc0
 8005f04:	08018338 	.word	0x08018338
 8005f08:	08018960 	.word	0x08018960
 8005f0c:	0801896c 	.word	0x0801896c
 8005f10:	080189b8 	.word	0x080189b8
 8005f14:	08018980 	.word	0x08018980
 8005f18:	0801898c 	.word	0x0801898c
 8005f1c:	08018998 	.word	0x08018998
 8005f20:	080189a4 	.word	0x080189a4
 8005f24:	080189b0 	.word	0x080189b0

08005f28 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f2c:	d101      	bne.n	8005f32 <uuidCommand+0xa>
 8005f2e:	b672      	cpsid	i
 8005f30:	e7fe      	b.n	8005f30 <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f32:	220e      	movs	r2, #14
 8005f34:	4911      	ldr	r1, [pc, #68]	; (8005f7c <uuidCommand+0x54>)
 8005f36:	f00d f838 	bl	8012faa <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <uuidCommand+0x58>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4d11      	ldr	r5, [pc, #68]	; (8005f84 <uuidCommand+0x5c>)
 8005f40:	0022      	movs	r2, r4
 8005f42:	0029      	movs	r1, r5
 8005f44:	0020      	movs	r0, r4
 8005f46:	f00d fa33 	bl	80133b0 <sprintf>
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <uuidCommand+0x60>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	0022      	movs	r2, r4
 8005f50:	0029      	movs	r1, r5
 8005f52:	0020      	movs	r0, r4
 8005f54:	f00d fa2c 	bl	80133b0 <sprintf>
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <uuidCommand+0x64>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0022      	movs	r2, r4
 8005f5e:	0029      	movs	r1, r5
 8005f60:	0020      	movs	r0, r4
 8005f62:	f00d fa25 	bl	80133b0 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005f66:	0020      	movs	r0, r4
 8005f68:	f7fa f8d6 	bl	8000118 <strlen>
 8005f6c:	1820      	adds	r0, r4, r0
 8005f6e:	2203      	movs	r2, #3
 8005f70:	4907      	ldr	r1, [pc, #28]	; (8005f90 <uuidCommand+0x68>)
 8005f72:	f00d f81a 	bl	8012faa <memcpy>
}
 8005f76:	2000      	movs	r0, #0
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	0801a144 	.word	0x0801a144
 8005f80:	1ffff7ac 	.word	0x1ffff7ac
 8005f84:	0801a154 	.word	0x0801a154
 8005f88:	1ffff7b0 	.word	0x1ffff7b0
 8005f8c:	1ffff7b4 	.word	0x1ffff7b4
 8005f90:	0801993c 	.word	0x0801993c

08005f94 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f94:	b510      	push	{r4, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f9a:	d101      	bne.n	8005fa0 <timeCommand+0xc>
 8005f9c:	b672      	cpsid	i
 8005f9e:	e7fe      	b.n	8005f9e <timeCommand+0xa>
	GetTimeDate();
 8005fa0:	f006 ff78 	bl	800ce94 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <timeCommand+0x80>)
 8005fa6:	7b5b      	ldrb	r3, [r3, #13]
 8005fa8:	2b18      	cmp	r3, #24
 8005faa:	d004      	beq.n	8005fb6 <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d00e      	beq.n	8005fce <timeCommand+0x3a>
}
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005fb6:	4917      	ldr	r1, [pc, #92]	; (8006014 <timeCommand+0x80>)
 8005fb8:	7c4b      	ldrb	r3, [r1, #17]
 8005fba:	7c8a      	ldrb	r2, [r1, #18]
 8005fbc:	89c8      	ldrh	r0, [r1, #14]
 8005fbe:	9001      	str	r0, [sp, #4]
 8005fc0:	7c09      	ldrb	r1, [r1, #16]
 8005fc2:	9100      	str	r1, [sp, #0]
 8005fc4:	4914      	ldr	r1, [pc, #80]	; (8006018 <timeCommand+0x84>)
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f00d f9f2 	bl	80133b0 <sprintf>
 8005fcc:	e7f0      	b.n	8005fb0 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <timeCommand+0x80>)
 8005fd0:	7cdb      	ldrb	r3, [r3, #19]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d10d      	bne.n	8005ff2 <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005fd6:	490f      	ldr	r1, [pc, #60]	; (8006014 <timeCommand+0x80>)
 8005fd8:	7c4b      	ldrb	r3, [r1, #17]
 8005fda:	7c8a      	ldrb	r2, [r1, #18]
 8005fdc:	480f      	ldr	r0, [pc, #60]	; (800601c <timeCommand+0x88>)
 8005fde:	9002      	str	r0, [sp, #8]
 8005fe0:	89c8      	ldrh	r0, [r1, #14]
 8005fe2:	9001      	str	r0, [sp, #4]
 8005fe4:	7c09      	ldrb	r1, [r1, #16]
 8005fe6:	9100      	str	r1, [sp, #0]
 8005fe8:	490d      	ldr	r1, [pc, #52]	; (8006020 <timeCommand+0x8c>)
 8005fea:	0020      	movs	r0, r4
 8005fec:	f00d f9e0 	bl	80133b0 <sprintf>
 8005ff0:	e7de      	b.n	8005fb0 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d1dc      	bne.n	8005fb0 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005ff6:	4907      	ldr	r1, [pc, #28]	; (8006014 <timeCommand+0x80>)
 8005ff8:	7c4b      	ldrb	r3, [r1, #17]
 8005ffa:	7c8a      	ldrb	r2, [r1, #18]
 8005ffc:	4809      	ldr	r0, [pc, #36]	; (8006024 <timeCommand+0x90>)
 8005ffe:	9002      	str	r0, [sp, #8]
 8006000:	89c8      	ldrh	r0, [r1, #14]
 8006002:	9001      	str	r0, [sp, #4]
 8006004:	7c09      	ldrb	r1, [r1, #16]
 8006006:	9100      	str	r1, [sp, #0]
 8006008:	4905      	ldr	r1, [pc, #20]	; (8006020 <timeCommand+0x8c>)
 800600a:	0020      	movs	r0, r4
 800600c:	f00d f9d0 	bl	80133b0 <sprintf>
 8006010:	e7ce      	b.n	8005fb0 <timeCommand+0x1c>
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	200069c4 	.word	0x200069c4
 8006018:	0801a08c 	.word	0x0801a08c
 800601c:	0801a0e0 	.word	0x0801a0e0
 8006020:	0801a0b4 	.word	0x0801a0b4
 8006024:	0801a0e4 	.word	0x0801a0e4

08006028 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006028:	b510      	push	{r4, lr}
 800602a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800602c:	d101      	bne.n	8006032 <dateCommand+0xa>
 800602e:	b672      	cpsid	i
 8006030:	e7fe      	b.n	8006030 <dateCommand+0x8>
	GetTimeDate();
 8006032:	f006 ff2f 	bl	800ce94 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8006036:	f7fe fb25 	bl	8004684 <GetDateString>
 800603a:	0002      	movs	r2, r0
 800603c:	4902      	ldr	r1, [pc, #8]	; (8006048 <dateCommand+0x20>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00d f9b6 	bl	80133b0 <sprintf>
}
 8006044:	2000      	movs	r0, #0
 8006046:	bd10      	pop	{r4, pc}
 8006048:	08018598 	.word	0x08018598

0800604c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604e:	46c6      	mov	lr, r8
 8006050:	b500      	push	{lr}
 8006052:	b082      	sub	sp, #8
 8006054:	0004      	movs	r4, r0
 8006056:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006058:	2300      	movs	r3, #0
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800605e:	2800      	cmp	r0, #0
 8006060:	d101      	bne.n	8006066 <getCommand+0x1a>
 8006062:	b672      	cpsid	i
 8006064:	e7fe      	b.n	8006064 <getCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006066:	aa01      	add	r2, sp, #4
 8006068:	2101      	movs	r1, #1
 800606a:	0030      	movs	r0, r6
 800606c:	f007 fbfc 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8006070:	0005      	movs	r5, r0
 8006072:	4b74      	ldr	r3, [pc, #464]	; (8006244 <getCommand+0x1f8>)
 8006074:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006076:	2204      	movs	r2, #4
 8006078:	4973      	ldr	r1, [pc, #460]	; (8006248 <getCommand+0x1fc>)
 800607a:	f00d f9dd 	bl	8013438 <strncmp>
 800607e:	2800      	cmp	r0, #0
 8006080:	d000      	beq.n	8006084 <getCommand+0x38>
 8006082:	e090      	b.n	80061a6 <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006084:	1d2f      	adds	r7, r5, #4
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	1f1e      	subs	r6, r3, #4
 800608a:	0032      	movs	r2, r6
 800608c:	496f      	ldr	r1, [pc, #444]	; (800624c <getCommand+0x200>)
 800608e:	0038      	movs	r0, r7
 8006090:	f00d f9d2 	bl	8013438 <strncmp>
 8006094:	2800      	cmp	r0, #0
 8006096:	d11e      	bne.n	80060d6 <getCommand+0x8a>
			if(BOS.response == BOS_RESPONSE_ALL)
 8006098:	4b6d      	ldr	r3, [pc, #436]	; (8006250 <getCommand+0x204>)
 800609a:	799b      	ldrb	r3, [r3, #6]
 800609c:	2b60      	cmp	r3, #96	; 0x60
 800609e:	d109      	bne.n	80060b4 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060a0:	4a6c      	ldr	r2, [pc, #432]	; (8006254 <getCommand+0x208>)
 80060a2:	496d      	ldr	r1, [pc, #436]	; (8006258 <getCommand+0x20c>)
 80060a4:	0020      	movs	r0, r4
 80060a6:	f00d f983 	bl	80133b0 <sprintf>
}
 80060aa:	2000      	movs	r0, #0
 80060ac:	b002      	add	sp, #8
 80060ae:	bc04      	pop	{r2}
 80060b0:	4690      	mov	r8, r2
 80060b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOS.response == BOS_RESPONSE_MSG)
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d105      	bne.n	80060c4 <getCommand+0x78>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <getCommand+0x210>)
 80060ba:	4967      	ldr	r1, [pc, #412]	; (8006258 <getCommand+0x20c>)
 80060bc:	0020      	movs	r0, r4
 80060be:	f00d f977 	bl	80133b0 <sprintf>
 80060c2:	e7f2      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.response == BOS_RESPONSE_NONE)
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d000      	beq.n	80060ca <getCommand+0x7e>
 80060c8:	e0b6      	b.n	8006238 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80060ca:	4a65      	ldr	r2, [pc, #404]	; (8006260 <getCommand+0x214>)
 80060cc:	4962      	ldr	r1, [pc, #392]	; (8006258 <getCommand+0x20c>)
 80060ce:	0020      	movs	r0, r4
 80060d0:	f00d f96e 	bl	80133b0 <sprintf>
 80060d4:	e7e9      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80060d6:	0032      	movs	r2, r6
 80060d8:	4962      	ldr	r1, [pc, #392]	; (8006264 <getCommand+0x218>)
 80060da:	0038      	movs	r0, r7
 80060dc:	f00d f9ac 	bl	8013438 <strncmp>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d11a      	bne.n	800611a <getCommand+0xce>
			if(BOS.trace == TRACE_BOTH)
 80060e4:	4b5a      	ldr	r3, [pc, #360]	; (8006250 <getCommand+0x204>)
 80060e6:	79db      	ldrb	r3, [r3, #7]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d105      	bne.n	80060f8 <getCommand+0xac>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060ec:	4a59      	ldr	r2, [pc, #356]	; (8006254 <getCommand+0x208>)
 80060ee:	495a      	ldr	r1, [pc, #360]	; (8006258 <getCommand+0x20c>)
 80060f0:	0020      	movs	r0, r4
 80060f2:	f00d f95d 	bl	80133b0 <sprintf>
 80060f6:	e7d8      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.trace == TRACE_MESSAGE)
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d105      	bne.n	8006108 <getCommand+0xbc>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060fc:	4a57      	ldr	r2, [pc, #348]	; (800625c <getCommand+0x210>)
 80060fe:	4956      	ldr	r1, [pc, #344]	; (8006258 <getCommand+0x20c>)
 8006100:	0020      	movs	r0, r4
 8006102:	f00d f955 	bl	80133b0 <sprintf>
 8006106:	e7d0      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.trace == TRACE_NONE)
 8006108:	2b00      	cmp	r3, #0
 800610a:	d000      	beq.n	800610e <getCommand+0xc2>
 800610c:	e094      	b.n	8006238 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800610e:	4a54      	ldr	r2, [pc, #336]	; (8006260 <getCommand+0x214>)
 8006110:	4951      	ldr	r1, [pc, #324]	; (8006258 <getCommand+0x20c>)
 8006112:	0020      	movs	r0, r4
 8006114:	f00d f94c 	bl	80133b0 <sprintf>
 8006118:	e7c7      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800611a:	0032      	movs	r2, r6
 800611c:	4952      	ldr	r1, [pc, #328]	; (8006268 <getCommand+0x21c>)
 800611e:	0038      	movs	r0, r7
 8006120:	f00d f98a 	bl	8013438 <strncmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	d106      	bne.n	8006136 <getCommand+0xea>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006128:	4b49      	ldr	r3, [pc, #292]	; (8006250 <getCommand+0x204>)
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	494f      	ldr	r1, [pc, #316]	; (800626c <getCommand+0x220>)
 800612e:	0020      	movs	r0, r4
 8006130:	f00d f93e 	bl	80133b0 <sprintf>
 8006134:	e7b9      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006136:	0032      	movs	r2, r6
 8006138:	494d      	ldr	r1, [pc, #308]	; (8006270 <getCommand+0x224>)
 800613a:	0038      	movs	r0, r7
 800613c:	f00d f97c 	bl	8013438 <strncmp>
 8006140:	2800      	cmp	r0, #0
 8006142:	d106      	bne.n	8006152 <getCommand+0x106>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006144:	4b42      	ldr	r3, [pc, #264]	; (8006250 <getCommand+0x204>)
 8006146:	881a      	ldrh	r2, [r3, #0]
 8006148:	4948      	ldr	r1, [pc, #288]	; (800626c <getCommand+0x220>)
 800614a:	0020      	movs	r0, r4
 800614c:	f00d f930 	bl	80133b0 <sprintf>
 8006150:	e7ab      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006152:	0032      	movs	r2, r6
 8006154:	4947      	ldr	r1, [pc, #284]	; (8006274 <getCommand+0x228>)
 8006156:	0038      	movs	r0, r7
 8006158:	f00d f96e 	bl	8013438 <strncmp>
 800615c:	2800      	cmp	r0, #0
 800615e:	d106      	bne.n	800616e <getCommand+0x122>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <getCommand+0x204>)
 8006162:	885a      	ldrh	r2, [r3, #2]
 8006164:	4941      	ldr	r1, [pc, #260]	; (800626c <getCommand+0x220>)
 8006166:	0020      	movs	r0, r4
 8006168:	f00d f922 	bl	80133b0 <sprintf>
 800616c:	e79d      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800616e:	0032      	movs	r2, r6
 8006170:	4941      	ldr	r1, [pc, #260]	; (8006278 <getCommand+0x22c>)
 8006172:	0038      	movs	r0, r7
 8006174:	f00d f960 	bl	8013438 <strncmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	d106      	bne.n	800618a <getCommand+0x13e>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 800617c:	4b34      	ldr	r3, [pc, #208]	; (8006250 <getCommand+0x204>)
 800617e:	791a      	ldrb	r2, [r3, #4]
 8006180:	493a      	ldr	r1, [pc, #232]	; (800626c <getCommand+0x220>)
 8006182:	0020      	movs	r0, r4
 8006184:	f00d f914 	bl	80133b0 <sprintf>
 8006188:	e78f      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800618a:	0032      	movs	r2, r6
 800618c:	493b      	ldr	r1, [pc, #236]	; (800627c <getCommand+0x230>)
 800618e:	0038      	movs	r0, r7
 8006190:	f00d f952 	bl	8013438 <strncmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	d10d      	bne.n	80061b4 <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <getCommand+0x204>)
 800619a:	795a      	ldrb	r2, [r3, #5]
 800619c:	4933      	ldr	r1, [pc, #204]	; (800626c <getCommand+0x220>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00d f906 	bl	80133b0 <sprintf>
 80061a4:	e781      	b.n	80060aa <getCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80061a6:	2205      	movs	r2, #5
 80061a8:	4935      	ldr	r1, [pc, #212]	; (8006280 <getCommand+0x234>)
 80061aa:	0028      	movs	r0, r5
 80061ac:	f00d f944 	bl	8013438 <strncmp>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d005      	beq.n	80061c0 <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80061b4:	2213      	movs	r2, #19
 80061b6:	4933      	ldr	r1, [pc, #204]	; (8006284 <getCommand+0x238>)
 80061b8:	0020      	movs	r0, r4
 80061ba:	f00c fef6 	bl	8012faa <memcpy>
 80061be:	e774      	b.n	80060aa <getCommand+0x5e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80061c0:	466a      	mov	r2, sp
 80061c2:	2102      	movs	r1, #2
 80061c4:	0030      	movs	r0, r6
 80061c6:	f007 fb4f 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80061ca:	0005      	movs	r5, r0
 80061cc:	4f2e      	ldr	r7, [pc, #184]	; (8006288 <getCommand+0x23c>)
		for(i =0; i < MaxNumOfGroups; i++){
 80061ce:	2600      	movs	r6, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80061d0:	0039      	movs	r1, r7
 80061d2:	0028      	movs	r0, r5
 80061d4:	f7f9 ff96 	bl	8000104 <strcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d011      	beq.n	8006200 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 80061dc:	3601      	adds	r6, #1
 80061de:	b2f6      	uxtb	r6, r6
 80061e0:	370a      	adds	r7, #10
 80061e2:	2e0a      	cmp	r6, #10
 80061e4:	d1f4      	bne.n	80061d0 <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80061e6:	002a      	movs	r2, r5
 80061e8:	4928      	ldr	r1, [pc, #160]	; (800628c <getCommand+0x240>)
 80061ea:	0020      	movs	r0, r4
 80061ec:	f00d f8e0 	bl	80133b0 <sprintf>
			return pdFALSE;
 80061f0:	e75b      	b.n	80060aa <getCommand+0x5e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061f2:	002b      	movs	r3, r5
 80061f4:	0022      	movs	r2, r4
 80061f6:	4926      	ldr	r1, [pc, #152]	; (8006290 <getCommand+0x244>)
 80061f8:	0020      	movs	r0, r4
 80061fa:	f00d f8d9 	bl	80133b0 <sprintf>
 80061fe:	e015      	b.n	800622c <getCommand+0x1e0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006200:	002a      	movs	r2, r5
 8006202:	4924      	ldr	r1, [pc, #144]	; (8006294 <getCommand+0x248>)
 8006204:	0020      	movs	r0, r4
 8006206:	f00d f8d3 	bl	80133b0 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800620a:	4b23      	ldr	r3, [pc, #140]	; (8006298 <getCommand+0x24c>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d100      	bne.n	8006214 <getCommand+0x1c8>
 8006212:	e74a      	b.n	80060aa <getCommand+0x5e>
 8006214:	2501      	movs	r5, #1
 8006216:	002b      	movs	r3, r5
 8006218:	40b3      	lsls	r3, r6
 800621a:	4698      	mov	r8, r3
				if(InGroup(j,i)){
 800621c:	4f1f      	ldr	r7, [pc, #124]	; (800629c <getCommand+0x250>)
			for(j =1; j <= N; j++)						// N modules
 800621e:	4e1e      	ldr	r6, [pc, #120]	; (8006298 <getCommand+0x24c>)
				if(InGroup(j,i)){
 8006220:	1e6b      	subs	r3, r5, #1
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	5bdb      	ldrh	r3, [r3, r7]
 8006226:	4642      	mov	r2, r8
 8006228:	421a      	tst	r2, r3
 800622a:	d1e2      	bne.n	80061f2 <getCommand+0x1a6>
			for(j =1; j <= N; j++)						// N modules
 800622c:	3501      	adds	r5, #1
 800622e:	b2ed      	uxtb	r5, r5
 8006230:	7833      	ldrb	r3, [r6, #0]
 8006232:	42ab      	cmp	r3, r5
 8006234:	d2f4      	bcs.n	8006220 <getCommand+0x1d4>
 8006236:	e738      	b.n	80060aa <getCommand+0x5e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006238:	002a      	movs	r2, r5
 800623a:	4919      	ldr	r1, [pc, #100]	; (80062a0 <getCommand+0x254>)
 800623c:	0020      	movs	r0, r4
 800623e:	f00d f8b7 	bl	80133b0 <sprintf>
 8006242:	e732      	b.n	80060aa <getCommand+0x5e>
 8006244:	20001294 	.word	0x20001294
 8006248:	08018704 	.word	0x08018704
 800624c:	0801870c 	.word	0x0801870c
 8006250:	200069c4 	.word	0x200069c4
 8006254:	08017b0c 	.word	0x08017b0c
 8006258:	08017964 	.word	0x08017964
 800625c:	08018718 	.word	0x08018718
 8006260:	0801871c 	.word	0x0801871c
 8006264:	08018724 	.word	0x08018724
 8006268:	0801872c 	.word	0x0801872c
 800626c:	08017fbc 	.word	0x08017fbc
 8006270:	08018738 	.word	0x08018738
 8006274:	08018744 	.word	0x08018744
 8006278:	08018754 	.word	0x08018754
 800627c:	08018768 	.word	0x08018768
 8006280:	0801877c 	.word	0x0801877c
 8006284:	0801878c 	.word	0x0801878c
 8006288:	20000e5c 	.word	0x20000e5c
 800628c:	080187a0 	.word	0x080187a0
 8006290:	08018784 	.word	0x08018784
 8006294:	080187bc 	.word	0x080187bc
 8006298:	2000001c 	.word	0x2000001c
 800629c:	20000ec0 	.word	0x20000ec0
 80062a0:	080187d0 	.word	0x080187d0

080062a4 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	0004      	movs	r4, r0
 80062aa:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80062b0:	2c00      	cmp	r4, #0
 80062b2:	d101      	bne.n	80062b8 <defaultCommand+0x14>
 80062b4:	b672      	cpsid	i
 80062b6:	e7fe      	b.n	80062b6 <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062b8:	aa01      	add	r2, sp, #4
 80062ba:	2101      	movs	r1, #1
 80062bc:	f007 fad4 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80062c0:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80062c2:	9e01      	ldr	r6, [sp, #4]
 80062c4:	0032      	movs	r2, r6
 80062c6:	491e      	ldr	r1, [pc, #120]	; (8006340 <defaultCommand+0x9c>)
 80062c8:	f00d f8b6 	bl	8013438 <strncmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d01e      	beq.n	800630e <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80062d0:	0032      	movs	r2, r6
 80062d2:	491c      	ldr	r1, [pc, #112]	; (8006344 <defaultCommand+0xa0>)
 80062d4:	0028      	movs	r0, r5
 80062d6:	f00d f8af 	bl	8013438 <strncmp>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d12a      	bne.n	8006334 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80062de:	2200      	movs	r2, #0
 80062e0:	2116      	movs	r1, #22
 80062e2:	20ff      	movs	r0, #255	; 0xff
 80062e4:	f003 f9ee 	bl	80096c4 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80062e8:	4b17      	ldr	r3, [pc, #92]	; (8006348 <defaultCommand+0xa4>)
 80062ea:	2202      	movs	r2, #2
 80062ec:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80062ee:	2064      	movs	r0, #100	; 0x64
 80062f0:	f007 f9a1 	bl	800d636 <osDelay>
		ClearEEportsDir();
 80062f4:	f7fd f96a 	bl	80035cc <ClearEEportsDir>
		ClearROtopology();
 80062f8:	f005 f998 	bl	800b62c <ClearROtopology>
		osDelay(100);
 80062fc:	2064      	movs	r0, #100	; 0x64
 80062fe:	f007 f99a 	bl	800d636 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	4911      	ldr	r1, [pc, #68]	; (800634c <defaultCommand+0xa8>)
 8006306:	0020      	movs	r0, r4
 8006308:	f00c fe4f 	bl	8012faa <memcpy>
 800630c:	e00f      	b.n	800632e <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800630e:	4910      	ldr	r1, [pc, #64]	; (8006350 <defaultCommand+0xac>)
 8006310:	4b10      	ldr	r3, [pc, #64]	; (8006354 <defaultCommand+0xb0>)
 8006312:	000a      	movs	r2, r1
 8006314:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006316:	c223      	stmia	r2!, {r0, r1, r5}
 8006318:	cb23      	ldmia	r3!, {r0, r1, r5}
 800631a:	c223      	stmia	r2!, {r0, r1, r5}
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006320:	f7fd f91c 	bl	800355c <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006324:	2227      	movs	r2, #39	; 0x27
 8006326:	490c      	ldr	r1, [pc, #48]	; (8006358 <defaultCommand+0xb4>)
 8006328:	0020      	movs	r0, r4
 800632a:	f00c fe3e 	bl	8012faa <memcpy>
}
 800632e:	2000      	movs	r0, #0
 8006330:	b002      	add	sp, #8
 8006332:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006334:	220f      	movs	r2, #15
 8006336:	4909      	ldr	r1, [pc, #36]	; (800635c <defaultCommand+0xb8>)
 8006338:	0020      	movs	r0, r4
 800633a:	f00c fe36 	bl	8012faa <memcpy>
 800633e:	e7f6      	b.n	800632e <defaultCommand+0x8a>
 8006340:	080185c0 	.word	0x080185c0
 8006344:	080185f0 	.word	0x080185f0
 8006348:	20000ef4 	.word	0x20000ef4
 800634c:	08018608 	.word	0x08018608
 8006350:	200069c4 	.word	0x200069c4
 8006354:	20000000 	.word	0x20000000
 8006358:	080185c8 	.word	0x080185c8
 800635c:	080185f8 	.word	0x080185f8

08006360 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	46ce      	mov	lr, r9
 8006364:	4647      	mov	r7, r8
 8006366:	b580      	push	{r7, lr}
 8006368:	b08d      	sub	sp, #52	; 0x34
 800636a:	0005      	movs	r5, r0
 800636c:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 800636e:	2300      	movs	r3, #0
 8006370:	930b      	str	r3, [sp, #44]	; 0x2c
 8006372:	930a      	str	r3, [sp, #40]	; 0x28
 8006374:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 800637a:	2800      	cmp	r0, #0
 800637c:	d101      	bne.n	8006382 <setCommand+0x22>
 800637e:	b672      	cpsid	i
 8006380:	e7fe      	b.n	8006380 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006382:	aa0b      	add	r2, sp, #44	; 0x2c
 8006384:	2101      	movs	r1, #1
 8006386:	0020      	movs	r0, r4
 8006388:	f007 fa6e 	bl	800d868 <FreeRTOS_CLIGetParameter>
 800638c:	0006      	movs	r6, r0
 800638e:	4bb3      	ldr	r3, [pc, #716]	; (800665c <setCommand+0x2fc>)
 8006390:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006392:	2204      	movs	r2, #4
 8006394:	49b2      	ldr	r1, [pc, #712]	; (8006660 <setCommand+0x300>)
 8006396:	f00d f84f 	bl	8013438 <strncmp>
 800639a:	2800      	cmp	r0, #0
 800639c:	d015      	beq.n	80063ca <setCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800639e:	2204      	movs	r2, #4
 80063a0:	49b0      	ldr	r1, [pc, #704]	; (8006664 <setCommand+0x304>)
 80063a2:	0030      	movs	r0, r6
 80063a4:	f00d f848 	bl	8013438 <strncmp>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d100      	bne.n	80063ae <setCommand+0x4e>
 80063ac:	e180      	b.n	80066b0 <setCommand+0x350>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80063ae:	2204      	movs	r2, #4
 80063b0:	49ad      	ldr	r1, [pc, #692]	; (8006668 <setCommand+0x308>)
 80063b2:	0030      	movs	r0, r6
 80063b4:	f00d f840 	bl	8013438 <strncmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d100      	bne.n	80063be <setCommand+0x5e>
 80063bc:	e1e6      	b.n	800678c <setCommand+0x42c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80063be:	2213      	movs	r2, #19
 80063c0:	49aa      	ldr	r1, [pc, #680]	; (800666c <setCommand+0x30c>)
 80063c2:	0028      	movs	r0, r5
 80063c4:	f00c fdf1 	bl	8012faa <memcpy>
 80063c8:	e1d7      	b.n	800677a <setCommand+0x41a>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80063ca:	aa0a      	add	r2, sp, #40	; 0x28
 80063cc:	2102      	movs	r1, #2
 80063ce:	0020      	movs	r0, r4
 80063d0:	f007 fa4a 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80063d4:	0004      	movs	r4, r0
 80063d6:	4ba6      	ldr	r3, [pc, #664]	; (8006670 <setCommand+0x310>)
 80063d8:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80063da:	4ba0      	ldr	r3, [pc, #640]	; (800665c <setCommand+0x2fc>)
 80063dc:	681e      	ldr	r6, [r3, #0]
 80063de:	3604      	adds	r6, #4
 80063e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e2:	1f1f      	subs	r7, r3, #4
 80063e4:	003a      	movs	r2, r7
 80063e6:	49a3      	ldr	r1, [pc, #652]	; (8006674 <setCommand+0x314>)
 80063e8:	0030      	movs	r0, r6
 80063ea:	f00d f825 	bl	8013438 <strncmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d153      	bne.n	800649a <setCommand+0x13a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80063f2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80063f4:	0032      	movs	r2, r6
 80063f6:	49a0      	ldr	r1, [pc, #640]	; (8006678 <setCommand+0x318>)
 80063f8:	0020      	movs	r0, r4
 80063fa:	f00d f81d 	bl	8013438 <strncmp>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d115      	bne.n	800642e <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8006402:	4b9e      	ldr	r3, [pc, #632]	; (800667c <setCommand+0x31c>)
 8006404:	2160      	movs	r1, #96	; 0x60
 8006406:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006408:	79db      	ldrb	r3, [r3, #7]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	4319      	orrs	r1, r3
 800640e:	308a      	adds	r0, #138	; 0x8a
 8006410:	0040      	lsls	r0, r0, #1
 8006412:	f001 f9e5 	bl	80077e0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006416:	4b91      	ldr	r3, [pc, #580]	; (800665c <setCommand+0x2fc>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800641e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006420:	4b93      	ldr	r3, [pc, #588]	; (8006670 <setCommand+0x310>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4996      	ldr	r1, [pc, #600]	; (8006680 <setCommand+0x320>)
 8006426:	0028      	movs	r0, r5
 8006428:	f00c ffc2 	bl	80133b0 <sprintf>
	return pdFALSE;
 800642c:	e1a5      	b.n	800677a <setCommand+0x41a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800642e:	0032      	movs	r2, r6
 8006430:	4994      	ldr	r1, [pc, #592]	; (8006684 <setCommand+0x324>)
 8006432:	0020      	movs	r0, r4
 8006434:	f00d f800 	bl	8013438 <strncmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	d10a      	bne.n	8006452 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 800643c:	4b8f      	ldr	r3, [pc, #572]	; (800667c <setCommand+0x31c>)
 800643e:	2120      	movs	r1, #32
 8006440:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006442:	79db      	ldrb	r3, [r3, #7]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	4319      	orrs	r1, r3
 8006448:	308a      	adds	r0, #138	; 0x8a
 800644a:	0040      	lsls	r0, r0, #1
 800644c:	f001 f9c8 	bl	80077e0 <EE_WriteVariable>
 8006450:	e7e1      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006452:	0032      	movs	r2, r6
 8006454:	498c      	ldr	r1, [pc, #560]	; (8006688 <setCommand+0x328>)
 8006456:	0020      	movs	r0, r4
 8006458:	f00c ffee 	bl	8013438 <strncmp>
 800645c:	2800      	cmp	r0, #0
 800645e:	d10a      	bne.n	8006476 <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8006460:	4b86      	ldr	r3, [pc, #536]	; (800667c <setCommand+0x31c>)
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006466:	79db      	ldrb	r3, [r3, #7]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	4319      	orrs	r1, r3
 800646c:	308a      	adds	r0, #138	; 0x8a
 800646e:	0040      	lsls	r0, r0, #1
 8006470:	f001 f9b6 	bl	80077e0 <EE_WriteVariable>
 8006474:	e7cf      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006476:	0032      	movs	r2, r6
 8006478:	4984      	ldr	r1, [pc, #528]	; (800668c <setCommand+0x32c>)
 800647a:	0020      	movs	r0, r4
 800647c:	f00c ffdc 	bl	8013438 <strncmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	d000      	beq.n	8006486 <setCommand+0x126>
 8006484:	e2a7      	b.n	80069d6 <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8006486:	4b7d      	ldr	r3, [pc, #500]	; (800667c <setCommand+0x31c>)
 8006488:	2200      	movs	r2, #0
 800648a:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800648c:	79d9      	ldrb	r1, [r3, #7]
 800648e:	0209      	lsls	r1, r1, #8
 8006490:	308a      	adds	r0, #138	; 0x8a
 8006492:	0040      	lsls	r0, r0, #1
 8006494:	f001 f9a4 	bl	80077e0 <EE_WriteVariable>
 8006498:	e7bd      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800649a:	003a      	movs	r2, r7
 800649c:	497c      	ldr	r1, [pc, #496]	; (8006690 <setCommand+0x330>)
 800649e:	0030      	movs	r0, r6
 80064a0:	f00c ffca 	bl	8013438 <strncmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d14a      	bne.n	800653e <setCommand+0x1de>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80064a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064aa:	0032      	movs	r2, r6
 80064ac:	4972      	ldr	r1, [pc, #456]	; (8006678 <setCommand+0x318>)
 80064ae:	0020      	movs	r0, r4
 80064b0:	f00c ffc2 	bl	8013438 <strncmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d10b      	bne.n	80064d0 <setCommand+0x170>
				BOS.trace =TRACE_BOTH;
 80064b8:	4b70      	ldr	r3, [pc, #448]	; (800667c <setCommand+0x31c>)
 80064ba:	2203      	movs	r2, #3
 80064bc:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80064be:	799b      	ldrb	r3, [r3, #6]
 80064c0:	21c0      	movs	r1, #192	; 0xc0
 80064c2:	0089      	lsls	r1, r1, #2
 80064c4:	4319      	orrs	r1, r3
 80064c6:	308a      	adds	r0, #138	; 0x8a
 80064c8:	0040      	lsls	r0, r0, #1
 80064ca:	f001 f989 	bl	80077e0 <EE_WriteVariable>
 80064ce:	e7a2      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80064d0:	0032      	movs	r2, r6
 80064d2:	496c      	ldr	r1, [pc, #432]	; (8006684 <setCommand+0x324>)
 80064d4:	0020      	movs	r0, r4
 80064d6:	f00c ffaf 	bl	8013438 <strncmp>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d10b      	bne.n	80064f6 <setCommand+0x196>
				BOS.trace =TRACE_MESSAGE;
 80064de:	4b67      	ldr	r3, [pc, #412]	; (800667c <setCommand+0x31c>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80064e4:	799b      	ldrb	r3, [r3, #6]
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	0049      	lsls	r1, r1, #1
 80064ea:	4319      	orrs	r1, r3
 80064ec:	308a      	adds	r0, #138	; 0x8a
 80064ee:	4090      	lsls	r0, r2
 80064f0:	f001 f976 	bl	80077e0 <EE_WriteVariable>
 80064f4:	e78f      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80064f6:	0032      	movs	r2, r6
 80064f8:	495e      	ldr	r1, [pc, #376]	; (8006674 <setCommand+0x314>)
 80064fa:	0020      	movs	r0, r4
 80064fc:	f00c ff9c 	bl	8013438 <strncmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	d10b      	bne.n	800651c <setCommand+0x1bc>
				BOS.trace =TRACE_RESPONSE;
 8006504:	4b5d      	ldr	r3, [pc, #372]	; (800667c <setCommand+0x31c>)
 8006506:	2202      	movs	r2, #2
 8006508:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800650a:	799b      	ldrb	r3, [r3, #6]
 800650c:	2180      	movs	r1, #128	; 0x80
 800650e:	0089      	lsls	r1, r1, #2
 8006510:	4319      	orrs	r1, r3
 8006512:	308a      	adds	r0, #138	; 0x8a
 8006514:	0040      	lsls	r0, r0, #1
 8006516:	f001 f963 	bl	80077e0 <EE_WriteVariable>
 800651a:	e77c      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800651c:	0032      	movs	r2, r6
 800651e:	495b      	ldr	r1, [pc, #364]	; (800668c <setCommand+0x32c>)
 8006520:	0020      	movs	r0, r4
 8006522:	f00c ff89 	bl	8013438 <strncmp>
 8006526:	2800      	cmp	r0, #0
 8006528:	d000      	beq.n	800652c <setCommand+0x1cc>
 800652a:	e254      	b.n	80069d6 <setCommand+0x676>
				BOS.trace =TRACE_NONE;
 800652c:	4b53      	ldr	r3, [pc, #332]	; (800667c <setCommand+0x31c>)
 800652e:	2200      	movs	r2, #0
 8006530:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006532:	7999      	ldrb	r1, [r3, #6]
 8006534:	308a      	adds	r0, #138	; 0x8a
 8006536:	0040      	lsls	r0, r0, #1
 8006538:	f001 f952 	bl	80077e0 <EE_WriteVariable>
 800653c:	e76b      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800653e:	003a      	movs	r2, r7
 8006540:	4954      	ldr	r1, [pc, #336]	; (8006694 <setCommand+0x334>)
 8006542:	0030      	movs	r0, r6
 8006544:	f00c ff78 	bl	8013438 <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d128      	bne.n	800659e <setCommand+0x23e>
			temp2 =atoi((const char* )pcParameterString2);
 800654c:	0020      	movs	r0, r4
 800654e:	f00c fa9c 	bl	8012a8a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006552:	23e1      	movs	r3, #225	; 0xe1
 8006554:	031b      	lsls	r3, r3, #12
 8006556:	4298      	cmp	r0, r3
 8006558:	d900      	bls.n	800655c <setCommand+0x1fc>
 800655a:	e23c      	b.n	80069d6 <setCommand+0x676>
				BOS.clibaudrate =temp2;
 800655c:	4c47      	ldr	r4, [pc, #284]	; (800667c <setCommand+0x31c>)
 800655e:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006560:	b281      	uxth	r1, r0
 8006562:	208c      	movs	r0, #140	; 0x8c
 8006564:	0040      	lsls	r0, r0, #1
 8006566:	f001 f93b 	bl	80077e0 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800656a:	68a1      	ldr	r1, [r4, #8]
 800656c:	0c09      	lsrs	r1, r1, #16
 800656e:	201a      	movs	r0, #26
 8006570:	30ff      	adds	r0, #255	; 0xff
 8006572:	f001 f935 	bl	80077e0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <setCommand+0x2fc>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800657e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006580:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <setCommand+0x310>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	493e      	ldr	r1, [pc, #248]	; (8006680 <setCommand+0x320>)
 8006586:	0028      	movs	r0, r5
 8006588:	f00c ff12 	bl	80133b0 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 800658c:	4942      	ldr	r1, [pc, #264]	; (8006698 <setCommand+0x338>)
 800658e:	0028      	movs	r0, r5
 8006590:	f00c ff2e 	bl	80133f0 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006594:	4941      	ldr	r1, [pc, #260]	; (800669c <setCommand+0x33c>)
 8006596:	0028      	movs	r0, r5
 8006598:	f00c ff2a 	bl	80133f0 <strcat>
 800659c:	e0ed      	b.n	800677a <setCommand+0x41a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800659e:	003a      	movs	r2, r7
 80065a0:	493f      	ldr	r1, [pc, #252]	; (80066a0 <setCommand+0x340>)
 80065a2:	0030      	movs	r0, r6
 80065a4:	f00c ff48 	bl	8013438 <strncmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d10d      	bne.n	80065c8 <setCommand+0x268>
			temp16 =atoi((const char* )pcParameterString2);
 80065ac:	0020      	movs	r0, r4
 80065ae:	f00c fa6c 	bl	8012a8a <atoi>
 80065b2:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d100      	bne.n	80065ba <setCommand+0x25a>
 80065b8:	e20d      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.debounce =temp16;
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <setCommand+0x31c>)
 80065bc:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80065be:	2016      	movs	r0, #22
 80065c0:	30ff      	adds	r0, #255	; 0xff
 80065c2:	f001 f90d 	bl	80077e0 <EE_WriteVariable>
 80065c6:	e726      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80065c8:	003a      	movs	r2, r7
 80065ca:	4936      	ldr	r1, [pc, #216]	; (80066a4 <setCommand+0x344>)
 80065cc:	0030      	movs	r0, r6
 80065ce:	f00c ff33 	bl	8013438 <strncmp>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d10d      	bne.n	80065f2 <setCommand+0x292>
			temp16 =atoi((const char* )pcParameterString2);
 80065d6:	0020      	movs	r0, r4
 80065d8:	f00c fa57 	bl	8012a8a <atoi>
 80065dc:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80065de:	2900      	cmp	r1, #0
 80065e0:	d100      	bne.n	80065e4 <setCommand+0x284>
 80065e2:	e1f8      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.singleClickTime =temp16;
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <setCommand+0x31c>)
 80065e6:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80065e8:	208b      	movs	r0, #139	; 0x8b
 80065ea:	0040      	lsls	r0, r0, #1
 80065ec:	f001 f8f8 	bl	80077e0 <EE_WriteVariable>
 80065f0:	e711      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80065f2:	003a      	movs	r2, r7
 80065f4:	492c      	ldr	r1, [pc, #176]	; (80066a8 <setCommand+0x348>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00c ff1e 	bl	8013438 <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d112      	bne.n	8006626 <setCommand+0x2c6>
			temp16 =atoi((const char* )pcParameterString2);
 8006600:	0020      	movs	r0, r4
 8006602:	f00c fa42 	bl	8012a8a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006606:	1e43      	subs	r3, r0, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	2bfe      	cmp	r3, #254	; 0xfe
 800660c:	d900      	bls.n	8006610 <setCommand+0x2b0>
 800660e:	e1e2      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.minInterClickTime =temp16;
 8006610:	b2c0      	uxtb	r0, r0
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <setCommand+0x31c>)
 8006614:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006616:	7959      	ldrb	r1, [r3, #5]
 8006618:	0209      	lsls	r1, r1, #8
 800661a:	4301      	orrs	r1, r0
 800661c:	2018      	movs	r0, #24
 800661e:	30ff      	adds	r0, #255	; 0xff
 8006620:	f001 f8de 	bl	80077e0 <EE_WriteVariable>
 8006624:	e6f7      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006626:	003a      	movs	r2, r7
 8006628:	4920      	ldr	r1, [pc, #128]	; (80066ac <setCommand+0x34c>)
 800662a:	0030      	movs	r0, r6
 800662c:	f00c ff04 	bl	8013438 <strncmp>
 8006630:	2800      	cmp	r0, #0
 8006632:	d000      	beq.n	8006636 <setCommand+0x2d6>
 8006634:	e6c3      	b.n	80063be <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 8006636:	0020      	movs	r0, r4
 8006638:	f00c fa27 	bl	8012a8a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800663c:	1e43      	subs	r3, r0, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	2bfe      	cmp	r3, #254	; 0xfe
 8006642:	d900      	bls.n	8006646 <setCommand+0x2e6>
 8006644:	e1c7      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.maxInterClickTime =temp16;
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <setCommand+0x31c>)
 8006648:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800664a:	0200      	lsls	r0, r0, #8
 800664c:	7919      	ldrb	r1, [r3, #4]
 800664e:	4301      	orrs	r1, r0
 8006650:	b289      	uxth	r1, r1
 8006652:	2018      	movs	r0, #24
 8006654:	30ff      	adds	r0, #255	; 0xff
 8006656:	f001 f8c3 	bl	80077e0 <EE_WriteVariable>
 800665a:	e6dc      	b.n	8006416 <setCommand+0xb6>
 800665c:	20001290 	.word	0x20001290
 8006660:	08018704 	.word	0x08018704
 8006664:	08018e30 	.word	0x08018e30
 8006668:	08018e40 	.word	0x08018e40
 800666c:	0801878c 	.word	0x0801878c
 8006670:	2000129c 	.word	0x2000129c
 8006674:	0801870c 	.word	0x0801870c
 8006678:	08017b0c 	.word	0x08017b0c
 800667c:	200069c4 	.word	0x200069c4
 8006680:	08018d38 	.word	0x08018d38
 8006684:	08018d2c 	.word	0x08018d2c
 8006688:	08018d34 	.word	0x08018d34
 800668c:	0801871c 	.word	0x0801871c
 8006690:	08018724 	.word	0x08018724
 8006694:	0801872c 	.word	0x0801872c
 8006698:	08018d4c 	.word	0x08018d4c
 800669c:	08018d7c 	.word	0x08018d7c
 80066a0:	08018738 	.word	0x08018738
 80066a4:	08018744 	.word	0x08018744
 80066a8:	08018754 	.word	0x08018754
 80066ac:	08018768 	.word	0x08018768
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066b0:	aa0a      	add	r2, sp, #40	; 0x28
 80066b2:	2102      	movs	r1, #2
 80066b4:	0020      	movs	r0, r4
 80066b6:	f007 f8d7 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80066ba:	4bca      	ldr	r3, [pc, #808]	; (80069e4 <setCommand+0x684>)
 80066bc:	4699      	mov	r9, r3
 80066be:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066c0:	aa09      	add	r2, sp, #36	; 0x24
 80066c2:	2103      	movs	r1, #3
 80066c4:	0020      	movs	r0, r4
 80066c6:	f007 f8cf 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80066ca:	4fc7      	ldr	r7, [pc, #796]	; (80069e8 <setCommand+0x688>)
 80066cc:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066ce:	aa08      	add	r2, sp, #32
 80066d0:	2104      	movs	r1, #4
 80066d2:	0020      	movs	r0, r4
 80066d4:	f007 f8c8 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80066d8:	4ec4      	ldr	r6, [pc, #784]	; (80069ec <setCommand+0x68c>)
 80066da:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80066dc:	aa07      	add	r2, sp, #28
 80066de:	2105      	movs	r1, #5
 80066e0:	0020      	movs	r0, r4
 80066e2:	f007 f8c1 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80066e6:	4cc2      	ldr	r4, [pc, #776]	; (80069f0 <setCommand+0x690>)
 80066e8:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 80066ea:	464b      	mov	r3, r9
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f00c f9cc 	bl	8012a8a <atoi>
 80066f2:	b2c3      	uxtb	r3, r0
 80066f4:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80066f6:	6838      	ldr	r0, [r7, #0]
 80066f8:	f00c f9c7 	bl	8012a8a <atoi>
 80066fc:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80066fe:	6830      	ldr	r0, [r6, #0]
 8006700:	f00c f9c3 	bl	8012a8a <atoi>
 8006704:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d010      	beq.n	800672e <setCommand+0x3ce>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800670c:	2202      	movs	r2, #2
 800670e:	49b9      	ldr	r1, [pc, #740]	; (80069f4 <setCommand+0x694>)
 8006710:	0020      	movs	r0, r4
 8006712:	f00c fe91 	bl	8013438 <strncmp>
 8006716:	2800      	cmp	r0, #0
 8006718:	d035      	beq.n	8006786 <setCommand+0x426>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800671a:	2202      	movs	r2, #2
 800671c:	49b6      	ldr	r1, [pc, #728]	; (80069f8 <setCommand+0x698>)
 800671e:	0020      	movs	r0, r4
 8006720:	f00c fe8a 	bl	8013438 <strncmp>
 8006724:	2800      	cmp	r0, #0
 8006726:	d000      	beq.n	800672a <setCommand+0x3ca>
 8006728:	e155      	b.n	80069d6 <setCommand+0x676>
				temp84 =RTC_PM;
 800672a:	2302      	movs	r3, #2
 800672c:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800672e:	464b      	mov	r3, r9
 8006730:	2b17      	cmp	r3, #23
 8006732:	d900      	bls.n	8006736 <setCommand+0x3d6>
 8006734:	e14f      	b.n	80069d6 <setCommand+0x676>
 8006736:	2f3b      	cmp	r7, #59	; 0x3b
 8006738:	d900      	bls.n	800673c <setCommand+0x3dc>
 800673a:	e14c      	b.n	80069d6 <setCommand+0x676>
 800673c:	2e3b      	cmp	r6, #59	; 0x3b
 800673e:	d900      	bls.n	8006742 <setCommand+0x3e2>
 8006740:	e149      	b.n	80069d6 <setCommand+0x676>
				GetTimeDate();
 8006742:	f006 fba7 	bl	800ce94 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006746:	4cad      	ldr	r4, [pc, #692]	; (80069fc <setCommand+0x69c>)
 8006748:	7d23      	ldrb	r3, [r4, #20]
 800674a:	8b22      	ldrh	r2, [r4, #24]
 800674c:	7d61      	ldrb	r1, [r4, #21]
 800674e:	7da0      	ldrb	r0, [r4, #22]
 8006750:	7b24      	ldrb	r4, [r4, #12]
 8006752:	b264      	sxtb	r4, r4
 8006754:	9404      	str	r4, [sp, #16]
 8006756:	4644      	mov	r4, r8
 8006758:	9403      	str	r4, [sp, #12]
 800675a:	464c      	mov	r4, r9
 800675c:	9402      	str	r4, [sp, #8]
 800675e:	9701      	str	r7, [sp, #4]
 8006760:	9600      	str	r6, [sp, #0]
 8006762:	f006 fb3d 	bl	800cde0 <BOS_CalendarConfig>
 8006766:	0006      	movs	r6, r0
	if(result == BOS_OK){
 8006768:	2e00      	cmp	r6, #0
 800676a:	d100      	bne.n	800676e <setCommand+0x40e>
 800676c:	e653      	b.n	8006416 <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 800676e:	2e67      	cmp	r6, #103	; 0x67
 8006770:	d100      	bne.n	8006774 <setCommand+0x414>
 8006772:	e624      	b.n	80063be <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 8006774:	2e68      	cmp	r6, #104	; 0x68
 8006776:	d100      	bne.n	800677a <setCommand+0x41a>
 8006778:	e12d      	b.n	80069d6 <setCommand+0x676>
}
 800677a:	2000      	movs	r0, #0
 800677c:	b00d      	add	sp, #52	; 0x34
 800677e:	bc0c      	pop	{r2, r3}
 8006780:	4690      	mov	r8, r2
 8006782:	4699      	mov	r9, r3
 8006784:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 =RTC_AM;
 8006786:	2301      	movs	r3, #1
 8006788:	4698      	mov	r8, r3
 800678a:	e7d0      	b.n	800672e <setCommand+0x3ce>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800678c:	aa0a      	add	r2, sp, #40	; 0x28
 800678e:	2102      	movs	r1, #2
 8006790:	0020      	movs	r0, r4
 8006792:	f007 f869 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8006796:	4e93      	ldr	r6, [pc, #588]	; (80069e4 <setCommand+0x684>)
 8006798:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800679a:	aa09      	add	r2, sp, #36	; 0x24
 800679c:	2103      	movs	r1, #3
 800679e:	0020      	movs	r0, r4
 80067a0:	f007 f862 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80067a4:	4b90      	ldr	r3, [pc, #576]	; (80069e8 <setCommand+0x688>)
 80067a6:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80067a8:	aa08      	add	r2, sp, #32
 80067aa:	2104      	movs	r1, #4
 80067ac:	0020      	movs	r0, r4
 80067ae:	f007 f85b 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80067b2:	4b8e      	ldr	r3, [pc, #568]	; (80069ec <setCommand+0x68c>)
 80067b4:	4698      	mov	r8, r3
 80067b6:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80067b8:	aa07      	add	r2, sp, #28
 80067ba:	2105      	movs	r1, #5
 80067bc:	0020      	movs	r0, r4
 80067be:	f007 f853 	bl	800d868 <FreeRTOS_CLIGetParameter>
 80067c2:	4c8b      	ldr	r4, [pc, #556]	; (80069f0 <setCommand+0x690>)
 80067c4:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 80067c6:	4643      	mov	r3, r8
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f00c f95e 	bl	8012a8a <atoi>
 80067ce:	b2c3      	uxtb	r3, r0
 80067d0:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	f00c f959 	bl	8012a8a <atoi>
 80067d8:	b283      	uxth	r3, r0
 80067da:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80067dc:	6834      	ldr	r4, [r6, #0]
 80067de:	2206      	movs	r2, #6
 80067e0:	4987      	ldr	r1, [pc, #540]	; (8006a00 <setCommand+0x6a0>)
 80067e2:	0020      	movs	r0, r4
 80067e4:	f00c fe28 	bl	8013438 <strncmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d100      	bne.n	80067ee <setCommand+0x48e>
 80067ec:	e195      	b.n	8006b1a <setCommand+0x7ba>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80067ee:	2207      	movs	r2, #7
 80067f0:	4984      	ldr	r1, [pc, #528]	; (8006a04 <setCommand+0x6a4>)
 80067f2:	0020      	movs	r0, r4
 80067f4:	f00c fe20 	bl	8013438 <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d100      	bne.n	80067fe <setCommand+0x49e>
 80067fc:	e19b      	b.n	8006b36 <setCommand+0x7d6>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80067fe:	2209      	movs	r2, #9
 8006800:	4981      	ldr	r1, [pc, #516]	; (8006a08 <setCommand+0x6a8>)
 8006802:	0020      	movs	r0, r4
 8006804:	f00c fe18 	bl	8013438 <strncmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	d100      	bne.n	800680e <setCommand+0x4ae>
 800680c:	e195      	b.n	8006b3a <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800680e:	2208      	movs	r2, #8
 8006810:	497e      	ldr	r1, [pc, #504]	; (8006a0c <setCommand+0x6ac>)
 8006812:	0020      	movs	r0, r4
 8006814:	f00c fe10 	bl	8013438 <strncmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	d100      	bne.n	800681e <setCommand+0x4be>
 800681c:	e18f      	b.n	8006b3e <setCommand+0x7de>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800681e:	2206      	movs	r2, #6
 8006820:	497b      	ldr	r1, [pc, #492]	; (8006a10 <setCommand+0x6b0>)
 8006822:	0020      	movs	r0, r4
 8006824:	f00c fe08 	bl	8013438 <strncmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	d100      	bne.n	800682e <setCommand+0x4ce>
 800682c:	e189      	b.n	8006b42 <setCommand+0x7e2>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800682e:	2208      	movs	r2, #8
 8006830:	4978      	ldr	r1, [pc, #480]	; (8006a14 <setCommand+0x6b4>)
 8006832:	0020      	movs	r0, r4
 8006834:	f00c fe00 	bl	8013438 <strncmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	d100      	bne.n	800683e <setCommand+0x4de>
 800683c:	e183      	b.n	8006b46 <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800683e:	2206      	movs	r2, #6
 8006840:	4975      	ldr	r1, [pc, #468]	; (8006a18 <setCommand+0x6b8>)
 8006842:	0020      	movs	r0, r4
 8006844:	f00c fdf8 	bl	8013438 <strncmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	d100      	bne.n	800684e <setCommand+0x4ee>
 800684c:	e17d      	b.n	8006b4a <setCommand+0x7ea>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800684e:	4b66      	ldr	r3, [pc, #408]	; (80069e8 <setCommand+0x688>)
 8006850:	681c      	ldr	r4, [r3, #0]
 8006852:	2207      	movs	r2, #7
 8006854:	4971      	ldr	r1, [pc, #452]	; (8006a1c <setCommand+0x6bc>)
 8006856:	0020      	movs	r0, r4
 8006858:	f00c fdee 	bl	8013438 <strncmp>
			result =BOS_ERR_WrongValue;
 800685c:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800685e:	2800      	cmp	r0, #0
 8006860:	d101      	bne.n	8006866 <setCommand+0x506>
			result =BOS_ERR_WrongValue;
 8006862:	2668      	movs	r6, #104	; 0x68
 8006864:	e783      	b.n	800676e <setCommand+0x40e>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006866:	2202      	movs	r2, #2
 8006868:	496d      	ldr	r1, [pc, #436]	; (8006a20 <setCommand+0x6c0>)
 800686a:	0020      	movs	r0, r4
 800686c:	f00c fde4 	bl	8013438 <strncmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	d100      	bne.n	8006876 <setCommand+0x516>
 8006874:	e104      	b.n	8006a80 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006876:	2208      	movs	r2, #8
 8006878:	496a      	ldr	r1, [pc, #424]	; (8006a24 <setCommand+0x6c4>)
 800687a:	0020      	movs	r0, r4
 800687c:	f00c fddc 	bl	8013438 <strncmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	d100      	bne.n	8006886 <setCommand+0x526>
 8006884:	e11f      	b.n	8006ac6 <setCommand+0x766>
 8006886:	2202      	movs	r2, #2
 8006888:	4967      	ldr	r1, [pc, #412]	; (8006a28 <setCommand+0x6c8>)
 800688a:	0020      	movs	r0, r4
 800688c:	f00c fdd4 	bl	8013438 <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d100      	bne.n	8006896 <setCommand+0x536>
 8006894:	e119      	b.n	8006aca <setCommand+0x76a>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006896:	2205      	movs	r2, #5
 8006898:	4964      	ldr	r1, [pc, #400]	; (8006a2c <setCommand+0x6cc>)
 800689a:	0020      	movs	r0, r4
 800689c:	f00c fdcc 	bl	8013438 <strncmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d100      	bne.n	80068a6 <setCommand+0x546>
 80068a4:	e113      	b.n	8006ace <setCommand+0x76e>
 80068a6:	2202      	movs	r2, #2
 80068a8:	4961      	ldr	r1, [pc, #388]	; (8006a30 <setCommand+0x6d0>)
 80068aa:	0020      	movs	r0, r4
 80068ac:	f00c fdc4 	bl	8013438 <strncmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d100      	bne.n	80068b6 <setCommand+0x556>
 80068b4:	e10d      	b.n	8006ad2 <setCommand+0x772>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80068b6:	2205      	movs	r2, #5
 80068b8:	495e      	ldr	r1, [pc, #376]	; (8006a34 <setCommand+0x6d4>)
 80068ba:	0020      	movs	r0, r4
 80068bc:	f00c fdbc 	bl	8013438 <strncmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d100      	bne.n	80068c6 <setCommand+0x566>
 80068c4:	e107      	b.n	8006ad6 <setCommand+0x776>
 80068c6:	2202      	movs	r2, #2
 80068c8:	495b      	ldr	r1, [pc, #364]	; (8006a38 <setCommand+0x6d8>)
 80068ca:	0020      	movs	r0, r4
 80068cc:	f00c fdb4 	bl	8013438 <strncmp>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d100      	bne.n	80068d6 <setCommand+0x576>
 80068d4:	e101      	b.n	8006ada <setCommand+0x77a>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80068d6:	2203      	movs	r2, #3
 80068d8:	4958      	ldr	r1, [pc, #352]	; (8006a3c <setCommand+0x6dc>)
 80068da:	0020      	movs	r0, r4
 80068dc:	f00c fdac 	bl	8013438 <strncmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d100      	bne.n	80068e6 <setCommand+0x586>
 80068e4:	e0fb      	b.n	8006ade <setCommand+0x77e>
 80068e6:	2202      	movs	r2, #2
 80068e8:	4955      	ldr	r1, [pc, #340]	; (8006a40 <setCommand+0x6e0>)
 80068ea:	0020      	movs	r0, r4
 80068ec:	f00c fda4 	bl	8013438 <strncmp>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d100      	bne.n	80068f6 <setCommand+0x596>
 80068f4:	e0f5      	b.n	8006ae2 <setCommand+0x782>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80068f6:	2204      	movs	r2, #4
 80068f8:	4952      	ldr	r1, [pc, #328]	; (8006a44 <setCommand+0x6e4>)
 80068fa:	0020      	movs	r0, r4
 80068fc:	f00c fd9c 	bl	8013438 <strncmp>
 8006900:	2800      	cmp	r0, #0
 8006902:	d100      	bne.n	8006906 <setCommand+0x5a6>
 8006904:	e0ef      	b.n	8006ae6 <setCommand+0x786>
 8006906:	2202      	movs	r2, #2
 8006908:	494f      	ldr	r1, [pc, #316]	; (8006a48 <setCommand+0x6e8>)
 800690a:	0020      	movs	r0, r4
 800690c:	f00c fd94 	bl	8013438 <strncmp>
 8006910:	2800      	cmp	r0, #0
 8006912:	d100      	bne.n	8006916 <setCommand+0x5b6>
 8006914:	e0e9      	b.n	8006aea <setCommand+0x78a>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006916:	2204      	movs	r2, #4
 8006918:	494c      	ldr	r1, [pc, #304]	; (8006a4c <setCommand+0x6ec>)
 800691a:	0020      	movs	r0, r4
 800691c:	f00c fd8c 	bl	8013438 <strncmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	d100      	bne.n	8006926 <setCommand+0x5c6>
 8006924:	e0e3      	b.n	8006aee <setCommand+0x78e>
 8006926:	2202      	movs	r2, #2
 8006928:	4949      	ldr	r1, [pc, #292]	; (8006a50 <setCommand+0x6f0>)
 800692a:	0020      	movs	r0, r4
 800692c:	f00c fd84 	bl	8013438 <strncmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	d100      	bne.n	8006936 <setCommand+0x5d6>
 8006934:	e0dd      	b.n	8006af2 <setCommand+0x792>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006936:	2205      	movs	r2, #5
 8006938:	4946      	ldr	r1, [pc, #280]	; (8006a54 <setCommand+0x6f4>)
 800693a:	0020      	movs	r0, r4
 800693c:	f00c fd7c 	bl	8013438 <strncmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	d100      	bne.n	8006946 <setCommand+0x5e6>
 8006944:	e0d7      	b.n	8006af6 <setCommand+0x796>
 8006946:	2202      	movs	r2, #2
 8006948:	4943      	ldr	r1, [pc, #268]	; (8006a58 <setCommand+0x6f8>)
 800694a:	0020      	movs	r0, r4
 800694c:	f00c fd74 	bl	8013438 <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d100      	bne.n	8006956 <setCommand+0x5f6>
 8006954:	e0d1      	b.n	8006afa <setCommand+0x79a>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006956:	2209      	movs	r2, #9
 8006958:	4940      	ldr	r1, [pc, #256]	; (8006a5c <setCommand+0x6fc>)
 800695a:	0020      	movs	r0, r4
 800695c:	f00c fd6c 	bl	8013438 <strncmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	d100      	bne.n	8006966 <setCommand+0x606>
 8006964:	e0cb      	b.n	8006afe <setCommand+0x79e>
 8006966:	2202      	movs	r2, #2
 8006968:	493d      	ldr	r1, [pc, #244]	; (8006a60 <setCommand+0x700>)
 800696a:	0020      	movs	r0, r4
 800696c:	f00c fd64 	bl	8013438 <strncmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	d100      	bne.n	8006976 <setCommand+0x616>
 8006974:	e0c5      	b.n	8006b02 <setCommand+0x7a2>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006976:	2207      	movs	r2, #7
 8006978:	493a      	ldr	r1, [pc, #232]	; (8006a64 <setCommand+0x704>)
 800697a:	0020      	movs	r0, r4
 800697c:	f00c fd5c 	bl	8013438 <strncmp>
 8006980:	2800      	cmp	r0, #0
 8006982:	d100      	bne.n	8006986 <setCommand+0x626>
 8006984:	e0bf      	b.n	8006b06 <setCommand+0x7a6>
 8006986:	2202      	movs	r2, #2
 8006988:	4937      	ldr	r1, [pc, #220]	; (8006a68 <setCommand+0x708>)
 800698a:	0020      	movs	r0, r4
 800698c:	f00c fd54 	bl	8013438 <strncmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	d100      	bne.n	8006996 <setCommand+0x636>
 8006994:	e0b9      	b.n	8006b0a <setCommand+0x7aa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006996:	2208      	movs	r2, #8
 8006998:	4934      	ldr	r1, [pc, #208]	; (8006a6c <setCommand+0x70c>)
 800699a:	0020      	movs	r0, r4
 800699c:	f00c fd4c 	bl	8013438 <strncmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d100      	bne.n	80069a6 <setCommand+0x646>
 80069a4:	e0b3      	b.n	8006b0e <setCommand+0x7ae>
 80069a6:	2202      	movs	r2, #2
 80069a8:	4931      	ldr	r1, [pc, #196]	; (8006a70 <setCommand+0x710>)
 80069aa:	0020      	movs	r0, r4
 80069ac:	f00c fd44 	bl	8013438 <strncmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d100      	bne.n	80069b6 <setCommand+0x656>
 80069b4:	e0ad      	b.n	8006b12 <setCommand+0x7b2>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80069b6:	2208      	movs	r2, #8
 80069b8:	492e      	ldr	r1, [pc, #184]	; (8006a74 <setCommand+0x714>)
 80069ba:	0020      	movs	r0, r4
 80069bc:	f00c fd3c 	bl	8013438 <strncmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d100      	bne.n	80069c6 <setCommand+0x666>
 80069c4:	e0a7      	b.n	8006b16 <setCommand+0x7b6>
 80069c6:	2202      	movs	r2, #2
 80069c8:	492b      	ldr	r1, [pc, #172]	; (8006a78 <setCommand+0x718>)
 80069ca:	0020      	movs	r0, r4
 80069cc:	f00c fd34 	bl	8013438 <strncmp>
			temp82 =DECEMBER;
 80069d0:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d055      	beq.n	8006a82 <setCommand+0x722>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80069d6:	220f      	movs	r2, #15
 80069d8:	4928      	ldr	r1, [pc, #160]	; (8006a7c <setCommand+0x71c>)
 80069da:	0028      	movs	r0, r5
 80069dc:	f00c fae5 	bl	8012faa <memcpy>
 80069e0:	e6cb      	b.n	800677a <setCommand+0x41a>
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	2000129c 	.word	0x2000129c
 80069e8:	200012a4 	.word	0x200012a4
 80069ec:	200012a8 	.word	0x200012a8
 80069f0:	200012ac 	.word	0x200012ac
 80069f4:	08018e38 	.word	0x08018e38
 80069f8:	08018e3c 	.word	0x08018e3c
 80069fc:	200069c4 	.word	0x200069c4
 8006a00:	08018e48 	.word	0x08018e48
 8006a04:	08018e50 	.word	0x08018e50
 8006a08:	08018e58 	.word	0x08018e58
 8006a0c:	08018e64 	.word	0x08018e64
 8006a10:	08018e70 	.word	0x08018e70
 8006a14:	08018e78 	.word	0x08018e78
 8006a18:	08018e84 	.word	0x08018e84
 8006a1c:	08018f20 	.word	0x08018f20
 8006a20:	08018e8c 	.word	0x08018e8c
 8006a24:	08018e90 	.word	0x08018e90
 8006a28:	08018e9c 	.word	0x08018e9c
 8006a2c:	08018ea0 	.word	0x08018ea0
 8006a30:	08018ea8 	.word	0x08018ea8
 8006a34:	08018eac 	.word	0x08018eac
 8006a38:	08018eb4 	.word	0x08018eb4
 8006a3c:	08018eb8 	.word	0x08018eb8
 8006a40:	08018ebc 	.word	0x08018ebc
 8006a44:	08018ec0 	.word	0x08018ec0
 8006a48:	08018ec8 	.word	0x08018ec8
 8006a4c:	08018ecc 	.word	0x08018ecc
 8006a50:	08018ed4 	.word	0x08018ed4
 8006a54:	08018ed8 	.word	0x08018ed8
 8006a58:	08018ee0 	.word	0x08018ee0
 8006a5c:	08018ee4 	.word	0x08018ee4
 8006a60:	08018ef0 	.word	0x08018ef0
 8006a64:	08018ef4 	.word	0x08018ef4
 8006a68:	08018efc 	.word	0x08018efc
 8006a6c:	08018f00 	.word	0x08018f00
 8006a70:	08018f0c 	.word	0x08018f0c
 8006a74:	08018f10 	.word	0x08018f10
 8006a78:	08018f1c 	.word	0x08018f1c
 8006a7c:	080185f8 	.word	0x080185f8
			temp82 =JANUARY;
 8006a80:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d000      	beq.n	8006a88 <setCommand+0x728>
 8006a86:	e672      	b.n	800676e <setCommand+0x40e>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006a88:	4643      	mov	r3, r8
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	2b1e      	cmp	r3, #30
 8006a8e:	d8a2      	bhi.n	80069d6 <setCommand+0x676>
 8006a90:	4b2f      	ldr	r3, [pc, #188]	; (8006b50 <setCommand+0x7f0>)
 8006a92:	444b      	add	r3, r9
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d89d      	bhi.n	80069d6 <setCommand+0x676>
				GetTimeDate();
 8006a9a:	f006 f9fb 	bl	800ce94 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <setCommand+0x7f4>)
 8006aa0:	220c      	movs	r2, #12
 8006aa2:	569a      	ldrsb	r2, [r3, r2]
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	7cda      	ldrb	r2, [r3, #19]
 8006aa8:	9203      	str	r2, [sp, #12]
 8006aaa:	7c9a      	ldrb	r2, [r3, #18]
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	7c5a      	ldrb	r2, [r3, #17]
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	003b      	movs	r3, r7
 8006ab8:	464a      	mov	r2, r9
 8006aba:	4641      	mov	r1, r8
 8006abc:	0020      	movs	r0, r4
 8006abe:	f006 f98f 	bl	800cde0 <BOS_CalendarConfig>
 8006ac2:	0006      	movs	r6, r0
 8006ac4:	e650      	b.n	8006768 <setCommand+0x408>
			temp82 =FEBRUARY;
 8006ac6:	2402      	movs	r4, #2
 8006ac8:	e7db      	b.n	8006a82 <setCommand+0x722>
 8006aca:	2402      	movs	r4, #2
 8006acc:	e7d9      	b.n	8006a82 <setCommand+0x722>
			temp82 =MARCH;
 8006ace:	2403      	movs	r4, #3
 8006ad0:	e7d7      	b.n	8006a82 <setCommand+0x722>
 8006ad2:	2403      	movs	r4, #3
 8006ad4:	e7d5      	b.n	8006a82 <setCommand+0x722>
			temp82 =APRIL;
 8006ad6:	2404      	movs	r4, #4
 8006ad8:	e7d3      	b.n	8006a82 <setCommand+0x722>
 8006ada:	2404      	movs	r4, #4
 8006adc:	e7d1      	b.n	8006a82 <setCommand+0x722>
			temp82 =MAY;
 8006ade:	2405      	movs	r4, #5
 8006ae0:	e7cf      	b.n	8006a82 <setCommand+0x722>
 8006ae2:	2405      	movs	r4, #5
 8006ae4:	e7cd      	b.n	8006a82 <setCommand+0x722>
			temp82 =JUNE;
 8006ae6:	2406      	movs	r4, #6
 8006ae8:	e7cb      	b.n	8006a82 <setCommand+0x722>
 8006aea:	2406      	movs	r4, #6
 8006aec:	e7c9      	b.n	8006a82 <setCommand+0x722>
			temp82 =JULY;
 8006aee:	2407      	movs	r4, #7
 8006af0:	e7c7      	b.n	8006a82 <setCommand+0x722>
 8006af2:	2407      	movs	r4, #7
 8006af4:	e7c5      	b.n	8006a82 <setCommand+0x722>
			temp82 =AUGUST;
 8006af6:	2408      	movs	r4, #8
 8006af8:	e7c3      	b.n	8006a82 <setCommand+0x722>
 8006afa:	2408      	movs	r4, #8
 8006afc:	e7c1      	b.n	8006a82 <setCommand+0x722>
			temp82 =SEPTEMBER;
 8006afe:	2409      	movs	r4, #9
 8006b00:	e7bf      	b.n	8006a82 <setCommand+0x722>
 8006b02:	2409      	movs	r4, #9
 8006b04:	e7bd      	b.n	8006a82 <setCommand+0x722>
			temp82 =OCTOBER;
 8006b06:	240a      	movs	r4, #10
 8006b08:	e7bb      	b.n	8006a82 <setCommand+0x722>
 8006b0a:	240a      	movs	r4, #10
 8006b0c:	e7b9      	b.n	8006a82 <setCommand+0x722>
			temp82 =NOVEMBER;
 8006b0e:	240b      	movs	r4, #11
 8006b10:	e7b7      	b.n	8006a82 <setCommand+0x722>
 8006b12:	240b      	movs	r4, #11
 8006b14:	e7b5      	b.n	8006a82 <setCommand+0x722>
			temp82 =DECEMBER;
 8006b16:	240c      	movs	r4, #12
 8006b18:	e7b3      	b.n	8006a82 <setCommand+0x722>
			temp81 =MONDAY;
 8006b1a:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <setCommand+0x7f8>)
 8006b1e:	681c      	ldr	r4, [r3, #0]
 8006b20:	2207      	movs	r2, #7
 8006b22:	490e      	ldr	r1, [pc, #56]	; (8006b5c <setCommand+0x7fc>)
 8006b24:	0020      	movs	r0, r4
 8006b26:	f00c fc87 	bl	8013438 <strncmp>
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d000      	beq.n	8006b32 <setCommand+0x7d2>
 8006b30:	e699      	b.n	8006866 <setCommand+0x506>
			temp82 =JANUARY;
 8006b32:	2401      	movs	r4, #1
 8006b34:	e7a8      	b.n	8006a88 <setCommand+0x728>
			temp81 =TUESDAY;
 8006b36:	2702      	movs	r7, #2
 8006b38:	e7f0      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =WEDNESDAY;
 8006b3a:	2703      	movs	r7, #3
 8006b3c:	e7ee      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =THURSDAY;
 8006b3e:	2704      	movs	r7, #4
 8006b40:	e7ec      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =FRIDAY;
 8006b42:	2705      	movs	r7, #5
 8006b44:	e7ea      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =SATURDAY;
 8006b46:	2706      	movs	r7, #6
 8006b48:	e7e8      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =SUNDAY;
 8006b4a:	2707      	movs	r7, #7
 8006b4c:	e7e6      	b.n	8006b1c <setCommand+0x7bc>
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	fffff830 	.word	0xfffff830
 8006b54:	200069c4 	.word	0x200069c4
 8006b58:	200012a4 	.word	0x200012a4
 8006b5c:	08018f20 	.word	0x08018f20

08006b60 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b60:	b530      	push	{r4, r5, lr}
 8006b62:	b083      	sub	sp, #12
 8006b64:	0005      	movs	r5, r0
 8006b66:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	d101      	bne.n	8006b74 <removebuttonCommand+0x14>
 8006b70:	b672      	cpsid	i
 8006b72:	e7fe      	b.n	8006b72 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b74:	aa01      	add	r2, sp, #4
 8006b76:	2101      	movs	r1, #1
 8006b78:	f006 fe76 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006b80:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006b82:	2b70      	cmp	r3, #112	; 0x70
 8006b84:	d007      	beq.n	8006b96 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006b86:	0020      	movs	r0, r4
 8006b88:	f001 fba2 	bl	80082d0 <RemovePortButton>
	if(result == BOS_OK){
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d007      	beq.n	8006ba0 <removebuttonCommand+0x40>
}
 8006b90:	2000      	movs	r0, #0
 8006b92:	b003      	add	sp, #12
 8006b94:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b96:	3001      	adds	r0, #1
 8006b98:	f00b ff7d 	bl	8012a96 <atol>
 8006b9c:	b2c4      	uxtb	r4, r0
 8006b9e:	e7f2      	b.n	8006b86 <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006ba0:	0023      	movs	r3, r4
 8006ba2:	0022      	movs	r2, r4
 8006ba4:	4902      	ldr	r1, [pc, #8]	; (8006bb0 <removebuttonCommand+0x50>)
 8006ba6:	0028      	movs	r0, r5
 8006ba8:	f00c fc02 	bl	80133b0 <sprintf>
 8006bac:	e7f0      	b.n	8006b90 <removebuttonCommand+0x30>
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	08018bdc 	.word	0x08018bdc

08006bb4 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	0006      	movs	r6, r0
 8006bba:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d101      	bne.n	8006bca <addbuttonCommand+0x16>
 8006bc6:	b672      	cpsid	i
 8006bc8:	e7fe      	b.n	8006bc8 <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bca:	aa05      	add	r2, sp, #20
 8006bcc:	2101      	movs	r1, #1
 8006bce:	9803      	ldr	r0, [sp, #12]
 8006bd0:	f006 fe4a 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8006bd4:	0004      	movs	r4, r0
 8006bd6:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <addbuttonCommand+0xb0>)
 8006bd8:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006bda:	9d05      	ldr	r5, [sp, #20]
 8006bdc:	002a      	movs	r2, r5
 8006bde:	4922      	ldr	r1, [pc, #136]	; (8006c68 <addbuttonCommand+0xb4>)
 8006be0:	f00c fc2a 	bl	8013438 <strncmp>
		type =MOMENTARY_NO;
 8006be4:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d017      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006bea:	002a      	movs	r2, r5
 8006bec:	491f      	ldr	r1, [pc, #124]	; (8006c6c <addbuttonCommand+0xb8>)
 8006bee:	0020      	movs	r0, r4
 8006bf0:	f00c fc22 	bl	8013438 <strncmp>
		type =MOMENTARY_NC;
 8006bf4:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d00f      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006bfa:	002a      	movs	r2, r5
 8006bfc:	491c      	ldr	r1, [pc, #112]	; (8006c70 <addbuttonCommand+0xbc>)
 8006bfe:	0020      	movs	r0, r4
 8006c00:	f00c fc1a 	bl	8013438 <strncmp>
		type =ONOFF_NO;
 8006c04:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d007      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c0a:	002a      	movs	r2, r5
 8006c0c:	4919      	ldr	r1, [pc, #100]	; (8006c74 <addbuttonCommand+0xc0>)
 8006c0e:	0020      	movs	r0, r4
 8006c10:	f00c fc12 	bl	8013438 <strncmp>
		type =ONOFF_NC;
 8006c14:	4243      	negs	r3, r0
 8006c16:	4158      	adcs	r0, r3
 8006c18:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c1a:	aa04      	add	r2, sp, #16
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	9803      	ldr	r0, [sp, #12]
 8006c20:	f006 fe22 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c24:	2300      	movs	r3, #0
 8006c26:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c28:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006c2a:	2b70      	cmp	r3, #112	; 0x70
 8006c2c:	d008      	beq.n	8006c40 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 8006c2e:	0021      	movs	r1, r4
 8006c30:	0038      	movs	r0, r7
 8006c32:	f001 fabb 	bl	80081ac <AddPortButton>
	if(result == BOS_OK){
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d007      	beq.n	8006c4a <addbuttonCommand+0x96>
}
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	b007      	add	sp, #28
 8006c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c40:	3001      	adds	r0, #1
 8006c42:	f00b ff28 	bl	8012a96 <atol>
 8006c46:	b2c4      	uxtb	r4, r0
 8006c48:	e7f1      	b.n	8006c2e <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <addbuttonCommand+0xb0>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9905      	ldr	r1, [sp, #20]
 8006c52:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c54:	9400      	str	r4, [sp, #0]
 8006c56:	0023      	movs	r3, r4
 8006c58:	4907      	ldr	r1, [pc, #28]	; (8006c78 <addbuttonCommand+0xc4>)
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	f00c fba8 	bl	80133b0 <sprintf>
 8006c60:	e7eb      	b.n	8006c3a <addbuttonCommand+0x86>
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	2000128c 	.word	0x2000128c
 8006c68:	0801849c 	.word	0x0801849c
 8006c6c:	080184ac 	.word	0x080184ac
 8006c70:	080184bc 	.word	0x080184bc
 8006c74:	080184c8 	.word	0x080184c8
 8006c78:	080184d4 	.word	0x080184d4

08006c7c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	46de      	mov	lr, fp
 8006c80:	4657      	mov	r7, sl
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b09b      	sub	sp, #108	; 0x6c
 8006c86:	0005      	movs	r5, r0
 8006c88:	9009      	str	r0, [sp, #36]	; 0x24
 8006c8a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9319      	str	r3, [sp, #100]	; 0x64
 8006c90:	9318      	str	r3, [sp, #96]	; 0x60
 8006c92:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006c94:	9316      	str	r3, [sp, #88]	; 0x58
 8006c96:	9315      	str	r3, [sp, #84]	; 0x54
 8006c98:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 8006c9a:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	a810      	add	r0, sp, #64	; 0x40
 8006ca2:	f00c f98b 	bl	8012fbc <memset>
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	2100      	movs	r1, #0
 8006caa:	a80d      	add	r0, sp, #52	; 0x34
 8006cac:	f00c f986 	bl	8012fbc <memset>
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	a80a      	add	r0, sp, #40	; 0x28
 8006cb6:	f00c f981 	bl	8012fbc <memset>
	configASSERT(pcWriteBuffer);
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	d101      	bne.n	8006cc2 <scastCommand+0x46>
 8006cbe:	b672      	cpsid	i
 8006cc0:	e7fe      	b.n	8006cc0 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cc2:	aa19      	add	r2, sp, #100	; 0x64
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	0020      	movs	r0, r4
 8006cc8:	f006 fdce 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006ccc:	2300      	movs	r3, #0
 8006cce:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P'){
 8006cd4:	2b50      	cmp	r3, #80	; 0x50
 8006cd6:	d100      	bne.n	8006cda <scastCommand+0x5e>
 8006cd8:	e06d      	b.n	8006db6 <scastCommand+0x13a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006cda:	aa18      	add	r2, sp, #96	; 0x60
 8006cdc:	2102      	movs	r1, #2
 8006cde:	0020      	movs	r0, r4
 8006ce0:	f006 fdc2 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8006ce4:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006ce6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ce8:	a810      	add	r0, sp, #64	; 0x40
 8006cea:	f00c fbb6 	bl	801345a <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006cee:	a810      	add	r0, sp, #64	; 0x40
 8006cf0:	f7fd fa52 	bl	8004198 <GetID>
 8006cf4:	b2c3      	uxtb	r3, r0
 8006cf6:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006cf8:	aa17      	add	r2, sp, #92	; 0x5c
 8006cfa:	2103      	movs	r1, #3
 8006cfc:	0020      	movs	r0, r4
 8006cfe:	f006 fdb3 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d02:	2300      	movs	r3, #0
 8006d04:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d06:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p'){
 8006d08:	2b70      	cmp	r3, #112	; 0x70
 8006d0a:	d05a      	beq.n	8006dc2 <scastCommand+0x146>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d0c:	aa16      	add	r2, sp, #88	; 0x58
 8006d0e:	2104      	movs	r1, #4
 8006d10:	0020      	movs	r0, r4
 8006d12:	f006 fda9 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8006d16:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d1a:	a80d      	add	r0, sp, #52	; 0x34
 8006d1c:	f00c fb9d 	bl	801345a <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d20:	a80d      	add	r0, sp, #52	; 0x34
 8006d22:	f7fd fa39 	bl	8004198 <GetID>
 8006d26:	b2c3      	uxtb	r3, r0
 8006d28:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d2a:	aa15      	add	r2, sp, #84	; 0x54
 8006d2c:	2105      	movs	r1, #5
 8006d2e:	0020      	movs	r0, r4
 8006d30:	f006 fd9a 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d34:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006d36:	0032      	movs	r2, r6
 8006d38:	492b      	ldr	r1, [pc, #172]	; (8006de8 <scastCommand+0x16c>)
 8006d3a:	9007      	str	r0, [sp, #28]
 8006d3c:	f00c fb7c 	bl	8013438 <strncmp>
		direction =FORWARD;
 8006d40:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d00f      	beq.n	8006d66 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d46:	0032      	movs	r2, r6
 8006d48:	4928      	ldr	r1, [pc, #160]	; (8006dec <scastCommand+0x170>)
 8006d4a:	9807      	ldr	r0, [sp, #28]
 8006d4c:	f00c fb74 	bl	8013438 <strncmp>
		direction =BACKWARD;
 8006d50:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d007      	beq.n	8006d66 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d56:	0032      	movs	r2, r6
 8006d58:	4925      	ldr	r1, [pc, #148]	; (8006df0 <scastCommand+0x174>)
 8006d5a:	9807      	ldr	r0, [sp, #28]
 8006d5c:	f00c fb6c 	bl	8013438 <strncmp>
		direction =BIDIRECTIONAL;
 8006d60:	4243      	negs	r3, r0
 8006d62:	4158      	adcs	r0, r3
 8006d64:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006d66:	0032      	movs	r2, r6
 8006d68:	9907      	ldr	r1, [sp, #28]
 8006d6a:	a80a      	add	r0, sp, #40	; 0x28
 8006d6c:	f00c fb75 	bl	801345a <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006d70:	aa14      	add	r2, sp, #80	; 0x50
 8006d72:	2106      	movs	r1, #6
 8006d74:	0020      	movs	r0, r4
 8006d76:	f006 fd77 	bl	800d868 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006d7a:	f00b fe8c 	bl	8012a96 <atol>
 8006d7e:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006d80:	aa13      	add	r2, sp, #76	; 0x4c
 8006d82:	2107      	movs	r1, #7
 8006d84:	0020      	movs	r0, r4
 8006d86:	f006 fd6f 	bl	800d868 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d8a:	f00b fe84 	bl	8012a96 <atol>
 8006d8e:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d90:	2300      	movs	r3, #0
 8006d92:	9303      	str	r3, [sp, #12]
 8006d94:	9002      	str	r0, [sp, #8]
 8006d96:	9601      	str	r6, [sp, #4]
 8006d98:	9500      	str	r5, [sp, #0]
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	003a      	movs	r2, r7
 8006d9e:	4651      	mov	r1, sl
 8006da0:	9808      	ldr	r0, [sp, #32]
 8006da2:	f002 fcb5 	bl	8009710 <StartScastDMAStream>
	if(result == BOS_OK){
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d010      	beq.n	8006dcc <scastCommand+0x150>
}
 8006daa:	2000      	movs	r0, #0
 8006dac:	b01b      	add	sp, #108	; 0x6c
 8006dae:	bc0c      	pop	{r2, r3}
 8006db0:	4692      	mov	sl, r2
 8006db2:	469b      	mov	fp, r3
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006db6:	3001      	adds	r0, #1
 8006db8:	f00b fe6d 	bl	8012a96 <atol>
 8006dbc:	b2c3      	uxtb	r3, r0
 8006dbe:	9308      	str	r3, [sp, #32]
 8006dc0:	e78b      	b.n	8006cda <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f00b fe67 	bl	8012a96 <atol>
 8006dc8:	b2c7      	uxtb	r7, r0
 8006dca:	e79f      	b.n	8006d0c <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006dcc:	9404      	str	r4, [sp, #16]
 8006dce:	9603      	str	r6, [sp, #12]
 8006dd0:	ab0d      	add	r3, sp, #52	; 0x34
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	9701      	str	r7, [sp, #4]
 8006dd6:	ab10      	add	r3, sp, #64	; 0x40
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	aa0a      	add	r2, sp, #40	; 0x28
 8006dde:	4905      	ldr	r1, [pc, #20]	; (8006df4 <scastCommand+0x178>)
 8006de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de2:	f00c fae5 	bl	80133b0 <sprintf>
 8006de6:	e7e0      	b.n	8006daa <scastCommand+0x12e>
 8006de8:	08018c24 	.word	0x08018c24
 8006dec:	08018c2c 	.word	0x08018c2c
 8006df0:	08018c38 	.word	0x08018c38
 8006df4:	08018c48 	.word	0x08018c48

08006df8 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006dfe:	d039      	beq.n	8006e74 <infoCommand+0x7c>
	if(N > 1)
 8006e00:	4b26      	ldr	r3, [pc, #152]	; (8006e9c <infoCommand+0xa4>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006e04:	2500      	movs	r5, #0
	if(N > 1)
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d902      	bls.n	8006e10 <infoCommand+0x18>
		result =ReadPortsDir();
 8006e0a:	f7fd fb19 	bl	8004440 <ReadPortsDir>
 8006e0e:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e10:	4b22      	ldr	r3, [pc, #136]	; (8006e9c <infoCommand+0xa4>)
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	4922      	ldr	r1, [pc, #136]	; (8006ea0 <infoCommand+0xa8>)
 8006e16:	0020      	movs	r0, r4
 8006e18:	f00c faca 	bl	80133b0 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	f7f9 f97b 	bl	8000118 <strlen>
 8006e22:	b282      	uxth	r2, r0
 8006e24:	4e1f      	ldr	r6, [pc, #124]	; (8006ea4 <infoCommand+0xac>)
 8006e26:	7830      	ldrb	r0, [r6, #0]
 8006e28:	2701      	movs	r7, #1
 8006e2a:	427f      	negs	r7, r7
 8006e2c:	9700      	str	r7, [sp, #0]
 8006e2e:	2332      	movs	r3, #50	; 0x32
 8006e30:	0021      	movs	r1, r4
 8006e32:	f006 fad3 	bl	800d3dc <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e36:	2213      	movs	r2, #19
 8006e38:	491b      	ldr	r1, [pc, #108]	; (8006ea8 <infoCommand+0xb0>)
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	f00c f8b5 	bl	8012faa <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e40:	0020      	movs	r0, r4
 8006e42:	f7f9 f969 	bl	8000118 <strlen>
 8006e46:	b282      	uxth	r2, r0
 8006e48:	7830      	ldrb	r0, [r6, #0]
 8006e4a:	9700      	str	r7, [sp, #0]
 8006e4c:	2332      	movs	r3, #50	; 0x32
 8006e4e:	0021      	movs	r1, r4
 8006e50:	f006 fac4 	bl	800d3dc <writePxMutex>
	DisplayTopology(PcPort);
 8006e54:	7830      	ldrb	r0, [r6, #0]
 8006e56:	f7fc fefb 	bl	8003c50 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006e5a:	7830      	ldrb	r0, [r6, #0]
 8006e5c:	f7fc ffc8 	bl	8003df0 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006e60:	2d02      	cmp	r5, #2
 8006e62:	d009      	beq.n	8006e78 <infoCommand+0x80>
	sprintf((char* )pcWriteBuffer," ");
 8006e64:	2202      	movs	r2, #2
 8006e66:	4911      	ldr	r1, [pc, #68]	; (8006eac <infoCommand+0xb4>)
 8006e68:	0020      	movs	r0, r4
 8006e6a:	f00c f89e 	bl	8012faa <memcpy>
}
 8006e6e:	2000      	movs	r0, #0
 8006e70:	b003      	add	sp, #12
 8006e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006e74:	b672      	cpsid	i
 8006e76:	e7fe      	b.n	8006e76 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006e78:	2244      	movs	r2, #68	; 0x44
 8006e7a:	490d      	ldr	r1, [pc, #52]	; (8006eb0 <infoCommand+0xb8>)
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	f00c f894 	bl	8012faa <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006e82:	0020      	movs	r0, r4
 8006e84:	f7f9 f948 	bl	8000118 <strlen>
 8006e88:	b282      	uxth	r2, r0
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <infoCommand+0xac>)
 8006e8c:	7818      	ldrb	r0, [r3, #0]
 8006e8e:	003b      	movs	r3, r7
 8006e90:	9700      	str	r7, [sp, #0]
 8006e92:	3333      	adds	r3, #51	; 0x33
 8006e94:	0021      	movs	r1, r4
 8006e96:	f006 faa1 	bl	800d3dc <writePxMutex>
 8006e9a:	e7e3      	b.n	8006e64 <infoCommand+0x6c>
 8006e9c:	2000001c 	.word	0x2000001c
 8006ea0:	080189e0 	.word	0x080189e0
 8006ea4:	20000a77 	.word	0x20000a77
 8006ea8:	080189fc 	.word	0x080189fc
 8006eac:	08017984 	.word	0x08017984
 8006eb0:	08018a10 	.word	0x08018a10

08006eb4 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006eb4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d101      	bne.n	8006ebe <statusCommand+0xa>
 8006eba:	b672      	cpsid	i
 8006ebc:	e7fe      	b.n	8006ebc <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	f7fd f80a 	bl	8003ed8 <DisplayModuleStatus>
}
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	bd10      	pop	{r4, pc}

08006ec8 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eca:	46ce      	mov	lr, r9
 8006ecc:	b500      	push	{lr}
 8006ece:	b090      	sub	sp, #64	; 0x40
 8006ed0:	0004      	movs	r4, r0
 8006ed2:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006ed4:	2227      	movs	r2, #39	; 0x27
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	a806      	add	r0, sp, #24
 8006eda:	f00c f86f 	bl	8012fbc <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006ede:	220a      	movs	r2, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	a803      	add	r0, sp, #12
 8006ee4:	f00c f86a 	bl	8012fbc <memset>
	configASSERT(pcWriteBuffer);
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	d101      	bne.n	8006ef0 <groupCommand+0x28>
 8006eec:	b672      	cpsid	i
 8006eee:	e7fe      	b.n	8006eee <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ef0:	4d54      	ldr	r5, [pc, #336]	; (8007044 <groupCommand+0x17c>)
 8006ef2:	002a      	movs	r2, r5
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	9801      	ldr	r0, [sp, #4]
 8006ef8:	f006 fcb6 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8006efc:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006efe:	682a      	ldr	r2, [r5, #0]
 8006f00:	a803      	add	r0, sp, #12
 8006f02:	f00c faaa 	bl	801345a <strncpy>
 8006f06:	4d50      	ldr	r5, [pc, #320]	; (8007048 <groupCommand+0x180>)
 8006f08:	002f      	movs	r7, r5
 8006f0a:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006f0c:	0029      	movs	r1, r5
 8006f0e:	a803      	add	r0, sp, #12
 8006f10:	f7f9 f8f8 	bl	8000104 <strcmp>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d016      	beq.n	8006f46 <groupCommand+0x7e>
 8006f18:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f1a:	42bd      	cmp	r5, r7
 8006f1c:	d1f6      	bne.n	8006f0c <groupCommand+0x44>
	type =1;
 8006f1e:	2701      	movs	r7, #1
	count =2;
 8006f20:	4b4a      	ldr	r3, [pc, #296]	; (800704c <groupCommand+0x184>)
 8006f22:	2202      	movs	r2, #2
 8006f24:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f26:	3208      	adds	r2, #8
 8006f28:	4949      	ldr	r1, [pc, #292]	; (8007050 <groupCommand+0x188>)
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	f00c f83d 	bl	8012faa <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f30:	4a48      	ldr	r2, [pc, #288]	; (8007054 <groupCommand+0x18c>)
 8006f32:	2102      	movs	r1, #2
 8006f34:	9801      	ldr	r0, [sp, #4]
 8006f36:	f006 fc97 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <groupCommand+0x190>)
 8006f3c:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d061      	beq.n	8007006 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f42:	4e44      	ldr	r6, [pc, #272]	; (8007054 <groupCommand+0x18c>)
 8006f44:	e011      	b.n	8006f6a <groupCommand+0xa2>
			type =0;
 8006f46:	2700      	movs	r7, #0
 8006f48:	e7ea      	b.n	8006f20 <groupCommand+0x58>
		strcat((char* )pcWriteBuffer,module);
 8006f4a:	a906      	add	r1, sp, #24
 8006f4c:	0020      	movs	r0, r4
 8006f4e:	f00c fa4f 	bl	80133f0 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006f52:	1c69      	adds	r1, r5, #1
 8006f54:	b249      	sxtb	r1, r1
 8006f56:	4b3d      	ldr	r3, [pc, #244]	; (800704c <groupCommand+0x184>)
 8006f58:	7019      	strb	r1, [r3, #0]
 8006f5a:	4a3e      	ldr	r2, [pc, #248]	; (8007054 <groupCommand+0x18c>)
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	f006 fc83 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8006f62:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <groupCommand+0x190>)
 8006f64:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d04d      	beq.n	8007006 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f6a:	6833      	ldr	r3, [r6, #0]
 8006f6c:	4699      	mov	r9, r3
 8006f6e:	ad06      	add	r5, sp, #24
 8006f70:	001a      	movs	r2, r3
 8006f72:	0001      	movs	r1, r0
 8006f74:	0028      	movs	r0, r5
 8006f76:	f00c fa70 	bl	801345a <strncpy>
		module[xParameterStringLength] ='\0';
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	464a      	mov	r2, r9
 8006f7e:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8006f80:	0028      	movs	r0, r5
 8006f82:	f7fd f909 	bl	8004198 <GetID>
		if(modID < 0)
 8006f86:	2800      	cmp	r0, #0
 8006f88:	db37      	blt.n	8006ffa <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 8006f8a:	b2c0      	uxtb	r0, r0
 8006f8c:	a903      	add	r1, sp, #12
 8006f8e:	f7fd f9cf 	bl	8004330 <AddModuleToGroup>
		if(result != BOS_OK)
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d146      	bne.n	8007024 <groupCommand+0x15c>
		if(count > 2)
 8006f96:	4b2d      	ldr	r3, [pc, #180]	; (800704c <groupCommand+0x184>)
 8006f98:	2500      	movs	r5, #0
 8006f9a:	575d      	ldrsb	r5, [r3, r5]
 8006f9c:	2d02      	cmp	r5, #2
 8006f9e:	ddd4      	ble.n	8006f4a <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006fa0:	0020      	movs	r0, r4
 8006fa2:	f7f9 f8b9 	bl	8000118 <strlen>
 8006fa6:	1820      	adds	r0, r4, r0
 8006fa8:	2203      	movs	r2, #3
 8006faa:	492c      	ldr	r1, [pc, #176]	; (800705c <groupCommand+0x194>)
 8006fac:	f00b fffd 	bl	8012faa <memcpy>
 8006fb0:	e7cb      	b.n	8006f4a <groupCommand+0x82>
	else if(result == BOS_OK && type){
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	d009      	beq.n	8006fca <groupCommand+0x102>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006fb6:	aa03      	add	r2, sp, #12
 8006fb8:	4929      	ldr	r1, [pc, #164]	; (8007060 <groupCommand+0x198>)
 8006fba:	a806      	add	r0, sp, #24
 8006fbc:	f00c f9f8 	bl	80133b0 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fc0:	a906      	add	r1, sp, #24
 8006fc2:	0020      	movs	r0, r4
 8006fc4:	f00c fa14 	bl	80133f0 <strcat>
 8006fc8:	e027      	b.n	800701a <groupCommand+0x152>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006fca:	aa03      	add	r2, sp, #12
 8006fcc:	4925      	ldr	r1, [pc, #148]	; (8007064 <groupCommand+0x19c>)
 8006fce:	a806      	add	r0, sp, #24
 8006fd0:	f00c f9ee 	bl	80133b0 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fd4:	a906      	add	r1, sp, #24
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f00c fa0a 	bl	80133f0 <strcat>
 8006fdc:	e01d      	b.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006fde:	aa03      	add	r2, sp, #12
 8006fe0:	4921      	ldr	r1, [pc, #132]	; (8007068 <groupCommand+0x1a0>)
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	f00c f9e4 	bl	80133b0 <sprintf>
 8006fe8:	e017      	b.n	800701a <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 8006fea:	2808      	cmp	r0, #8
 8006fec:	d115      	bne.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006fee:	aa03      	add	r2, sp, #12
 8006ff0:	491e      	ldr	r1, [pc, #120]	; (800706c <groupCommand+0x1a4>)
 8006ff2:	0020      	movs	r0, r4
 8006ff4:	f00c f9dc 	bl	80133b0 <sprintf>
 8006ff8:	e00f      	b.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006ffa:	aa06      	add	r2, sp, #24
 8006ffc:	491c      	ldr	r1, [pc, #112]	; (8007070 <groupCommand+0x1a8>)
 8006ffe:	0020      	movs	r0, r4
 8007000:	f00c f9d6 	bl	80133b0 <sprintf>
	return pdFALSE;
 8007004:	e009      	b.n	800701a <groupCommand+0x152>
	else if(count == 2)
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <groupCommand+0x184>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b25b      	sxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d1d0      	bne.n	8006fb2 <groupCommand+0xea>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007010:	aa03      	add	r2, sp, #12
 8007012:	4918      	ldr	r1, [pc, #96]	; (8007074 <groupCommand+0x1ac>)
 8007014:	0020      	movs	r0, r4
 8007016:	f00c f9cb 	bl	80133b0 <sprintf>
}
 800701a:	2000      	movs	r0, #0
 800701c:	b010      	add	sp, #64	; 0x40
 800701e:	bc04      	pop	{r2}
 8007020:	4691      	mov	r9, r2
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <groupCommand+0x184>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	b25b      	sxtb	r3, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d0f0      	beq.n	8007010 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 800702e:	2806      	cmp	r0, #6
 8007030:	d0d5      	beq.n	8006fde <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 8007032:	2807      	cmp	r0, #7
 8007034:	d1d9      	bne.n	8006fea <groupCommand+0x122>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8007036:	aa03      	add	r2, sp, #12
 8007038:	490f      	ldr	r1, [pc, #60]	; (8007078 <groupCommand+0x1b0>)
 800703a:	0020      	movs	r0, r4
 800703c:	f00c f9b8 	bl	80133b0 <sprintf>
 8007040:	e7eb      	b.n	800701a <groupCommand+0x152>
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	200012bc 	.word	0x200012bc
 8007048:	20000e5c 	.word	0x20000e5c
 800704c:	20001282 	.word	0x20001282
 8007050:	08018800 	.word	0x08018800
 8007054:	200012b0 	.word	0x200012b0
 8007058:	20001284 	.word	0x20001284
 800705c:	0801880c 	.word	0x0801880c
 8007060:	0801883c 	.word	0x0801883c
 8007064:	08018858 	.word	0x08018858
 8007068:	08018878 	.word	0x08018878
 800706c:	080188ec 	.word	0x080188ec
 8007070:	0801892c 	.word	0x0801892c
 8007074:	08018810 	.word	0x08018810
 8007078:	080188b8 	.word	0x080188b8

0800707c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	0004      	movs	r4, r0
 8007080:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007082:	2c00      	cmp	r4, #0
 8007084:	d101      	bne.n	800708a <nameCommand+0xe>
 8007086:	b672      	cpsid	i
 8007088:	e7fe      	b.n	8007088 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800708a:	4d1c      	ldr	r5, [pc, #112]	; (80070fc <nameCommand+0x80>)
 800708c:	002a      	movs	r2, r5
 800708e:	2101      	movs	r1, #1
 8007090:	f006 fbea 	bl	800d868 <FreeRTOS_CLIGetParameter>
 8007094:	0001      	movs	r1, r0
 8007096:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <nameCommand+0x84>)
 8007098:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	2b09      	cmp	r3, #9
 800709e:	dd01      	ble.n	80070a4 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070a0:	2300      	movs	r3, #0
 80070a2:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <nameCommand+0x88>)
 80070a6:	7818      	ldrb	r0, [r3, #0]
 80070a8:	f7fd f8da 	bl	8004260 <NameModule>
	if(result == BOS_OK)
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d007      	beq.n	80070c0 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 80070b0:	2806      	cmp	r0, #6
 80070b2:	d00e      	beq.n	80070d2 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 80070b4:	2807      	cmp	r0, #7
 80070b6:	d013      	beq.n	80070e0 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 80070b8:	2808      	cmp	r0, #8
 80070ba:	d018      	beq.n	80070ee <nameCommand+0x72>
}
 80070bc:	2000      	movs	r0, #0
 80070be:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <nameCommand+0x88>)
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <nameCommand+0x84>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	490f      	ldr	r1, [pc, #60]	; (8007108 <nameCommand+0x8c>)
 80070ca:	0020      	movs	r0, r4
 80070cc:	f00c f970 	bl	80133b0 <sprintf>
 80070d0:	e7f4      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <nameCommand+0x84>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	490d      	ldr	r1, [pc, #52]	; (800710c <nameCommand+0x90>)
 80070d8:	0020      	movs	r0, r4
 80070da:	f00c f969 	bl	80133b0 <sprintf>
 80070de:	e7ed      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <nameCommand+0x84>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	490a      	ldr	r1, [pc, #40]	; (8007110 <nameCommand+0x94>)
 80070e6:	0020      	movs	r0, r4
 80070e8:	f00c f962 	bl	80133b0 <sprintf>
 80070ec:	e7e6      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <nameCommand+0x84>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4908      	ldr	r1, [pc, #32]	; (8007114 <nameCommand+0x98>)
 80070f4:	0020      	movs	r0, r4
 80070f6:	f00c f95b 	bl	80133b0 <sprintf>
 80070fa:	e7df      	b.n	80070bc <nameCommand+0x40>
 80070fc:	200012b8 	.word	0x200012b8
 8007100:	20001288 	.word	0x20001288
 8007104:	20001076 	.word	0x20001076
 8007108:	08018a78 	.word	0x08018a78
 800710c:	08018878 	.word	0x08018878
 8007110:	080188b8 	.word	0x080188b8
 8007114:	080188ec 	.word	0x080188ec

08007118 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	b085      	sub	sp, #20
 800711c:	1e04      	subs	r4, r0, #0
 800711e:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007120:	d101      	bne.n	8007126 <bootloaderUpdateCommand+0xe>
 8007122:	b672      	cpsid	i
 8007124:	e7fe      	b.n	8007124 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007126:	4a4b      	ldr	r2, [pc, #300]	; (8007254 <bootloaderUpdateCommand+0x13c>)
 8007128:	2101      	movs	r1, #1
 800712a:	9803      	ldr	r0, [sp, #12]
 800712c:	f006 fb9c 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007130:	2800      	cmp	r0, #0
 8007132:	d040      	beq.n	80071b6 <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007134:	4b47      	ldr	r3, [pc, #284]	; (8007254 <bootloaderUpdateCommand+0x13c>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	4947      	ldr	r1, [pc, #284]	; (8007258 <bootloaderUpdateCommand+0x140>)
 800713a:	f00c f97d 	bl	8013438 <strncmp>
 800713e:	2800      	cmp	r0, #0
 8007140:	d000      	beq.n	8007144 <bootloaderUpdateCommand+0x2c>
 8007142:	e080      	b.n	8007246 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007144:	4a45      	ldr	r2, [pc, #276]	; (800725c <bootloaderUpdateCommand+0x144>)
 8007146:	2102      	movs	r1, #2
 8007148:	9803      	ldr	r0, [sp, #12]
 800714a:	f006 fb8d 	bl	800d868 <FreeRTOS_CLIGetParameter>
 800714e:	4f44      	ldr	r7, [pc, #272]	; (8007260 <bootloaderUpdateCommand+0x148>)
 8007150:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007152:	4a44      	ldr	r2, [pc, #272]	; (8007264 <bootloaderUpdateCommand+0x14c>)
 8007154:	2103      	movs	r1, #3
 8007156:	9803      	ldr	r0, [sp, #12]
 8007158:	f006 fb86 	bl	800d868 <FreeRTOS_CLIGetParameter>
 800715c:	4b42      	ldr	r3, [pc, #264]	; (8007268 <bootloaderUpdateCommand+0x150>)
 800715e:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8007160:	6838      	ldr	r0, [r7, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8007166:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8007168:	2b23      	cmp	r3, #35	; 0x23
 800716a:	d04e      	beq.n	800720a <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p'){
 800716c:	4b3e      	ldr	r3, [pc, #248]	; (8007268 <bootloaderUpdateCommand+0x150>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	2300      	movs	r3, #0
 8007172:	56c3      	ldrsb	r3, [r0, r3]
 8007174:	2b70      	cmp	r3, #112	; 0x70
 8007176:	d04e      	beq.n	8007216 <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 8007178:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 800717a:	4b3c      	ldr	r3, [pc, #240]	; (800726c <bootloaderUpdateCommand+0x154>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	42b3      	cmp	r3, r6
 8007180:	d04e      	beq.n	8007220 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 8007182:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <bootloaderUpdateCommand+0x158>)
 8007184:	2200      	movs	r2, #0
 8007186:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 8007188:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <bootloaderUpdateCommand+0x15c>)
 800718a:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 800718c:	3201      	adds	r2, #1
 800718e:	211a      	movs	r1, #26
 8007190:	0030      	movs	r0, r6
 8007192:	f002 fa97 	bl	80096c4 <SendMessageToModule>
				osDelay(100);
 8007196:	2064      	movs	r0, #100	; 0x64
 8007198:	f006 fa4d 	bl	800d636 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <bootloaderUpdateCommand+0x160>)
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	4b32      	ldr	r3, [pc, #200]	; (800726c <bootloaderUpdateCommand+0x154>)
 80071a2:	7818      	ldrb	r0, [r3, #0]
 80071a4:	002b      	movs	r3, r5
 80071a6:	0031      	movs	r1, r6
 80071a8:	f7fc fcd0 	bl	8003b4c <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80071ac:	2f68      	cmp	r7, #104	; 0x68
 80071ae:	d04a      	beq.n	8007246 <bootloaderUpdateCommand+0x12e>
}
 80071b0:	2000      	movs	r0, #0
 80071b2:	b005      	add	sp, #20
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80071b6:	4b2d      	ldr	r3, [pc, #180]	; (800726c <bootloaderUpdateCommand+0x154>)
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	4930      	ldr	r1, [pc, #192]	; (800727c <bootloaderUpdateCommand+0x164>)
 80071bc:	0020      	movs	r0, r4
 80071be:	f00c f8f7 	bl	80133b0 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 80071c2:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <bootloaderUpdateCommand+0x168>)
 80071c4:	6819      	ldr	r1, [r3, #0]
 80071c6:	0020      	movs	r0, r4
 80071c8:	f00c f912 	bl	80133f0 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80071cc:	0020      	movs	r0, r4
 80071ce:	f7f8 ffa3 	bl	8000118 <strlen>
 80071d2:	b282      	uxth	r2, r0
 80071d4:	4b28      	ldr	r3, [pc, #160]	; (8007278 <bootloaderUpdateCommand+0x160>)
 80071d6:	7818      	ldrb	r0, [r3, #0]
 80071d8:	2301      	movs	r3, #1
 80071da:	425b      	negs	r3, r3
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	3333      	adds	r3, #51	; 0x33
 80071e0:	0021      	movs	r1, r4
 80071e2:	f006 f8fb 	bl	800d3dc <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80071e6:	4b27      	ldr	r3, [pc, #156]	; (8007284 <bootloaderUpdateCommand+0x16c>)
 80071e8:	4a27      	ldr	r2, [pc, #156]	; (8007288 <bootloaderUpdateCommand+0x170>)
 80071ea:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80071ec:	4b27      	ldr	r3, [pc, #156]	; (800728c <bootloaderUpdateCommand+0x174>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80071f2:	200a      	movs	r0, #10
 80071f4:	f006 fa1f 	bl	800d636 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	4b24      	ldr	r3, [pc, #144]	; (8007290 <bootloaderUpdateCommand+0x178>)
 80071fe:	4a25      	ldr	r2, [pc, #148]	; (8007294 <bootloaderUpdateCommand+0x17c>)
 8007200:	60da      	str	r2, [r3, #12]
 8007202:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	e7fd      	b.n	8007206 <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800720a:	3001      	adds	r0, #1
 800720c:	f00b fc43 	bl	8012a96 <atol>
 8007210:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007212:	2700      	movs	r7, #0
 8007214:	e7aa      	b.n	800716c <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007216:	3001      	adds	r0, #1
 8007218:	f00b fc3d 	bl	8012a96 <atol>
 800721c:	b2c5      	uxtb	r5, r0
 800721e:	e7ac      	b.n	800717a <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007220:	2100      	movs	r1, #0
 8007222:	9100      	str	r1, [sp, #0]
 8007224:	2319      	movs	r3, #25
 8007226:	000a      	movs	r2, r1
 8007228:	0028      	movs	r0, r5
 800722a:	f002 f823 	bl	8009274 <SendMessageFromPort>
				osDelay(100);
 800722e:	2064      	movs	r0, #100	; 0x64
 8007230:	f006 fa01 	bl	800d636 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <bootloaderUpdateCommand+0x154>)
 8007236:	7818      	ldrb	r0, [r3, #0]
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <bootloaderUpdateCommand+0x160>)
 800723a:	781a      	ldrb	r2, [r3, #0]
 800723c:	002b      	movs	r3, r5
 800723e:	0001      	movs	r1, r0
 8007240:	f7fc fc84 	bl	8003b4c <remoteBootloaderUpdate>
 8007244:	e7b2      	b.n	80071ac <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007246:	220f      	movs	r2, #15
 8007248:	4913      	ldr	r1, [pc, #76]	; (8007298 <bootloaderUpdateCommand+0x180>)
 800724a:	0020      	movs	r0, r4
 800724c:	f00b fead 	bl	8012faa <memcpy>
 8007250:	e7ae      	b.n	80071b0 <bootloaderUpdateCommand+0x98>
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	200012b4 	.word	0x200012b4
 8007258:	08018538 	.word	0x08018538
 800725c:	200012c0 	.word	0x200012c0
 8007260:	20001298 	.word	0x20001298
 8007264:	200012c4 	.word	0x200012c4
 8007268:	200012a0 	.word	0x200012a0
 800726c:	20001076 	.word	0x20001076
 8007270:	200069c4 	.word	0x200069c4
 8007274:	20000f38 	.word	0x20000f38
 8007278:	20000a77 	.word	0x20000a77
 800727c:	08018518 	.word	0x08018518
 8007280:	20000074 	.word	0x20000074
 8007284:	20007ff0 	.word	0x20007ff0
 8007288:	deadbeef 	.word	0xdeadbeef
 800728c:	20000ef4 	.word	0x20000ef4
 8007290:	e000ed00 	.word	0xe000ed00
 8007294:	05fa0004 	.word	0x05fa0004
 8007298:	080185f8 	.word	0x080185f8

0800729c <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800729c:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 800729e:	2800      	cmp	r0, #0
 80072a0:	d01e      	beq.n	80072e0 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <pingCommand+0x5c>)
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	0093      	lsls	r3, r2, #2
 80072a8:	189b      	adds	r3, r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4913      	ldr	r1, [pc, #76]	; (80072fc <pingCommand+0x60>)
 80072ae:	5c5b      	ldrb	r3, [r3, r1]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d117      	bne.n	80072e4 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 80072b4:	4912      	ldr	r1, [pc, #72]	; (8007300 <pingCommand+0x64>)
 80072b6:	f00c f87b 	bl	80133b0 <sprintf>
	RTOS_IND_blink(200);
 80072ba:	2580      	movs	r5, #128	; 0x80
 80072bc:	012d      	lsls	r5, r5, #4
 80072be:	2490      	movs	r4, #144	; 0x90
 80072c0:	05e4      	lsls	r4, r4, #23
 80072c2:	2201      	movs	r2, #1
 80072c4:	0029      	movs	r1, r5
 80072c6:	0020      	movs	r0, r4
 80072c8:	f009 fe4a 	bl	8010f60 <HAL_GPIO_WritePin>
 80072cc:	20c8      	movs	r0, #200	; 0xc8
 80072ce:	f006 f9b2 	bl	800d636 <osDelay>
 80072d2:	2200      	movs	r2, #0
 80072d4:	0029      	movs	r1, r5
 80072d6:	0020      	movs	r0, r4
 80072d8:	f009 fe42 	bl	8010f60 <HAL_GPIO_WritePin>
}
 80072dc:	2000      	movs	r0, #0
 80072de:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80072e0:	b672      	cpsid	i
 80072e2:	e7fe      	b.n	80072e2 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072e4:	0093      	lsls	r3, r2, #2
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4904      	ldr	r1, [pc, #16]	; (80072fc <pingCommand+0x60>)
 80072ec:	185b      	adds	r3, r3, r1
 80072ee:	4905      	ldr	r1, [pc, #20]	; (8007304 <pingCommand+0x68>)
 80072f0:	f00c f85e 	bl	80133b0 <sprintf>
 80072f4:	e7e1      	b.n	80072ba <pingCommand+0x1e>
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	20001076 	.word	0x20001076
 80072fc:	20000f68 	.word	0x20000f68
 8007300:	08018ae8 	.word	0x08018ae8
 8007304:	08018afc 	.word	0x08018afc

08007308 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007308:	b510      	push	{r4, lr}
 800730a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800730c:	d101      	bne.n	8007312 <prvRunTimeStatsCommand+0xa>
 800730e:	b672      	cpsid	i
 8007310:	e7fe      	b.n	8007310 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007312:	2241      	movs	r2, #65	; 0x41
 8007314:	4904      	ldr	r1, [pc, #16]	; (8007328 <prvRunTimeStatsCommand+0x20>)
 8007316:	f00b fe48 	bl	8012faa <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800731a:	0020      	movs	r0, r4
 800731c:	3040      	adds	r0, #64	; 0x40
 800731e:	f007 fcf7 	bl	800ed10 <vTaskGetRunTimeStats>
}
 8007322:	2000      	movs	r0, #0
 8007324:	bd10      	pop	{r4, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	08018b28 	.word	0x08018b28

0800732c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800732c:	b510      	push	{r4, lr}
 800732e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007330:	d101      	bne.n	8007336 <prvTaskStatsCommand+0xa>
 8007332:	b672      	cpsid	i
 8007334:	e7fe      	b.n	8007334 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007336:	2250      	movs	r2, #80	; 0x50
 8007338:	4904      	ldr	r1, [pc, #16]	; (800734c <prvTaskStatsCommand+0x20>)
 800733a:	f00b fe36 	bl	8012faa <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800733e:	0020      	movs	r0, r4
 8007340:	304f      	adds	r0, #79	; 0x4f
 8007342:	f007 fc85 	bl	800ec50 <vTaskList>
}
 8007346:	2000      	movs	r0, #0
 8007348:	bd10      	pop	{r4, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	08018b7c 	.word	0x08018b7c

08007350 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007350:	2800      	cmp	r0, #0
 8007352:	d101      	bne.n	8007358 <resetCommand+0x8>
 8007354:	b672      	cpsid	i
 8007356:	e7fe      	b.n	8007356 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	4b03      	ldr	r3, [pc, #12]	; (800736c <resetCommand+0x1c>)
 800735e:	4a04      	ldr	r2, [pc, #16]	; (8007370 <resetCommand+0x20>)
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	e7fd      	b.n	8007366 <resetCommand+0x16>
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	e000ed00 	.word	0xe000ed00
 8007370:	05fa0004 	.word	0x05fa0004

08007374 <RegisterUserCLICommands>:
}
 8007374:	4770      	bx	lr
	...

08007378 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007378:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800737a:	4835      	ldr	r0, [pc, #212]	; (8007450 <vRegisterCLICommands+0xd8>)
 800737c:	f006 f9d6 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007380:	4834      	ldr	r0, [pc, #208]	; (8007454 <vRegisterCLICommands+0xdc>)
 8007382:	f006 f9d3 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007386:	4834      	ldr	r0, [pc, #208]	; (8007458 <vRegisterCLICommands+0xe0>)
 8007388:	f006 f9d0 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800738c:	4833      	ldr	r0, [pc, #204]	; (800745c <vRegisterCLICommands+0xe4>)
 800738e:	f006 f9cd 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007392:	4833      	ldr	r0, [pc, #204]	; (8007460 <vRegisterCLICommands+0xe8>)
 8007394:	f006 f9ca 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007398:	4832      	ldr	r0, [pc, #200]	; (8007464 <vRegisterCLICommands+0xec>)
 800739a:	f006 f9c7 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800739e:	4832      	ldr	r0, [pc, #200]	; (8007468 <vRegisterCLICommands+0xf0>)
 80073a0:	f006 f9c4 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80073a4:	4831      	ldr	r0, [pc, #196]	; (800746c <vRegisterCLICommands+0xf4>)
 80073a6:	f006 f9c1 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80073aa:	4831      	ldr	r0, [pc, #196]	; (8007470 <vRegisterCLICommands+0xf8>)
 80073ac:	f006 f9be 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80073b0:	4830      	ldr	r0, [pc, #192]	; (8007474 <vRegisterCLICommands+0xfc>)
 80073b2:	f006 f9bb 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80073b6:	4830      	ldr	r0, [pc, #192]	; (8007478 <vRegisterCLICommands+0x100>)
 80073b8:	f006 f9b8 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80073bc:	482f      	ldr	r0, [pc, #188]	; (800747c <vRegisterCLICommands+0x104>)
 80073be:	f006 f9b5 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80073c2:	482f      	ldr	r0, [pc, #188]	; (8007480 <vRegisterCLICommands+0x108>)
 80073c4:	f006 f9b2 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80073c8:	482e      	ldr	r0, [pc, #184]	; (8007484 <vRegisterCLICommands+0x10c>)
 80073ca:	f006 f9af 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80073ce:	482e      	ldr	r0, [pc, #184]	; (8007488 <vRegisterCLICommands+0x110>)
 80073d0:	f006 f9ac 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80073d4:	482d      	ldr	r0, [pc, #180]	; (800748c <vRegisterCLICommands+0x114>)
 80073d6:	f006 f9a9 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80073da:	482d      	ldr	r0, [pc, #180]	; (8007490 <vRegisterCLICommands+0x118>)
 80073dc:	f006 f9a6 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80073e0:	482c      	ldr	r0, [pc, #176]	; (8007494 <vRegisterCLICommands+0x11c>)
 80073e2:	f006 f9a3 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80073e6:	482c      	ldr	r0, [pc, #176]	; (8007498 <vRegisterCLICommands+0x120>)
 80073e8:	f006 f9a0 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80073ec:	482b      	ldr	r0, [pc, #172]	; (800749c <vRegisterCLICommands+0x124>)
 80073ee:	f006 f99d 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80073f2:	482b      	ldr	r0, [pc, #172]	; (80074a0 <vRegisterCLICommands+0x128>)
 80073f4:	f006 f99a 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80073f8:	482a      	ldr	r0, [pc, #168]	; (80074a4 <vRegisterCLICommands+0x12c>)
 80073fa:	f006 f997 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80073fe:	482a      	ldr	r0, [pc, #168]	; (80074a8 <vRegisterCLICommands+0x130>)
 8007400:	f006 f994 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007404:	4829      	ldr	r0, [pc, #164]	; (80074ac <vRegisterCLICommands+0x134>)
 8007406:	f006 f991 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800740a:	4829      	ldr	r0, [pc, #164]	; (80074b0 <vRegisterCLICommands+0x138>)
 800740c:	f006 f98e 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007410:	4828      	ldr	r0, [pc, #160]	; (80074b4 <vRegisterCLICommands+0x13c>)
 8007412:	f006 f98b 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007416:	4828      	ldr	r0, [pc, #160]	; (80074b8 <vRegisterCLICommands+0x140>)
 8007418:	f006 f988 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800741c:	4827      	ldr	r0, [pc, #156]	; (80074bc <vRegisterCLICommands+0x144>)
 800741e:	f006 f985 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007422:	4827      	ldr	r0, [pc, #156]	; (80074c0 <vRegisterCLICommands+0x148>)
 8007424:	f006 f982 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007428:	4826      	ldr	r0, [pc, #152]	; (80074c4 <vRegisterCLICommands+0x14c>)
 800742a:	f006 f97f 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800742e:	4826      	ldr	r0, [pc, #152]	; (80074c8 <vRegisterCLICommands+0x150>)
 8007430:	f006 f97c 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007434:	4825      	ldr	r0, [pc, #148]	; (80074cc <vRegisterCLICommands+0x154>)
 8007436:	f006 f979 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800743a:	4825      	ldr	r0, [pc, #148]	; (80074d0 <vRegisterCLICommands+0x158>)
 800743c:	f006 f976 	bl	800d72c <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <vRegisterCLICommands+0x15c>)
 8007442:	2223      	movs	r2, #35	; 0x23
 8007444:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007446:	f004 f921 	bl	800b68c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800744a:	f7ff ff93 	bl	8007374 <RegisterUserCLICommands>
}
 800744e:	bd10      	pop	{r4, pc}
 8007450:	08018bcc 	.word	0x08018bcc
 8007454:	08018b6c 	.word	0x08018b6c
 8007458:	08018b18 	.word	0x08018b18
 800745c:	0801853c 	.word	0x0801853c
 8007460:	080186c4 	.word	0x080186c4
 8007464:	08018c14 	.word	0x08018c14
 8007468:	08018a90 	.word	0x08018a90
 800746c:	08018950 	.word	0x08018950
 8007470:	080190c8 	.word	0x080190c8
 8007474:	08018a54 	.word	0x08018a54
 8007478:	08018cd0 	.word	0x08018cd0
 800747c:	08018508 	.word	0x08018508
 8007480:	08018c04 	.word	0x08018c04
 8007484:	08018f28 	.word	0x08018f28
 8007488:	080187f0 	.word	0x080187f0
 800748c:	08018648 	.word	0x08018648
 8007490:	0801a0e8 	.word	0x0801a0e8
 8007494:	080185b0 	.word	0x080185b0
 8007498:	08018d1c 	.word	0x08018d1c
 800749c:	0801a15c 	.word	0x0801a15c
 80074a0:	080189d0 	.word	0x080189d0
 80074a4:	080186f4 	.word	0x080186f4
 80074a8:	080190b8 	.word	0x080190b8
 80074ac:	0801848c 	.word	0x0801848c
 80074b0:	08018ad8 	.word	0x08018ad8
 80074b4:	080186b4 	.word	0x080186b4
 80074b8:	08018588 	.word	0x08018588
 80074bc:	0801a134 	.word	0x0801a134
 80074c0:	0801a07c 	.word	0x0801a07c
 80074c4:	0801838c 	.word	0x0801838c
 80074c8:	0801840c 	.word	0x0801840c
 80074cc:	08018444 	.word	0x08018444
 80074d0:	0801839c 	.word	0x0801839c
 80074d4:	20006948 	.word	0x20006948

080074d8 <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 80074d8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 80074da:	1e45      	subs	r5, r0, #1
 80074dc:	00ec      	lsls	r4, r5, #3
 80074de:	1b60      	subs	r0, r4, r5
 80074e0:	00c0      	lsls	r0, r0, #3
 80074e2:	4e05      	ldr	r6, [pc, #20]	; (80074f8 <StopMsgDMA+0x20>)
 80074e4:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80074e6:	f008 fdfa 	bl	80100de <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	00e4      	lsls	r4, r4, #3
 80074ee:	59a3      	ldr	r3, [r4, r6]
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
}
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	2000179c 	.word	0x2000179c

080074fc <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80074fc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80074fe:	1e44      	subs	r4, r0, #1
 8007500:	00e5      	lsls	r5, r4, #3
 8007502:	1b28      	subs	r0, r5, r4
 8007504:	00c0      	lsls	r0, r0, #3
 8007506:	4e07      	ldr	r6, [pc, #28]	; (8007524 <StopStreamDMA+0x28>)
 8007508:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800750a:	f008 fde8 	bl	80100de <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800750e:	1b2d      	subs	r5, r5, r4
 8007510:	00ed      	lsls	r5, r5, #3
 8007512:	59aa      	ldr	r2, [r5, r6]
 8007514:	2300      	movs	r3, #0
 8007516:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007518:	00a4      	lsls	r4, r4, #2
 800751a:	4a03      	ldr	r2, [pc, #12]	; (8007528 <StopStreamDMA+0x2c>)
 800751c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 800751e:	4a03      	ldr	r2, [pc, #12]	; (800752c <StopStreamDMA+0x30>)
 8007520:	50a3      	str	r3, [r4, r2]
	
}
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	20001994 	.word	0x20001994
 8007528:	20001490 	.word	0x20001490
 800752c:	200014c0 	.word	0x200014c0

08007530 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007530:	b510      	push	{r4, lr}
 8007532:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007534:	f7ff ffd0 	bl	80074d8 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007538:	3c01      	subs	r4, #1
 800753a:	00e0      	lsls	r0, r4, #3
 800753c:	1b02      	subs	r2, r0, r4
 800753e:	00d2      	lsls	r2, r2, #3
 8007540:	4903      	ldr	r1, [pc, #12]	; (8007550 <SwitchMsgDMAToStream+0x20>)
 8007542:	5851      	ldr	r1, [r2, r1]
 8007544:	4b03      	ldr	r3, [pc, #12]	; (8007554 <SwitchMsgDMAToStream+0x24>)
 8007546:	18d0      	adds	r0, r2, r3
 8007548:	f004 f950 	bl	800b7ec <DMA_STREAM_CH_Init>
}
 800754c:	bd10      	pop	{r4, pc}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	2000179c 	.word	0x2000179c
 8007554:	20001994 	.word	0x20001994

08007558 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b083      	sub	sp, #12
 800755c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800755e:	f7ff ffcd 	bl	80074fc <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007562:	9401      	str	r4, [sp, #4]
 8007564:	3c01      	subs	r4, #1
 8007566:	00e7      	lsls	r7, r4, #3
 8007568:	1b3d      	subs	r5, r7, r4
 800756a:	00ed      	lsls	r5, r5, #3
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <SwitchStreamDMAToMsg+0x54>)
 800756e:	18ed      	adds	r5, r5, r3
 8007570:	4e0f      	ldr	r6, [pc, #60]	; (80075b0 <SwitchStreamDMAToMsg+0x58>)
 8007572:	1b3b      	subs	r3, r7, r4
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	5999      	ldr	r1, [r3, r6]
 8007578:	0028      	movs	r0, r5
 800757a:	f004 f8b9 	bl	800b6f0 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 800757e:	1b3b      	subs	r3, r7, r4
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	18f3      	adds	r3, r6, r3
 8007584:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007586:	f004 f883 	bl	800b690 <GetPort>
 800758a:	2300      	movs	r3, #0
 800758c:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <SwitchStreamDMAToMsg+0x5c>)
 800758e:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8007590:	1b3f      	subs	r7, r7, r4
 8007592:	00ff      	lsls	r7, r7, #3
 8007594:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 8007596:	00a4      	lsls	r4, r4, #2
 8007598:	4a07      	ldr	r2, [pc, #28]	; (80075b8 <SwitchStreamDMAToMsg+0x60>)
 800759a:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 800759c:	9801      	ldr	r0, [sp, #4]
 800759e:	f005 fefb 	bl	800d398 <GetUart>
 80075a2:	0029      	movs	r1, r5
 80075a4:	f004 fd16 	bl	800bfd4 <DMA_MSG_RX_Setup>
	
}
 80075a8:	b003      	add	sp, #12
 80075aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ac:	2000179c 	.word	0x2000179c
 80075b0:	20001994 	.word	0x20001994
 80075b4:	200010f8 	.word	0x200010f8
 80075b8:	200014a8 	.word	0x200014a8

080075bc <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	0005      	movs	r5, r0
 80075c0:	000e      	movs	r6, r1
 80075c2:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80075c4:	f004 f864 	bl	800b690 <GetPort>
 80075c8:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <StartDMAstream+0x44>)
 80075cc:	5c1b      	ldrb	r3, [r3, r0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d902      	bls.n	80075d8 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80075d2:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d112      	bne.n	80075fe <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80075d8:	0020      	movs	r0, r4
 80075da:	f7ff ffa9 	bl	8007530 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80075de:	1e63      	subs	r3, r4, #1
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a08      	ldr	r2, [pc, #32]	; (8007604 <StartDMAstream+0x48>)
 80075e4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80075e6:	4a06      	ldr	r2, [pc, #24]	; (8007600 <StartDMAstream+0x44>)
 80075e8:	2102      	movs	r1, #2
 80075ea:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80075ec:	4a06      	ldr	r2, [pc, #24]	; (8007608 <StartDMAstream+0x4c>)
 80075ee:	2100      	movs	r1, #0
 80075f0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80075f2:	003a      	movs	r2, r7
 80075f4:	0031      	movs	r1, r6
 80075f6:	0028      	movs	r0, r5
 80075f8:	f004 fd56 	bl	800c0a8 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80075fc:	2000      	movs	r0, #0
}
 80075fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007600:	200010f8 	.word	0x200010f8
 8007604:	200014a8 	.word	0x200014a8
 8007608:	20001490 	.word	0x20001490

0800760c <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <DMA_IRQHandler+0x50>)
 8007612:	5c1b      	ldrb	r3, [r3, r0]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d008      	beq.n	800762a <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007618:	3c01      	subs	r4, #1
 800761a:	00e0      	lsls	r0, r4, #3
 800761c:	1b00      	subs	r0, r0, r4
 800761e:	00c0      	lsls	r0, r0, #3
 8007620:	4c0f      	ldr	r4, [pc, #60]	; (8007660 <DMA_IRQHandler+0x54>)
 8007622:	1900      	adds	r0, r0, r4
 8007624:	f008 fd84 	bl	8010130 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007628:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800762a:	1e45      	subs	r5, r0, #1
 800762c:	00e8      	lsls	r0, r5, #3
 800762e:	1b40      	subs	r0, r0, r5
 8007630:	00c0      	lsls	r0, r0, #3
 8007632:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <DMA_IRQHandler+0x58>)
 8007634:	18c0      	adds	r0, r0, r3
 8007636:	f008 fd7b 	bl	8010130 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800763a:	00aa      	lsls	r2, r5, #2
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <DMA_IRQHandler+0x5c>)
 800763e:	58d2      	ldr	r2, [r2, r3]
 8007640:	2a00      	cmp	r2, #0
 8007642:	d006      	beq.n	8007652 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007644:	4909      	ldr	r1, [pc, #36]	; (800766c <DMA_IRQHandler+0x60>)
 8007646:	00ad      	lsls	r5, r5, #2
 8007648:	586b      	ldr	r3, [r5, r1]
 800764a:	3301      	adds	r3, #1
 800764c:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800764e:	429a      	cmp	r2, r3
 8007650:	d8ea      	bhi.n	8007628 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007652:	0020      	movs	r0, r4
 8007654:	f7ff ff52 	bl	80074fc <StopStreamDMA>
}
 8007658:	e7e6      	b.n	8007628 <DMA_IRQHandler+0x1c>
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	200010f8 	.word	0x200010f8
 8007660:	2000179c 	.word	0x2000179c
 8007664:	20001994 	.word	0x20001994
 8007668:	200014c0 	.word	0x200014c0
 800766c:	20001490 	.word	0x20001490

08007670 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007670:	4b08      	ldr	r3, [pc, #32]	; (8007694 <ResetUartORE+0x24>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	2308      	movs	r3, #8
 8007676:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007678:	4a07      	ldr	r2, [pc, #28]	; (8007698 <ResetUartORE+0x28>)
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800767e:	4a07      	ldr	r2, [pc, #28]	; (800769c <ResetUartORE+0x2c>)
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007684:	4a06      	ldr	r2, [pc, #24]	; (80076a0 <ResetUartORE+0x30>)
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800768a:	4a06      	ldr	r2, [pc, #24]	; (80076a4 <ResetUartORE+0x34>)
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	6213      	str	r3, [r2, #32]
#endif
}
 8007690:	4770      	bx	lr
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	20006bc4 	.word	0x20006bc4
 8007698:	20006d14 	.word	0x20006d14
 800769c:	20006ae4 	.word	0x20006ae4
 80076a0:	20006b54 	.word	0x20006b54
 80076a4:	20006c34 	.word	0x20006c34

080076a8 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	0006      	movs	r6, r0
 80076ac:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 80076ae:	f009 f9af 	bl	8010a10 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80076b2:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <EE_VerifyPageFullWriteVariable+0xb8>)
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80076b8:	4b2a      	ldr	r3, [pc, #168]	; (8007764 <EE_VerifyPageFullWriteVariable+0xbc>)
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 80076c2:	4929      	ldr	r1, [pc, #164]	; (8007768 <EE_VerifyPageFullWriteVariable+0xc0>)
 80076c4:	428a      	cmp	r2, r1
 80076c6:	d007      	beq.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 80076c8:	3302      	adds	r3, #2
 80076ca:	e005      	b.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	d143      	bne.n	8007758 <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 80076d0:	4925      	ldr	r1, [pc, #148]	; (8007768 <EE_VerifyPageFullWriteVariable+0xc0>)
 80076d2:	428b      	cmp	r3, r1
 80076d4:	d042      	beq.n	800775c <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 80076d6:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80076d8:	4a24      	ldr	r2, [pc, #144]	; (800776c <EE_VerifyPageFullWriteVariable+0xc4>)
 80076da:	189c      	adds	r4, r3, r2
 80076dc:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80076de:	02db      	lsls	r3, r3, #11
 80076e0:	4a23      	ldr	r2, [pc, #140]	; (8007770 <EE_VerifyPageFullWriteVariable+0xc8>)
 80076e2:	4694      	mov	ip, r2
 80076e4:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	3201      	adds	r2, #1
 80076ea:	d005      	beq.n	80076f8 <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80076ec:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d22e      	bcs.n	8007750 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	3201      	adds	r2, #1
 80076f6:	d1f9      	bne.n	80076ec <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80076f8:	002a      	movs	r2, r5
 80076fa:	2300      	movs	r3, #0
 80076fc:	0021      	movs	r1, r4
 80076fe:	2001      	movs	r0, #1
 8007700:	f009 f9d0 	bl	8010aa4 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007704:	481b      	ldr	r0, [pc, #108]	; (8007774 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007706:	f009 f99f 	bl	8010a48 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800770a:	2800      	cmp	r0, #0
 800770c:	d003      	beq.n	8007716 <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 800770e:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007710:	69d8      	ldr	r0, [r3, #28]
 8007712:	b280      	uxth	r0, r0
 8007714:	e01f      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007716:	4a19      	ldr	r2, [pc, #100]	; (800777c <EE_VerifyPageFullWriteVariable+0xd4>)
 8007718:	6913      	ldr	r3, [r2, #16]
 800771a:	2101      	movs	r1, #1
 800771c:	438b      	bics	r3, r1
 800771e:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007720:	1ca1      	adds	r1, r4, #2
 8007722:	0032      	movs	r2, r6
 8007724:	2300      	movs	r3, #0
 8007726:	2001      	movs	r0, #1
 8007728:	f009 f9bc 	bl	8010aa4 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800772c:	4811      	ldr	r0, [pc, #68]	; (8007774 <EE_VerifyPageFullWriteVariable+0xcc>)
 800772e:	f009 f98b 	bl	8010a48 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007732:	2800      	cmp	r0, #0
 8007734:	d003      	beq.n	800773e <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007738:	69d8      	ldr	r0, [r3, #28]
 800773a:	b280      	uxth	r0, r0
 800773c:	e00b      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800773e:	4a0f      	ldr	r2, [pc, #60]	; (800777c <EE_VerifyPageFullWriteVariable+0xd4>)
 8007740:	6913      	ldr	r3, [r2, #16]
 8007742:	2101      	movs	r1, #1
 8007744:	438b      	bics	r3, r1
 8007746:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 800774a:	69d8      	ldr	r0, [r3, #28]
 800774c:	b280      	uxth	r0, r0
 800774e:	e002      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 8007750:	f009 f970 	bl	8010a34 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007754:	2080      	movs	r0, #128	; 0x80
}
 8007756:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 8007758:	20ab      	movs	r0, #171	; 0xab
 800775a:	e7fc      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 800775c:	2302      	movs	r3, #2
 800775e:	e7bb      	b.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
 8007760:	0801e000 	.word	0x0801e000
 8007764:	0801f000 	.word	0x0801f000
 8007768:	0000eeee 	.word	0x0000eeee
 800776c:	0001003c 	.word	0x0001003c
 8007770:	0801effe 	.word	0x0801effe
 8007774:	0000c350 	.word	0x0000c350
 8007778:	20006eb8 	.word	0x20006eb8
 800777c:	40022000 	.word	0x40022000

08007780 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007780:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007782:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <EE_ReadVariable+0x50>)
 8007784:	881c      	ldrh	r4, [r3, #0]
 8007786:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007788:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <EE_ReadVariable+0x54>)
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800778e:	2c00      	cmp	r4, #0
 8007790:	d006      	beq.n	80077a0 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 8007796:	20ab      	movs	r0, #171	; 0xab
 8007798:	e019      	b.n	80077ce <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800779a:	2001      	movs	r0, #1
 800779c:	e017      	b.n	80077ce <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 800779e:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80077a0:	02e3      	lsls	r3, r4, #11
 80077a2:	4a0d      	ldr	r2, [pc, #52]	; (80077d8 <EE_ReadVariable+0x58>)
 80077a4:	4694      	mov	ip, r2
 80077a6:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80077a8:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 80077aa:	4a0c      	ldr	r2, [pc, #48]	; (80077dc <EE_ReadVariable+0x5c>)
 80077ac:	4694      	mov	ip, r2
 80077ae:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 80077b0:	881a      	ldrh	r2, [r3, #0]
 80077b2:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80077b4:	4290      	cmp	r0, r2
 80077b6:	d006      	beq.n	80077c6 <EE_ReadVariable+0x46>
			Address =Address - 4;
 80077b8:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	d9ed      	bls.n	800779a <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 80077be:	881a      	ldrh	r2, [r3, #0]
 80077c0:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80077c2:	4282      	cmp	r2, r0
 80077c4:	d1f8      	bne.n	80077b8 <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 80077c6:	3b02      	subs	r3, #2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 80077cc:	2000      	movs	r0, #0
}
 80077ce:	bd10      	pop	{r4, pc}
 80077d0:	0801e000 	.word	0x0801e000
 80077d4:	0801f000 	.word	0x0801f000
 80077d8:	0801effe 	.word	0x0801effe
 80077dc:	0801e002 	.word	0x0801e002

080077e0 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 80077e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e2:	46de      	mov	lr, fp
 80077e4:	4647      	mov	r7, r8
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b083      	sub	sp, #12
 80077ea:	0005      	movs	r5, r0
 80077ec:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 80077ee:	f009 f90f 	bl	8010a10 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80077f2:	0031      	movs	r1, r6
 80077f4:	0028      	movs	r0, r5
 80077f6:	f7ff ff57 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 80077fa:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 80077fc:	2880      	cmp	r0, #128	; 0x80
 80077fe:	d007      	beq.n	8007810 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007800:	f009 f918 	bl	8010a34 <HAL_FLASH_Lock>
}
 8007804:	0020      	movs	r0, r4
 8007806:	b003      	add	sp, #12
 8007808:	bc0c      	pop	{r2, r3}
 800780a:	4690      	mov	r8, r2
 800780c:	469b      	mov	fp, r3
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007810:	f009 f8fe 	bl	8010a10 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007814:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <EE_WriteVariable+0x130>)
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800781a:	4a3e      	ldr	r2, [pc, #248]	; (8007914 <EE_WriteVariable+0x134>)
 800781c:	8812      	ldrh	r2, [r2, #0]
 800781e:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007824:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 8007826:	2a00      	cmp	r2, #0
 8007828:	d1ea      	bne.n	8007800 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800782a:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <EE_WriteVariable+0x134>)
 800782c:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800782e:	4b38      	ldr	r3, [pc, #224]	; (8007910 <EE_WriteVariable+0x130>)
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	e003      	b.n	800783c <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007834:	4b36      	ldr	r3, [pc, #216]	; (8007910 <EE_WriteVariable+0x130>)
 8007836:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007838:	4b36      	ldr	r3, [pc, #216]	; (8007914 <EE_WriteVariable+0x134>)
 800783a:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800783c:	4a36      	ldr	r2, [pc, #216]	; (8007918 <EE_WriteVariable+0x138>)
 800783e:	2300      	movs	r3, #0
 8007840:	9901      	ldr	r1, [sp, #4]
 8007842:	2001      	movs	r0, #1
 8007844:	f009 f92e 	bl	8010aa4 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007848:	4834      	ldr	r0, [pc, #208]	; (800791c <EE_WriteVariable+0x13c>)
 800784a:	f009 f8fd 	bl	8010a48 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800784e:	2800      	cmp	r0, #0
 8007850:	d003      	beq.n	800785a <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 8007852:	4b33      	ldr	r3, [pc, #204]	; (8007920 <EE_WriteVariable+0x140>)
 8007854:	69dc      	ldr	r4, [r3, #28]
 8007856:	b2a4      	uxth	r4, r4
 8007858:	e7d2      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800785a:	4a32      	ldr	r2, [pc, #200]	; (8007924 <EE_WriteVariable+0x144>)
 800785c:	6913      	ldr	r3, [r2, #16]
 800785e:	2101      	movs	r1, #1
 8007860:	438b      	bics	r3, r1
 8007862:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007864:	0031      	movs	r1, r6
 8007866:	0028      	movs	r0, r5
 8007868:	f7ff ff1e 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 800786c:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800786e:	d1c7      	bne.n	8007800 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007870:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007872:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <EE_WriteVariable+0x148>)
 8007874:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007876:	4e2d      	ldr	r6, [pc, #180]	; (800792c <EE_WriteVariable+0x14c>)
 8007878:	e003      	b.n	8007882 <EE_WriteVariable+0xa2>
 800787a:	3701      	adds	r7, #1
 800787c:	b2bf      	uxth	r7, r7
 800787e:	42b7      	cmp	r7, r6
 8007880:	d00f      	beq.n	80078a2 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007882:	42bd      	cmp	r5, r7
 8007884:	d0f9      	beq.n	800787a <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007886:	4928      	ldr	r1, [pc, #160]	; (8007928 <EE_WriteVariable+0x148>)
 8007888:	0038      	movs	r0, r7
 800788a:	f7ff ff79 	bl	8007780 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800788e:	2801      	cmp	r0, #1
 8007890:	d0f3      	beq.n	800787a <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007892:	4643      	mov	r3, r8
 8007894:	8819      	ldrh	r1, [r3, #0]
 8007896:	0038      	movs	r0, r7
 8007898:	f7ff ff06 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 800789c:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800789e:	d0ec      	beq.n	800787a <EE_WriteVariable+0x9a>
 80078a0:	e7ae      	b.n	8007800 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 80078a2:	4658      	mov	r0, fp
 80078a4:	f009 f976 	bl	8010b94 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078a8:	481c      	ldr	r0, [pc, #112]	; (800791c <EE_WriteVariable+0x13c>)
 80078aa:	f009 f8cd 	bl	8010a48 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d003      	beq.n	80078ba <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <EE_WriteVariable+0x140>)
 80078b4:	69dc      	ldr	r4, [r3, #28]
 80078b6:	b2a4      	uxth	r4, r4
 80078b8:	e7a2      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 80078ba:	2080      	movs	r0, #128	; 0x80
 80078bc:	0100      	lsls	r0, r0, #4
 80078be:	4458      	add	r0, fp
 80078c0:	f009 f968 	bl	8010b94 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078c4:	4815      	ldr	r0, [pc, #84]	; (800791c <EE_WriteVariable+0x13c>)
 80078c6:	f009 f8bf 	bl	8010a48 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d003      	beq.n	80078d6 <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <EE_WriteVariable+0x140>)
 80078d0:	69dc      	ldr	r4, [r3, #28]
 80078d2:	b2a4      	uxth	r4, r4
 80078d4:	e794      	b.n	8007800 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80078d6:	4a13      	ldr	r2, [pc, #76]	; (8007924 <EE_WriteVariable+0x144>)
 80078d8:	6913      	ldr	r3, [r2, #16]
 80078da:	2102      	movs	r1, #2
 80078dc:	438b      	bics	r3, r1
 80078de:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	2001      	movs	r0, #1
 80078e8:	f009 f8dc 	bl	8010aa4 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078ec:	480b      	ldr	r0, [pc, #44]	; (800791c <EE_WriteVariable+0x13c>)
 80078ee:	f009 f8ab 	bl	8010a48 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d003      	beq.n	80078fe <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <EE_WriteVariable+0x140>)
 80078f8:	69dc      	ldr	r4, [r3, #28]
 80078fa:	b2a4      	uxth	r4, r4
 80078fc:	e780      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80078fe:	4a09      	ldr	r2, [pc, #36]	; (8007924 <EE_WriteVariable+0x144>)
 8007900:	6913      	ldr	r3, [r2, #16]
 8007902:	2101      	movs	r1, #1
 8007904:	438b      	bics	r3, r1
 8007906:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 8007908:	f009 f894 	bl	8010a34 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800790c:	2400      	movs	r4, #0
 800790e:	e777      	b.n	8007800 <EE_WriteVariable+0x20>
 8007910:	0801e000 	.word	0x0801e000
 8007914:	0801f000 	.word	0x0801f000
 8007918:	0000eeee 	.word	0x0000eeee
 800791c:	0000c350 	.word	0x0000c350
 8007920:	20006eb8 	.word	0x20006eb8
 8007924:	40022000 	.word	0x40022000
 8007928:	200014d8 	.word	0x200014d8
 800792c:	00000401 	.word	0x00000401

08007930 <EE_Format>:
uint16_t EE_Format(void){
 8007930:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007932:	f009 f86d 	bl	8010a10 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007936:	4829      	ldr	r0, [pc, #164]	; (80079dc <EE_Format+0xac>)
 8007938:	f009 f92c 	bl	8010b94 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800793c:	4828      	ldr	r0, [pc, #160]	; (80079e0 <EE_Format+0xb0>)
 800793e:	f009 f883 	bl	8010a48 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007942:	2800      	cmp	r0, #0
 8007944:	d003      	beq.n	800794e <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <EE_Format+0xb4>)
 8007948:	69d8      	ldr	r0, [r3, #28]
 800794a:	b280      	uxth	r0, r0
}
 800794c:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800794e:	4826      	ldr	r0, [pc, #152]	; (80079e8 <EE_Format+0xb8>)
 8007950:	f009 f920 	bl	8010b94 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007954:	4822      	ldr	r0, [pc, #136]	; (80079e0 <EE_Format+0xb0>)
 8007956:	f009 f877 	bl	8010a48 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800795a:	2800      	cmp	r0, #0
 800795c:	d003      	beq.n	8007966 <EE_Format+0x36>
			return pFlash.ErrorCode;
 800795e:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <EE_Format+0xb4>)
 8007960:	69d8      	ldr	r0, [r3, #28]
 8007962:	b280      	uxth	r0, r0
 8007964:	e7f2      	b.n	800794c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007966:	4a21      	ldr	r2, [pc, #132]	; (80079ec <EE_Format+0xbc>)
 8007968:	6913      	ldr	r3, [r2, #16]
 800796a:	2102      	movs	r1, #2
 800796c:	438b      	bics	r3, r1
 800796e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	4919      	ldr	r1, [pc, #100]	; (80079dc <EE_Format+0xac>)
 8007976:	2001      	movs	r0, #1
 8007978:	f009 f894 	bl	8010aa4 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800797c:	4818      	ldr	r0, [pc, #96]	; (80079e0 <EE_Format+0xb0>)
 800797e:	f009 f863 	bl	8010a48 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007982:	2800      	cmp	r0, #0
 8007984:	d003      	beq.n	800798e <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007986:	4b17      	ldr	r3, [pc, #92]	; (80079e4 <EE_Format+0xb4>)
 8007988:	69d8      	ldr	r0, [r3, #28]
 800798a:	b280      	uxth	r0, r0
 800798c:	e7de      	b.n	800794c <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800798e:	4a17      	ldr	r2, [pc, #92]	; (80079ec <EE_Format+0xbc>)
 8007990:	6913      	ldr	r3, [r2, #16]
 8007992:	2101      	movs	r1, #1
 8007994:	438b      	bics	r3, r1
 8007996:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007998:	4815      	ldr	r0, [pc, #84]	; (80079f0 <EE_Format+0xc0>)
 800799a:	f009 f8fb 	bl	8010b94 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800799e:	4810      	ldr	r0, [pc, #64]	; (80079e0 <EE_Format+0xb0>)
 80079a0:	f009 f852 	bl	8010a48 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d003      	beq.n	80079b0 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80079a8:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <EE_Format+0xb4>)
 80079aa:	69d8      	ldr	r0, [r3, #28]
 80079ac:	b280      	uxth	r0, r0
 80079ae:	e7cd      	b.n	800794c <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80079b0:	4810      	ldr	r0, [pc, #64]	; (80079f4 <EE_Format+0xc4>)
 80079b2:	f009 f8ef 	bl	8010b94 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079b6:	480a      	ldr	r0, [pc, #40]	; (80079e0 <EE_Format+0xb0>)
 80079b8:	f009 f846 	bl	8010a48 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079bc:	2800      	cmp	r0, #0
 80079be:	d003      	beq.n	80079c8 <EE_Format+0x98>
			return pFlash.ErrorCode;
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <EE_Format+0xb4>)
 80079c2:	69d8      	ldr	r0, [r3, #28]
 80079c4:	b280      	uxth	r0, r0
 80079c6:	e7c1      	b.n	800794c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <EE_Format+0xbc>)
 80079ca:	6913      	ldr	r3, [r2, #16]
 80079cc:	2101      	movs	r1, #1
 80079ce:	438b      	bics	r3, r1
 80079d0:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 80079d2:	f009 f82f 	bl	8010a34 <HAL_FLASH_Lock>
	return FlashStatus;
 80079d6:	2000      	movs	r0, #0
 80079d8:	e7b8      	b.n	800794c <EE_Format+0x1c>
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	0801e000 	.word	0x0801e000
 80079e0:	0000c350 	.word	0x0000c350
 80079e4:	20006eb8 	.word	0x20006eb8
 80079e8:	0801e800 	.word	0x0801e800
 80079ec:	40022000 	.word	0x40022000
 80079f0:	0801f000 	.word	0x0801f000
 80079f4:	0801f800 	.word	0x0801f800

080079f8 <EE_Init>:
uint16_t EE_Init(void){
 80079f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fa:	46c6      	mov	lr, r8
 80079fc:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 80079fe:	f009 f807 	bl	8010a10 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a02:	4bbe      	ldr	r3, [pc, #760]	; (8007cfc <EE_Init+0x304>)
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a08:	4abd      	ldr	r2, [pc, #756]	; (8007d00 <EE_Init+0x308>)
 8007a0a:	8812      	ldrh	r2, [r2, #0]
 8007a0c:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a0e:	49bd      	ldr	r1, [pc, #756]	; (8007d04 <EE_Init+0x30c>)
 8007a10:	428b      	cmp	r3, r1
 8007a12:	d100      	bne.n	8007a16 <EE_Init+0x1e>
 8007a14:	e074      	b.n	8007b00 <EE_Init+0x108>
 8007a16:	49bc      	ldr	r1, [pc, #752]	; (8007d08 <EE_Init+0x310>)
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	d011      	beq.n	8007a40 <EE_Init+0x48>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d100      	bne.n	8007a22 <EE_Init+0x2a>
 8007a20:	e109      	b.n	8007c36 <EE_Init+0x23e>
			FlashStatus =EE_Format();
 8007a22:	f7ff ff85 	bl	8007930 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a26:	48b9      	ldr	r0, [pc, #740]	; (8007d0c <EE_Init+0x314>)
 8007a28:	f009 f80e 	bl	8010a48 <FLASH_WaitForLastOperation>
 8007a2c:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d102      	bne.n	8007a38 <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007a32:	f008 ffff 	bl	8010a34 <HAL_FLASH_Lock>
	return HAL_OK;
 8007a36:	2600      	movs	r6, #0
}
 8007a38:	0030      	movs	r0, r6
 8007a3a:	bc04      	pop	{r2}
 8007a3c:	4690      	mov	r8, r2
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d00d      	beq.n	8007a60 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007a44:	4baf      	ldr	r3, [pc, #700]	; (8007d04 <EE_Init+0x30c>)
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d028      	beq.n	8007a9c <EE_Init+0xa4>
				FlashStatus =EE_Format();
 8007a4a:	f7ff ff71 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a4e:	48af      	ldr	r0, [pc, #700]	; (8007d0c <EE_Init+0x314>)
 8007a50:	f008 fffa 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d0ec      	beq.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007a58:	4bad      	ldr	r3, [pc, #692]	; (8007d10 <EE_Init+0x318>)
 8007a5a:	69de      	ldr	r6, [r3, #28]
 8007a5c:	b2b6      	uxth	r6, r6
 8007a5e:	e7eb      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a60:	48a6      	ldr	r0, [pc, #664]	; (8007cfc <EE_Init+0x304>)
 8007a62:	f009 f897 	bl	8010b94 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a66:	48a9      	ldr	r0, [pc, #676]	; (8007d0c <EE_Init+0x314>)
 8007a68:	f008 ffee 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d003      	beq.n	8007a78 <EE_Init+0x80>
					return pFlash.ErrorCode;
 8007a70:	4ba7      	ldr	r3, [pc, #668]	; (8007d10 <EE_Init+0x318>)
 8007a72:	69de      	ldr	r6, [r3, #28]
 8007a74:	b2b6      	uxth	r6, r6
 8007a76:	e7df      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007a78:	48a6      	ldr	r0, [pc, #664]	; (8007d14 <EE_Init+0x31c>)
 8007a7a:	f009 f88b 	bl	8010b94 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a7e:	48a3      	ldr	r0, [pc, #652]	; (8007d0c <EE_Init+0x314>)
 8007a80:	f008 ffe2 	bl	8010a48 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d105      	bne.n	8007a94 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a88:	4aa3      	ldr	r2, [pc, #652]	; (8007d18 <EE_Init+0x320>)
 8007a8a:	6913      	ldr	r3, [r2, #16]
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	438b      	bics	r3, r1
 8007a90:	6113      	str	r3, [r2, #16]
 8007a92:	e7ce      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007a94:	4b9e      	ldr	r3, [pc, #632]	; (8007d10 <EE_Init+0x318>)
 8007a96:	69de      	ldr	r6, [r3, #28]
 8007a98:	b2b6      	uxth	r6, r6
 8007a9a:	e7cd      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a9c:	4897      	ldr	r0, [pc, #604]	; (8007cfc <EE_Init+0x304>)
 8007a9e:	f009 f879 	bl	8010b94 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aa2:	489a      	ldr	r0, [pc, #616]	; (8007d0c <EE_Init+0x314>)
 8007aa4:	f008 ffd0 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d003      	beq.n	8007ab4 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 8007aac:	4b98      	ldr	r3, [pc, #608]	; (8007d10 <EE_Init+0x318>)
 8007aae:	69de      	ldr	r6, [r3, #28]
 8007ab0:	b2b6      	uxth	r6, r6
 8007ab2:	e7c1      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ab4:	4897      	ldr	r0, [pc, #604]	; (8007d14 <EE_Init+0x31c>)
 8007ab6:	f009 f86d 	bl	8010b94 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aba:	4894      	ldr	r0, [pc, #592]	; (8007d0c <EE_Init+0x314>)
 8007abc:	f008 ffc4 	bl	8010a48 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d003      	beq.n	8007acc <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007ac4:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <EE_Init+0x318>)
 8007ac6:	69de      	ldr	r6, [r3, #28]
 8007ac8:	b2b6      	uxth	r6, r6
 8007aca:	e7b5      	b.n	8007a38 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007acc:	4a92      	ldr	r2, [pc, #584]	; (8007d18 <EE_Init+0x320>)
 8007ace:	6913      	ldr	r3, [r2, #16]
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	438b      	bics	r3, r1
 8007ad4:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4989      	ldr	r1, [pc, #548]	; (8007d00 <EE_Init+0x308>)
 8007adc:	2001      	movs	r0, #1
 8007ade:	f008 ffe1 	bl	8010aa4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ae2:	488a      	ldr	r0, [pc, #552]	; (8007d0c <EE_Init+0x314>)
 8007ae4:	f008 ffb0 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d105      	bne.n	8007af8 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007aec:	4a8a      	ldr	r2, [pc, #552]	; (8007d18 <EE_Init+0x320>)
 8007aee:	6913      	ldr	r3, [r2, #16]
 8007af0:	2101      	movs	r1, #1
 8007af2:	438b      	bics	r3, r1
 8007af4:	6113      	str	r3, [r2, #16]
 8007af6:	e79c      	b.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007af8:	4b85      	ldr	r3, [pc, #532]	; (8007d10 <EE_Init+0x318>)
 8007afa:	69de      	ldr	r6, [r3, #28]
 8007afc:	b2b6      	uxth	r6, r6
 8007afe:	e79b      	b.n	8007a38 <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d157      	bne.n	8007bb4 <EE_Init+0x1bc>
 8007b04:	2401      	movs	r4, #1
	int16_t x =-1;
 8007b06:	2701      	movs	r7, #1
 8007b08:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b0a:	4d84      	ldr	r5, [pc, #528]	; (8007d1c <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b0c:	4b84      	ldr	r3, [pc, #528]	; (8007d20 <EE_Init+0x328>)
 8007b0e:	4698      	mov	r8, r3
 8007b10:	e005      	b.n	8007b1e <EE_Init+0x126>
						x =VarIdx;
 8007b12:	b227      	sxth	r7, r4
 8007b14:	e008      	b.n	8007b28 <EE_Init+0x130>
 8007b16:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b18:	4b82      	ldr	r3, [pc, #520]	; (8007d24 <EE_Init+0x32c>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d018      	beq.n	8007b50 <EE_Init+0x158>
 8007b1e:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b20:	882b      	ldrh	r3, [r5, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	42b3      	cmp	r3, r6
 8007b26:	d0f4      	beq.n	8007b12 <EE_Init+0x11a>
					if(VarIdx != x){
 8007b28:	42bc      	cmp	r4, r7
 8007b2a:	d0f4      	beq.n	8007b16 <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b2c:	497c      	ldr	r1, [pc, #496]	; (8007d20 <EE_Init+0x328>)
 8007b2e:	0030      	movs	r0, r6
 8007b30:	f7ff fe26 	bl	8007780 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b34:	2801      	cmp	r0, #1
 8007b36:	d0ee      	beq.n	8007b16 <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b38:	4643      	mov	r3, r8
 8007b3a:	8819      	ldrh	r1, [r3, #0]
 8007b3c:	0030      	movs	r0, r6
 8007b3e:	f7ff fdb3 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 8007b42:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b44:	4871      	ldr	r0, [pc, #452]	; (8007d0c <EE_Init+0x314>)
 8007b46:	f008 ff7f 	bl	8010a48 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0e3      	beq.n	8007b16 <EE_Init+0x11e>
 8007b4e:	e773      	b.n	8007a38 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007b50:	2200      	movs	r2, #0
 8007b52:	2300      	movs	r3, #0
 8007b54:	4969      	ldr	r1, [pc, #420]	; (8007cfc <EE_Init+0x304>)
 8007b56:	2001      	movs	r0, #1
 8007b58:	f008 ffa4 	bl	8010aa4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b5c:	486b      	ldr	r0, [pc, #428]	; (8007d0c <EE_Init+0x314>)
 8007b5e:	f008 ff73 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d003      	beq.n	8007b6e <EE_Init+0x176>
					return pFlash.ErrorCode;
 8007b66:	4b6a      	ldr	r3, [pc, #424]	; (8007d10 <EE_Init+0x318>)
 8007b68:	69de      	ldr	r6, [r3, #28]
 8007b6a:	b2b6      	uxth	r6, r6
 8007b6c:	e764      	b.n	8007a38 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b6e:	4a6a      	ldr	r2, [pc, #424]	; (8007d18 <EE_Init+0x320>)
 8007b70:	6913      	ldr	r3, [r2, #16]
 8007b72:	2101      	movs	r1, #1
 8007b74:	438b      	bics	r3, r1
 8007b76:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007b78:	4861      	ldr	r0, [pc, #388]	; (8007d00 <EE_Init+0x308>)
 8007b7a:	f009 f80b 	bl	8010b94 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b7e:	4863      	ldr	r0, [pc, #396]	; (8007d0c <EE_Init+0x314>)
 8007b80:	f008 ff62 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d003      	beq.n	8007b90 <EE_Init+0x198>
					return pFlash.ErrorCode;
 8007b88:	4b61      	ldr	r3, [pc, #388]	; (8007d10 <EE_Init+0x318>)
 8007b8a:	69de      	ldr	r6, [r3, #28]
 8007b8c:	b2b6      	uxth	r6, r6
 8007b8e:	e753      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007b90:	4865      	ldr	r0, [pc, #404]	; (8007d28 <EE_Init+0x330>)
 8007b92:	f008 ffff 	bl	8010b94 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b96:	485d      	ldr	r0, [pc, #372]	; (8007d0c <EE_Init+0x314>)
 8007b98:	f008 ff56 	bl	8010a48 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d105      	bne.n	8007bac <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ba0:	4a5d      	ldr	r2, [pc, #372]	; (8007d18 <EE_Init+0x320>)
 8007ba2:	6913      	ldr	r3, [r2, #16]
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	438b      	bics	r3, r1
 8007ba8:	6113      	str	r3, [r2, #16]
 8007baa:	e742      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007bac:	4b58      	ldr	r3, [pc, #352]	; (8007d10 <EE_Init+0x318>)
 8007bae:	69de      	ldr	r6, [r3, #28]
 8007bb0:	b2b6      	uxth	r6, r6
 8007bb2:	e741      	b.n	8007a38 <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bb4:	4b54      	ldr	r3, [pc, #336]	; (8007d08 <EE_Init+0x310>)
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00b      	beq.n	8007bd2 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 8007bba:	f7ff feb9 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bbe:	4853      	ldr	r0, [pc, #332]	; (8007d0c <EE_Init+0x314>)
 8007bc0:	f008 ff42 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d100      	bne.n	8007bca <EE_Init+0x1d2>
 8007bc8:	e733      	b.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007bca:	4b51      	ldr	r3, [pc, #324]	; (8007d10 <EE_Init+0x318>)
 8007bcc:	69de      	ldr	r6, [r3, #28]
 8007bce:	b2b6      	uxth	r6, r6
 8007bd0:	e732      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bd2:	484b      	ldr	r0, [pc, #300]	; (8007d00 <EE_Init+0x308>)
 8007bd4:	f008 ffde 	bl	8010b94 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bd8:	484c      	ldr	r0, [pc, #304]	; (8007d0c <EE_Init+0x314>)
 8007bda:	f008 ff35 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d003      	beq.n	8007bea <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 8007be2:	4b4b      	ldr	r3, [pc, #300]	; (8007d10 <EE_Init+0x318>)
 8007be4:	69de      	ldr	r6, [r3, #28]
 8007be6:	b2b6      	uxth	r6, r6
 8007be8:	e726      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007bea:	484f      	ldr	r0, [pc, #316]	; (8007d28 <EE_Init+0x330>)
 8007bec:	f008 ffd2 	bl	8010b94 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bf0:	4846      	ldr	r0, [pc, #280]	; (8007d0c <EE_Init+0x314>)
 8007bf2:	f008 ff29 	bl	8010a48 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d003      	beq.n	8007c02 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <EE_Init+0x318>)
 8007bfc:	69de      	ldr	r6, [r3, #28]
 8007bfe:	b2b6      	uxth	r6, r6
 8007c00:	e71a      	b.n	8007a38 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c02:	4a45      	ldr	r2, [pc, #276]	; (8007d18 <EE_Init+0x320>)
 8007c04:	6913      	ldr	r3, [r2, #16]
 8007c06:	2102      	movs	r1, #2
 8007c08:	438b      	bics	r3, r1
 8007c0a:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	493a      	ldr	r1, [pc, #232]	; (8007cfc <EE_Init+0x304>)
 8007c12:	2001      	movs	r0, #1
 8007c14:	f008 ff46 	bl	8010aa4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c18:	483c      	ldr	r0, [pc, #240]	; (8007d0c <EE_Init+0x314>)
 8007c1a:	f008 ff15 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d003      	beq.n	8007c2a <EE_Init+0x232>
					return pFlash.ErrorCode;
 8007c22:	4b3b      	ldr	r3, [pc, #236]	; (8007d10 <EE_Init+0x318>)
 8007c24:	69de      	ldr	r6, [r3, #28]
 8007c26:	b2b6      	uxth	r6, r6
 8007c28:	e706      	b.n	8007a38 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c2a:	4a3b      	ldr	r2, [pc, #236]	; (8007d18 <EE_Init+0x320>)
 8007c2c:	6913      	ldr	r3, [r2, #16]
 8007c2e:	2101      	movs	r1, #1
 8007c30:	438b      	bics	r3, r1
 8007c32:	6113      	str	r3, [r2, #16]
 8007c34:	e6fd      	b.n	8007a32 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	d009      	beq.n	8007c4e <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007c3a:	4b33      	ldr	r3, [pc, #204]	; (8007d08 <EE_Init+0x310>)
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d010      	beq.n	8007c62 <EE_Init+0x26a>
 8007c40:	2401      	movs	r4, #1
	int16_t x =-1;
 8007c42:	2701      	movs	r7, #1
 8007c44:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007c46:	4d39      	ldr	r5, [pc, #228]	; (8007d2c <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007c48:	4b35      	ldr	r3, [pc, #212]	; (8007d20 <EE_Init+0x328>)
 8007c4a:	4698      	mov	r8, r3
 8007c4c:	e02d      	b.n	8007caa <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 8007c4e:	f7ff fe6f 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c52:	482e      	ldr	r0, [pc, #184]	; (8007d0c <EE_Init+0x314>)
 8007c54:	f008 fef8 	bl	8010a48 <FLASH_WaitForLastOperation>
 8007c58:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	d100      	bne.n	8007c60 <EE_Init+0x268>
 8007c5e:	e6e8      	b.n	8007a32 <EE_Init+0x3a>
 8007c60:	e6ea      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c62:	4827      	ldr	r0, [pc, #156]	; (8007d00 <EE_Init+0x308>)
 8007c64:	f008 ff96 	bl	8010b94 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c68:	4828      	ldr	r0, [pc, #160]	; (8007d0c <EE_Init+0x314>)
 8007c6a:	f008 feed 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d003      	beq.n	8007c7a <EE_Init+0x282>
					return pFlash.ErrorCode;
 8007c72:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <EE_Init+0x318>)
 8007c74:	69de      	ldr	r6, [r3, #28]
 8007c76:	b2b6      	uxth	r6, r6
 8007c78:	e6de      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c7a:	482b      	ldr	r0, [pc, #172]	; (8007d28 <EE_Init+0x330>)
 8007c7c:	f008 ff8a 	bl	8010b94 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c80:	4822      	ldr	r0, [pc, #136]	; (8007d0c <EE_Init+0x314>)
 8007c82:	f008 fee1 	bl	8010a48 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d105      	bne.n	8007c96 <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c8a:	4a23      	ldr	r2, [pc, #140]	; (8007d18 <EE_Init+0x320>)
 8007c8c:	6913      	ldr	r3, [r2, #16]
 8007c8e:	2102      	movs	r1, #2
 8007c90:	438b      	bics	r3, r1
 8007c92:	6113      	str	r3, [r2, #16]
 8007c94:	e6cd      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007c96:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <EE_Init+0x318>)
 8007c98:	69de      	ldr	r6, [r3, #28]
 8007c9a:	b2b6      	uxth	r6, r6
 8007c9c:	e6cc      	b.n	8007a38 <EE_Init+0x40>
						x =VarIdx;
 8007c9e:	b227      	sxth	r7, r4
 8007ca0:	e008      	b.n	8007cb4 <EE_Init+0x2bc>
 8007ca2:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007ca4:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <EE_Init+0x32c>)
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	d018      	beq.n	8007cdc <EE_Init+0x2e4>
 8007caa:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007cac:	882b      	ldrh	r3, [r5, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	42b3      	cmp	r3, r6
 8007cb2:	d0f4      	beq.n	8007c9e <EE_Init+0x2a6>
					if(VarIdx != x){
 8007cb4:	42bc      	cmp	r4, r7
 8007cb6:	d0f4      	beq.n	8007ca2 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007cb8:	4919      	ldr	r1, [pc, #100]	; (8007d20 <EE_Init+0x328>)
 8007cba:	0030      	movs	r0, r6
 8007cbc:	f7ff fd60 	bl	8007780 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	d0ee      	beq.n	8007ca2 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007cc4:	4643      	mov	r3, r8
 8007cc6:	8819      	ldrh	r1, [r3, #0]
 8007cc8:	0030      	movs	r0, r6
 8007cca:	f7ff fced 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 8007cce:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd0:	480e      	ldr	r0, [pc, #56]	; (8007d0c <EE_Init+0x314>)
 8007cd2:	f008 feb9 	bl	8010a48 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0e3      	beq.n	8007ca2 <EE_Init+0x2aa>
 8007cda:	e6ad      	b.n	8007a38 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4907      	ldr	r1, [pc, #28]	; (8007d00 <EE_Init+0x308>)
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	f008 fede 	bl	8010aa4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce8:	4808      	ldr	r0, [pc, #32]	; (8007d0c <EE_Init+0x314>)
 8007cea:	f008 fead 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d01e      	beq.n	8007d30 <EE_Init+0x338>
					return pFlash.ErrorCode;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <EE_Init+0x318>)
 8007cf4:	69de      	ldr	r6, [r3, #28]
 8007cf6:	b2b6      	uxth	r6, r6
 8007cf8:	e69e      	b.n	8007a38 <EE_Init+0x40>
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	0801e000 	.word	0x0801e000
 8007d00:	0801f000 	.word	0x0801f000
 8007d04:	0000eeee 	.word	0x0000eeee
 8007d08:	0000ffff 	.word	0x0000ffff
 8007d0c:	0000c350 	.word	0x0000c350
 8007d10:	20006eb8 	.word	0x20006eb8
 8007d14:	0801e800 	.word	0x0801e800
 8007d18:	40022000 	.word	0x40022000
 8007d1c:	0801e006 	.word	0x0801e006
 8007d20:	200014d8 	.word	0x200014d8
 8007d24:	00000401 	.word	0x00000401
 8007d28:	0801f800 	.word	0x0801f800
 8007d2c:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d30:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <EE_Init+0x380>)
 8007d32:	6913      	ldr	r3, [r2, #16]
 8007d34:	2101      	movs	r1, #1
 8007d36:	438b      	bics	r3, r1
 8007d38:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d3a:	4810      	ldr	r0, [pc, #64]	; (8007d7c <EE_Init+0x384>)
 8007d3c:	f008 ff2a 	bl	8010b94 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d40:	480f      	ldr	r0, [pc, #60]	; (8007d80 <EE_Init+0x388>)
 8007d42:	f008 fe81 	bl	8010a48 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d003      	beq.n	8007d52 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <EE_Init+0x38c>)
 8007d4c:	69de      	ldr	r6, [r3, #28]
 8007d4e:	b2b6      	uxth	r6, r6
 8007d50:	e672      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d52:	480d      	ldr	r0, [pc, #52]	; (8007d88 <EE_Init+0x390>)
 8007d54:	f008 ff1e 	bl	8010b94 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <EE_Init+0x388>)
 8007d5a:	f008 fe75 	bl	8010a48 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d105      	bne.n	8007d6e <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <EE_Init+0x380>)
 8007d64:	6913      	ldr	r3, [r2, #16]
 8007d66:	2102      	movs	r1, #2
 8007d68:	438b      	bics	r3, r1
 8007d6a:	6113      	str	r3, [r2, #16]
 8007d6c:	e661      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <EE_Init+0x38c>)
 8007d70:	69de      	ldr	r6, [r3, #28]
 8007d72:	b2b6      	uxth	r6, r6
 8007d74:	e660      	b.n	8007a38 <EE_Init+0x40>
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	40022000 	.word	0x40022000
 8007d7c:	0801e000 	.word	0x0801e000
 8007d80:	0000c350 	.word	0x0000c350
 8007d84:	20006eb8 	.word	0x20006eb8
 8007d88:	0801e800 	.word	0x0801e800

08007d8c <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 8007d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8e:	46c6      	mov	lr, r8
 8007d90:	b500      	push	{lr}
	
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
 8007d92:	4c2b      	ldr	r4, [pc, #172]	; (8007e40 <StartDefaultTask+0xb4>)
				indMode =IND_OFF;
				break;
				
			case IND_TOPOLOGY:
				RTOS_IND_blink(100);
				indMode =IND_OFF;
 8007d94:	46a0      	mov	r8, r4
				break;
				
			case IND_SHORT_BLINK:
				RTOS_IND_blink(30);
				indMode =IND_OFF;
 8007d96:	0027      	movs	r7, r4
 8007d98:	e020      	b.n	8007ddc <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 8007d9a:	2680      	movs	r6, #128	; 0x80
 8007d9c:	0136      	lsls	r6, r6, #4
 8007d9e:	2590      	movs	r5, #144	; 0x90
 8007da0:	05ed      	lsls	r5, r5, #23
 8007da2:	2201      	movs	r2, #1
 8007da4:	0031      	movs	r1, r6
 8007da6:	0028      	movs	r0, r5
 8007da8:	f009 f8da 	bl	8010f60 <HAL_GPIO_WritePin>
 8007dac:	20c8      	movs	r0, #200	; 0xc8
 8007dae:	f005 fc42 	bl	800d636 <osDelay>
 8007db2:	2200      	movs	r2, #0
 8007db4:	0031      	movs	r1, r6
 8007db6:	0028      	movs	r0, r5
 8007db8:	f009 f8d2 	bl	8010f60 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007dbc:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <StartDefaultTask+0xb4>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007dc2:	f000 ff07 	bl	8008bd4 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007dc6:	f7fd fb61 	bl	800548c <ExecuteSnippet>

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 8007dca:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <StartDefaultTask+0xb8>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <StartDefaultTask+0x4c>
			delayButtonStateReset = false;
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <StartDefaultTask+0xbc>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 8007dd8:	f007 fada 	bl	800f390 <vPortYield>
		switch(indMode){
 8007ddc:	7823      	ldrb	r3, [r4, #0]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d004      	beq.n	8007dec <StartDefaultTask+0x60>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d017      	beq.n	8007e16 <StartDefaultTask+0x8a>
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d1eb      	bne.n	8007dc2 <StartDefaultTask+0x36>
 8007dea:	e7d6      	b.n	8007d9a <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8007dec:	2680      	movs	r6, #128	; 0x80
 8007dee:	0136      	lsls	r6, r6, #4
 8007df0:	2590      	movs	r5, #144	; 0x90
 8007df2:	05ed      	lsls	r5, r5, #23
 8007df4:	2201      	movs	r2, #1
 8007df6:	0031      	movs	r1, r6
 8007df8:	0028      	movs	r0, r5
 8007dfa:	f009 f8b1 	bl	8010f60 <HAL_GPIO_WritePin>
 8007dfe:	2064      	movs	r0, #100	; 0x64
 8007e00:	f005 fc19 	bl	800d636 <osDelay>
 8007e04:	2200      	movs	r2, #0
 8007e06:	0031      	movs	r1, r6
 8007e08:	0028      	movs	r0, r5
 8007e0a:	f009 f8a9 	bl	8010f60 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4642      	mov	r2, r8
 8007e12:	7013      	strb	r3, [r2, #0]
				break;
 8007e14:	e7d5      	b.n	8007dc2 <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 8007e16:	2680      	movs	r6, #128	; 0x80
 8007e18:	0136      	lsls	r6, r6, #4
 8007e1a:	2590      	movs	r5, #144	; 0x90
 8007e1c:	05ed      	lsls	r5, r5, #23
 8007e1e:	2201      	movs	r2, #1
 8007e20:	0031      	movs	r1, r6
 8007e22:	0028      	movs	r0, r5
 8007e24:	f009 f89c 	bl	8010f60 <HAL_GPIO_WritePin>
 8007e28:	201e      	movs	r0, #30
 8007e2a:	f005 fc04 	bl	800d636 <osDelay>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	0031      	movs	r1, r6
 8007e32:	0028      	movs	r0, r5
 8007e34:	f009 f894 	bl	8010f60 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	703b      	strb	r3, [r7, #0]
				break;
 8007e3c:	e7c1      	b.n	8007dc2 <StartDefaultTask+0x36>
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	20000ef4 	.word	0x20000ef4
 8007e44:	20001568 	.word	0x20001568
 8007e48:	20001567 	.word	0x20001567

08007e4c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007e50:	25a0      	movs	r5, #160	; 0xa0
 8007e52:	006d      	lsls	r5, r5, #1
 8007e54:	2400      	movs	r4, #0
 8007e56:	9403      	str	r4, [sp, #12]
 8007e58:	9402      	str	r4, [sp, #8]
 8007e5a:	4b5e      	ldr	r3, [pc, #376]	; (8007fd4 <MX_FREERTOS_Init+0x188>)
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	2603      	movs	r6, #3
 8007e60:	9600      	str	r6, [sp, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	002a      	movs	r2, r5
 8007e66:	495c      	ldr	r1, [pc, #368]	; (8007fd8 <MX_FREERTOS_Init+0x18c>)
 8007e68:	485c      	ldr	r0, [pc, #368]	; (8007fdc <MX_FREERTOS_Init+0x190>)
 8007e6a:	f006 f9df 	bl	800e22c <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007e6e:	9403      	str	r4, [sp, #12]
 8007e70:	9402      	str	r4, [sp, #8]
 8007e72:	4b5b      	ldr	r3, [pc, #364]	; (8007fe0 <MX_FREERTOS_Init+0x194>)
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	9600      	str	r6, [sp, #0]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	002a      	movs	r2, r5
 8007e7c:	4959      	ldr	r1, [pc, #356]	; (8007fe4 <MX_FREERTOS_Init+0x198>)
 8007e7e:	485a      	ldr	r0, [pc, #360]	; (8007fe8 <MX_FREERTOS_Init+0x19c>)
 8007e80:	f006 f9d4 	bl	800e22c <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007e84:	9403      	str	r4, [sp, #12]
 8007e86:	9402      	str	r4, [sp, #8]
 8007e88:	4b58      	ldr	r3, [pc, #352]	; (8007fec <MX_FREERTOS_Init+0x1a0>)
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	9600      	str	r6, [sp, #0]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	002a      	movs	r2, r5
 8007e92:	4957      	ldr	r1, [pc, #348]	; (8007ff0 <MX_FREERTOS_Init+0x1a4>)
 8007e94:	4857      	ldr	r0, [pc, #348]	; (8007ff4 <MX_FREERTOS_Init+0x1a8>)
 8007e96:	f006 f9c9 	bl	800e22c <xTaskGenericCreate>
	vRegisterCLICommands();
 8007e9a:	f7ff fa6d 	bl	8007378 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007e9e:	9403      	str	r4, [sp, #12]
 8007ea0:	9402      	str	r4, [sp, #8]
 8007ea2:	4b55      	ldr	r3, [pc, #340]	; (8007ff8 <MX_FREERTOS_Init+0x1ac>)
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	9600      	str	r6, [sp, #0]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	002a      	movs	r2, r5
 8007eac:	4953      	ldr	r1, [pc, #332]	; (8007ffc <MX_FREERTOS_Init+0x1b0>)
 8007eae:	4854      	ldr	r0, [pc, #336]	; (8008000 <MX_FREERTOS_Init+0x1b4>)
 8007eb0:	f006 f9bc 	bl	800e22c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",configMINIMAL_STACK_SIZE,(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007eb4:	4d53      	ldr	r5, [pc, #332]	; (8008004 <MX_FREERTOS_Init+0x1b8>)
 8007eb6:	9403      	str	r4, [sp, #12]
 8007eb8:	9402      	str	r4, [sp, #8]
 8007eba:	4b53      	ldr	r3, [pc, #332]	; (8008008 <MX_FREERTOS_Init+0x1bc>)
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	9600      	str	r6, [sp, #0]
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	22a0      	movs	r2, #160	; 0xa0
 8007ec6:	4951      	ldr	r1, [pc, #324]	; (800800c <MX_FREERTOS_Init+0x1c0>)
 8007ec8:	0028      	movs	r0, r5
 8007eca:	f006 f9af 	bl	800e22c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",configMINIMAL_STACK_SIZE,(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007ece:	9403      	str	r4, [sp, #12]
 8007ed0:	9402      	str	r4, [sp, #8]
 8007ed2:	4b4f      	ldr	r3, [pc, #316]	; (8008010 <MX_FREERTOS_Init+0x1c4>)
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	9600      	str	r6, [sp, #0]
 8007ed8:	2302      	movs	r3, #2
 8007eda:	22a0      	movs	r2, #160	; 0xa0
 8007edc:	494d      	ldr	r1, [pc, #308]	; (8008014 <MX_FREERTOS_Init+0x1c8>)
 8007ede:	0028      	movs	r0, r5
 8007ee0:	f006 f9a4 	bl	800e22c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",configMINIMAL_STACK_SIZE,(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007ee4:	9403      	str	r4, [sp, #12]
 8007ee6:	9402      	str	r4, [sp, #8]
 8007ee8:	4b4b      	ldr	r3, [pc, #300]	; (8008018 <MX_FREERTOS_Init+0x1cc>)
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	9600      	str	r6, [sp, #0]
 8007eee:	2303      	movs	r3, #3
 8007ef0:	22a0      	movs	r2, #160	; 0xa0
 8007ef2:	494a      	ldr	r1, [pc, #296]	; (800801c <MX_FREERTOS_Init+0x1d0>)
 8007ef4:	0028      	movs	r0, r5
 8007ef6:	f006 f999 	bl	800e22c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",configMINIMAL_STACK_SIZE,(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007efa:	9403      	str	r4, [sp, #12]
 8007efc:	9402      	str	r4, [sp, #8]
 8007efe:	4b48      	ldr	r3, [pc, #288]	; (8008020 <MX_FREERTOS_Init+0x1d4>)
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	9600      	str	r6, [sp, #0]
 8007f04:	2304      	movs	r3, #4
 8007f06:	22a0      	movs	r2, #160	; 0xa0
 8007f08:	4946      	ldr	r1, [pc, #280]	; (8008024 <MX_FREERTOS_Init+0x1d8>)
 8007f0a:	0028      	movs	r0, r5
 8007f0c:	f006 f98e 	bl	800e22c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",configMINIMAL_STACK_SIZE,(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007f10:	9403      	str	r4, [sp, #12]
 8007f12:	9402      	str	r4, [sp, #8]
 8007f14:	4b44      	ldr	r3, [pc, #272]	; (8008028 <MX_FREERTOS_Init+0x1dc>)
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	9600      	str	r6, [sp, #0]
 8007f1a:	2305      	movs	r3, #5
 8007f1c:	22a0      	movs	r2, #160	; 0xa0
 8007f1e:	4943      	ldr	r1, [pc, #268]	; (800802c <MX_FREERTOS_Init+0x1e0>)
 8007f20:	0028      	movs	r0, r5
 8007f22:	f006 f983 	bl	800e22c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",configMINIMAL_STACK_SIZE,(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007f26:	9403      	str	r4, [sp, #12]
 8007f28:	9402      	str	r4, [sp, #8]
 8007f2a:	4b41      	ldr	r3, [pc, #260]	; (8008030 <MX_FREERTOS_Init+0x1e4>)
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	9600      	str	r6, [sp, #0]
 8007f30:	2306      	movs	r3, #6
 8007f32:	22a0      	movs	r2, #160	; 0xa0
 8007f34:	493f      	ldr	r1, [pc, #252]	; (8008034 <MX_FREERTOS_Init+0x1e8>)
 8007f36:	0028      	movs	r0, r5
 8007f38:	f006 f978 	bl	800e22c <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 8007f3c:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007f3e:	2101      	movs	r1, #1
 8007f40:	a80f      	add	r0, sp, #60	; 0x3c
 8007f42:	f005 fb80 	bl	800d646 <osSemaphoreCreate>
 8007f46:	4e3c      	ldr	r6, [pc, #240]	; (8008038 <MX_FREERTOS_Init+0x1ec>)
 8007f48:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007f4a:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	a80e      	add	r0, sp, #56	; 0x38
 8007f50:	f005 fb79 	bl	800d646 <osSemaphoreCreate>
 8007f54:	4d39      	ldr	r5, [pc, #228]	; (800803c <MX_FREERTOS_Init+0x1f0>)
 8007f56:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 8007f58:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	a80d      	add	r0, sp, #52	; 0x34
 8007f5e:	f005 fb72 	bl	800d646 <osSemaphoreCreate>
 8007f62:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007f64:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007f66:	2101      	movs	r1, #1
 8007f68:	a80c      	add	r0, sp, #48	; 0x30
 8007f6a:	f005 fb6c 	bl	800d646 <osSemaphoreCreate>
 8007f6e:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 8007f70:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007f72:	2101      	movs	r1, #1
 8007f74:	a80b      	add	r0, sp, #44	; 0x2c
 8007f76:	f005 fb66 	bl	800d646 <osSemaphoreCreate>
 8007f7a:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007f7c:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007f7e:	2101      	movs	r1, #1
 8007f80:	a80a      	add	r0, sp, #40	; 0x28
 8007f82:	f005 fb60 	bl	800d646 <osSemaphoreCreate>
 8007f86:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 8007f88:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	a809      	add	r0, sp, #36	; 0x24
 8007f8e:	f005 fb5a 	bl	800d646 <osSemaphoreCreate>
 8007f92:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8007f94:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007f96:	2101      	movs	r1, #1
 8007f98:	a808      	add	r0, sp, #32
 8007f9a:	f005 fb54 	bl	800d646 <osSemaphoreCreate>
 8007f9e:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 8007fa0:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	a807      	add	r0, sp, #28
 8007fa6:	f005 fb4e 	bl	800d646 <osSemaphoreCreate>
 8007faa:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8007fac:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007fae:	2101      	movs	r1, #1
 8007fb0:	a806      	add	r0, sp, #24
 8007fb2:	f005 fb48 	bl	800d646 <osSemaphoreCreate>
 8007fb6:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11);
 8007fb8:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007fba:	2101      	movs	r1, #1
 8007fbc:	a805      	add	r0, sp, #20
 8007fbe:	f005 fb42 	bl	800d646 <osSemaphoreCreate>
 8007fc2:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 8007fc4:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	a804      	add	r0, sp, #16
 8007fca:	f005 fb3c 	bl	800d646 <osSemaphoreCreate>
 8007fce:	61a8      	str	r0, [r5, #24]
}
 8007fd0:	b010      	add	sp, #64	; 0x40
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	200014fc 	.word	0x200014fc
 8007fd8:	0801a16c 	.word	0x0801a16c
 8007fdc:	08007d8d 	.word	0x08007d8d
 8007fe0:	200014dc 	.word	0x200014dc
 8007fe4:	0801a178 	.word	0x0801a178
 8007fe8:	080098ad 	.word	0x080098ad
 8007fec:	200014f8 	.word	0x200014f8
 8007ff0:	0801a184 	.word	0x0801a184
 8007ff4:	08012a7f 	.word	0x08012a7f
 8007ff8:	20001504 	.word	0x20001504
 8007ffc:	0801a190 	.word	0x0801a190
 8008000:	0800510d 	.word	0x0800510d
 8008004:	08009c4d 	.word	0x08009c4d
 8008008:	200014e0 	.word	0x200014e0
 800800c:	0801a198 	.word	0x0801a198
 8008010:	200014e4 	.word	0x200014e4
 8008014:	0801a1a4 	.word	0x0801a1a4
 8008018:	200014e8 	.word	0x200014e8
 800801c:	0801a1b0 	.word	0x0801a1b0
 8008020:	200014ec 	.word	0x200014ec
 8008024:	0801a1bc 	.word	0x0801a1bc
 8008028:	200014f0 	.word	0x200014f0
 800802c:	0801a1c8 	.word	0x0801a1c8
 8008030:	200014f4 	.word	0x200014f4
 8008034:	0801a1d4 	.word	0x0801a1d4
 8008038:	20006a60 	.word	0x20006a60
 800803c:	20006a44 	.word	0x20006a44

08008040 <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 8008040:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008042:	4b04      	ldr	r3, [pc, #16]	; (8008054 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	4904      	ldr	r1, [pc, #16]	; (8008058 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008048:	f7f8 f882 	bl	8000150 <__udivsi3>
 800804c:	4b03      	ldr	r3, [pc, #12]	; (800805c <vMainConfigureTimerForRunTimeStats+0x1c>)
 800804e:	6018      	str	r0, [r3, #0]
}
 8008050:	bd10      	pop	{r4, pc}
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	20000090 	.word	0x20000090
 8008058:	00002710 	.word	0x00002710
 800805c:	20001500 	.word	0x20001500

08008060 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8008060:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008062:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <ulMainGetRunTimeCounterValue+0x40>)
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	21fa      	movs	r1, #250	; 0xfa
 8008068:	0089      	lsls	r1, r1, #2
 800806a:	f7f8 f871 	bl	8000150 <__udivsi3>
 800806e:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008070:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <ulMainGetRunTimeCounterValue+0x44>)
 8008072:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008074:	f006 fa6c 	bl	800e550 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <ulMainGetRunTimeCounterValue+0x48>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	015b      	lsls	r3, r3, #5
 800807e:	d50d      	bpl.n	800809c <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8008080:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <ulMainGetRunTimeCounterValue+0x44>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8008088:	0084      	lsls	r4, r0, #2
 800808a:	1824      	adds	r4, r4, r0
 800808c:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800808e:	4b07      	ldr	r3, [pc, #28]	; (80080ac <ulMainGetRunTimeCounterValue+0x4c>)
 8008090:	6819      	ldr	r1, [r3, #0]
 8008092:	0028      	movs	r0, r5
 8008094:	f7f8 f85c 	bl	8000150 <__udivsi3>
 8008098:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 800809a:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800809c:	1b2d      	subs	r5, r5, r4
 800809e:	e7f3      	b.n	8008088 <ulMainGetRunTimeCounterValue+0x28>
 80080a0:	20000090 	.word	0x20000090
 80080a4:	e000e018 	.word	0xe000e018
 80080a8:	e000ed04 	.word	0xe000ed04
 80080ac:	20001500 	.word	0x20001500

080080b0 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 80080b0:	4770      	bx	lr
	...

080080b4 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 80080b4:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080b6:	00c2      	lsls	r2, r0, #3
 80080b8:	1812      	adds	r2, r2, r0
 80080ba:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080bc:	189b      	adds	r3, r3, r2
 80080be:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(pressCounter[port] == t1){
 80080c0:	0082      	lsls	r2, r0, #2
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <CheckForTimedButtonPress+0x78>)
 80080c4:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 80080c6:	0163      	lsls	r3, r4, #5
 80080c8:	1b1b      	subs	r3, r3, r4
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	191b      	adds	r3, r3, r4
 80080ce:	00db      	lsls	r3, r3, #3
	if(pressCounter[port] == t1){
 80080d0:	4299      	cmp	r1, r3
 80080d2:	d01c      	beq.n	800810e <CheckForTimedButtonPress+0x5a>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080d4:	00c2      	lsls	r2, r0, #3
 80080d6:	1812      	adds	r2, r2, r0
 80080d8:	4b13      	ldr	r3, [pc, #76]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	78dc      	ldrb	r4, [r3, #3]
	t2 *=1000;
 80080de:	0163      	lsls	r3, r4, #5
 80080e0:	1b1b      	subs	r3, r3, r4
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	191b      	adds	r3, r3, r4
 80080e6:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 80080e8:	4299      	cmp	r1, r3
 80080ea:	d017      	beq.n	800811c <CheckForTimedButtonPress+0x68>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080ec:	00c2      	lsls	r2, r0, #3
 80080ee:	1812      	adds	r2, r2, r0
 80080f0:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080f2:	189b      	adds	r3, r3, r2
 80080f4:	791c      	ldrb	r4, [r3, #4]
	t3 *=1000;
 80080f6:	0163      	lsls	r3, r4, #5
 80080f8:	1b1b      	subs	r3, r3, r4
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	191b      	adds	r3, r3, r4
 80080fe:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 8008100:	4299      	cmp	r1, r3
 8008102:	d109      	bne.n	8008118 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008104:	0010      	movs	r0, r2
 8008106:	4b08      	ldr	r3, [pc, #32]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008108:	220a      	movs	r2, #10
 800810a:	54c2      	strb	r2, [r0, r3]
 800810c:	e004      	b.n	8008118 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X1_SEC;
 800810e:	00c3      	lsls	r3, r0, #3
 8008110:	1818      	adds	r0, r3, r0
 8008112:	4b05      	ldr	r3, [pc, #20]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008114:	2209      	movs	r2, #9
 8008116:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008118:	2000      	movs	r0, #0
 800811a:	bd10      	pop	{r4, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 800811c:	0010      	movs	r0, r2
 800811e:	4b02      	ldr	r3, [pc, #8]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008120:	220a      	movs	r2, #10
 8008122:	54c2      	strb	r2, [r0, r3]
 8008124:	e7f8      	b.n	8008118 <CheckForTimedButtonPress+0x64>
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	2000151c 	.word	0x2000151c
 800812c:	20001570 	.word	0x20001570

08008130 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 8008130:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008132:	00c2      	lsls	r2, r0, #3
 8008134:	1812      	adds	r2, r2, r0
 8008136:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008138:	189b      	adds	r3, r3, r2
 800813a:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(releaseCounter[port] == t1){
 800813c:	0082      	lsls	r2, r0, #2
 800813e:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <CheckForTimedButtonRelease+0x78>)
 8008140:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 8008142:	0163      	lsls	r3, r4, #5
 8008144:	1b1b      	subs	r3, r3, r4
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	191b      	adds	r3, r3, r4
 800814a:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 800814c:	4299      	cmp	r1, r3
 800814e:	d01c      	beq.n	800818a <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008150:	00c2      	lsls	r2, r0, #3
 8008152:	1812      	adds	r2, r2, r0
 8008154:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008156:	189b      	adds	r3, r3, r2
 8008158:	799c      	ldrb	r4, [r3, #6]
	t2 *=1000;
 800815a:	0163      	lsls	r3, r4, #5
 800815c:	1b1b      	subs	r3, r3, r4
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	191b      	adds	r3, r3, r4
 8008162:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 8008164:	4299      	cmp	r1, r3
 8008166:	d017      	beq.n	8008198 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008168:	00c2      	lsls	r2, r0, #3
 800816a:	1812      	adds	r2, r2, r0
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 800816e:	189b      	adds	r3, r3, r2
 8008170:	79dc      	ldrb	r4, [r3, #7]
	t3 *=1000;
 8008172:	0163      	lsls	r3, r4, #5
 8008174:	1b1b      	subs	r3, r3, r4
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	191b      	adds	r3, r3, r4
 800817a:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 800817c:	4299      	cmp	r1, r3
 800817e:	d109      	bne.n	8008194 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008180:	0010      	movs	r0, r2
 8008182:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008184:	220d      	movs	r2, #13
 8008186:	54c2      	strb	r2, [r0, r3]
 8008188:	e004      	b.n	8008194 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y1_SEC;
 800818a:	00c3      	lsls	r3, r0, #3
 800818c:	1818      	adds	r0, r3, r0
 800818e:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008190:	220c      	movs	r2, #12
 8008192:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008194:	2000      	movs	r0, #0
 8008196:	bd10      	pop	{r4, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008198:	0010      	movs	r0, r2
 800819a:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 800819c:	220d      	movs	r2, #13
 800819e:	54c2      	strb	r2, [r0, r3]
 80081a0:	e7f8      	b.n	8008194 <CheckForTimedButtonRelease+0x64>
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	2000151c 	.word	0x2000151c
 80081a8:	2000158c 	.word	0x2000158c

080081ac <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	b08d      	sub	sp, #52	; 0x34
 80081b0:	0006      	movs	r6, r0
 80081b2:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 80081b4:	4b41      	ldr	r3, [pc, #260]	; (80082bc <AddPortButton+0x110>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d157      	bne.n	800826c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 80081bc:	4b40      	ldr	r3, [pc, #256]	; (80082c0 <AddPortButton+0x114>)
 80081be:	2204      	movs	r2, #4
 80081c0:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 80081c2:	4b3e      	ldr	r3, [pc, #248]	; (80082bc <AddPortButton+0x110>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d15a      	bne.n	8008280 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80081ca:	2512      	movs	r5, #18
 80081cc:	446d      	add	r5, sp
 80081ce:	af04      	add	r7, sp, #16
 80081d0:	9700      	str	r7, [sp, #0]
 80081d2:	ab05      	add	r3, sp, #20
 80081d4:	002a      	movs	r2, r5
 80081d6:	a906      	add	r1, sp, #24
 80081d8:	0020      	movs	r0, r4
 80081da:	f004 fb5f 	bl	800c89c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 80081de:	882b      	ldrh	r3, [r5, #0]
 80081e0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081e2:	2301      	movs	r3, #1
 80081e4:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e6:	2500      	movs	r5, #0
 80081e8:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80081ea:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 80081ec:	a907      	add	r1, sp, #28
 80081ee:	9806      	ldr	r0, [sp, #24]
 80081f0:	f008 fd42 	bl	8010c78 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 80081f4:	883b      	ldrh	r3, [r7, #0]
 80081f6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081f8:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80081fa:	2302      	movs	r3, #2
 80081fc:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 80081fe:	a907      	add	r1, sp, #28
 8008200:	9805      	ldr	r0, [sp, #20]
 8008202:	f008 fd39 	bl	8010c78 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 8008206:	00e2      	lsls	r2, r4, #3
 8008208:	1912      	adds	r2, r2, r4
 800820a:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <AddPortButton+0x118>)
 800820c:	189b      	adds	r3, r3, r2
 800820e:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008210:	0025      	movs	r5, r4
 8008212:	353a      	adds	r5, #58	; 0x3a
 8008214:	00ad      	lsls	r5, r5, #2
 8008216:	210e      	movs	r1, #14
 8008218:	4469      	add	r1, sp
 800821a:	0028      	movs	r0, r5
 800821c:	f7ff fab0 	bl	8007780 <EE_ReadVariable>
	if(!res)											// This variable exists
 8008220:	2800      	cmp	r0, #0
 8008222:	d133      	bne.n	800828c <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 8008224:	230e      	movs	r3, #14
 8008226:	446b      	add	r3, sp
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 800822c:	091a      	lsrs	r2, r3, #4
 800822e:	42a2      	cmp	r2, r4
 8008230:	d103      	bne.n	800823a <AddPortButton+0x8e>
 8008232:	220f      	movs	r2, #15
 8008234:	4013      	ands	r3, r2
 8008236:	42b3      	cmp	r3, r6
 8008238:	d015      	beq.n	8008266 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 800823a:	0324      	lsls	r4, r4, #12
 800823c:	0231      	lsls	r1, r6, #8
 800823e:	4321      	orrs	r1, r4
 8008240:	b289      	uxth	r1, r1
 8008242:	230e      	movs	r3, #14
 8008244:	446b      	add	r3, sp
 8008246:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008248:	0028      	movs	r0, r5
 800824a:	f7ff fac9 	bl	80077e0 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 800824e:	1c68      	adds	r0, r5, #1
 8008250:	2100      	movs	r1, #0
 8008252:	f7ff fac5 	bl	80077e0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8008256:	1ca8      	adds	r0, r5, #2
 8008258:	2100      	movs	r1, #0
 800825a:	f7ff fac1 	bl	80077e0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 800825e:	1ce8      	adds	r0, r5, #3
 8008260:	2100      	movs	r1, #0
 8008262:	f7ff fabd 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 8008266:	2000      	movs	r0, #0
 8008268:	b00d      	add	sp, #52	; 0x34
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800826c:	008d      	lsls	r5, r1, #2
 800826e:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <AddPortButton+0x11c>)
 8008270:	58e8      	ldr	r0, [r5, r3]
 8008272:	f005 fa2b 	bl	800d6cc <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <AddPortButton+0x120>)
 8008278:	58e8      	ldr	r0, [r5, r3]
 800827a:	f005 fa27 	bl	800d6cc <osSemaphoreRelease>
 800827e:	e79d      	b.n	80081bc <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008280:	0020      	movs	r0, r4
 8008282:	f005 f889 	bl	800d398 <GetUart>
 8008286:	f009 fe48 	bl	8011f1a <HAL_UART_DeInit>
 800828a:	e79e      	b.n	80081ca <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 800828c:	0324      	lsls	r4, r4, #12
 800828e:	0231      	lsls	r1, r6, #8
 8008290:	4321      	orrs	r1, r4
 8008292:	b289      	uxth	r1, r1
 8008294:	230e      	movs	r3, #14
 8008296:	446b      	add	r3, sp
 8008298:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800829a:	0028      	movs	r0, r5
 800829c:	f7ff faa0 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80082a0:	1c68      	adds	r0, r5, #1
 80082a2:	2100      	movs	r1, #0
 80082a4:	f7ff fa9c 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80082a8:	1ca8      	adds	r0, r5, #2
 80082aa:	2100      	movs	r1, #0
 80082ac:	f7ff fa98 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80082b0:	1ce8      	adds	r0, r5, #3
 80082b2:	2100      	movs	r1, #0
 80082b4:	f7ff fa94 	bl	80077e0 <EE_WriteVariable>
 80082b8:	e7d5      	b.n	8008266 <AddPortButton+0xba>
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	20000a75 	.word	0x20000a75
 80082c0:	200010f8 	.word	0x200010f8
 80082c4:	2000151c 	.word	0x2000151c
 80082c8:	20006a60 	.word	0x20006a60
 80082cc:	20006a44 	.word	0x20006a44

080082d0 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 80082d6:	4837      	ldr	r0, [pc, #220]	; (80083b4 <RemovePortButton+0xe4>)
 80082d8:	00e9      	lsls	r1, r5, #3
 80082da:	1949      	adds	r1, r1, r5
 80082dc:	1842      	adds	r2, r0, r1
 80082de:	2300      	movs	r3, #0
 80082e0:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 80082e2:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 80082e4:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 80082e6:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 80082e8:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 80082ea:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 80082ec:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 80082ee:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 80082f0:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80082f2:	002c      	movs	r4, r5
 80082f4:	343a      	adds	r4, #58	; 0x3a
 80082f6:	00a4      	lsls	r4, r4, #2
 80082f8:	466b      	mov	r3, sp
 80082fa:	1d99      	adds	r1, r3, #6
 80082fc:	0020      	movs	r0, r4
 80082fe:	f7ff fa3f 	bl	8007780 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 8008302:	2800      	cmp	r0, #0
 8008304:	d02b      	beq.n	800835e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 8008306:	0028      	movs	r0, r5
 8008308:	f005 f846 	bl	800d398 <GetUart>
 800830c:	0006      	movs	r6, r0
	
	if(huart->Instance == USART1){
 800830e:	6803      	ldr	r3, [r0, #0]
 8008310:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <RemovePortButton+0xe8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d034      	beq.n	8008380 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 8008316:	4a29      	ldr	r2, [pc, #164]	; (80083bc <RemovePortButton+0xec>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d035      	beq.n	8008388 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 800831c:	4a28      	ldr	r2, [pc, #160]	; (80083c0 <RemovePortButton+0xf0>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d036      	beq.n	8008390 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 8008322:	4a28      	ldr	r2, [pc, #160]	; (80083c4 <RemovePortButton+0xf4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d037      	beq.n	8008398 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008328:	4a27      	ldr	r2, [pc, #156]	; (80083c8 <RemovePortButton+0xf8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d038      	beq.n	80083a0 <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 800832e:	4a27      	ldr	r2, [pc, #156]	; (80083cc <RemovePortButton+0xfc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d039      	beq.n	80083a8 <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 8008334:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <RemovePortButton+0x100>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d03a      	beq.n	80083b0 <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 800833a:	4a26      	ldr	r2, [pc, #152]	; (80083d4 <RemovePortButton+0x104>)
 800833c:	4694      	mov	ip, r2
 800833e:	4463      	add	r3, ip
 8008340:	1e5c      	subs	r4, r3, #1
 8008342:	41a3      	sbcs	r3, r4
 8008344:	425c      	negs	r4, r3
 8008346:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 8008348:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <RemovePortButton+0x108>)
 800834a:	2200      	movs	r2, #0
 800834c:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 800834e:	3201      	adds	r2, #1
 8008350:	4922      	ldr	r1, [pc, #136]	; (80083dc <RemovePortButton+0x10c>)
 8008352:	0030      	movs	r0, r6
 8008354:	f009 fe3a 	bl	8011fcc <HAL_UART_Receive_IT>
	
	return result;
}
 8008358:	0020      	movs	r0, r4
 800835a:	b002      	add	sp, #8
 800835c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 800835e:	2100      	movs	r1, #0
 8008360:	0020      	movs	r0, r4
 8008362:	f7ff fa3d 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008366:	1c60      	adds	r0, r4, #1
 8008368:	2100      	movs	r1, #0
 800836a:	f7ff fa39 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800836e:	1ca0      	adds	r0, r4, #2
 8008370:	2100      	movs	r1, #0
 8008372:	f7ff fa35 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008376:	1ce0      	adds	r0, r4, #3
 8008378:	2100      	movs	r1, #0
 800837a:	f7ff fa31 	bl	80077e0 <EE_WriteVariable>
 800837e:	e7c2      	b.n	8008306 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008380:	f004 fe42 	bl	800d008 <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 8008384:	2400      	movs	r4, #0
 8008386:	e7df      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008388:	f004 fe56 	bl	800d038 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 800838c:	2400      	movs	r4, #0
 800838e:	e7db      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008390:	f004 fe6a 	bl	800d068 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 8008394:	2400      	movs	r4, #0
 8008396:	e7d7      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008398:	f004 fe7e 	bl	800d098 <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 800839c:	2400      	movs	r4, #0
 800839e:	e7d3      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 80083a0:	f004 fe92 	bl	800d0c8 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 80083a4:	2400      	movs	r4, #0
 80083a6:	e7cf      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80083a8:	f004 fea6 	bl	800d0f8 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 80083ac:	2400      	movs	r4, #0
 80083ae:	e7cb      	b.n	8008348 <RemovePortButton+0x78>
 80083b0:	2400      	movs	r4, #0
 80083b2:	e7c9      	b.n	8008348 <RemovePortButton+0x78>
 80083b4:	2000151c 	.word	0x2000151c
 80083b8:	40013800 	.word	0x40013800
 80083bc:	40004400 	.word	0x40004400
 80083c0:	40004800 	.word	0x40004800
 80083c4:	40004c00 	.word	0x40004c00
 80083c8:	40005000 	.word	0x40005000
 80083cc:	40011400 	.word	0x40011400
 80083d0:	40011800 	.word	0x40011800
 80083d4:	bffee400 	.word	0xbffee400
 80083d8:	200010f8 	.word	0x200010f8
 80083dc:	20000e58 	.word	0x20000e58

080083e0 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 80083e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e2:	46de      	mov	lr, fp
 80083e4:	4657      	mov	r7, sl
 80083e6:	464e      	mov	r6, r9
 80083e8:	4645      	mov	r5, r8
 80083ea:	b5e0      	push	{r5, r6, r7, lr}
 80083ec:	b085      	sub	sp, #20
 80083ee:	0007      	movs	r7, r0
 80083f0:	001e      	movs	r6, r3
 80083f2:	ab0e      	add	r3, sp, #56	; 0x38
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	4698      	mov	r8, r3
 80083f8:	ab0f      	add	r3, sp, #60	; 0x3c
 80083fa:	781d      	ldrb	r5, [r3, #0]
 80083fc:	ab10      	add	r3, sp, #64	; 0x40
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	469b      	mov	fp, r3
 8008402:	ab11      	add	r3, sp, #68	; 0x44
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	469a      	mov	sl, r3
 8008408:	ab12      	add	r3, sp, #72	; 0x48
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	4699      	mov	r9, r3
 800840e:	ab13      	add	r3, sp, #76	; 0x4c
 8008410:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 8008412:	00fc      	lsls	r4, r7, #3
 8008414:	19e4      	adds	r4, r4, r7
 8008416:	4b9e      	ldr	r3, [pc, #632]	; (8008690 <SetButtonEvents+0x2b0>)
 8008418:	191b      	adds	r3, r3, r4
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d04c      	beq.n	80084ba <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008420:	00fc      	lsls	r4, r7, #3
 8008422:	19e4      	adds	r4, r4, r7
 8008424:	4b9a      	ldr	r3, [pc, #616]	; (8008690 <SetButtonEvents+0x2b0>)
 8008426:	191b      	adds	r3, r3, r4
 8008428:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 800842a:	4644      	mov	r4, r8
 800842c:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 800842e:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008430:	465c      	mov	r4, fp
 8008432:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008434:	4654      	mov	r4, sl
 8008436:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 8008438:	464c      	mov	r4, r9
 800843a:	71dc      	strb	r4, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 800843c:	2801      	cmp	r0, #1
 800843e:	d003      	beq.n	8008448 <SetButtonEvents+0x68>
 8008440:	2800      	cmp	r0, #0
 8008442:	d113      	bne.n	800846c <SetButtonEvents+0x8c>
 8008444:	2900      	cmp	r1, #0
 8008446:	d042      	beq.n	80084ce <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008448:	00f9      	lsls	r1, r7, #3
 800844a:	19c9      	adds	r1, r1, r7
 800844c:	4b90      	ldr	r3, [pc, #576]	; (8008690 <SetButtonEvents+0x2b0>)
 800844e:	185b      	adds	r3, r3, r1
 8008450:	7a19      	ldrb	r1, [r3, #8]
 8008452:	2401      	movs	r4, #1
 8008454:	4321      	orrs	r1, r4
 8008456:	7219      	strb	r1, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008458:	2801      	cmp	r0, #1
 800845a:	d10c      	bne.n	8008476 <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800845c:	00fa      	lsls	r2, r7, #3
 800845e:	19d2      	adds	r2, r2, r7
 8008460:	4b8b      	ldr	r3, [pc, #556]	; (8008690 <SetButtonEvents+0x2b0>)
 8008462:	189b      	adds	r3, r3, r2
 8008464:	7a1a      	ldrb	r2, [r3, #8]
 8008466:	2102      	movs	r1, #2
 8008468:	430a      	orrs	r2, r1
 800846a:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 800846c:	2801      	cmp	r0, #1
 800846e:	d042      	beq.n	80084f6 <SetButtonEvents+0x116>
 8008470:	2800      	cmp	r0, #0
 8008472:	d152      	bne.n	800851a <SetButtonEvents+0x13a>
 8008474:	e03d      	b.n	80084f2 <SetButtonEvents+0x112>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008476:	2800      	cmp	r0, #0
 8008478:	d031      	beq.n	80084de <SetButtonEvents+0xfe>
 800847a:	e044      	b.n	8008506 <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 800847c:	2800      	cmp	r0, #0
 800847e:	d059      	beq.n	8008534 <SetButtonEvents+0x154>
 8008480:	e06d      	b.n	800855e <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008482:	2800      	cmp	r0, #0
 8008484:	d100      	bne.n	8008488 <SetButtonEvents+0xa8>
 8008486:	e082      	b.n	800858e <SetButtonEvents+0x1ae>
 8008488:	e097      	b.n	80085ba <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 800848a:	2800      	cmp	r0, #0
 800848c:	d100      	bne.n	8008490 <SetButtonEvents+0xb0>
 800848e:	e0f2      	b.n	8008676 <SetButtonEvents+0x296>
 8008490:	e09f      	b.n	80085d2 <SetButtonEvents+0x1f2>
	if(!res)											// This variable exists
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008492:	0a19      	lsrs	r1, r3, #8
 8008494:	0209      	lsls	r1, r1, #8
 8008496:	4311      	orrs	r1, r2
 8008498:	ab02      	add	r3, sp, #8
 800849a:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800849c:	0020      	movs	r0, r4
 800849e:	f7ff f99f 	bl	80077e0 <EE_WriteVariable>
 80084a2:	e0ad      	b.n	8008600 <SetButtonEvents+0x220>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 80084a4:	0019      	movs	r1, r3
 80084a6:	9801      	ldr	r0, [sp, #4]
 80084a8:	f7ff f99a 	bl	80077e0 <EE_WriteVariable>
 80084ac:	e0b7      	b.n	800861e <SetButtonEvents+0x23e>
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 80084ae:	4653      	mov	r3, sl
 80084b0:	4319      	orrs	r1, r3
 80084b2:	0030      	movs	r0, r6
 80084b4:	f7ff f994 	bl	80077e0 <EE_WriteVariable>
 80084b8:	e0c0      	b.n	800863c <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084ba:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
}
 80084bc:	b005      	add	sp, #20
 80084be:	bc3c      	pop	{r2, r3, r4, r5}
 80084c0:	4690      	mov	r8, r2
 80084c2:	4699      	mov	r9, r3
 80084c4:	46a2      	mov	sl, r4
 80084c6:	46ab      	mov	fp, r5
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084ca:	200b      	movs	r0, #11
 80084cc:	e7f6      	b.n	80084bc <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 80084ce:	00f9      	lsls	r1, r7, #3
 80084d0:	19c9      	adds	r1, r1, r7
 80084d2:	4b6f      	ldr	r3, [pc, #444]	; (8008690 <SetButtonEvents+0x2b0>)
 80084d4:	185b      	adds	r3, r3, r1
 80084d6:	7a19      	ldrb	r1, [r3, #8]
 80084d8:	2401      	movs	r4, #1
 80084da:	43a1      	bics	r1, r4
 80084dc:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 80084de:	2a00      	cmp	r2, #0
 80084e0:	d1bc      	bne.n	800845c <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 80084e2:	00fa      	lsls	r2, r7, #3
 80084e4:	19d2      	adds	r2, r2, r7
 80084e6:	4b6a      	ldr	r3, [pc, #424]	; (8008690 <SetButtonEvents+0x2b0>)
 80084e8:	189b      	adds	r3, r3, r2
 80084ea:	7a1a      	ldrb	r2, [r3, #8]
 80084ec:	2102      	movs	r1, #2
 80084ee:	438a      	bics	r2, r1
 80084f0:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d016      	beq.n	8008524 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80084f6:	00fa      	lsls	r2, r7, #3
 80084f8:	19d2      	adds	r2, r2, r7
 80084fa:	4b65      	ldr	r3, [pc, #404]	; (8008690 <SetButtonEvents+0x2b0>)
 80084fc:	189b      	adds	r3, r3, r2
 80084fe:	7a1a      	ldrb	r2, [r3, #8]
 8008500:	2104      	movs	r1, #4
 8008502:	430a      	orrs	r2, r1
 8008504:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008506:	2801      	cmp	r0, #1
 8008508:	d1b8      	bne.n	800847c <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800850a:	00fa      	lsls	r2, r7, #3
 800850c:	19d2      	adds	r2, r2, r7
 800850e:	4b60      	ldr	r3, [pc, #384]	; (8008690 <SetButtonEvents+0x2b0>)
 8008510:	189b      	adds	r3, r3, r2
 8008512:	7a1a      	ldrb	r2, [r3, #8]
 8008514:	2108      	movs	r1, #8
 8008516:	430a      	orrs	r2, r1
 8008518:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 800851a:	2801      	cmp	r0, #1
 800851c:	d017      	beq.n	800854e <SetButtonEvents+0x16e>
 800851e:	2800      	cmp	r0, #0
 8008520:	d128      	bne.n	8008574 <SetButtonEvents+0x194>
 8008522:	e012      	b.n	800854a <SetButtonEvents+0x16a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008524:	00fa      	lsls	r2, r7, #3
 8008526:	19d2      	adds	r2, r2, r7
 8008528:	4b59      	ldr	r3, [pc, #356]	; (8008690 <SetButtonEvents+0x2b0>)
 800852a:	189b      	adds	r3, r3, r2
 800852c:	7a1a      	ldrb	r2, [r3, #8]
 800852e:	2104      	movs	r1, #4
 8008530:	438a      	bics	r2, r1
 8008532:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008534:	4643      	mov	r3, r8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e7      	bne.n	800850a <SetButtonEvents+0x12a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800853a:	00fa      	lsls	r2, r7, #3
 800853c:	19d2      	adds	r2, r2, r7
 800853e:	4b54      	ldr	r3, [pc, #336]	; (8008690 <SetButtonEvents+0x2b0>)
 8008540:	189b      	adds	r3, r3, r2
 8008542:	7a1a      	ldrb	r2, [r3, #8]
 8008544:	2108      	movs	r1, #8
 8008546:	438a      	bics	r2, r1
 8008548:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 800854a:	2d00      	cmp	r5, #0
 800854c:	d017      	beq.n	800857e <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800854e:	00fa      	lsls	r2, r7, #3
 8008550:	19d2      	adds	r2, r2, r7
 8008552:	4b4f      	ldr	r3, [pc, #316]	; (8008690 <SetButtonEvents+0x2b0>)
 8008554:	189b      	adds	r3, r3, r2
 8008556:	7a1a      	ldrb	r2, [r3, #8]
 8008558:	2110      	movs	r1, #16
 800855a:	430a      	orrs	r2, r1
 800855c:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800855e:	2801      	cmp	r0, #1
 8008560:	d000      	beq.n	8008564 <SetButtonEvents+0x184>
 8008562:	e78e      	b.n	8008482 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008564:	00fa      	lsls	r2, r7, #3
 8008566:	19d2      	adds	r2, r2, r7
 8008568:	4b49      	ldr	r3, [pc, #292]	; (8008690 <SetButtonEvents+0x2b0>)
 800856a:	189b      	adds	r3, r3, r2
 800856c:	7a1a      	ldrb	r2, [r3, #8]
 800856e:	2120      	movs	r1, #32
 8008570:	430a      	orrs	r2, r1
 8008572:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008574:	2801      	cmp	r0, #1
 8008576:	d018      	beq.n	80085aa <SetButtonEvents+0x1ca>
 8008578:	2800      	cmp	r0, #0
 800857a:	d12a      	bne.n	80085d2 <SetButtonEvents+0x1f2>
 800857c:	e012      	b.n	80085a4 <SetButtonEvents+0x1c4>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800857e:	00fa      	lsls	r2, r7, #3
 8008580:	19d2      	adds	r2, r2, r7
 8008582:	4b43      	ldr	r3, [pc, #268]	; (8008690 <SetButtonEvents+0x2b0>)
 8008584:	189b      	adds	r3, r3, r2
 8008586:	7a1a      	ldrb	r2, [r3, #8]
 8008588:	2110      	movs	r1, #16
 800858a:	438a      	bics	r2, r1
 800858c:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800858e:	465b      	mov	r3, fp
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e7      	bne.n	8008564 <SetButtonEvents+0x184>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008594:	00fa      	lsls	r2, r7, #3
 8008596:	19d2      	adds	r2, r2, r7
 8008598:	4b3d      	ldr	r3, [pc, #244]	; (8008690 <SetButtonEvents+0x2b0>)
 800859a:	189b      	adds	r3, r3, r2
 800859c:	7a1a      	ldrb	r2, [r3, #8]
 800859e:	2120      	movs	r1, #32
 80085a0:	438a      	bics	r2, r1
 80085a2:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80085a4:	4653      	mov	r3, sl
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d05d      	beq.n	8008666 <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80085aa:	00fa      	lsls	r2, r7, #3
 80085ac:	19d2      	adds	r2, r2, r7
 80085ae:	4b38      	ldr	r3, [pc, #224]	; (8008690 <SetButtonEvents+0x2b0>)
 80085b0:	189b      	adds	r3, r3, r2
 80085b2:	7a1a      	ldrb	r2, [r3, #8]
 80085b4:	2140      	movs	r1, #64	; 0x40
 80085b6:	430a      	orrs	r2, r1
 80085b8:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 80085ba:	2801      	cmp	r0, #1
 80085bc:	d000      	beq.n	80085c0 <SetButtonEvents+0x1e0>
 80085be:	e764      	b.n	800848a <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80085c0:	00fa      	lsls	r2, r7, #3
 80085c2:	19d2      	adds	r2, r2, r7
 80085c4:	4b32      	ldr	r3, [pc, #200]	; (8008690 <SetButtonEvents+0x2b0>)
 80085c6:	189b      	adds	r3, r3, r2
 80085c8:	7a19      	ldrb	r1, [r3, #8]
 80085ca:	2280      	movs	r2, #128	; 0x80
 80085cc:	4252      	negs	r2, r2
 80085ce:	430a      	orrs	r2, r1
 80085d0:	721a      	strb	r2, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80085d2:	003c      	movs	r4, r7
 80085d4:	343a      	adds	r4, #58	; 0x3a
 80085d6:	00a4      	lsls	r4, r4, #2
 80085d8:	ab02      	add	r3, sp, #8
 80085da:	1d99      	adds	r1, r3, #6
 80085dc:	0020      	movs	r0, r4
 80085de:	f7ff f8cf 	bl	8007780 <EE_ReadVariable>
	if(!res)											// This variable exists
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d000      	beq.n	80085e8 <SetButtonEvents+0x208>
 80085e6:	e770      	b.n	80084ca <SetButtonEvents+0xea>
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 80085e8:	ab02      	add	r3, sp, #8
 80085ea:	3306      	adds	r3, #6
 80085ec:	881b      	ldrh	r3, [r3, #0]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80085ee:	00fa      	lsls	r2, r7, #3
 80085f0:	19d2      	adds	r2, r2, r7
 80085f2:	4f27      	ldr	r7, [pc, #156]	; (8008690 <SetButtonEvents+0x2b0>)
 80085f4:	18bf      	adds	r7, r7, r2
 80085f6:	7a3a      	ldrb	r2, [r7, #8]
 80085f8:	b2d9      	uxtb	r1, r3
 80085fa:	4291      	cmp	r1, r2
 80085fc:	d000      	beq.n	8008600 <SetButtonEvents+0x220>
 80085fe:	e748      	b.n	8008492 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 8008600:	1c63      	adds	r3, r4, #1
 8008602:	aa02      	add	r2, sp, #8
 8008604:	1d97      	adds	r7, r2, #6
 8008606:	0039      	movs	r1, r7
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	0018      	movs	r0, r3
 800860c:	f7ff f8b8 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 8008610:	0236      	lsls	r6, r6, #8
 8008612:	883a      	ldrh	r2, [r7, #0]
 8008614:	465b      	mov	r3, fp
 8008616:	4333      	orrs	r3, r6
 8008618:	429a      	cmp	r2, r3
 800861a:	d000      	beq.n	800861e <SetButtonEvents+0x23e>
 800861c:	e742      	b.n	80084a4 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 800861e:	1ca6      	adds	r6, r4, #2
 8008620:	ab02      	add	r3, sp, #8
 8008622:	1d9f      	adds	r7, r3, #6
 8008624:	0039      	movs	r1, r7
 8008626:	0030      	movs	r0, r6
 8008628:	f7ff f8aa 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 800862c:	4643      	mov	r3, r8
 800862e:	0219      	lsls	r1, r3, #8
 8008630:	883a      	ldrh	r2, [r7, #0]
 8008632:	4653      	mov	r3, sl
 8008634:	430b      	orrs	r3, r1
 8008636:	429a      	cmp	r2, r3
 8008638:	d000      	beq.n	800863c <SetButtonEvents+0x25c>
 800863a:	e738      	b.n	80084ae <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 800863c:	3403      	adds	r4, #3
 800863e:	ab02      	add	r3, sp, #8
 8008640:	1d9e      	adds	r6, r3, #6
 8008642:	0031      	movs	r1, r6
 8008644:	0020      	movs	r0, r4
 8008646:	f7ff f89b 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 800864a:	022d      	lsls	r5, r5, #8
 800864c:	8832      	ldrh	r2, [r6, #0]
 800864e:	464b      	mov	r3, r9
 8008650:	432b      	orrs	r3, r5
	return result;
 8008652:	2000      	movs	r0, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008654:	429a      	cmp	r2, r3
 8008656:	d100      	bne.n	800865a <SetButtonEvents+0x27a>
 8008658:	e730      	b.n	80084bc <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 800865a:	0019      	movs	r1, r3
 800865c:	0020      	movs	r0, r4
 800865e:	f7ff f8bf 	bl	80077e0 <EE_WriteVariable>
	return result;
 8008662:	2000      	movs	r0, #0
 8008664:	e72a      	b.n	80084bc <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008666:	00fa      	lsls	r2, r7, #3
 8008668:	19d2      	adds	r2, r2, r7
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <SetButtonEvents+0x2b0>)
 800866c:	189b      	adds	r3, r3, r2
 800866e:	7a1a      	ldrb	r2, [r3, #8]
 8008670:	2140      	movs	r1, #64	; 0x40
 8008672:	438a      	bics	r2, r1
 8008674:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008676:	464b      	mov	r3, r9
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1a1      	bne.n	80085c0 <SetButtonEvents+0x1e0>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800867c:	00fa      	lsls	r2, r7, #3
 800867e:	19d2      	adds	r2, r2, r7
 8008680:	4b03      	ldr	r3, [pc, #12]	; (8008690 <SetButtonEvents+0x2b0>)
 8008682:	189b      	adds	r3, r3, r2
 8008684:	7a19      	ldrb	r1, [r3, #8]
 8008686:	227f      	movs	r2, #127	; 0x7f
 8008688:	400a      	ands	r2, r1
 800868a:	721a      	strb	r2, [r3, #8]
 800868c:	e7a1      	b.n	80085d2 <SetButtonEvents+0x1f2>
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	2000151c 	.word	0x2000151c

08008694 <HAL_ADC_MspInit>:
		Error_Handler();
	}
	ADC_flag =1;
}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle){
 8008694:	b510      	push	{r4, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 800869a:	2214      	movs	r2, #20
 800869c:	2100      	movs	r1, #0
 800869e:	a803      	add	r0, sp, #12
 80086a0:	f00a fc8c 	bl	8012fbc <memset>
	if(adcHandle->Instance == ADC1){
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <HAL_ADC_MspInit+0x58>)
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d001      	beq.n	80086b0 <HAL_ADC_MspInit+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80086ac:	b008      	add	sp, #32
 80086ae:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80086b0:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <HAL_ADC_MspInit+0x5c>)
 80086b2:	6999      	ldr	r1, [r3, #24]
 80086b4:	2080      	movs	r0, #128	; 0x80
 80086b6:	0080      	lsls	r0, r0, #2
 80086b8:	4301      	orrs	r1, r0
 80086ba:	6199      	str	r1, [r3, #24]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	4002      	ands	r2, r0
 80086c0:	9201      	str	r2, [sp, #4]
 80086c2:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	2180      	movs	r1, #128	; 0x80
 80086c8:	0289      	lsls	r1, r1, #10
 80086ca:	430a      	orrs	r2, r1
 80086cc:	615a      	str	r2, [r3, #20]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	400b      	ands	r3, r1
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80086d6:	233c      	movs	r3, #60	; 0x3c
 80086d8:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086da:	3b39      	subs	r3, #57	; 0x39
 80086dc:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80086de:	3871      	subs	r0, #113	; 0x71
 80086e0:	38ff      	subs	r0, #255	; 0xff
 80086e2:	a903      	add	r1, sp, #12
 80086e4:	05c0      	lsls	r0, r0, #23
 80086e6:	f008 fac7 	bl	8010c78 <HAL_GPIO_Init>
}
 80086ea:	e7df      	b.n	80086ac <HAL_ADC_MspInit+0x18>
 80086ec:	40012400 	.word	0x40012400
 80086f0:	40021000 	.word	0x40021000

080086f4 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 80086f4:	6803      	ldr	r3, [r0, #0]
 80086f6:	4a0d      	ldr	r2, [pc, #52]	; (800872c <Get_channel+0x38>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 80086fc:	4a0c      	ldr	r2, [pc, #48]	; (8008730 <Get_channel+0x3c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d008      	beq.n	8008714 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 8008702:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <Get_channel+0x40>)
 8008706:	4299      	cmp	r1, r3
 8008708:	d00c      	beq.n	8008724 <Get_channel+0x30>
	else if(huart->Instance == USART2 && side == "bottom")
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <Get_channel+0x44>)
 800870c:	4299      	cmp	r1, r3
 800870e:	d1f8      	bne.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008710:	2003      	movs	r0, #3
 8008712:	e7f6      	b.n	8008702 <Get_channel+0xe>
	else if(huart->Instance == USART6 && side == "top")
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <Get_channel+0x40>)
 8008716:	4299      	cmp	r1, r3
 8008718:	d006      	beq.n	8008728 <Get_channel+0x34>
	else if(huart->Instance == USART6 && side == "bottom")
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <Get_channel+0x44>)
 800871c:	4299      	cmp	r1, r3
 800871e:	d1f0      	bne.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 8008720:	2005      	movs	r0, #5
 8008722:	e7ee      	b.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 8008724:	2002      	movs	r0, #2
 8008726:	e7ec      	b.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 8008728:	2004      	movs	r0, #4
 800872a:	e7ea      	b.n	8008702 <Get_channel+0xe>
 800872c:	40004400 	.word	0x40004400
 8008730:	40011400 	.word	0x40011400
 8008734:	0801835c 	.word	0x0801835c
 8008738:	08018360 	.word	0x08018360

0800873c <Error_Handler>:

void Error_Handler(void){
 800873c:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 800873e:	2064      	movs	r0, #100	; 0x64
 8008740:	f006 ffa4 	bl	800f68c <HAL_Delay>
	
}
 8008744:	bd10      	pop	{r4, pc}
	...

08008748 <MX_ADC_Init>:
void MX_ADC_Init(void){
 8008748:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800874a:	4811      	ldr	r0, [pc, #68]	; (8008790 <MX_ADC_Init+0x48>)
 800874c:	4b11      	ldr	r3, [pc, #68]	; (8008794 <MX_ADC_Init+0x4c>)
 800874e:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	061b      	lsls	r3, r3, #24
 8008754:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008756:	2300      	movs	r3, #0
 8008758:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800875a:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800875c:	2201      	movs	r2, #1
 800875e:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008760:	2104      	movs	r1, #4
 8008762:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008764:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008766:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008768:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 800876a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800876c:	21c2      	movs	r1, #194	; 0xc2
 800876e:	31ff      	adds	r1, #255	; 0xff
 8008770:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008772:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008774:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008776:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008778:	f007 f862 	bl	800f840 <HAL_ADC_Init>
 800877c:	2800      	cmp	r0, #0
 800877e:	d103      	bne.n	8008788 <MX_ADC_Init+0x40>
	ADC_flag =1;
 8008780:	4b05      	ldr	r3, [pc, #20]	; (8008798 <MX_ADC_Init+0x50>)
 8008782:	2201      	movs	r2, #1
 8008784:	701a      	strb	r2, [r3, #0]
}
 8008786:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008788:	f7ff ffd8 	bl	800873c <Error_Handler>
 800878c:	e7f8      	b.n	8008780 <MX_ADC_Init+0x38>
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	20006a7c 	.word	0x20006a7c
 8008794:	40012400 	.word	0x40012400
 8008798:	20001508 	.word	0x20001508

0800879c <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	0005      	movs	r5, r0
 80087a2:	000e      	movs	r6, r1
	if(0 == ADC_flag)
 80087a4:	4b4d      	ldr	r3, [pc, #308]	; (80088dc <ReadTempAndVref+0x140>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d100      	bne.n	80087ae <ReadTempAndVref+0x12>
 80087ac:	e087      	b.n	80088be <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80087ae:	494c      	ldr	r1, [pc, #304]	; (80088e0 <ReadTempAndVref+0x144>)
 80087b0:	2310      	movs	r3, #16
 80087b2:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	015b      	lsls	r3, r3, #5
 80087b8:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80087ba:	2301      	movs	r3, #1
 80087bc:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087be:	4849      	ldr	r0, [pc, #292]	; (80088e4 <ReadTempAndVref+0x148>)
 80087c0:	f007 f99e 	bl	800fb00 <HAL_ADC_ConfigChannel>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d000      	beq.n	80087ca <ReadTempAndVref+0x2e>
 80087c8:	e07c      	b.n	80088c4 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 80087ca:	4c46      	ldr	r4, [pc, #280]	; (80088e4 <ReadTempAndVref+0x148>)
 80087cc:	0020      	movs	r0, r4
 80087ce:	f007 f8df 	bl	800f990 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 80087d2:	2164      	movs	r1, #100	; 0x64
 80087d4:	0020      	movs	r0, r4
 80087d6:	f007 f92d 	bl	800fa34 <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 80087da:	0020      	movs	r0, r4
 80087dc:	f007 f98a 	bl	800faf4 <HAL_ADC_GetValue>
 80087e0:	4b41      	ldr	r3, [pc, #260]	; (80088e8 <ReadTempAndVref+0x14c>)
 80087e2:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 80087e4:	0400      	lsls	r0, r0, #16
 80087e6:	0c00      	lsrs	r0, r0, #16
 80087e8:	f7fa f930 	bl	8002a4c <__aeabi_i2d>
 80087ec:	4a3f      	ldr	r2, [pc, #252]	; (80088ec <ReadTempAndVref+0x150>)
 80087ee:	4b40      	ldr	r3, [pc, #256]	; (80088f0 <ReadTempAndVref+0x154>)
 80087f0:	f7f9 fb20 	bl	8001e34 <__aeabi_dmul>
 80087f4:	2200      	movs	r2, #0
 80087f6:	4b3f      	ldr	r3, [pc, #252]	; (80088f4 <ReadTempAndVref+0x158>)
 80087f8:	f7f8 ff12 	bl	8001620 <__aeabi_ddiv>
 80087fc:	4a3e      	ldr	r2, [pc, #248]	; (80088f8 <ReadTempAndVref+0x15c>)
 80087fe:	4b3f      	ldr	r3, [pc, #252]	; (80088fc <ReadTempAndVref+0x160>)
 8008800:	f7f9 fd8a 	bl	8002318 <__aeabi_dsub>
 8008804:	4a3e      	ldr	r2, [pc, #248]	; (8008900 <ReadTempAndVref+0x164>)
 8008806:	4b3f      	ldr	r3, [pc, #252]	; (8008904 <ReadTempAndVref+0x168>)
 8008808:	f7f8 ff0a 	bl	8001620 <__aeabi_ddiv>
 800880c:	2200      	movs	r2, #0
 800880e:	4b3e      	ldr	r3, [pc, #248]	; (8008908 <ReadTempAndVref+0x16c>)
 8008810:	f7f8 fbea 	bl	8000fe8 <__aeabi_dadd>
 8008814:	f7fa f9d8 	bl	8002bc8 <__aeabi_d2f>
 8008818:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800881a:	0020      	movs	r0, r4
 800881c:	f007 f8e8 	bl	800f9f0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008820:	492f      	ldr	r1, [pc, #188]	; (80088e0 <ReadTempAndVref+0x144>)
 8008822:	2310      	movs	r3, #16
 8008824:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008826:	4b39      	ldr	r3, [pc, #228]	; (800890c <ReadTempAndVref+0x170>)
 8008828:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800882a:	2301      	movs	r3, #1
 800882c:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800882e:	0020      	movs	r0, r4
 8008830:	f007 f966 	bl	800fb00 <HAL_ADC_ConfigChannel>
 8008834:	2800      	cmp	r0, #0
 8008836:	d148      	bne.n	80088ca <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008838:	4929      	ldr	r1, [pc, #164]	; (80088e0 <ReadTempAndVref+0x144>)
 800883a:	2311      	movs	r3, #17
 800883c:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800883e:	2380      	movs	r3, #128	; 0x80
 8008840:	015b      	lsls	r3, r3, #5
 8008842:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008844:	2305      	movs	r3, #5
 8008846:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008848:	4826      	ldr	r0, [pc, #152]	; (80088e4 <ReadTempAndVref+0x148>)
 800884a:	f007 f959 	bl	800fb00 <HAL_ADC_ConfigChannel>
 800884e:	2800      	cmp	r0, #0
 8008850:	d13e      	bne.n	80088d0 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 8008852:	4d24      	ldr	r5, [pc, #144]	; (80088e4 <ReadTempAndVref+0x148>)
 8008854:	0028      	movs	r0, r5
 8008856:	f007 f89b 	bl	800f990 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 800885a:	2164      	movs	r1, #100	; 0x64
 800885c:	0028      	movs	r0, r5
 800885e:	f007 f8e9 	bl	800fa34 <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008862:	0028      	movs	r0, r5
 8008864:	f007 f946 	bl	800faf4 <HAL_ADC_GetValue>
 8008868:	0004      	movs	r4, r0
 800886a:	4b29      	ldr	r3, [pc, #164]	; (8008910 <ReadTempAndVref+0x174>)
 800886c:	8018      	strh	r0, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 800886e:	4b29      	ldr	r3, [pc, #164]	; (8008914 <ReadTempAndVref+0x178>)
 8008870:	8818      	ldrh	r0, [r3, #0]
 8008872:	f7fa f8eb 	bl	8002a4c <__aeabi_i2d>
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <ReadTempAndVref+0x150>)
 8008878:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <ReadTempAndVref+0x154>)
 800887a:	f7f9 fadb 	bl	8001e34 <__aeabi_dmul>
 800887e:	9000      	str	r0, [sp, #0]
 8008880:	9101      	str	r1, [sp, #4]
 8008882:	0420      	lsls	r0, r4, #16
 8008884:	0c00      	lsrs	r0, r0, #16
 8008886:	f7fa f8e1 	bl	8002a4c <__aeabi_i2d>
 800888a:	0002      	movs	r2, r0
 800888c:	000b      	movs	r3, r1
 800888e:	9800      	ldr	r0, [sp, #0]
 8008890:	9901      	ldr	r1, [sp, #4]
 8008892:	f7f8 fec5 	bl	8001620 <__aeabi_ddiv>
 8008896:	f7fa f997 	bl	8002bc8 <__aeabi_d2f>
 800889a:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800889c:	0028      	movs	r0, r5
 800889e:	f007 f8a7 	bl	800f9f0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80088a2:	490f      	ldr	r1, [pc, #60]	; (80088e0 <ReadTempAndVref+0x144>)
 80088a4:	2311      	movs	r3, #17
 80088a6:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 80088a8:	4b18      	ldr	r3, [pc, #96]	; (800890c <ReadTempAndVref+0x170>)
 80088aa:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80088ac:	2301      	movs	r3, #1
 80088ae:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80088b0:	0028      	movs	r0, r5
 80088b2:	f007 f925 	bl	800fb00 <HAL_ADC_ConfigChannel>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d10d      	bne.n	80088d6 <ReadTempAndVref+0x13a>
}
 80088ba:	b002      	add	sp, #8
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 80088be:	f7ff ff43 	bl	8008748 <MX_ADC_Init>
 80088c2:	e774      	b.n	80087ae <ReadTempAndVref+0x12>
		Error_Handler();
 80088c4:	f7ff ff3a 	bl	800873c <Error_Handler>
 80088c8:	e77f      	b.n	80087ca <ReadTempAndVref+0x2e>
		Error_Handler();
 80088ca:	f7ff ff37 	bl	800873c <Error_Handler>
 80088ce:	e7b3      	b.n	8008838 <ReadTempAndVref+0x9c>
		Error_Handler();
 80088d0:	f7ff ff34 	bl	800873c <Error_Handler>
 80088d4:	e7bd      	b.n	8008852 <ReadTempAndVref+0xb6>
		Error_Handler();
 80088d6:	f7ff ff31 	bl	800873c <Error_Handler>
}
 80088da:	e7ee      	b.n	80088ba <ReadTempAndVref+0x11e>
 80088dc:	20001508 	.word	0x20001508
 80088e0:	200015a8 	.word	0x200015a8
 80088e4:	20006a7c 	.word	0x20006a7c
 80088e8:	2000150c 	.word	0x2000150c
 80088ec:	66666666 	.word	0x66666666
 80088f0:	400a6666 	.word	0x400a6666
 80088f4:	40affe00 	.word	0x40affe00
 80088f8:	28f5c28f 	.word	0x28f5c28f
 80088fc:	3ff68f5c 	.word	0x3ff68f5c
 8008900:	33333333 	.word	0x33333333
 8008904:	40113333 	.word	0x40113333
 8008908:	40390000 	.word	0x40390000
 800890c:	00001001 	.word	0x00001001
 8008910:	2000150a 	.word	0x2000150a
 8008914:	1ffff7ba 	.word	0x1ffff7ba

08008918 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	0004      	movs	r4, r0
 800891e:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 8008920:	1e83      	subs	r3, r0, #2
 8008922:	2b01      	cmp	r3, #1
 8008924:	d901      	bls.n	800892a <GetReadPrecentage+0x12>
}
 8008926:	b006      	add	sp, #24
 8008928:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 800892a:	4b3e      	ldr	r3, [pc, #248]	; (8008a24 <GetReadPrecentage+0x10c>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d055      	beq.n	80089de <GetReadPrecentage+0xc6>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008932:	2090      	movs	r0, #144	; 0x90
 8008934:	2201      	movs	r2, #1
 8008936:	2110      	movs	r1, #16
 8008938:	05c0      	lsls	r0, r0, #23
 800893a:	f008 fb11 	bl	8010f60 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 800893e:	0020      	movs	r0, r4
 8008940:	f004 fd2a 	bl	800d398 <GetUart>
 8008944:	4938      	ldr	r1, [pc, #224]	; (8008a28 <GetReadPrecentage+0x110>)
 8008946:	f7ff fed5 	bl	80086f4 <Get_channel>
 800894a:	4b38      	ldr	r3, [pc, #224]	; (8008a2c <GetReadPrecentage+0x114>)
 800894c:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 800894e:	4938      	ldr	r1, [pc, #224]	; (8008a30 <GetReadPrecentage+0x118>)
 8008950:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008952:	2380      	movs	r3, #128	; 0x80
 8008954:	015b      	lsls	r3, r3, #5
 8008956:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008958:	2301      	movs	r3, #1
 800895a:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800895c:	4835      	ldr	r0, [pc, #212]	; (8008a34 <GetReadPrecentage+0x11c>)
 800895e:	f007 f8cf 	bl	800fb00 <HAL_ADC_ConfigChannel>
 8008962:	2800      	cmp	r0, #0
 8008964:	d15b      	bne.n	8008a1e <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008966:	4c33      	ldr	r4, [pc, #204]	; (8008a34 <GetReadPrecentage+0x11c>)
 8008968:	0020      	movs	r0, r4
 800896a:	f007 f811 	bl	800f990 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 800896e:	2164      	movs	r1, #100	; 0x64
 8008970:	0020      	movs	r0, r4
 8008972:	f007 f85f 	bl	800fa34 <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008976:	0020      	movs	r0, r4
 8008978:	f007 f8bc 	bl	800faf4 <HAL_ADC_GetValue>
 800897c:	f7f8 faf4 	bl	8000f68 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008980:	f7fa f8d0 	bl	8002b24 <__aeabi_f2d>
 8008984:	4a2c      	ldr	r2, [pc, #176]	; (8008a38 <GetReadPrecentage+0x120>)
 8008986:	4b2d      	ldr	r3, [pc, #180]	; (8008a3c <GetReadPrecentage+0x124>)
 8008988:	f7f9 fa54 	bl	8001e34 <__aeabi_dmul>
 800898c:	2200      	movs	r2, #0
 800898e:	4b2c      	ldr	r3, [pc, #176]	; (8008a40 <GetReadPrecentage+0x128>)
 8008990:	f7f8 fe46 	bl	8001620 <__aeabi_ddiv>
 8008994:	f7fa f918 	bl	8002bc8 <__aeabi_d2f>
 8008998:	4b2a      	ldr	r3, [pc, #168]	; (8008a44 <GetReadPrecentage+0x12c>)
 800899a:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 800899c:	492a      	ldr	r1, [pc, #168]	; (8008a48 <GetReadPrecentage+0x130>)
 800899e:	f7f7 ffcd 	bl	800093c <__aeabi_fmul>
 80089a2:	f7fa f8bf 	bl	8002b24 <__aeabi_f2d>
 80089a6:	4a24      	ldr	r2, [pc, #144]	; (8008a38 <GetReadPrecentage+0x120>)
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <GetReadPrecentage+0x124>)
 80089aa:	f7f8 fe39 	bl	8001620 <__aeabi_ddiv>
 80089ae:	f7fa f90b 	bl	8002bc8 <__aeabi_d2f>
 80089b2:	4b26      	ldr	r3, [pc, #152]	; (8008a4c <GetReadPrecentage+0x134>)
 80089b4:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 80089b6:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 80089b8:	0020      	movs	r0, r4
 80089ba:	f007 f819 	bl	800f9f0 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 80089be:	491c      	ldr	r1, [pc, #112]	; (8008a30 <GetReadPrecentage+0x118>)
 80089c0:	4b1a      	ldr	r3, [pc, #104]	; (8008a2c <GetReadPrecentage+0x114>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 80089c6:	4b22      	ldr	r3, [pc, #136]	; (8008a50 <GetReadPrecentage+0x138>)
 80089c8:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089ca:	2301      	movs	r3, #1
 80089cc:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089ce:	0020      	movs	r0, r4
 80089d0:	f007 f896 	bl	800fb00 <HAL_ADC_ConfigChannel>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d0a6      	beq.n	8008926 <GetReadPrecentage+0xe>
			Error_Handler();
 80089d8:	f7ff feb0 	bl	800873c <Error_Handler>
 80089dc:	e7a3      	b.n	8008926 <GetReadPrecentage+0xe>
			MX_ADC_Init();
 80089de:	f7ff feb3 	bl	8008748 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 80089e2:	0020      	movs	r0, r4
 80089e4:	f004 fcd8 	bl	800d398 <GetUart>
 80089e8:	f009 fa97 	bl	8011f1a <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 80089ec:	2690      	movs	r6, #144	; 0x90
 80089ee:	05f6      	lsls	r6, r6, #23
 80089f0:	2110      	movs	r1, #16
 80089f2:	0030      	movs	r0, r6
 80089f4:	f008 fa20 	bl	8010e38 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 80089f8:	480e      	ldr	r0, [pc, #56]	; (8008a34 <GetReadPrecentage+0x11c>)
 80089fa:	f007 f925 	bl	800fc48 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 80089fe:	2310      	movs	r3, #16
 8008a00:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a02:	3b0f      	subs	r3, #15
 8008a04:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008a06:	3302      	adds	r3, #2
 8008a08:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008a0a:	a901      	add	r1, sp, #4
 8008a0c:	0030      	movs	r0, r6
 8008a0e:	f008 f933 	bl	8010c78 <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <GetReadPrecentage+0x13c>)
 8008a14:	191b      	adds	r3, r3, r4
 8008a16:	3b01      	subs	r3, #1
 8008a18:	2206      	movs	r2, #6
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	e789      	b.n	8008932 <GetReadPrecentage+0x1a>
			Error_Handler();
 8008a1e:	f7ff fe8d 	bl	800873c <Error_Handler>
 8008a22:	e7a0      	b.n	8008966 <GetReadPrecentage+0x4e>
 8008a24:	20001508 	.word	0x20001508
 8008a28:	08018360 	.word	0x08018360
 8008a2c:	20001518 	.word	0x20001518
 8008a30:	200015a8 	.word	0x200015a8
 8008a34:	20006a7c 	.word	0x20006a7c
 8008a38:	66666666 	.word	0x66666666
 8008a3c:	400a6666 	.word	0x400a6666
 8008a40:	40affe00 	.word	0x40affe00
 8008a44:	2000156c 	.word	0x2000156c
 8008a48:	42c80000 	.word	0x42c80000
 8008a4c:	2000155c 	.word	0x2000155c
 8008a50:	00001001 	.word	0x00001001
 8008a54:	200010f8 	.word	0x200010f8

08008a58 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008a58:	2802      	cmp	r0, #2
 8008a5a:	d004      	beq.n	8008a66 <Get_Rank+0xe>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008a5c:	2803      	cmp	r0, #3
 8008a5e:	d010      	beq.n	8008a82 <Get_Rank+0x2a>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
 8008a60:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <Get_Rank+0x48>)
 8008a62:	7818      	ldrb	r0, [r3, #0]
}
 8008a64:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <Get_Rank+0x4c>)
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	d006      	beq.n	8008a7a <Get_Rank+0x22>
	else if(Port == 2 && side == "bottom")
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <Get_Rank+0x50>)
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	d1f6      	bne.n	8008a60 <Get_Rank+0x8>
		Rank_t =1;
 8008a72:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <Get_Rank+0x48>)
 8008a74:	2201      	movs	r2, #1
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e7f2      	b.n	8008a60 <Get_Rank+0x8>
		Rank_t =0;
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <Get_Rank+0x48>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e7ee      	b.n	8008a60 <Get_Rank+0x8>
	else if(Port == 3 && side == "top")
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <Get_Rank+0x4c>)
 8008a84:	4299      	cmp	r1, r3
 8008a86:	d006      	beq.n	8008a96 <Get_Rank+0x3e>
	else if(Port == 3 && side == "bottom")
 8008a88:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <Get_Rank+0x50>)
 8008a8a:	4299      	cmp	r1, r3
 8008a8c:	d1e8      	bne.n	8008a60 <Get_Rank+0x8>
		Rank_t =3;
 8008a8e:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <Get_Rank+0x48>)
 8008a90:	2203      	movs	r2, #3
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e7e4      	b.n	8008a60 <Get_Rank+0x8>
		Rank_t =2;
 8008a96:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <Get_Rank+0x48>)
 8008a98:	2202      	movs	r2, #2
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	e7e0      	b.n	8008a60 <Get_Rank+0x8>
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	20001519 	.word	0x20001519
 8008aa4:	0801835c 	.word	0x0801835c
 8008aa8:	08018360 	.word	0x08018360

08008aac <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	0004      	movs	r4, r0
 8008ab0:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008ab2:	1e83      	subs	r3, r0, #2
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d900      	bls.n	8008aba <ADCSelectChannel+0xe>
}
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008aba:	f004 fc6d 	bl	800d398 <GetUart>
 8008abe:	f009 fa2c 	bl	8011f1a <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <ADCSelectChannel+0x4c>)
 8008ac4:	191b      	adds	r3, r3, r4
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	2206      	movs	r2, #6
 8008aca:	701a      	strb	r2, [r3, #0]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008acc:	0020      	movs	r0, r4
 8008ace:	f004 fc63 	bl	800d398 <GetUart>
 8008ad2:	0029      	movs	r1, r5
 8008ad4:	f7ff fe0e 	bl	80086f4 <Get_channel>
 8008ad8:	4b08      	ldr	r3, [pc, #32]	; (8008afc <ADCSelectChannel+0x50>)
 8008ada:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008adc:	0029      	movs	r1, r5
 8008ade:	0020      	movs	r0, r4
 8008ae0:	f7ff ffba 	bl	8008a58 <Get_Rank>
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <ADCSelectChannel+0x54>)
 8008ae6:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <ADCSelectChannel+0x58>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e3      	bne.n	8008ab8 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008af0:	f7ff fe2a 	bl	8008748 <MX_ADC_Init>
}
 8008af4:	e7e0      	b.n	8008ab8 <ADCSelectChannel+0xc>
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	200010f8 	.word	0x200010f8
 8008afc:	20001518 	.word	0x20001518
 8008b00:	20001519 	.word	0x20001519
 8008b04:	20001508 	.word	0x20001508

08008b08 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	0005      	movs	r5, r0
 8008b0c:	000e      	movs	r6, r1
 8008b0e:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008b10:	4b26      	ldr	r3, [pc, #152]	; (8008bac <ReadADCChannel+0xa4>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d008      	beq.n	8008b2a <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008b18:	4b25      	ldr	r3, [pc, #148]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	4a25      	ldr	r2, [pc, #148]	; (8008bb4 <ReadADCChannel+0xac>)
 8008b20:	5a98      	ldrh	r0, [r3, r2]
 8008b22:	f7f8 fa21 	bl	8000f68 <__aeabi_ui2f>
 8008b26:	6020      	str	r0, [r4, #0]
}
 8008b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008b2a:	f004 fc35 	bl	800d398 <GetUart>
 8008b2e:	0031      	movs	r1, r6
 8008b30:	f7ff fde0 	bl	80086f4 <Get_channel>
 8008b34:	4f20      	ldr	r7, [pc, #128]	; (8008bb8 <ReadADCChannel+0xb0>)
 8008b36:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8008b38:	0031      	movs	r1, r6
 8008b3a:	0028      	movs	r0, r5
 8008b3c:	f7ff ff8c 	bl	8008a58 <Get_Rank>
 8008b40:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b42:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008b44:	491d      	ldr	r1, [pc, #116]	; (8008bbc <ReadADCChannel+0xb4>)
 8008b46:	783b      	ldrb	r3, [r7, #0]
 8008b48:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b4a:	2380      	movs	r3, #128	; 0x80
 8008b4c:	015b      	lsls	r3, r3, #5
 8008b4e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b50:	2303      	movs	r3, #3
 8008b52:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b54:	481a      	ldr	r0, [pc, #104]	; (8008bc0 <ReadADCChannel+0xb8>)
 8008b56:	f006 ffd3 	bl	800fb00 <HAL_ADC_ConfigChannel>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d122      	bne.n	8008ba4 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008b5e:	4d18      	ldr	r5, [pc, #96]	; (8008bc0 <ReadADCChannel+0xb8>)
 8008b60:	0028      	movs	r0, r5
 8008b62:	f006 ff15 	bl	800f990 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008b66:	2164      	movs	r1, #100	; 0x64
 8008b68:	0028      	movs	r0, r5
 8008b6a:	f006 ff63 	bl	800fa34 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008b6e:	0028      	movs	r0, r5
 8008b70:	f006 ffc0 	bl	800faf4 <HAL_ADC_GetValue>
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	4a0e      	ldr	r2, [pc, #56]	; (8008bb4 <ReadADCChannel+0xac>)
 8008b7c:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008b7e:	0028      	movs	r0, r5
 8008b80:	f006 ff36 	bl	800f9f0 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008b84:	490d      	ldr	r1, [pc, #52]	; (8008bbc <ReadADCChannel+0xb4>)
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <ReadADCChannel+0xb0>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <ReadADCChannel+0xbc>)
 8008b8e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b90:	2303      	movs	r3, #3
 8008b92:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b94:	0028      	movs	r0, r5
 8008b96:	f006 ffb3 	bl	800fb00 <HAL_ADC_ConfigChannel>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0bc      	beq.n	8008b18 <ReadADCChannel+0x10>
			Error_Handler();
 8008b9e:	f7ff fdcd 	bl	800873c <Error_Handler>
 8008ba2:	e7b9      	b.n	8008b18 <ReadADCChannel+0x10>
			Error_Handler();
 8008ba4:	f7ff fdca 	bl	800873c <Error_Handler>
 8008ba8:	e7d9      	b.n	8008b5e <ReadADCChannel+0x56>
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	20001508 	.word	0x20001508
 8008bb0:	20001519 	.word	0x20001519
 8008bb4:	20001510 	.word	0x20001510
 8008bb8:	20001518 	.word	0x20001518
 8008bbc:	200015a8 	.word	0x200015a8
 8008bc0:	20006a7c 	.word	0x20006a7c
 8008bc4:	00001001 	.word	0x00001001

08008bc8 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8008bc8:	4770      	bx	lr

08008bca <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8008bca:	4770      	bx	lr

08008bcc <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8008bcc:	4770      	bx	lr

08008bce <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8008bce:	4770      	bx	lr

08008bd0 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 8008bd0:	4770      	bx	lr
	...

08008bd4 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd6:	46de      	mov	lr, fp
 8008bd8:	4657      	mov	r7, sl
 8008bda:	464e      	mov	r6, r9
 8008bdc:	4645      	mov	r5, r8
 8008bde:	b5e0      	push	{r5, r6, r7, lr}
 8008be0:	b089      	sub	sp, #36	; 0x24
 8008be2:	4dbd      	ldr	r5, [pc, #756]	; (8008ed8 <CheckAttachedButtons+0x304>)
 8008be4:	3509      	adds	r5, #9
 8008be6:	2404      	movs	r4, #4
 8008be8:	2601      	movs	r6, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	469b      	mov	fp, r3
 8008bee:	4699      	mov	r9, r3
 8008bf0:	e111      	b.n	8008e16 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8008bf2:	230e      	movs	r3, #14
 8008bf4:	aa02      	add	r2, sp, #8
 8008bf6:	4694      	mov	ip, r2
 8008bf8:	4463      	add	r3, ip
 8008bfa:	8819      	ldrh	r1, [r3, #0]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	9807      	ldr	r0, [sp, #28]
 8008c00:	f008 f9ae 	bl	8010f60 <HAL_GPIO_WritePin>
				Delay_us(10);
 8008c04:	200a      	movs	r0, #10
 8008c06:	f004 f9db 	bl	800cfc0 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8008c0a:	ab05      	add	r3, sp, #20
 8008c0c:	8819      	ldrh	r1, [r3, #0]
 8008c0e:	9806      	ldr	r0, [sp, #24]
 8008c10:	f008 f9a0 	bl	8010f54 <HAL_GPIO_ReadPin>
 8008c14:	4681      	mov	r9, r0
 8008c16:	e126      	b.n	8008e66 <CheckAttachedButtons+0x292>
			switch(button[i].type){
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d105      	bne.n	8008c28 <CheckAttachedButtons+0x54>
					if(connected == GPIO_PIN_SET)
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d046      	beq.n	8008cb0 <CheckAttachedButtons+0xdc>
					else if(connected == GPIO_PIN_RESET)
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d100      	bne.n	8008c28 <CheckAttachedButtons+0x54>
 8008c26:	e1c5      	b.n	8008fb4 <CheckAttachedButtons+0x3e0>
			if(state == CLOSED || state == ON){
 8008c28:	465b      	mov	r3, fp
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d001      	beq.n	8008c32 <CheckAttachedButtons+0x5e>
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d107      	bne.n	8008c42 <CheckAttachedButtons+0x6e>
				if(pressCounter[i] < 0xFFFF)
 8008c32:	4baa      	ldr	r3, [pc, #680]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c34:	58e3      	ldr	r3, [r4, r3]
 8008c36:	4aaa      	ldr	r2, [pc, #680]	; (8008ee0 <CheckAttachedButtons+0x30c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d842      	bhi.n	8008cc2 <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	4aa7      	ldr	r2, [pc, #668]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c40:	50a3      	str	r3, [r4, r2]
			if(state == OPEN || state == OFF){
 8008c42:	23fd      	movs	r3, #253	; 0xfd
 8008c44:	465a      	mov	r2, fp
 8008c46:	4013      	ands	r3, r2
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d100      	bne.n	8008c4e <CheckAttachedButtons+0x7a>
 8008c4c:	e1b6      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
			if(pressCounter[i] < BOS.buttons.debounce){
 8008c4e:	4ba3      	ldr	r3, [pc, #652]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c50:	58e3      	ldr	r3, [r4, r3]
 8008c52:	4aa4      	ldr	r2, [pc, #656]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008c54:	8812      	ldrh	r2, [r2, #0]
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d36f      	bcc.n	8008d3a <CheckAttachedButtons+0x166>
				if(pressCounter[i] == BOS.buttons.debounce){
 8008c5a:	d045      	beq.n	8008ce8 <CheckAttachedButtons+0x114>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008c5c:	4ba2      	ldr	r3, [pc, #648]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008c5e:	58e3      	ldr	r3, [r4, r3]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d202      	bcs.n	8008c6a <CheckAttachedButtons+0x96>
					releaseCounter[i] =0;
 8008c64:	4ba0      	ldr	r3, [pc, #640]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	50e2      	str	r2, [r4, r3]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 8008c6a:	4b9c      	ldr	r3, [pc, #624]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c6c:	58e3      	ldr	r3, [r4, r3]
 8008c6e:	4a9d      	ldr	r2, [pc, #628]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008c70:	8852      	ldrh	r2, [r2, #2]
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d952      	bls.n	8008d1c <CheckAttachedButtons+0x148>
 8008c76:	22f4      	movs	r2, #244	; 0xf4
 8008c78:	32ff      	adds	r2, #255	; 0xff
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d84e      	bhi.n	8008d1c <CheckAttachedButtons+0x148>
					if(clicked == 0)
 8008c7e:	4b9b      	ldr	r3, [pc, #620]	; (8008eec <CheckAttachedButtons+0x318>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d137      	bne.n	8008cf6 <CheckAttachedButtons+0x122>
						clicked =1;		// Record a possible single click
 8008c86:	4b99      	ldr	r3, [pc, #612]	; (8008eec <CheckAttachedButtons+0x318>)
 8008c88:	3af3      	subs	r2, #243	; 0xf3
 8008c8a:	3aff      	subs	r2, #255	; 0xff
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	e054      	b.n	8008d3a <CheckAttachedButtons+0x166>
					if(connected == GPIO_PIN_SET)
 8008c90:	464b      	mov	r3, r9
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d00f      	beq.n	8008cb6 <CheckAttachedButtons+0xe2>
					else if(connected == GPIO_PIN_RESET)
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1c6      	bne.n	8008c28 <CheckAttachedButtons+0x54>
						state =OPEN;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	469b      	mov	fp, r3
 8008c9e:	e18d      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
					if(connected == GPIO_PIN_SET)
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d00a      	beq.n	8008cbc <CheckAttachedButtons+0xe8>
					else if(connected == GPIO_PIN_RESET)
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1be      	bne.n	8008c28 <CheckAttachedButtons+0x54>
						state =OFF;
 8008caa:	2301      	movs	r3, #1
 8008cac:	469b      	mov	fp, r3
 8008cae:	e185      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
						state =CLOSED;
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	469b      	mov	fp, r3
 8008cb4:	e7bd      	b.n	8008c32 <CheckAttachedButtons+0x5e>
						state =CLOSED;
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	469b      	mov	fp, r3
 8008cba:	e7ba      	b.n	8008c32 <CheckAttachedButtons+0x5e>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	469b      	mov	fp, r3
 8008cc0:	e7b7      	b.n	8008c32 <CheckAttachedButtons+0x5e>
					pressCounter[i] =0;			// Reset debounce counter
 8008cc2:	4b86      	ldr	r3, [pc, #536]	; (8008edc <CheckAttachedButtons+0x308>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	50e2      	str	r2, [r4, r3]
 8008cc8:	e7bb      	b.n	8008c42 <CheckAttachedButtons+0x6e>
					releaseCounter[i] =0;		// Reset debounce counter
 8008cca:	4b87      	ldr	r3, [pc, #540]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	50e2      	str	r2, [r4, r3]
 8008cd0:	e17d      	b.n	8008fce <CheckAttachedButtons+0x3fa>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008cd2:	4b87      	ldr	r3, [pc, #540]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008cd4:	5cf3      	ldrb	r3, [r6, r3]
 8008cd6:	4a83      	ldr	r2, [pc, #524]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008cd8:	7952      	ldrb	r2, [r2, #5]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d200      	bcs.n	8008ce0 <CheckAttachedButtons+0x10c>
 8008cde:	e182      	b.n	8008fe6 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	4a83      	ldr	r2, [pc, #524]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008ce4:	54b3      	strb	r3, [r6, r2]
 8008ce6:	e7b2      	b.n	8008c4e <CheckAttachedButtons+0x7a>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8008ce8:	2107      	movs	r1, #7
 8008cea:	4640      	mov	r0, r8
 8008cec:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 8008cee:	3301      	adds	r3, #1
 8008cf0:	497a      	ldr	r1, [pc, #488]	; (8008edc <CheckAttachedButtons+0x308>)
 8008cf2:	5063      	str	r3, [r4, r1]
 8008cf4:	e7b2      	b.n	8008c5c <CheckAttachedButtons+0x88>
					else if(clicked == 2){
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d11f      	bne.n	8008d3a <CheckAttachedButtons+0x166>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8008cfa:	4b7d      	ldr	r3, [pc, #500]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008cfc:	5cf3      	ldrb	r3, [r6, r3]
 8008cfe:	4a79      	ldr	r2, [pc, #484]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d00:	7912      	ldrb	r2, [r2, #4]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d219      	bcs.n	8008d3a <CheckAttachedButtons+0x166>
 8008d06:	4a77      	ldr	r2, [pc, #476]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d08:	7952      	ldrb	r2, [r2, #5]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d915      	bls.n	8008d3a <CheckAttachedButtons+0x166>
							clicked =3;	// Record a possible double click
 8008d0e:	4b77      	ldr	r3, [pc, #476]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d10:	2203      	movs	r2, #3
 8008d12:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 8008d14:	4b76      	ldr	r3, [pc, #472]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	54f2      	strb	r2, [r6, r3]
 8008d1a:	e00e      	b.n	8008d3a <CheckAttachedButtons+0x166>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 8008d1c:	3bf5      	subs	r3, #245	; 0xf5
 8008d1e:	3bff      	subs	r3, #255	; 0xff
 8008d20:	4a74      	ldr	r2, [pc, #464]	; (8008ef4 <CheckAttachedButtons+0x320>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d809      	bhi.n	8008d3a <CheckAttachedButtons+0x166>
					if(clicked)
 8008d26:	4b71      	ldr	r3, [pc, #452]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <CheckAttachedButtons+0x160>
						clicked =0;						// Cannot be a click
 8008d2e:	4b6f      	ldr	r3, [pc, #444]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8008d34:	9803      	ldr	r0, [sp, #12]
 8008d36:	f7ff f9bd 	bl	80080b4 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 8008d3a:	4b6b      	ldr	r3, [pc, #428]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008d3c:	58e3      	ldr	r3, [r4, r3]
 8008d3e:	4a69      	ldr	r2, [pc, #420]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d40:	8812      	ldrh	r2, [r2, #0]
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d34d      	bcc.n	8008de2 <CheckAttachedButtons+0x20e>
				if(releaseCounter[i] == BOS.buttons.debounce){
 8008d46:	d02b      	beq.n	8008da0 <CheckAttachedButtons+0x1cc>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008d48:	4b64      	ldr	r3, [pc, #400]	; (8008edc <CheckAttachedButtons+0x308>)
 8008d4a:	58e3      	ldr	r3, [r4, r3]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d202      	bcs.n	8008d56 <CheckAttachedButtons+0x182>
					pressCounter[i] =0;
 8008d50:	4b62      	ldr	r3, [pc, #392]	; (8008edc <CheckAttachedButtons+0x308>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	50e2      	str	r2, [r4, r3]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 8008d56:	4b64      	ldr	r3, [pc, #400]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008d58:	58e3      	ldr	r3, [r4, r3]
 8008d5a:	4a62      	ldr	r2, [pc, #392]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d5c:	8852      	ldrh	r2, [r2, #2]
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d93a      	bls.n	8008dd8 <CheckAttachedButtons+0x204>
 8008d62:	22f4      	movs	r2, #244	; 0xf4
 8008d64:	32ff      	adds	r2, #255	; 0xff
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d836      	bhi.n	8008dd8 <CheckAttachedButtons+0x204>
					if(clicked == 1){
 8008d6a:	4b60      	ldr	r3, [pc, #384]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d01d      	beq.n	8008dae <CheckAttachedButtons+0x1da>
					else if(clicked == 3){
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d135      	bne.n	8008de2 <CheckAttachedButtons+0x20e>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8008d76:	3303      	adds	r3, #3
 8008d78:	4642      	mov	r2, r8
 8008d7a:	7013      	strb	r3, [r2, #0]
						clicked =0;			// Prepare for a single click
 8008d7c:	4b5b      	ldr	r3, [pc, #364]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8008d82:	4b5d      	ldr	r3, [pc, #372]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d13f      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008d8a:	4643      	mov	r3, r8
 8008d8c:	7a1b      	ldrb	r3, [r3, #8]
 8008d8e:	079b      	lsls	r3, r3, #30
 8008d90:	d53b      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008d92:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008d94:	2201      	movs	r2, #1
 8008d96:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8008d98:	9803      	ldr	r0, [sp, #12]
 8008d9a:	f7ff ff17 	bl	8008bcc <buttonDblClickedCallback>
 8008d9e:	e034      	b.n	8008e0a <CheckAttachedButtons+0x236>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8008da0:	2108      	movs	r1, #8
 8008da2:	4640      	mov	r0, r8
 8008da4:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 8008da6:	3301      	adds	r3, #1
 8008da8:	494f      	ldr	r1, [pc, #316]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008daa:	5063      	str	r3, [r4, r1]
 8008dac:	e7cc      	b.n	8008d48 <CheckAttachedButtons+0x174>
						button[i].state =CLICKED;	// Record a single button click event
 8008dae:	3304      	adds	r3, #4
 8008db0:	4642      	mov	r2, r8
 8008db2:	7013      	strb	r3, [r2, #0]
						clicked =2;			// Prepare for a double click
 8008db4:	4b4d      	ldr	r3, [pc, #308]	; (8008eec <CheckAttachedButtons+0x318>)
 8008db6:	2202      	movs	r2, #2
 8008db8:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 8008dba:	4b4f      	ldr	r3, [pc, #316]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d123      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008dc2:	4643      	mov	r3, r8
 8008dc4:	7a1b      	ldrb	r3, [r3, #8]
 8008dc6:	07db      	lsls	r3, r3, #31
 8008dc8:	d51f      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008dca:	4b4b      	ldr	r3, [pc, #300]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8008dd0:	9803      	ldr	r0, [sp, #12]
 8008dd2:	f7ff fefa 	bl	8008bca <buttonClickedCallback>
 8008dd6:	e018      	b.n	8008e0a <CheckAttachedButtons+0x236>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 8008dd8:	3bf5      	subs	r3, #245	; 0xf5
 8008dda:	3bff      	subs	r3, #255	; 0xff
 8008ddc:	4a45      	ldr	r2, [pc, #276]	; (8008ef4 <CheckAttachedButtons+0x320>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d909      	bls.n	8008df6 <CheckAttachedButtons+0x222>
			switch(button[i].state){
 8008de2:	4643      	mov	r3, r8
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	3b05      	subs	r3, #5
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	2a09      	cmp	r2, #9
 8008dec:	d80d      	bhi.n	8008e0a <CheckAttachedButtons+0x236>
 8008dee:	0093      	lsls	r3, r2, #2
 8008df0:	4a42      	ldr	r2, [pc, #264]	; (8008efc <CheckAttachedButtons+0x328>)
 8008df2:	58d3      	ldr	r3, [r2, r3]
 8008df4:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008df6:	9803      	ldr	r0, [sp, #12]
 8008df8:	f7ff f99a 	bl	8008130 <CheckForTimedButtonRelease>
 8008dfc:	e7f1      	b.n	8008de2 <CheckAttachedButtons+0x20e>
					buttonPressedCallback(i);
 8008dfe:	9803      	ldr	r0, [sp, #12]
 8008e00:	f7ff f956 	bl	80080b0 <buttonPressedCallback>
					button[i].state =NONE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	4642      	mov	r2, r8
 8008e08:	7013      	strb	r3, [r2, #0]
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	3509      	adds	r5, #9
 8008e0e:	3404      	adds	r4, #4
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8008e10:	2c1c      	cmp	r4, #28
 8008e12:	d100      	bne.n	8008e16 <CheckAttachedButtons+0x242>
 8008e14:	e0ed      	b.n	8008ff2 <CheckAttachedButtons+0x41e>
 8008e16:	b2f3      	uxtb	r3, r6
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	46a8      	mov	r8, r5
		if(button[i].type)			// Only check defined butons
 8008e1c:	786b      	ldrb	r3, [r5, #1]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f3      	beq.n	8008e0a <CheckAttachedButtons+0x236>
			if(delayButtonStateReset == false)
 8008e22:	4b35      	ldr	r3, [pc, #212]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d100      	bne.n	8008e2c <CheckAttachedButtons+0x258>
				button[i].state =NONE;
 8008e2a:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008e2c:	230e      	movs	r3, #14
 8008e2e:	aa02      	add	r2, sp, #8
 8008e30:	4694      	mov	ip, r2
 8008e32:	4463      	add	r3, ip
 8008e34:	469a      	mov	sl, r3
 8008e36:	af05      	add	r7, sp, #20
 8008e38:	9700      	str	r7, [sp, #0]
 8008e3a:	ab06      	add	r3, sp, #24
 8008e3c:	4652      	mov	r2, sl
 8008e3e:	a907      	add	r1, sp, #28
 8008e40:	9803      	ldr	r0, [sp, #12]
 8008e42:	f003 fd2b 	bl	800c89c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008e46:	4653      	mov	r3, sl
 8008e48:	8819      	ldrh	r1, [r3, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	9807      	ldr	r0, [sp, #28]
 8008e4e:	f008 f887 	bl	8010f60 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008e52:	200a      	movs	r0, #10
 8008e54:	f004 f8b4 	bl	800cfc0 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 8008e58:	8839      	ldrh	r1, [r7, #0]
 8008e5a:	9806      	ldr	r0, [sp, #24]
 8008e5c:	f008 f87a 	bl	8010f54 <HAL_GPIO_ReadPin>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d100      	bne.n	8008e66 <CheckAttachedButtons+0x292>
 8008e64:	e6c5      	b.n	8008bf2 <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008e66:	230e      	movs	r3, #14
 8008e68:	aa02      	add	r2, sp, #8
 8008e6a:	4694      	mov	ip, r2
 8008e6c:	4463      	add	r3, ip
 8008e6e:	8819      	ldrh	r1, [r3, #0]
 8008e70:	2200      	movs	r2, #0
 8008e72:	9807      	ldr	r0, [sp, #28]
 8008e74:	f008 f874 	bl	8010f60 <HAL_GPIO_WritePin>
			switch(button[i].type){
 8008e78:	4643      	mov	r3, r8
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d100      	bne.n	8008e82 <CheckAttachedButtons+0x2ae>
 8008e80:	e706      	b.n	8008c90 <CheckAttachedButtons+0xbc>
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	2a02      	cmp	r2, #2
 8008e86:	d800      	bhi.n	8008e8a <CheckAttachedButtons+0x2b6>
 8008e88:	e6c6      	b.n	8008c18 <CheckAttachedButtons+0x44>
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d100      	bne.n	8008e90 <CheckAttachedButtons+0x2bc>
 8008e8e:	e707      	b.n	8008ca0 <CheckAttachedButtons+0xcc>
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d000      	beq.n	8008e96 <CheckAttachedButtons+0x2c2>
 8008e94:	e6c8      	b.n	8008c28 <CheckAttachedButtons+0x54>
					if(connected == GPIO_PIN_SET)
 8008e96:	464b      	mov	r3, r9
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d100      	bne.n	8008e9e <CheckAttachedButtons+0x2ca>
 8008e9c:	e08d      	b.n	8008fba <CheckAttachedButtons+0x3e6>
					else if(connected == GPIO_PIN_RESET)
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d000      	beq.n	8008ea4 <CheckAttachedButtons+0x2d0>
 8008ea2:	e6c1      	b.n	8008c28 <CheckAttachedButtons+0x54>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	469b      	mov	fp, r3
 8008ea8:	e6c3      	b.n	8008c32 <CheckAttachedButtons+0x5e>
					buttonReleasedCallback(i);
 8008eaa:	9803      	ldr	r0, [sp, #12]
 8008eac:	f7ff fe8c 	bl	8008bc8 <buttonReleasedCallback>
					button[i].state =NONE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	7013      	strb	r3, [r2, #0]
					break;
 8008eb6:	e7a8      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 8008eb8:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1a4      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008ec0:	4643      	mov	r3, r8
 8008ec2:	7a1b      	ldrb	r3, [r3, #8]
 8008ec4:	075b      	lsls	r3, r3, #29
 8008ec6:	d5a0      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008eca:	2201      	movs	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 8008ece:	2101      	movs	r1, #1
 8008ed0:	9803      	ldr	r0, [sp, #12]
 8008ed2:	f7ff fe7c 	bl	8008bce <buttonPressedForXCallback>
 8008ed6:	e798      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008ed8:	2000151c 	.word	0x2000151c
 8008edc:	20001570 	.word	0x20001570
 8008ee0:	0000fffe 	.word	0x0000fffe
 8008ee4:	200069c4 	.word	0x200069c4
 8008ee8:	2000158c 	.word	0x2000158c
 8008eec:	2000155b 	.word	0x2000155b
 8008ef0:	20001560 	.word	0x20001560
 8008ef4:	0000fe0a 	.word	0x0000fe0a
 8008ef8:	20001567 	.word	0x20001567
 8008efc:	0801a1e0 	.word	0x0801a1e0
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 8008f00:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d000      	beq.n	8008f0a <CheckAttachedButtons+0x336>
 8008f08:	e77f      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f0a:	4643      	mov	r3, r8
 8008f0c:	7a1b      	ldrb	r3, [r3, #8]
 8008f0e:	071b      	lsls	r3, r3, #28
 8008f10:	d400      	bmi.n	8008f14 <CheckAttachedButtons+0x340>
 8008f12:	e77a      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f14:	4b3a      	ldr	r3, [pc, #232]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	9803      	ldr	r0, [sp, #12]
 8008f1e:	f7ff fe56 	bl	8008bce <buttonPressedForXCallback>
 8008f22:	e772      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8008f24:	4b36      	ldr	r3, [pc, #216]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d000      	beq.n	8008f2e <CheckAttachedButtons+0x35a>
 8008f2c:	e76d      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f2e:	4643      	mov	r3, r8
 8008f30:	7a1b      	ldrb	r3, [r3, #8]
 8008f32:	06db      	lsls	r3, r3, #27
 8008f34:	d400      	bmi.n	8008f38 <CheckAttachedButtons+0x364>
 8008f36:	e768      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f38:	4b31      	ldr	r3, [pc, #196]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8008f3e:	2103      	movs	r1, #3
 8008f40:	9803      	ldr	r0, [sp, #12]
 8008f42:	f7ff fe44 	bl	8008bce <buttonPressedForXCallback>
 8008f46:	e760      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 8008f48:	4b2d      	ldr	r3, [pc, #180]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d000      	beq.n	8008f52 <CheckAttachedButtons+0x37e>
 8008f50:	e75b      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f52:	4643      	mov	r3, r8
 8008f54:	7a1b      	ldrb	r3, [r3, #8]
 8008f56:	069b      	lsls	r3, r3, #26
 8008f58:	d400      	bmi.n	8008f5c <CheckAttachedButtons+0x388>
 8008f5a:	e756      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f5c:	4b28      	ldr	r3, [pc, #160]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 8008f62:	2101      	movs	r1, #1
 8008f64:	9803      	ldr	r0, [sp, #12]
 8008f66:	f7ff fe33 	bl	8008bd0 <buttonReleasedForYCallback>
 8008f6a:	e74e      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 8008f6c:	4b24      	ldr	r3, [pc, #144]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d000      	beq.n	8008f76 <CheckAttachedButtons+0x3a2>
 8008f74:	e749      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f76:	4643      	mov	r3, r8
 8008f78:	7a1b      	ldrb	r3, [r3, #8]
 8008f7a:	065b      	lsls	r3, r3, #25
 8008f7c:	d400      	bmi.n	8008f80 <CheckAttachedButtons+0x3ac>
 8008f7e:	e744      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f80:	4b1f      	ldr	r3, [pc, #124]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f82:	2201      	movs	r2, #1
 8008f84:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8008f86:	2102      	movs	r1, #2
 8008f88:	9803      	ldr	r0, [sp, #12]
 8008f8a:	f7ff fe21 	bl	8008bd0 <buttonReleasedForYCallback>
 8008f8e:	e73c      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d000      	beq.n	8008f9a <CheckAttachedButtons+0x3c6>
 8008f98:	e737      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f9a:	4643      	mov	r3, r8
 8008f9c:	7a1b      	ldrb	r3, [r3, #8]
 8008f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008fa0:	d800      	bhi.n	8008fa4 <CheckAttachedButtons+0x3d0>
 8008fa2:	e732      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008fa4:	4b16      	ldr	r3, [pc, #88]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8008faa:	2103      	movs	r1, #3
 8008fac:	9803      	ldr	r0, [sp, #12]
 8008fae:	f7ff fe0f 	bl	8008bd0 <buttonReleasedForYCallback>
 8008fb2:	e72a      	b.n	8008e0a <CheckAttachedButtons+0x236>
						state =OPEN;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	469b      	mov	fp, r3
 8008fb8:	e000      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
						state =OFF;
 8008fba:	46cb      	mov	fp, r9
				if(releaseCounter[i] < 0xFFFF)
 8008fbc:	4b11      	ldr	r3, [pc, #68]	; (8009004 <CheckAttachedButtons+0x430>)
 8008fbe:	58e3      	ldr	r3, [r4, r3]
 8008fc0:	4a11      	ldr	r2, [pc, #68]	; (8009008 <CheckAttachedButtons+0x434>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d900      	bls.n	8008fc8 <CheckAttachedButtons+0x3f4>
 8008fc6:	e680      	b.n	8008cca <CheckAttachedButtons+0xf6>
					++releaseCounter[i];		// Advance the debounce counter
 8008fc8:	3301      	adds	r3, #1
 8008fca:	4a0e      	ldr	r2, [pc, #56]	; (8009004 <CheckAttachedButtons+0x430>)
 8008fcc:	50a3      	str	r3, [r4, r2]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <CheckAttachedButtons+0x438>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d100      	bne.n	8008fd8 <CheckAttachedButtons+0x404>
 8008fd6:	e67c      	b.n	8008cd2 <CheckAttachedButtons+0xfe>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <CheckAttachedButtons+0x43c>)
 8008fda:	5cf2      	ldrb	r2, [r6, r3]
 8008fdc:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <CheckAttachedButtons+0x440>)
 8008fde:	795b      	ldrb	r3, [r3, #5]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d800      	bhi.n	8008fe6 <CheckAttachedButtons+0x412>
 8008fe4:	e633      	b.n	8008c4e <CheckAttachedButtons+0x7a>
					clicked =0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4a08      	ldr	r2, [pc, #32]	; (800900c <CheckAttachedButtons+0x438>)
 8008fea:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 8008fec:	4a08      	ldr	r2, [pc, #32]	; (8009010 <CheckAttachedButtons+0x43c>)
 8008fee:	54b3      	strb	r3, [r6, r2]
 8008ff0:	e62d      	b.n	8008c4e <CheckAttachedButtons+0x7a>
}
 8008ff2:	b009      	add	sp, #36	; 0x24
 8008ff4:	bc3c      	pop	{r2, r3, r4, r5}
 8008ff6:	4690      	mov	r8, r2
 8008ff8:	4699      	mov	r9, r3
 8008ffa:	46a2      	mov	sl, r4
 8008ffc:	46ab      	mov	fp, r5
 8008ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009000:	20001567 	.word	0x20001567
 8009004:	2000158c 	.word	0x2000158c
 8009008:	0000fffe 	.word	0x0000fffe
 800900c:	2000155b 	.word	0x2000155b
 8009010:	20001560 	.word	0x20001560
 8009014:	200069c4 	.word	0x200069c4

08009018 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009018:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 800901a:	f006 f957 	bl	800f2cc <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800901e:	b2c4      	uxtb	r4, r0
 8009020:	0020      	movs	r0, r4
 8009022:	f7fe fa6b 	bl	80074fc <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009026:	0020      	movs	r0, r4
 8009028:	f7fe fa96 	bl	8007558 <SwitchStreamDMAToMsg>
}
 800902c:	bd10      	pop	{r4, pc}
	...

08009030 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	b085      	sub	sp, #20
 8009034:	000d      	movs	r5, r1
 8009036:	0014      	movs	r4, r2
 8009038:	220f      	movs	r2, #15
 800903a:	446a      	add	r2, sp
 800903c:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800903e:	aa0a      	add	r2, sp, #40	; 0x28
 8009040:	7812      	ldrb	r2, [r2, #0]
 8009042:	4293      	cmp	r3, r2
 8009044:	d058      	beq.n	80090f8 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009046:	2b00      	cmp	r3, #0
 8009048:	d100      	bne.n	800904c <SetupDMAStreams+0x1c>
 800904a:	e0be      	b.n	80091ca <SetupDMAStreams+0x19a>
 800904c:	2a00      	cmp	r2, #0
 800904e:	d100      	bne.n	8009052 <SetupDMAStreams+0x22>
 8009050:	e0bf      	b.n	80091d2 <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 8009052:	2800      	cmp	r0, #0
 8009054:	d055      	beq.n	8009102 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8009056:	2801      	cmp	r0, #1
 8009058:	d100      	bne.n	800905c <SetupDMAStreams+0x2c>
 800905a:	e08b      	b.n	8009174 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 800905c:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 800905e:	2802      	cmp	r0, #2
 8009060:	d000      	beq.n	8009064 <SetupDMAStreams+0x34>
 8009062:	e0b3      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009064:	0018      	movs	r0, r3
 8009066:	f004 f997 	bl	800d398 <GetUart>
 800906a:	0006      	movs	r6, r0
 800906c:	ab0a      	add	r3, sp, #40	; 0x28
 800906e:	7818      	ldrb	r0, [r3, #0]
 8009070:	f004 f992 	bl	800d398 <GetUart>
 8009074:	0001      	movs	r1, r0
 8009076:	2201      	movs	r2, #1
 8009078:	0030      	movs	r0, r6
 800907a:	f7fe fa9f 	bl	80075bc <StartDMAstream>
 800907e:	0002      	movs	r2, r0
 8009080:	2817      	cmp	r0, #23
 8009082:	d100      	bne.n	8009086 <SetupDMAStreams+0x56>
 8009084:	e0a2      	b.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009086:	0160      	lsls	r0, r4, #5
 8009088:	1b00      	subs	r0, r0, r4
 800908a:	0080      	lsls	r0, r0, #2
 800908c:	1900      	adds	r0, r0, r4
 800908e:	00c0      	lsls	r0, r0, #3
 8009090:	21fa      	movs	r1, #250	; 0xfa
 8009092:	0089      	lsls	r1, r1, #2
 8009094:	f7f7 f85c 	bl	8000150 <__udivsi3>
 8009098:	0004      	movs	r4, r0
 800909a:	260f      	movs	r6, #15
 800909c:	446e      	add	r6, sp
 800909e:	4b4e      	ldr	r3, [pc, #312]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	0033      	movs	r3, r6
 80090a4:	2200      	movs	r2, #0
 80090a6:	0001      	movs	r1, r0
 80090a8:	484c      	ldr	r0, [pc, #304]	; (80091dc <SetupDMAStreams+0x1ac>)
 80090aa:	f005 ffb3 	bl	800f014 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80090ae:	7833      	ldrb	r3, [r6, #0]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4a4a      	ldr	r2, [pc, #296]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80090b6:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80090b8:	ab0a      	add	r3, sp, #40	; 0x28
 80090ba:	7818      	ldrb	r0, [r3, #0]
 80090bc:	f004 f96c 	bl	800d398 <GetUart>
 80090c0:	0007      	movs	r7, r0
 80090c2:	7830      	ldrb	r0, [r6, #0]
 80090c4:	f004 f968 	bl	800d398 <GetUart>
 80090c8:	0001      	movs	r1, r0
 80090ca:	2201      	movs	r2, #1
 80090cc:	0038      	movs	r0, r7
 80090ce:	f7fe fa75 	bl	80075bc <StartDMAstream>
 80090d2:	0002      	movs	r2, r0
 80090d4:	2817      	cmp	r0, #23
 80090d6:	d079      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80090d8:	4b3f      	ldr	r3, [pc, #252]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	ab0a      	add	r3, sp, #40	; 0x28
 80090de:	2200      	movs	r2, #0
 80090e0:	0021      	movs	r1, r4
 80090e2:	483e      	ldr	r0, [pc, #248]	; (80091dc <SetupDMAStreams+0x1ac>)
 80090e4:	f005 ff96 	bl	800f014 <xTimerCreate>
 80090e8:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 80090ea:	ab0a      	add	r3, sp, #40	; 0x28
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4a3b      	ldr	r2, [pc, #236]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80090f4:	509d      	str	r5, [r3, r2]
 80090f6:	e02d      	b.n	8009154 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 80090f8:	4a3a      	ldr	r2, [pc, #232]	; (80091e4 <SetupDMAStreams+0x1b4>)
 80090fa:	2102      	movs	r1, #2
 80090fc:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80090fe:	2267      	movs	r2, #103	; 0x67
 8009100:	e064      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009102:	0018      	movs	r0, r3
 8009104:	f004 f948 	bl	800d398 <GetUart>
 8009108:	0006      	movs	r6, r0
 800910a:	ab0a      	add	r3, sp, #40	; 0x28
 800910c:	7818      	ldrb	r0, [r3, #0]
 800910e:	f004 f943 	bl	800d398 <GetUart>
 8009112:	0001      	movs	r1, r0
 8009114:	2201      	movs	r2, #1
 8009116:	0030      	movs	r0, r6
 8009118:	f7fe fa50 	bl	80075bc <StartDMAstream>
 800911c:	0002      	movs	r2, r0
 800911e:	2817      	cmp	r0, #23
 8009120:	d054      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009122:	260f      	movs	r6, #15
 8009124:	446e      	add	r6, sp
 8009126:	0160      	lsls	r0, r4, #5
 8009128:	1b00      	subs	r0, r0, r4
 800912a:	0080      	lsls	r0, r0, #2
 800912c:	1900      	adds	r0, r0, r4
 800912e:	00c0      	lsls	r0, r0, #3
 8009130:	21fa      	movs	r1, #250	; 0xfa
 8009132:	0089      	lsls	r1, r1, #2
 8009134:	f7f7 f80c 	bl	8000150 <__udivsi3>
 8009138:	0001      	movs	r1, r0
 800913a:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <SetupDMAStreams+0x1a8>)
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	0033      	movs	r3, r6
 8009140:	2200      	movs	r2, #0
 8009142:	4826      	ldr	r0, [pc, #152]	; (80091dc <SetupDMAStreams+0x1ac>)
 8009144:	f005 ff66 	bl	800f014 <xTimerCreate>
 8009148:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 800914a:	7833      	ldrb	r3, [r6, #0]
 800914c:	3b01      	subs	r3, #1
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a23      	ldr	r2, [pc, #140]	; (80091e0 <SetupDMAStreams+0x1b0>)
 8009152:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8009154:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 8009156:	2c00      	cmp	r4, #0
 8009158:	d038      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 800915a:	f005 f9f3 	bl	800e544 <xTaskGetTickCount>
 800915e:	0002      	movs	r2, r0
 8009160:	2301      	movs	r3, #1
 8009162:	425b      	negs	r3, r3
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	2300      	movs	r3, #0
 8009168:	2101      	movs	r1, #1
 800916a:	0020      	movs	r0, r4
 800916c:	f005 ff72 	bl	800f054 <xTimerGenericCommand>
	return BOS_OK;
 8009170:	2200      	movs	r2, #0
 8009172:	e02b      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009174:	0010      	movs	r0, r2
 8009176:	f004 f90f 	bl	800d398 <GetUart>
 800917a:	0006      	movs	r6, r0
 800917c:	230f      	movs	r3, #15
 800917e:	446b      	add	r3, sp
 8009180:	7818      	ldrb	r0, [r3, #0]
 8009182:	f004 f909 	bl	800d398 <GetUart>
 8009186:	0001      	movs	r1, r0
 8009188:	2201      	movs	r2, #1
 800918a:	0030      	movs	r0, r6
 800918c:	f7fe fa16 	bl	80075bc <StartDMAstream>
 8009190:	0002      	movs	r2, r0
 8009192:	2817      	cmp	r0, #23
 8009194:	d01a      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009196:	0160      	lsls	r0, r4, #5
 8009198:	1b00      	subs	r0, r0, r4
 800919a:	0080      	lsls	r0, r0, #2
 800919c:	1900      	adds	r0, r0, r4
 800919e:	00c0      	lsls	r0, r0, #3
 80091a0:	21fa      	movs	r1, #250	; 0xfa
 80091a2:	0089      	lsls	r1, r1, #2
 80091a4:	f7f6 ffd4 	bl	8000150 <__udivsi3>
 80091a8:	0001      	movs	r1, r0
 80091aa:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	ab0a      	add	r3, sp, #40	; 0x28
 80091b0:	2200      	movs	r2, #0
 80091b2:	480a      	ldr	r0, [pc, #40]	; (80091dc <SetupDMAStreams+0x1ac>)
 80091b4:	f005 ff2e 	bl	800f014 <xTimerCreate>
 80091b8:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80091ba:	230f      	movs	r3, #15
 80091bc:	446b      	add	r3, sp
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80091c6:	509d      	str	r5, [r3, r2]
 80091c8:	e7c4      	b.n	8009154 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 80091ca:	2267      	movs	r2, #103	; 0x67
}
 80091cc:	0010      	movs	r0, r2
 80091ce:	b005      	add	sp, #20
 80091d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80091d2:	2267      	movs	r2, #103	; 0x67
 80091d4:	e7fa      	b.n	80091cc <SetupDMAStreams+0x19c>
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	08009019 	.word	0x08009019
 80091dc:	0801a224 	.word	0x0801a224
 80091e0:	200014c0 	.word	0x200014c0
 80091e4:	200010f8 	.word	0x200010f8

080091e8 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 80091e8:	b510      	push	{r4, lr}
	switch(port){
 80091ea:	2806      	cmp	r0, #6
 80091ec:	d80a      	bhi.n	8009204 <NotifyMessagingTask+0x1c>
 80091ee:	0080      	lsls	r0, r0, #2
 80091f0:	4b19      	ldr	r3, [pc, #100]	; (8009258 <NotifyMessagingTask+0x70>)
 80091f2:	581b      	ldr	r3, [r3, r0]
 80091f4:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <NotifyMessagingTask+0x74>)
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	2300      	movs	r3, #0
 80091fc:	2202      	movs	r2, #2
 80091fe:	2100      	movs	r1, #0
 8009200:	f005 fe38 	bl	800ee74 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009204:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <NotifyMessagingTask+0x78>)
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	2202      	movs	r2, #2
 800920e:	2100      	movs	r1, #0
 8009210:	f005 fe30 	bl	800ee74 <xTaskGenericNotify>
			break;
 8009214:	e7f6      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <NotifyMessagingTask+0x7c>)
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	2202      	movs	r2, #2
 800921e:	2100      	movs	r1, #0
 8009220:	f005 fe28 	bl	800ee74 <xTaskGenericNotify>
			break;
 8009224:	e7ee      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8009226:	4b10      	ldr	r3, [pc, #64]	; (8009268 <NotifyMessagingTask+0x80>)
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	2300      	movs	r3, #0
 800922c:	2202      	movs	r2, #2
 800922e:	2100      	movs	r1, #0
 8009230:	f005 fe20 	bl	800ee74 <xTaskGenericNotify>
			break;
 8009234:	e7e6      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8009236:	4b0d      	ldr	r3, [pc, #52]	; (800926c <NotifyMessagingTask+0x84>)
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	2202      	movs	r2, #2
 800923e:	2100      	movs	r1, #0
 8009240:	f005 fe18 	bl	800ee74 <xTaskGenericNotify>
			break;
 8009244:	e7de      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 8009246:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <NotifyMessagingTask+0x88>)
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	2202      	movs	r2, #2
 800924e:	2100      	movs	r1, #0
 8009250:	f005 fe10 	bl	800ee74 <xTaskGenericNotify>
}
 8009254:	e7d6      	b.n	8009204 <NotifyMessagingTask+0x1c>
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	0801a208 	.word	0x0801a208
 800925c:	200014e0 	.word	0x200014e0
 8009260:	200014e4 	.word	0x200014e4
 8009264:	200014e8 	.word	0x200014e8
 8009268:	200014ec 	.word	0x200014ec
 800926c:	200014f0 	.word	0x200014f0
 8009270:	200014f4 	.word	0x200014f4

08009274 <SendMessageFromPort>:
 6   !0        0					!0							Either single-cast message with myID as source module OR (if code == 0)
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009276:	46de      	mov	lr, fp
 8009278:	4657      	mov	r7, sl
 800927a:	464e      	mov	r6, r9
 800927c:	4645      	mov	r5, r8
 800927e:	b5e0      	push	{r5, r6, r7, lr}
 8009280:	b085      	sub	sp, #20
 8009282:	4680      	mov	r8, r0
 8009284:	468b      	mov	fp, r1
 8009286:	0014      	movs	r4, r2
 8009288:	469a      	mov	sl, r3
 800928a:	ab0e      	add	r3, sp, #56	; 0x38
 800928c:	881d      	ldrh	r5, [r3, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800928e:	0003      	movs	r3, r0
 8009290:	4313      	orrs	r3, r2
 8009292:	d100      	bne.n	8009296 <SendMessageFromPort+0x22>
 8009294:	e170      	b.n	8009578 <SendMessageFromPort+0x304>
 8009296:	2800      	cmp	r0, #0
 8009298:	d147      	bne.n	800932a <SendMessageFromPort+0xb6>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800929a:	1c93      	adds	r3, r2, #2
 800929c:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 800929e:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d900      	bls.n	80092a6 <SendMessageFromPort+0x32>
 80092a4:	e149      	b.n	800953a <SendMessageFromPort+0x2c6>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80092a6:	2000      	movs	r0, #0
 80092a8:	f005 f8b4 	bl	800e414 <uxTaskPriorityGet>
 80092ac:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80092ae:	2105      	movs	r1, #5
 80092b0:	2000      	movs	r0, #0
 80092b2:	f005 f8bf 	bl	800e434 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80092b6:	4bbe      	ldr	r3, [pc, #760]	; (80095b0 <SendMessageFromPort+0x33c>)
 80092b8:	2248      	movs	r2, #72	; 0x48
 80092ba:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80092bc:	3212      	adds	r2, #18
 80092be:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80092c0:	465b      	mov	r3, fp
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d000      	beq.n	80092c8 <SendMessageFromPort+0x54>
 80092c6:	e16d      	b.n	80095a4 <SendMessageFromPort+0x330>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80092c8:	3d01      	subs	r5, #1
 80092ca:	4bba      	ldr	r3, [pc, #744]	; (80095b4 <SendMessageFromPort+0x340>)
 80092cc:	5d5f      	ldrb	r7, [r3, r5]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80092ce:	4eba      	ldr	r6, [pc, #744]	; (80095b8 <SendMessageFromPort+0x344>)
 80092d0:	00e9      	lsls	r1, r5, #3
 80092d2:	1b49      	subs	r1, r1, r5
 80092d4:	00c9      	lsls	r1, r1, #3
 80092d6:	4db9      	ldr	r5, [pc, #740]	; (80095bc <SendMessageFromPort+0x348>)
 80092d8:	1949      	adds	r1, r1, r5
 80092da:	003a      	movs	r2, r7
 80092dc:	0030      	movs	r0, r6
 80092de:	f009 fe64 	bl	8012faa <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 80092e2:	3e03      	subs	r6, #3
 80092e4:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 80092e6:	1cfd      	adds	r5, r7, #3
 80092e8:	002a      	movs	r2, r5
 80092ea:	0031      	movs	r1, r6
 80092ec:	48b4      	ldr	r0, [pc, #720]	; (80095c0 <SendMessageFromPort+0x34c>)
 80092ee:	f009 fe5c 	bl	8012faa <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80092f2:	b2bf      	uxth	r7, r7
 80092f4:	1cf9      	adds	r1, r7, #3
 80092f6:	48b2      	ldr	r0, [pc, #712]	; (80095c0 <SendMessageFromPort+0x34c>)
 80092f8:	f003 fa68 	bl	800c7cc <CalculateCRC8>
 80092fc:	5570      	strb	r0, [r6, r5]
	/* end of crc calculation function addition */

//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
	memset(crcBuffer,0,sizeof(crcBuffer));
 80092fe:	2238      	movs	r2, #56	; 0x38
 8009300:	2100      	movs	r1, #0
 8009302:	48af      	ldr	r0, [pc, #700]	; (80095c0 <SendMessageFromPort+0x34c>)
 8009304:	f009 fe5a 	bl	8012fbc <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009308:	3402      	adds	r4, #2
 800930a:	b2e4      	uxtb	r4, r4
 800930c:	2c01      	cmp	r4, #1
 800930e:	d900      	bls.n	8009312 <SendMessageFromPort+0x9e>
 8009310:	e104      	b.n	800951c <SendMessageFromPort+0x2a8>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else{
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8009312:	4653      	mov	r3, sl
 8009314:	2b00      	cmp	r3, #0
 8009316:	d000      	beq.n	800931a <SendMessageFromPort+0xa6>
 8009318:	e0f5      	b.n	8009506 <SendMessageFromPort+0x292>
 800931a:	465b      	mov	r3, fp
 800931c:	2b00      	cmp	r3, #0
 800931e:	d000      	beq.n	8009322 <SendMessageFromPort+0xae>
 8009320:	e0f1      	b.n	8009506 <SendMessageFromPort+0x292>
			src =message[4];
 8009322:	4ba3      	ldr	r3, [pc, #652]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009324:	791b      	ldrb	r3, [r3, #4]
 8009326:	469b      	mov	fp, r3
 8009328:	e0ed      	b.n	8009506 <SendMessageFromPort+0x292>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 800932a:	2900      	cmp	r1, #0
 800932c:	d002      	beq.n	8009334 <SendMessageFromPort+0xc0>
 800932e:	2a00      	cmp	r2, #0
 8009330:	d100      	bne.n	8009334 <SendMessageFromPort+0xc0>
 8009332:	e123      	b.n	800957c <SendMessageFromPort+0x308>
	TaskPriority =uxTaskPriorityGet( NULL);
 8009334:	2000      	movs	r0, #0
 8009336:	f005 f86d 	bl	800e414 <uxTaskPriorityGet>
 800933a:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 800933c:	2105      	movs	r1, #5
 800933e:	2000      	movs	r0, #0
 8009340:	f005 f878 	bl	800e434 <vTaskPrioritySet>
	message[0] ='H';
 8009344:	4b9a      	ldr	r3, [pc, #616]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009346:	2248      	movs	r2, #72	; 0x48
 8009348:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 800934a:	3212      	adds	r2, #18
 800934c:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800934e:	4653      	mov	r3, sl
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0b9      	beq.n	80092c8 <SendMessageFromPort+0x54>
		if(src == 0)
 8009354:	465b      	mov	r3, fp
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <SendMessageFromPort+0xec>
			src =myID;
 800935a:	4b9a      	ldr	r3, [pc, #616]	; (80095c4 <SendMessageFromPort+0x350>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	469b      	mov	fp, r3
		message[2] =length;
 8009360:	4993      	ldr	r1, [pc, #588]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009362:	2300      	movs	r3, #0
 8009364:	708b      	strb	r3, [r1, #2]
		message[3] =dst;
 8009366:	70cc      	strb	r4, [r1, #3]
		message[4] =src;
 8009368:	465b      	mov	r3, fp
 800936a:	710b      	strb	r3, [r1, #4]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800936c:	4a96      	ldr	r2, [pc, #600]	; (80095c8 <SendMessageFromPort+0x354>)
 800936e:	79d3      	ldrb	r3, [r2, #7]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	7992      	ldrb	r2, [r2, #6]
 8009374:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8009376:	22ff      	movs	r2, #255	; 0xff
 8009378:	4552      	cmp	r2, sl
 800937a:	4192      	sbcs	r2, r2
 800937c:	4252      	negs	r2, r2
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800937e:	0052      	lsls	r2, r2, #1
 8009380:	4313      	orrs	r3, r2
 8009382:	b2db      	uxtb	r3, r3
 8009384:	714b      	strb	r3, [r1, #5]
		message[6 + shift] =(uint8_t )code;
 8009386:	4652      	mov	r2, sl
 8009388:	718a      	strb	r2, [r1, #6]
 800938a:	2200      	movs	r2, #0
 800938c:	4691      	mov	r9, r2
		if(extendCode == true){
 800938e:	4652      	mov	r2, sl
 8009390:	2aff      	cmp	r2, #255	; 0xff
 8009392:	d903      	bls.n	800939c <SendMessageFromPort+0x128>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009394:	0a12      	lsrs	r2, r2, #8
 8009396:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009398:	2201      	movs	r2, #1
 800939a:	4691      	mov	r9, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 800939c:	2d2e      	cmp	r5, #46	; 0x2e
 800939e:	d92f      	bls.n	8009400 <SendMessageFromPort+0x18c>
			message[5] |=0x80;
 80093a0:	2280      	movs	r2, #128	; 0x80
 80093a2:	4252      	negs	r2, r2
 80093a4:	4313      	orrs	r3, r2
 80093a6:	4a82      	ldr	r2, [pc, #520]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093a8:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80093aa:	4b88      	ldr	r3, [pc, #544]	; (80095cc <SendMessageFromPort+0x358>)
 80093ac:	801d      	strh	r5, [r3, #0]
	uint8_t length =0, shift =0;
 80093ae:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80093b0:	252e      	movs	r5, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093b2:	464b      	mov	r3, r9
 80093b4:	3307      	adds	r3, #7
 80093b6:	4694      	mov	ip, r2
 80093b8:	4463      	add	r3, ip
 80093ba:	9303      	str	r3, [sp, #12]
			while(totalNumberOfParams != 0){
 80093bc:	4b83      	ldr	r3, [pc, #524]	; (80095cc <SendMessageFromPort+0x358>)
 80093be:	881f      	ldrh	r7, [r3, #0]
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	d02b      	beq.n	800941c <SendMessageFromPort+0x1a8>
				if((totalNumberOfParams / numberOfParams) >= 1){
 80093c4:	0029      	movs	r1, r5
 80093c6:	0038      	movs	r0, r7
 80093c8:	f7f6 fec2 	bl	8000150 <__udivsi3>
 80093cc:	b280      	uxth	r0, r0
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d140      	bne.n	8009454 <SendMessageFromPort+0x1e0>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 80093d2:	4b77      	ldr	r3, [pc, #476]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093d4:	795a      	ldrb	r2, [r3, #5]
 80093d6:	237f      	movs	r3, #127	; 0x7f
 80093d8:	4013      	ands	r3, r2
 80093da:	4a75      	ldr	r2, [pc, #468]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093dc:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093de:	4d7c      	ldr	r5, [pc, #496]	; (80095d0 <SendMessageFromPort+0x35c>)
 80093e0:	8829      	ldrh	r1, [r5, #0]
 80093e2:	4b7c      	ldr	r3, [pc, #496]	; (80095d4 <SendMessageFromPort+0x360>)
 80093e4:	18c9      	adds	r1, r1, r3
 80093e6:	003a      	movs	r2, r7
 80093e8:	9803      	ldr	r0, [sp, #12]
 80093ea:	f009 fdde 	bl	8012faa <memcpy>
					ptrShift =0;
 80093ee:	2300      	movs	r3, #0
 80093f0:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 80093f2:	4a76      	ldr	r2, [pc, #472]	; (80095cc <SendMessageFromPort+0x358>)
 80093f4:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 80093f6:	1d3e      	adds	r6, r7, #4
 80093f8:	444e      	add	r6, r9
 80093fa:	b2f6      	uxtb	r6, r6
					numberOfParams =totalNumberOfParams;
 80093fc:	003d      	movs	r5, r7
 80093fe:	e7dd      	b.n	80093bc <SendMessageFromPort+0x148>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009400:	464b      	mov	r3, r9
 8009402:	3307      	adds	r3, #7
 8009404:	486a      	ldr	r0, [pc, #424]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009406:	1818      	adds	r0, r3, r0
 8009408:	4b71      	ldr	r3, [pc, #452]	; (80095d0 <SendMessageFromPort+0x35c>)
 800940a:	8819      	ldrh	r1, [r3, #0]
 800940c:	4b71      	ldr	r3, [pc, #452]	; (80095d4 <SendMessageFromPort+0x360>)
 800940e:	18c9      	adds	r1, r1, r3
 8009410:	002a      	movs	r2, r5
 8009412:	f009 fdca 	bl	8012faa <memcpy>
			length =numberOfParams + shift + 4;
 8009416:	1d2e      	adds	r6, r5, #4
 8009418:	444e      	add	r6, r9
 800941a:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true){
 800941c:	4b6e      	ldr	r3, [pc, #440]	; (80095d8 <SendMessageFromPort+0x364>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d057      	beq.n	80094d4 <SendMessageFromPort+0x260>
			if(dstGroupID < BOS_BROADCAST){
 8009424:	4b6d      	ldr	r3, [pc, #436]	; (80095dc <SendMessageFromPort+0x368>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2bff      	cmp	r3, #255	; 0xff
 800942a:	d100      	bne.n	800942e <SendMessageFromPort+0x1ba>
 800942c:	e0aa      	b.n	8009584 <SendMessageFromPort+0x310>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800942e:	4a6c      	ldr	r2, [pc, #432]	; (80095e0 <SendMessageFromPort+0x36c>)
 8009430:	7812      	ldrb	r2, [r2, #0]
 8009432:	4694      	mov	ip, r2
 8009434:	2a00      	cmp	r2, #0
 8009436:	d06f      	beq.n	8009518 <SendMessageFromPort+0x2a4>
 8009438:	2701      	movs	r7, #1
 800943a:	409f      	lsls	r7, r3
 800943c:	4869      	ldr	r0, [pc, #420]	; (80095e4 <SendMessageFromPort+0x370>)
 800943e:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8009440:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009442:	495b      	ldr	r1, [pc, #364]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009444:	468a      	mov	sl, r1
 8009446:	44aa      	add	sl, r5
 8009448:	0021      	movs	r1, r4
 800944a:	4664      	mov	r4, ip
 800944c:	46b4      	mov	ip, r6
 800944e:	464e      	mov	r6, r9
 8009450:	4689      	mov	r9, r1
 8009452:	e017      	b.n	8009484 <SendMessageFromPort+0x210>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009454:	9500      	str	r5, [sp, #0]
 8009456:	4653      	mov	r3, sl
 8009458:	0022      	movs	r2, r4
 800945a:	4659      	mov	r1, fp
 800945c:	4640      	mov	r0, r8
 800945e:	f7ff ff09 	bl	8009274 <SendMessageFromPort>
					osDelay(10);
 8009462:	200a      	movs	r0, #10
 8009464:	f004 f8e7 	bl	800d636 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8009468:	4a58      	ldr	r2, [pc, #352]	; (80095cc <SendMessageFromPort+0x358>)
 800946a:	8813      	ldrh	r3, [r2, #0]
 800946c:	1b5b      	subs	r3, r3, r5
 800946e:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8009470:	4a57      	ldr	r2, [pc, #348]	; (80095d0 <SendMessageFromPort+0x35c>)
 8009472:	8813      	ldrh	r3, [r2, #0]
 8009474:	18eb      	adds	r3, r5, r3
 8009476:	8013      	strh	r3, [r2, #0]
 8009478:	e7a0      	b.n	80093bc <SendMessageFromPort+0x148>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800947a:	3301      	adds	r3, #1
 800947c:	b29b      	uxth	r3, r3
 800947e:	3002      	adds	r0, #2
 8009480:	42a3      	cmp	r3, r4
 8009482:	d80e      	bhi.n	80094a2 <SendMessageFromPort+0x22e>
					if(InGroup(i,dstGroupID)){
 8009484:	8801      	ldrh	r1, [r0, #0]
 8009486:	420f      	tst	r7, r1
 8009488:	d0f7      	beq.n	800947a <SendMessageFromPort+0x206>
						++groupMembers;							// Add this member
 800948a:	3201      	adds	r2, #1
 800948c:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800948e:	18a9      	adds	r1, r5, r2
 8009490:	3101      	adds	r1, #1
 8009492:	292d      	cmp	r1, #45	; 0x2d
 8009494:	dd00      	ble.n	8009498 <SendMessageFromPort+0x224>
 8009496:	e073      	b.n	8009580 <SendMessageFromPort+0x30c>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009498:	4651      	mov	r1, sl
 800949a:	1889      	adds	r1, r1, r2
 800949c:	1989      	adds	r1, r1, r6
 800949e:	718b      	strb	r3, [r1, #6]
 80094a0:	e7eb      	b.n	800947a <SendMessageFromPort+0x206>
 80094a2:	464c      	mov	r4, r9
 80094a4:	46b1      	mov	r9, r6
 80094a6:	4666      	mov	r6, ip
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80094a8:	464b      	mov	r3, r9
 80094aa:	3307      	adds	r3, #7
 80094ac:	195b      	adds	r3, r3, r5
 80094ae:	189b      	adds	r3, r3, r2
 80094b0:	493f      	ldr	r1, [pc, #252]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094b2:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094b4:	18ad      	adds	r5, r5, r2
 80094b6:	3502      	adds	r5, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80094b8:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094ba:	2d2d      	cmp	r5, #45	; 0x2d
 80094bc:	dc3d      	bgt.n	800953a <SendMessageFromPort+0x2c6>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80094be:	484a      	ldr	r0, [pc, #296]	; (80095e8 <SendMessageFromPort+0x374>)
 80094c0:	7801      	ldrb	r1, [r0, #0]
 80094c2:	3101      	adds	r1, #1
 80094c4:	b2c9      	uxtb	r1, r1
 80094c6:	7001      	strb	r1, [r0, #0]
 80094c8:	4839      	ldr	r0, [pc, #228]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094ca:	18c3      	adds	r3, r0, r3
 80094cc:	7059      	strb	r1, [r3, #1]
 80094ce:	3602      	adds	r6, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80094d0:	18b6      	adds	r6, r6, r2
 80094d2:	b2f6      	uxtb	r6, r6
	message[2] =length;
 80094d4:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094d6:	469a      	mov	sl, r3
 80094d8:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 80094da:	1cf5      	adds	r5, r6, #3
 80094dc:	002a      	movs	r2, r5
 80094de:	0019      	movs	r1, r3
 80094e0:	4837      	ldr	r0, [pc, #220]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094e2:	f009 fd62 	bl	8012faa <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80094e6:	b2b7      	uxth	r7, r6
 80094e8:	0029      	movs	r1, r5
 80094ea:	4835      	ldr	r0, [pc, #212]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094ec:	f003 f96e 	bl	800c7cc <CalculateCRC8>
 80094f0:	4653      	mov	r3, sl
 80094f2:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer,0,sizeof(crcBuffer));
 80094f4:	2238      	movs	r2, #56	; 0x38
 80094f6:	2100      	movs	r1, #0
 80094f8:	4831      	ldr	r0, [pc, #196]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094fa:	f009 fd5f 	bl	8012fbc <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80094fe:	3402      	adds	r4, #2
 8009500:	b2e4      	uxtb	r4, r4
 8009502:	2c01      	cmp	r4, #1
 8009504:	d80a      	bhi.n	800951c <SendMessageFromPort+0x2a8>
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009506:	4658      	mov	r0, fp
 8009508:	f7fa f982 	bl	8003810 <FindBroadcastRoutes>
 800950c:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800950e:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009510:	4b36      	ldr	r3, [pc, #216]	; (80095ec <SendMessageFromPort+0x378>)
 8009512:	4698      	mov	r8, r3
 8009514:	4e2b      	ldr	r6, [pc, #172]	; (80095c4 <SendMessageFromPort+0x350>)
 8009516:	e01c      	b.n	8009552 <SendMessageFromPort+0x2de>
			uint8_t groupMembers =0;
 8009518:	2200      	movs	r2, #0
 800951a:	e7c5      	b.n	80094a8 <SendMessageFromPort+0x234>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 800951c:	1d3a      	adds	r2, r7, #4
 800951e:	b292      	uxth	r2, r2
 8009520:	2332      	movs	r3, #50	; 0x32
 8009522:	4923      	ldr	r1, [pc, #140]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009524:	4640      	mov	r0, r8
 8009526:	f003 ffa3 	bl	800d470 <writePxDMAMutex>
			}
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 800952a:	9902      	ldr	r1, [sp, #8]
 800952c:	2000      	movs	r0, #0
 800952e:	f004 ff81 	bl	800e434 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8009532:	4b2f      	ldr	r3, [pc, #188]	; (80095f0 <SendMessageFromPort+0x37c>)
 8009534:	2202      	movs	r2, #2
 8009536:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009538:	2000      	movs	r0, #0
}
 800953a:	b005      	add	sp, #20
 800953c:	bc3c      	pop	{r2, r3, r4, r5}
 800953e:	4690      	mov	r8, r2
 8009540:	4699      	mov	r9, r3
 8009542:	46a2      	mov	sl, r4
 8009544:	46ab      	mov	fp, r5
 8009546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009548:	3401      	adds	r4, #1
 800954a:	b2e4      	uxtb	r4, r4
 800954c:	3501      	adds	r5, #1
 800954e:	2c07      	cmp	r4, #7
 8009550:	d0eb      	beq.n	800952a <SendMessageFromPort+0x2b6>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009552:	7833      	ldrb	r3, [r6, #0]
 8009554:	3b01      	subs	r3, #1
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4642      	mov	r2, r8
 800955a:	5a9b      	ldrh	r3, [r3, r2]
 800955c:	412b      	asrs	r3, r5
 800955e:	07db      	lsls	r3, r3, #31
 8009560:	d5f2      	bpl.n	8009548 <SendMessageFromPort+0x2d4>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009562:	1d3a      	adds	r2, r7, #4
 8009564:	b292      	uxth	r2, r2
 8009566:	2332      	movs	r3, #50	; 0x32
 8009568:	4911      	ldr	r1, [pc, #68]	; (80095b0 <SendMessageFromPort+0x33c>)
 800956a:	0020      	movs	r0, r4
 800956c:	f003 ff80 	bl	800d470 <writePxDMAMutex>
				Delay_ms(1);
 8009570:	2001      	movs	r0, #1
 8009572:	f006 f88b 	bl	800f68c <HAL_Delay>
 8009576:	e7e7      	b.n	8009548 <SendMessageFromPort+0x2d4>
		return BOS_ERR_WrongParam;
 8009578:	2067      	movs	r0, #103	; 0x67
 800957a:	e7de      	b.n	800953a <SendMessageFromPort+0x2c6>
 800957c:	2067      	movs	r0, #103	; 0x67
 800957e:	e7dc      	b.n	800953a <SendMessageFromPort+0x2c6>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009580:	2069      	movs	r0, #105	; 0x69
 8009582:	e7da      	b.n	800953a <SendMessageFromPort+0x2c6>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009584:	1c6b      	adds	r3, r5, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009586:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009588:	2b2d      	cmp	r3, #45	; 0x2d
 800958a:	dcd6      	bgt.n	800953a <SendMessageFromPort+0x2c6>
				message[7 + shift + numberOfParams] =++bcastID;
 800958c:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <SendMessageFromPort+0x374>)
 800958e:	7813      	ldrb	r3, [r2, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	b2db      	uxtb	r3, r3
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009598:	1955      	adds	r5, r2, r5
 800959a:	444d      	add	r5, r9
 800959c:	71eb      	strb	r3, [r5, #7]
				length +=1;		// + bcastID
 800959e:	3601      	adds	r6, #1
 80095a0:	b2f6      	uxtb	r6, r6
 80095a2:	e797      	b.n	80094d4 <SendMessageFromPort+0x260>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095a4:	4653      	mov	r3, sl
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d100      	bne.n	80095ac <SendMessageFromPort+0x338>
 80095aa:	e68d      	b.n	80092c8 <SendMessageFromPort+0x54>
 80095ac:	e6d8      	b.n	8009360 <SendMessageFromPort+0xec>
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	20000ef8 	.word	0x20000ef8
 80095b4:	20000f30 	.word	0x20000f30
 80095b8:	20000efb 	.word	0x20000efb
 80095bc:	20000d08 	.word	0x20000d08
 80095c0:	20001458 	.word	0x20001458
 80095c4:	20001076 	.word	0x20001076
 80095c8:	200069c4 	.word	0x200069c4
 80095cc:	200015b6 	.word	0x200015b6
 80095d0:	200015b4 	.word	0x200015b4
 80095d4:	20000f38 	.word	0x20000f38
 80095d8:	20000a74 	.word	0x20000a74
 80095dc:	2000001d 	.word	0x2000001d
 80095e0:	2000001c 	.word	0x2000001c
 80095e4:	20000ec0 	.word	0x20000ec0
 80095e8:	20000cb4 	.word	0x20000cb4
 80095ec:	20000cb8 	.word	0x20000cb8
 80095f0:	20001110 	.word	0x20001110

080095f4 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80095f4:	b530      	push	{r4, r5, lr}
 80095f6:	b083      	sub	sp, #12
 80095f8:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80095fa:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <ForwardReceivedMessage+0x34>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009600:	1e42      	subs	r2, r0, #1
 8009602:	00d3      	lsls	r3, r2, #3
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	4a08      	ldr	r2, [pc, #32]	; (800962c <ForwardReceivedMessage+0x38>)
 800960a:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 800960c:	4b08      	ldr	r3, [pc, #32]	; (8009630 <ForwardReceivedMessage+0x3c>)
 800960e:	7818      	ldrb	r0, [r3, #0]
 8009610:	0021      	movs	r1, r4
 8009612:	f7fa f9cb 	bl	80039ac <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009616:	9500      	str	r5, [sp, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	0022      	movs	r2, r4
 800961c:	2100      	movs	r1, #0
 800961e:	f7ff fe29 	bl	8009274 <SendMessageFromPort>
}
 8009622:	2000      	movs	r0, #0
 8009624:	b003      	add	sp, #12
 8009626:	bd30      	pop	{r4, r5, pc}
 8009628:	20000a74 	.word	0x20000a74
 800962c:	20000d08 	.word	0x20000d08
 8009630:	20001076 	.word	0x20001076

08009634 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009634:	b500      	push	{lr}
 8009636:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009638:	4b0c      	ldr	r3, [pc, #48]	; (800966c <BroadcastReceivedMessage+0x38>)
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <BroadcastReceivedMessage+0x3c>)
 8009640:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009642:	28ff      	cmp	r0, #255	; 0xff
 8009644:	d009      	beq.n	800965a <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009646:	9100      	str	r1, [sp, #0]
 8009648:	2300      	movs	r3, #0
 800964a:	22fe      	movs	r2, #254	; 0xfe
 800964c:	2100      	movs	r1, #0
 800964e:	2000      	movs	r0, #0
 8009650:	f7ff fe10 	bl	8009274 <SendMessageFromPort>
}
 8009654:	2000      	movs	r0, #0
 8009656:	b003      	add	sp, #12
 8009658:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 800965a:	9100      	str	r1, [sp, #0]
 800965c:	2300      	movs	r3, #0
 800965e:	32ff      	adds	r2, #255	; 0xff
 8009660:	2100      	movs	r1, #0
 8009662:	2000      	movs	r0, #0
 8009664:	f7ff fe06 	bl	8009274 <SendMessageFromPort>
 8009668:	e7f4      	b.n	8009654 <BroadcastReceivedMessage+0x20>
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	20000a74 	.word	0x20000a74
 8009670:	2000001d 	.word	0x2000001d

08009674 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009674:	b530      	push	{r4, r5, lr}
 8009676:	b083      	sub	sp, #12
 8009678:	001c      	movs	r4, r3
	AddBcastPayload = true;
 800967a:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <BroadcastMessage+0x44>)
 800967c:	2501      	movs	r5, #1
 800967e:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <BroadcastMessage+0x48>)
 8009682:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009684:	29ff      	cmp	r1, #255	; 0xff
 8009686:	d00e      	beq.n	80096a6 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009688:	9400      	str	r4, [sp, #0]
 800968a:	0013      	movs	r3, r2
 800968c:	22fe      	movs	r2, #254	; 0xfe
 800968e:	0001      	movs	r1, r0
 8009690:	2000      	movs	r0, #0
 8009692:	f7ff fdef 	bl	8009274 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009696:	0022      	movs	r2, r4
 8009698:	2100      	movs	r1, #0
 800969a:	4809      	ldr	r0, [pc, #36]	; (80096c0 <BroadcastMessage+0x4c>)
 800969c:	f009 fc8e 	bl	8012fbc <memset>
}
 80096a0:	2000      	movs	r0, #0
 80096a2:	b003      	add	sp, #12
 80096a4:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 80096a6:	9400      	str	r4, [sp, #0]
 80096a8:	0013      	movs	r3, r2
 80096aa:	22ff      	movs	r2, #255	; 0xff
 80096ac:	0001      	movs	r1, r0
 80096ae:	2000      	movs	r0, #0
 80096b0:	f7ff fde0 	bl	8009274 <SendMessageFromPort>
 80096b4:	e7ef      	b.n	8009696 <BroadcastMessage+0x22>
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	20000a74 	.word	0x20000a74
 80096bc:	2000001d 	.word	0x2000001d
 80096c0:	20000f38 	.word	0x20000f38

080096c4 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80096c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c6:	b083      	sub	sp, #12
 80096c8:	0004      	movs	r4, r0
 80096ca:	000e      	movs	r6, r1
 80096cc:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 80096ce:	28ff      	cmp	r0, #255	; 0xff
 80096d0:	d012      	beq.n	80096f8 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 80096d2:	4f0d      	ldr	r7, [pc, #52]	; (8009708 <SendMessageToModule+0x44>)
 80096d4:	7838      	ldrb	r0, [r7, #0]
 80096d6:	0021      	movs	r1, r4
 80096d8:	f7fa f968 	bl	80039ac <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 80096dc:	7839      	ldrb	r1, [r7, #0]
 80096de:	9500      	str	r5, [sp, #0]
 80096e0:	0033      	movs	r3, r6
 80096e2:	0022      	movs	r2, r4
 80096e4:	f7ff fdc6 	bl	8009274 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 80096e8:	002a      	movs	r2, r5
 80096ea:	2100      	movs	r1, #0
 80096ec:	4807      	ldr	r0, [pc, #28]	; (800970c <SendMessageToModule+0x48>)
 80096ee:	f009 fc65 	bl	8012fbc <memset>
}
 80096f2:	2000      	movs	r0, #0
 80096f4:	b003      	add	sp, #12
 80096f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <SendMessageToModule+0x44>)
 80096fa:	7818      	ldrb	r0, [r3, #0]
 80096fc:	0013      	movs	r3, r2
 80096fe:	000a      	movs	r2, r1
 8009700:	21ff      	movs	r1, #255	; 0xff
 8009702:	f7ff ffb7 	bl	8009674 <BroadcastMessage>
 8009706:	e7f4      	b.n	80096f2 <SendMessageToModule+0x2e>
 8009708:	20001076 	.word	0x20001076
 800970c:	20000f38 	.word	0x20000f38

08009710 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009712:	46de      	mov	lr, fp
 8009714:	4657      	mov	r7, sl
 8009716:	464e      	mov	r6, r9
 8009718:	4645      	mov	r5, r8
 800971a:	b5e0      	push	{r5, r6, r7, lr}
 800971c:	b091      	sub	sp, #68	; 0x44
 800971e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009720:	000c      	movs	r4, r1
 8009722:	9106      	str	r1, [sp, #24]
 8009724:	0015      	movs	r5, r2
 8009726:	920e      	str	r2, [sp, #56]	; 0x38
 8009728:	001e      	movs	r6, r3
 800972a:	ab1a      	add	r3, sp, #104	; 0x68
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4698      	mov	r8, r3
 8009730:	ab1d      	add	r3, sp, #116	; 0x74
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009736:	4b5a      	ldr	r3, [pc, #360]	; (80098a0 <StartScastDMAStream+0x190>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	428b      	cmp	r3, r1
 800973c:	d11d      	bne.n	800977a <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800973e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009740:	0e1b      	lsrs	r3, r3, #24
 8009742:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8009744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	b2db      	uxtb	r3, r3
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 800974c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b2db      	uxtb	r3, r3
 8009752:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009754:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 800975a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800975c:	0c1b      	lsrs	r3, r3, #16
 800975e:	b2db      	uxtb	r3, r3
 8009760:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009762:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009764:	0a1b      	lsrs	r3, r3, #8
 8009766:	b2db      	uxtb	r3, r3
 8009768:	469b      	mov	fp, r3
 800976a:	4d4e      	ldr	r5, [pc, #312]	; (80098a4 <StartScastDMAStream+0x194>)
 800976c:	231a      	movs	r3, #26
 800976e:	4699      	mov	r9, r3
 8009770:	44a9      	add	r9, r5
				temp2 =dstP;
 8009772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009774:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009776:	4c4c      	ldr	r4, [pc, #304]	; (80098a8 <StartScastDMAStream+0x198>)
 8009778:	e05c      	b.n	8009834 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800977a:	4b4b      	ldr	r3, [pc, #300]	; (80098a8 <StartScastDMAStream+0x198>)
 800977c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800977e:	0e12      	lsrs	r2, r2, #24
 8009780:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009782:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009784:	0c12      	lsrs	r2, r2, #16
 8009786:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009788:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800978a:	0a12      	lsrs	r2, r2, #8
 800978c:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 800978e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009790:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009792:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009794:	0e12      	lsrs	r2, r2, #24
 8009796:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009798:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800979a:	0c12      	lsrs	r2, r2, #16
 800979c:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800979e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097a0:	0a12      	lsrs	r2, r2, #8
 80097a2:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80097a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097a6:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80097a8:	4642      	mov	r2, r8
 80097aa:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80097ac:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 80097ae:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 80097b0:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 80097b2:	4652      	mov	r2, sl
 80097b4:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80097b6:	220d      	movs	r2, #13
 80097b8:	211c      	movs	r1, #28
 80097ba:	0020      	movs	r0, r4
 80097bc:	f7ff ff82 	bl	80096c4 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80097c0:	2000      	movs	r0, #0
 80097c2:	b011      	add	sp, #68	; 0x44
 80097c4:	bc3c      	pop	{r2, r3, r4, r5}
 80097c6:	4690      	mov	r8, r2
 80097c8:	4699      	mov	r9, r3
 80097ca:	46a2      	mov	sl, r4
 80097cc:	46ab      	mov	fp, r5
 80097ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 80097d0:	9906      	ldr	r1, [sp, #24]
 80097d2:	f7fa f8eb 	bl	80039ac <FindRoute>
 80097d6:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 80097d8:	0031      	movs	r1, r6
 80097da:	9806      	ldr	r0, [sp, #24]
 80097dc:	f7fa f8e6 	bl	80039ac <FindRoute>
			if(route[i] == dstM){
 80097e0:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 80097e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 80097e4:	42b0      	cmp	r0, r6
 80097e6:	d134      	bne.n	8009852 <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80097e8:	9a08      	ldr	r2, [sp, #32]
 80097ea:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 80097ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ee:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 80097f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097f2:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 80097f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80097f6:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80097f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097fa:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 80097fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097fe:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009800:	465a      	mov	r2, fp
 8009802:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009804:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009806:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009808:	4642      	mov	r2, r8
 800980a:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 800980c:	9a07      	ldr	r2, [sp, #28]
 800980e:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8009810:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009812:	4653      	mov	r3, sl
 8009814:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009816:	0031      	movs	r1, r6
 8009818:	9806      	ldr	r0, [sp, #24]
 800981a:	f7fa f8c7 	bl	80039ac <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 800981e:	7878      	ldrb	r0, [r7, #1]
 8009820:	220c      	movs	r2, #12
 8009822:	211b      	movs	r1, #27
 8009824:	f7ff ff4e 	bl	80096c4 <SendMessageToModule>
			osDelay(10);
 8009828:	200a      	movs	r0, #10
 800982a:	f003 ff04 	bl	800d636 <osDelay>
 800982e:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009830:	454d      	cmp	r5, r9
 8009832:	d013      	beq.n	800985c <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8009834:	0031      	movs	r1, r6
 8009836:	9806      	ldr	r0, [sp, #24]
 8009838:	f7fa f8b8 	bl	80039ac <FindRoute>
 800983c:	002f      	movs	r7, r5
		if(route[i]){
 800983e:	7868      	ldrb	r0, [r5, #1]
 8009840:	2800      	cmp	r0, #0
 8009842:	d0f4      	beq.n	800982e <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8009844:	78a9      	ldrb	r1, [r5, #2]
 8009846:	2900      	cmp	r1, #0
 8009848:	d0c2      	beq.n	80097d0 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 800984a:	f7fa f8af 	bl	80039ac <FindRoute>
 800984e:	9007      	str	r0, [sp, #28]
 8009850:	e7c2      	b.n	80097d8 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009852:	7839      	ldrb	r1, [r7, #0]
 8009854:	f7fa f8aa 	bl	80039ac <FindRoute>
 8009858:	0003      	movs	r3, r0
 800985a:	e7c5      	b.n	80097e8 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 800985c:	9806      	ldr	r0, [sp, #24]
 800985e:	42b0      	cmp	r0, r6
 8009860:	d118      	bne.n	8009894 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009868:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800986a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800986c:	4640      	mov	r0, r8
 800986e:	f7ff fbdf 	bl	8009030 <SetupDMAStreams>
	if(stored){
 8009872:	4653      	mov	r3, sl
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0a3      	beq.n	80097c0 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009878:	2300      	movs	r3, #0
 800987a:	9304      	str	r3, [sp, #16]
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	9302      	str	r3, [sp, #8]
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009888:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800988a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800988c:	4640      	mov	r0, r8
 800988e:	f7f9 fe1f 	bl	80034d0 <SaveEEstreams>
 8009892:	e795      	b.n	80097c0 <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8009894:	0031      	movs	r1, r6
 8009896:	f7fa f889 	bl	80039ac <FindRoute>
 800989a:	900e      	str	r0, [sp, #56]	; 0x38
 800989c:	e7e1      	b.n	8009862 <StartScastDMAStream+0x152>
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	20001076 	.word	0x20001076
 80098a4:	20006ac7 	.word	0x20006ac7
 80098a8:	20000f38 	.word	0x20000f38

080098ac <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 80098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ae:	46de      	mov	lr, fp
 80098b0:	4657      	mov	r7, sl
 80098b2:	464e      	mov	r6, r9
 80098b4:	4645      	mov	r5, r8
 80098b6:	b5e0      	push	{r5, r6, r7, lr}
 80098b8:	b087      	sub	sp, #28
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	469b      	mov	fp, r3
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 80098be:	4bd5      	ldr	r3, [pc, #852]	; (8009c14 <BackEndTask+0x368>)
 80098c0:	3b70      	subs	r3, #112	; 0x70
 80098c2:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 80098c4:	4bd3      	ldr	r3, [pc, #844]	; (8009c14 <BackEndTask+0x368>)
 80098c6:	3b70      	subs	r3, #112	; 0x70
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	e19e      	b.n	8009c0a <BackEndTask+0x35e>
 80098cc:	1ebb      	subs	r3, r7, #2
 80098ce:	4698      	mov	r8, r3
 80098d0:	4bd1      	ldr	r3, [pc, #836]	; (8009c18 <BackEndTask+0x36c>)
 80098d2:	4443      	add	r3, r8
 80098d4:	4699      	mov	r9, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098d6:	7819      	ldrb	r1, [r3, #0]
 80098d8:	293f      	cmp	r1, #63	; 0x3f
 80098da:	dc17      	bgt.n	800990c <BackEndTask+0x60>
							if(BOS.disableCLI == false){
 80098dc:	4bcf      	ldr	r3, [pc, #828]	; (8009c1c <BackEndTask+0x370>)
 80098de:	7edb      	ldrb	r3, [r3, #27]
 80098e0:	469c      	mov	ip, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098e2:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 80098e4:	2000      	movs	r0, #0
 80098e6:	e004      	b.n	80098f2 <BackEndTask+0x46>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 80098e8:	2b3f      	cmp	r3, #63	; 0x3f
 80098ea:	d023      	beq.n	8009934 <BackEndTask+0x88>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098ec:	3301      	adds	r3, #1
 80098ee:	2b40      	cmp	r3, #64	; 0x40
 80098f0:	d009      	beq.n	8009906 <BackEndTask+0x5a>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 80098f2:	2b3e      	cmp	r3, #62	; 0x3e
 80098f4:	dcf8      	bgt.n	80098e8 <BackEndTask+0x3c>
 80098f6:	5cf2      	ldrb	r2, [r6, r3]
 80098f8:	2a48      	cmp	r2, #72	; 0x48
 80098fa:	d1f5      	bne.n	80098e8 <BackEndTask+0x3c>
 80098fc:	18f2      	adds	r2, r6, r3
 80098fe:	7852      	ldrb	r2, [r2, #1]
 8009900:	2a5a      	cmp	r2, #90	; 0x5a
 8009902:	d1f1      	bne.n	80098e8 <BackEndTask+0x3c>
 8009904:	469b      	mov	fp, r3
				if(emptyBuffer){
 8009906:	2800      	cmp	r0, #0
 8009908:	d000      	beq.n	800990c <BackEndTask+0x60>
 800990a:	e15f      	b.n	8009bcc <BackEndTask+0x320>
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 800990c:	465b      	mov	r3, fp
 800990e:	2b3d      	cmp	r3, #61	; 0x3d
 8009910:	d051      	beq.n	80099b6 <BackEndTask+0x10a>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009912:	2b3e      	cmp	r3, #62	; 0x3e
 8009914:	d100      	bne.n	8009918 <BackEndTask+0x6c>
 8009916:	e090      	b.n	8009a3a <BackEndTask+0x18e>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009918:	2b3f      	cmp	r3, #63	; 0x3f
 800991a:	d100      	bne.n	800991e <BackEndTask+0x72>
 800991c:	e092      	b.n	8009a44 <BackEndTask+0x198>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 800991e:	4643      	mov	r3, r8
 8009920:	019a      	lsls	r2, r3, #6
 8009922:	4bbf      	ldr	r3, [pc, #764]	; (8009c20 <BackEndTask+0x374>)
 8009924:	189b      	adds	r3, r3, r2
 8009926:	445b      	add	r3, fp
 8009928:	789b      	ldrb	r3, [r3, #2]
 800992a:	9300      	str	r3, [sp, #0]
					parseStart =packetStart + 3;
 800992c:	465b      	mov	r3, fp
 800992e:	3303      	adds	r3, #3
 8009930:	9302      	str	r3, [sp, #8]
 8009932:	e046      	b.n	80099c2 <BackEndTask+0x116>
 8009934:	9600      	str	r6, [sp, #0]
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009936:	223f      	movs	r2, #63	; 0x3f
 8009938:	4692      	mov	sl, r2
 800993a:	44b2      	add	sl, r6
 800993c:	4652      	mov	r2, sl
 800993e:	7812      	ldrb	r2, [r2, #0]
 8009940:	2a48      	cmp	r2, #72	; 0x48
 8009942:	d005      	beq.n	8009950 <BackEndTask+0xa4>
							if(BOS.disableCLI == false){
 8009944:	4663      	mov	r3, ip
 8009946:	2b00      	cmp	r3, #0
 8009948:	d000      	beq.n	800994c <BackEndTask+0xa0>
 800994a:	e13f      	b.n	8009bcc <BackEndTask+0x320>
 800994c:	9a00      	ldr	r2, [sp, #0]
 800994e:	e00c      	b.n	800996a <BackEndTask+0xbe>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009950:	7832      	ldrb	r2, [r6, #0]
 8009952:	2a5a      	cmp	r2, #90	; 0x5a
 8009954:	d1f6      	bne.n	8009944 <BackEndTask+0x98>
				if(emptyBuffer){
 8009956:	2800      	cmp	r0, #0
 8009958:	d074      	beq.n	8009a44 <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE - 1;
 800995a:	469b      	mov	fp, r3
 800995c:	e136      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800995e:	293f      	cmp	r1, #63	; 0x3f
 8009960:	d024      	beq.n	80099ac <BackEndTask+0x100>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009962:	3101      	adds	r1, #1
 8009964:	2940      	cmp	r1, #64	; 0x40
 8009966:	d100      	bne.n	800996a <BackEndTask+0xbe>
 8009968:	e130      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800996a:	5c53      	ldrb	r3, [r2, r1]
 800996c:	2b0d      	cmp	r3, #13
 800996e:	d1f8      	bne.n	8009962 <BackEndTask+0xb6>
 8009970:	293e      	cmp	r1, #62	; 0x3e
 8009972:	dcf4      	bgt.n	800995e <BackEndTask+0xb2>
 8009974:	1850      	adds	r0, r2, r1
 8009976:	7843      	ldrb	r3, [r0, #1]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1f0      	bne.n	800995e <BackEndTask+0xb2>
										UARTRxBuf[port - 1][j] =0;
 800997c:	4643      	mov	r3, r8
 800997e:	019a      	lsls	r2, r3, #6
 8009980:	4ba7      	ldr	r3, [pc, #668]	; (8009c20 <BackEndTask+0x374>)
 8009982:	189b      	adds	r3, r3, r2
 8009984:	2200      	movs	r2, #0
 8009986:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009988:	3101      	adds	r1, #1
 800998a:	464b      	mov	r3, r9
 800998c:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 800998e:	4ba5      	ldr	r3, [pc, #660]	; (8009c24 <BackEndTask+0x378>)
 8009990:	7819      	ldrb	r1, [r3, #0]
 8009992:	48a5      	ldr	r0, [pc, #660]	; (8009c28 <BackEndTask+0x37c>)
 8009994:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009996:	3203      	adds	r2, #3
 8009998:	7022      	strb	r2, [r4, #0]
										PcPort =port;
 800999a:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 800999c:	4ba3      	ldr	r3, [pc, #652]	; (8009c2c <BackEndTask+0x380>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	3a01      	subs	r2, #1
 80099a4:	2100      	movs	r1, #0
 80099a6:	f005 fa65 	bl	800ee74 <xTaskGenericNotify>
										break;
 80099aa:	e10f      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80099ac:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 80099ae:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1a8      	bne.n	8009906 <BackEndTask+0x5a>
 80099b4:	e7e2      	b.n	800997c <BackEndTask+0xd0>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 80099b6:	0033      	movs	r3, r6
 80099b8:	333f      	adds	r3, #63	; 0x3f
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	9300      	str	r3, [sp, #0]
					parseStart =0;
 80099be:	2300      	movs	r3, #0
 80099c0:	9302      	str	r3, [sp, #8]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	3303      	adds	r3, #3
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	445b      	add	r3, fp
 80099ca:	469a      	mov	sl, r3
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 80099cc:	2b3f      	cmp	r3, #63	; 0x3f
 80099ce:	dd03      	ble.n	80099d8 <BackEndTask+0x12c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80099d0:	2340      	movs	r3, #64	; 0x40
 80099d2:	425b      	negs	r3, r3
 80099d4:	469c      	mov	ip, r3
 80099d6:	44e2      	add	sl, ip
				if(packetStart != packetEnd) // Non-empty packet
 80099d8:	45da      	cmp	sl, fp
 80099da:	d100      	bne.n	80099de <BackEndTask+0x132>
 80099dc:	e0d0      	b.n	8009b80 <BackEndTask+0x2d4>
					Delay_ms(1);
 80099de:	2001      	movs	r0, #1
 80099e0:	f005 fe54 	bl	800f68c <HAL_Delay>
					if(packetStart < packetEnd){
 80099e4:	45da      	cmp	sl, fp
 80099e6:	dd34      	ble.n	8009a52 <BackEndTask+0x1a6>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 80099e8:	4b91      	ldr	r3, [pc, #580]	; (8009c30 <BackEndTask+0x384>)
 80099ea:	18fb      	adds	r3, r7, r3
 80099ec:	019b      	lsls	r3, r3, #6
 80099ee:	445b      	add	r3, fp
 80099f0:	4a8b      	ldr	r2, [pc, #556]	; (8009c20 <BackEndTask+0x374>)
 80099f2:	4694      	mov	ip, r2
 80099f4:	4463      	add	r3, ip
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	9a01      	ldr	r2, [sp, #4]
 80099fa:	0019      	movs	r1, r3
 80099fc:	488d      	ldr	r0, [pc, #564]	; (8009c34 <BackEndTask+0x388>)
 80099fe:	f009 fad4 	bl	8012faa <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	1cd9      	adds	r1, r3, #3
 8009a06:	488b      	ldr	r0, [pc, #556]	; (8009c34 <BackEndTask+0x388>)
 8009a08:	f002 fee0 	bl	800c7cc <CalculateCRC8>
 8009a0c:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009a0e:	2238      	movs	r2, #56	; 0x38
 8009a10:	2100      	movs	r1, #0
 8009a12:	4888      	ldr	r0, [pc, #544]	; (8009c34 <BackEndTask+0x388>)
 8009a14:	f009 fad2 	bl	8012fbc <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009a18:	4643      	mov	r3, r8
 8009a1a:	019b      	lsls	r3, r3, #6
 8009a1c:	4a80      	ldr	r2, [pc, #512]	; (8009c20 <BackEndTask+0x374>)
 8009a1e:	4694      	mov	ip, r2
 8009a20:	4463      	add	r3, ip
 8009a22:	4652      	mov	r2, sl
 8009a24:	5c9b      	ldrb	r3, [r3, r2]
 8009a26:	9a01      	ldr	r2, [sp, #4]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d040      	beq.n	8009aae <BackEndTask+0x202>
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009a2c:	9a00      	ldr	r2, [sp, #0]
 8009a2e:	3204      	adds	r2, #4
 8009a30:	2100      	movs	r1, #0
 8009a32:	9803      	ldr	r0, [sp, #12]
 8009a34:	f009 fac2 	bl	8012fbc <memset>
 8009a38:	e0b8      	b.n	8009bac <BackEndTask+0x300>
					packetLength =UARTRxBuf[port - 1][0];
 8009a3a:	7833      	ldrb	r3, [r6, #0]
 8009a3c:	9300      	str	r3, [sp, #0]
					parseStart =1;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	9302      	str	r3, [sp, #8]
 8009a42:	e7be      	b.n	80099c2 <BackEndTask+0x116>
					packetLength =UARTRxBuf[port - 1][1];
 8009a44:	7873      	ldrb	r3, [r6, #1]
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	233f      	movs	r3, #63	; 0x3f
 8009a4a:	469b      	mov	fp, r3
					parseStart =2;
 8009a4c:	3b3d      	subs	r3, #61	; 0x3d
 8009a4e:	9302      	str	r3, [sp, #8]
 8009a50:	e7b7      	b.n	80099c2 <BackEndTask+0x116>
						MSG_RX_BUF_SIZE - packetStart);
 8009a52:	2240      	movs	r2, #64	; 0x40
 8009a54:	465b      	mov	r3, fp
 8009a56:	1ad3      	subs	r3, r2, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009a58:	4a75      	ldr	r2, [pc, #468]	; (8009c30 <BackEndTask+0x384>)
 8009a5a:	18b9      	adds	r1, r7, r2
 8009a5c:	0189      	lsls	r1, r1, #6
 8009a5e:	4459      	add	r1, fp
 8009a60:	4a6f      	ldr	r2, [pc, #444]	; (8009c20 <BackEndTask+0x374>)
 8009a62:	4694      	mov	ip, r2
 8009a64:	4461      	add	r1, ip
 8009a66:	9303      	str	r3, [sp, #12]
 8009a68:	001a      	movs	r2, r3
 8009a6a:	4872      	ldr	r0, [pc, #456]	; (8009c34 <BackEndTask+0x388>)
 8009a6c:	f009 fa9d 	bl	8012faa <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009a70:	4a70      	ldr	r2, [pc, #448]	; (8009c34 <BackEndTask+0x388>)
 8009a72:	0010      	movs	r0, r2
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	469c      	mov	ip, r3
 8009a78:	4460      	add	r0, ip
 8009a7a:	9a01      	ldr	r2, [sp, #4]
 8009a7c:	1ad2      	subs	r2, r2, r3
 8009a7e:	0031      	movs	r1, r6
 8009a80:	f009 fa93 	bl	8012faa <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009a84:	9b00      	ldr	r3, [sp, #0]
 8009a86:	1cd9      	adds	r1, r3, #3
 8009a88:	486a      	ldr	r0, [pc, #424]	; (8009c34 <BackEndTask+0x388>)
 8009a8a:	f002 fe9f 	bl	800c7cc <CalculateCRC8>
 8009a8e:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009a90:	2238      	movs	r2, #56	; 0x38
 8009a92:	2100      	movs	r1, #0
 8009a94:	4867      	ldr	r0, [pc, #412]	; (8009c34 <BackEndTask+0x388>)
 8009a96:	f009 fa91 	bl	8012fbc <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009a9a:	4643      	mov	r3, r8
 8009a9c:	019b      	lsls	r3, r3, #6
 8009a9e:	4a60      	ldr	r2, [pc, #384]	; (8009c20 <BackEndTask+0x374>)
 8009aa0:	4694      	mov	ip, r2
 8009aa2:	4463      	add	r3, ip
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	5c9b      	ldrb	r3, [r3, r2]
 8009aa8:	9a01      	ldr	r2, [sp, #4]
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d168      	bne.n	8009b80 <BackEndTask+0x2d4>
						portStatus[port] =MSG;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	7023      	strb	r3, [r4, #0]
						messageLength[port - 1] =packetLength;
 8009ab2:	1ebb      	subs	r3, r7, #2
 8009ab4:	4a60      	ldr	r2, [pc, #384]	; (8009c38 <BackEndTask+0x38c>)
 8009ab6:	9900      	ldr	r1, [sp, #0]
 8009ab8:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009aba:	233f      	movs	r3, #63	; 0x3f
 8009abc:	9c02      	ldr	r4, [sp, #8]
 8009abe:	1b1b      	subs	r3, r3, r4
 8009ac0:	000a      	movs	r2, r1
 8009ac2:	428b      	cmp	r3, r1
 8009ac4:	db27      	blt.n	8009b16 <BackEndTask+0x26a>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009ac6:	00f8      	lsls	r0, r7, #3
 8009ac8:	1bc0      	subs	r0, r0, r7
 8009aca:	00c0      	lsls	r0, r0, #3
 8009acc:	9b05      	ldr	r3, [sp, #20]
 8009ace:	469c      	mov	ip, r3
 8009ad0:	4460      	add	r0, ip
 8009ad2:	4b57      	ldr	r3, [pc, #348]	; (8009c30 <BackEndTask+0x384>)
 8009ad4:	18f9      	adds	r1, r7, r3
 8009ad6:	0189      	lsls	r1, r1, #6
 8009ad8:	46a4      	mov	ip, r4
 8009ada:	4461      	add	r1, ip
 8009adc:	4b50      	ldr	r3, [pc, #320]	; (8009c20 <BackEndTask+0x374>)
 8009ade:	18c9      	adds	r1, r1, r3
 8009ae0:	f009 fa63 	bl	8012faa <memcpy>
						if(packetStart < packetEnd){
 8009ae4:	45da      	cmp	sl, fp
 8009ae6:	dd36      	ble.n	8009b56 <BackEndTask+0x2aa>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009ae8:	9a00      	ldr	r2, [sp, #0]
 8009aea:	3204      	adds	r2, #4
 8009aec:	4b50      	ldr	r3, [pc, #320]	; (8009c30 <BackEndTask+0x384>)
 8009aee:	18f8      	adds	r0, r7, r3
 8009af0:	0180      	lsls	r0, r0, #6
 8009af2:	4458      	add	r0, fp
 8009af4:	4b4a      	ldr	r3, [pc, #296]	; (8009c20 <BackEndTask+0x374>)
 8009af6:	18c0      	adds	r0, r0, r3
 8009af8:	2100      	movs	r1, #0
 8009afa:	f009 fa5f 	bl	8012fbc <memset>
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009afe:	4653      	mov	r3, sl
 8009b00:	3301      	adds	r3, #1
 8009b02:	464a      	mov	r2, r9
 8009b04:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009b06:	4a4d      	ldr	r2, [pc, #308]	; (8009c3c <BackEndTask+0x390>)
 8009b08:	8813      	ldrh	r3, [r2, #0]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8009b0e:	0028      	movs	r0, r5
 8009b10:	f7ff fb6a 	bl	80091e8 <NotifyMessagingTask>
						continue; // Inspect the next port circular buffer
 8009b14:	e05a      	b.n	8009bcc <BackEndTask+0x320>
 8009b16:	00fb      	lsls	r3, r7, #3
 8009b18:	1bdb      	subs	r3, r3, r7
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	4698      	mov	r8, r3
							MSG_RX_BUF_SIZE - parseStart);
 8009b1e:	2440      	movs	r4, #64	; 0x40
 8009b20:	9b02      	ldr	r3, [sp, #8]
 8009b22:	1ae4      	subs	r4, r4, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009b24:	9a04      	ldr	r2, [sp, #16]
 8009b26:	4442      	add	r2, r8
 8009b28:	0010      	movs	r0, r2
 8009b2a:	4a41      	ldr	r2, [pc, #260]	; (8009c30 <BackEndTask+0x384>)
 8009b2c:	18b9      	adds	r1, r7, r2
 8009b2e:	0189      	lsls	r1, r1, #6
 8009b30:	469c      	mov	ip, r3
 8009b32:	4461      	add	r1, ip
 8009b34:	4b3a      	ldr	r3, [pc, #232]	; (8009c20 <BackEndTask+0x374>)
 8009b36:	18c9      	adds	r1, r1, r3
 8009b38:	0022      	movs	r2, r4
 8009b3a:	f009 fa36 	bl	8012faa <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009b3e:	4640      	mov	r0, r8
 8009b40:	3870      	subs	r0, #112	; 0x70
 8009b42:	1900      	adds	r0, r0, r4
 8009b44:	4b33      	ldr	r3, [pc, #204]	; (8009c14 <BackEndTask+0x368>)
 8009b46:	469c      	mov	ip, r3
 8009b48:	4460      	add	r0, ip
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	1b1a      	subs	r2, r3, r4
 8009b4e:	0031      	movs	r1, r6
 8009b50:	f009 fa2b 	bl	8012faa <memcpy>
 8009b54:	e7c6      	b.n	8009ae4 <BackEndTask+0x238>
							MSG_RX_BUF_SIZE - packetStart);
 8009b56:	2440      	movs	r4, #64	; 0x40
 8009b58:	465b      	mov	r3, fp
 8009b5a:	1ae4      	subs	r4, r4, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009b5c:	4b34      	ldr	r3, [pc, #208]	; (8009c30 <BackEndTask+0x384>)
 8009b5e:	18f8      	adds	r0, r7, r3
 8009b60:	0180      	lsls	r0, r0, #6
 8009b62:	4458      	add	r0, fp
 8009b64:	4b2e      	ldr	r3, [pc, #184]	; (8009c20 <BackEndTask+0x374>)
 8009b66:	18c0      	adds	r0, r0, r3
 8009b68:	0022      	movs	r2, r4
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	f009 fa26 	bl	8012fbc <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b70:	9a00      	ldr	r2, [sp, #0]
 8009b72:	3204      	adds	r2, #4
 8009b74:	1b12      	subs	r2, r2, r4
 8009b76:	2100      	movs	r1, #0
 8009b78:	0030      	movs	r0, r6
 8009b7a:	f009 fa1f 	bl	8012fbc <memset>
 8009b7e:	e7be      	b.n	8009afe <BackEndTask+0x252>
				}
				else{ // wrap around
					memset(&UARTRxBuf[port - 1][packetStart],0,
					MSG_RX_BUF_SIZE - packetStart);
 8009b80:	2240      	movs	r2, #64	; 0x40
 8009b82:	465b      	mov	r3, fp
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	4698      	mov	r8, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009b88:	4b29      	ldr	r3, [pc, #164]	; (8009c30 <BackEndTask+0x384>)
 8009b8a:	18f8      	adds	r0, r7, r3
 8009b8c:	0180      	lsls	r0, r0, #6
 8009b8e:	4458      	add	r0, fp
 8009b90:	4b23      	ldr	r3, [pc, #140]	; (8009c20 <BackEndTask+0x374>)
 8009b92:	18c0      	adds	r0, r0, r3
 8009b94:	4642      	mov	r2, r8
 8009b96:	2100      	movs	r1, #0
 8009b98:	f009 fa10 	bl	8012fbc <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b9c:	9a00      	ldr	r2, [sp, #0]
 8009b9e:	3204      	adds	r2, #4
 8009ba0:	4643      	mov	r3, r8
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	0030      	movs	r0, r6
 8009ba8:	f009 fa08 	bl	8012fbc <memset>
				}
				
				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009bac:	4653      	mov	r3, sl
 8009bae:	3301      	adds	r3, #1
 8009bb0:	464a      	mov	r2, r9
 8009bb2:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 8009bb4:	4a22      	ldr	r2, [pc, #136]	; (8009c40 <BackEndTask+0x394>)
 8009bb6:	8813      	ldrh	r3, [r2, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	8013      	strh	r3, [r2, #0]
 8009bbc:	e014      	b.n	8009be8 <BackEndTask+0x33c>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009bbe:	0028      	movs	r0, r5
 8009bc0:	f003 fbea 	bl	800d398 <GetUart>
 8009bc4:	2240      	movs	r2, #64	; 0x40
 8009bc6:	0031      	movs	r1, r6
 8009bc8:	f008 fac0 	bl	801214c <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009bcc:	3501      	adds	r5, #1
 8009bce:	b2ed      	uxtb	r5, r5
 8009bd0:	3701      	adds	r7, #1
 8009bd2:	3640      	adds	r6, #64	; 0x40
 8009bd4:	2d07      	cmp	r5, #7
 8009bd6:	d016      	beq.n	8009c06 <BackEndTask+0x35a>
 8009bd8:	1e7c      	subs	r4, r7, #1
 8009bda:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <BackEndTask+0x37c>)
 8009bdc:	469c      	mov	ip, r3
 8009bde:	4464      	add	r4, ip
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009be0:	7823      	ldrb	r3, [r4, #0]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d800      	bhi.n	8009be8 <BackEndTask+0x33c>
 8009be6:	e671      	b.n	80098cc <BackEndTask+0x20>
 8009be8:	1ebb      	subs	r3, r7, #2
 8009bea:	4a16      	ldr	r2, [pc, #88]	; (8009c44 <BackEndTask+0x398>)
 8009bec:	4694      	mov	ip, r2
 8009bee:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	2a00      	cmp	r2, #0
 8009bf4:	d0ea      	beq.n	8009bcc <BackEndTask+0x320>
				MsgDMAStopped[port - 1] = false;
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 8009bfa:	7823      	ldrb	r3, [r4, #0]
 8009bfc:	2b05      	cmp	r3, #5
 8009bfe:	d1de      	bne.n	8009bbe <BackEndTask+0x312>
					portStatus[port] =FREE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	7023      	strb	r3, [r4, #0]
 8009c04:	e7db      	b.n	8009bbe <BackEndTask+0x312>
			}
		}

		taskYIELD();
 8009c06:	f005 fbc3 	bl	800f390 <vPortYield>
 8009c0a:	4e05      	ldr	r6, [pc, #20]	; (8009c20 <BackEndTask+0x374>)
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009c0c:	2702      	movs	r7, #2
		for(port =1; port <= NumOfPorts; port++){
 8009c0e:	2501      	movs	r5, #1
 8009c10:	e7e2      	b.n	8009bd8 <BackEndTask+0x32c>
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	20000d08 	.word	0x20000d08
 8009c18:	20001450 	.word	0x20001450
 8009c1c:	200069c4 	.word	0x200069c4
 8009c20:	200012d0 	.word	0x200012d0
 8009c24:	20000a77 	.word	0x20000a77
 8009c28:	200010f8 	.word	0x200010f8
 8009c2c:	20001504 	.word	0x20001504
 8009c30:	03fffffe 	.word	0x03fffffe
 8009c34:	20001458 	.word	0x20001458
 8009c38:	20000f30 	.word	0x20000f30
 8009c3c:	200015f0 	.word	0x200015f0
 8009c40:	20001798 	.word	0x20001798
 8009c44:	200012c8 	.word	0x200012c8

08009c48 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8009c48:	2001      	movs	r0, #1
 8009c4a:	4770      	bx	lr

08009c4c <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8009c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4e:	46de      	mov	lr, fp
 8009c50:	4657      	mov	r7, sl
 8009c52:	464e      	mov	r6, r9
 8009c54:	4645      	mov	r5, r8
 8009c56:	b5e0      	push	{r5, r6, r7, lr}
 8009c58:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t )(unsigned )argument;
 8009c5a:	b2c3      	uxtb	r3, r0
 8009c5c:	9308      	str	r3, [sp, #32]
 8009c5e:	23ff      	movs	r3, #255	; 0xff
 8009c60:	4003      	ands	r3, r0
 8009c62:	469b      	mov	fp, r3
		if(messageLength[port - 1]){
 8009c64:	1e5d      	subs	r5, r3, #1
 8009c66:	00eb      	lsls	r3, r5, #3
 8009c68:	1b5b      	subs	r3, r3, r5
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009c6e:	4ad6      	ldr	r2, [pc, #856]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009c70:	18d3      	adds	r3, r2, r3
 8009c72:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 8009c78:	2700      	movs	r7, #0
			if(cMessage[port - 1][2] >> 7){
 8009c7a:	000e      	movs	r6, r1
 8009c7c:	1853      	adds	r3, r2, r1
 8009c7e:	3302      	adds	r3, #2
 8009c80:	9309      	str	r3, [sp, #36]	; 0x24
 8009c82:	468a      	mov	sl, r1
 8009c84:	e026      	b.n	8009cd4 <PxMessagingTask+0x88>
				longMessage =1;
 8009c86:	4ad1      	ldr	r2, [pc, #836]	; (8009fcc <PxMessagingTask+0x380>)
 8009c88:	2001      	movs	r0, #1
 8009c8a:	7010      	strb	r0, [r2, #0]
 8009c8c:	e033      	b.n	8009cf6 <PxMessagingTask+0xaa>
				code =cMessage[port - 1][3 + shift];
 8009c8e:	4bce      	ldr	r3, [pc, #824]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009c90:	199b      	adds	r3, r3, r6
 8009c92:	189a      	adds	r2, r3, r2
 8009c94:	78d3      	ldrb	r3, [r2, #3]
 8009c96:	4698      	mov	r8, r3
 8009c98:	e04a      	b.n	8009d30 <PxMessagingTask+0xe4>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8009c9a:	4643      	mov	r3, r8
 8009c9c:	2b19      	cmp	r3, #25
 8009c9e:	d063      	beq.n	8009d68 <PxMessagingTask+0x11c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8009ca0:	2b1a      	cmp	r3, #26
 8009ca2:	d06b      	beq.n	8009d7c <PxMessagingTask+0x130>
		if(result == BOS_ERR_UnknownMessage){
 8009ca4:	2f01      	cmp	r7, #1
 8009ca6:	d101      	bne.n	8009cac <PxMessagingTask+0x60>
 8009ca8:	f001 fabe 	bl	800b228 <PxMessagingTask+0x15dc>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009cac:	4cc8      	ldr	r4, [pc, #800]	; (8009fd0 <PxMessagingTask+0x384>)
 8009cae:	5d62      	ldrb	r2, [r4, r5]
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	9807      	ldr	r0, [sp, #28]
 8009cb4:	f009 f982 	bl	8012fbc <memset>
		messageLength[port - 1] =0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8009cbc:	4bc5      	ldr	r3, [pc, #788]	; (8009fd4 <PxMessagingTask+0x388>)
 8009cbe:	465a      	mov	r2, fp
 8009cc0:	5c9b      	ldrb	r3, [r3, r2]
 8009cc2:	3b02      	subs	r3, #2
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d903      	bls.n	8009cd0 <PxMessagingTask+0x84>
			portStatus[port] =FREE;
 8009cc8:	4bc2      	ldr	r3, [pc, #776]	; (8009fd4 <PxMessagingTask+0x388>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4659      	mov	r1, fp
 8009cce:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8009cd0:	f005 fb5e 	bl	800f390 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	4249      	negs	r1, r1
 8009cd8:	2001      	movs	r0, #1
 8009cda:	f005 f87f 	bl	800eddc <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8009cde:	4bbc      	ldr	r3, [pc, #752]	; (8009fd0 <PxMessagingTask+0x384>)
 8009ce0:	5d59      	ldrb	r1, [r3, r5]
 8009ce2:	2900      	cmp	r1, #0
 8009ce4:	d0de      	beq.n	8009ca4 <PxMessagingTask+0x58>
			if(cMessage[port - 1][2] >> 7){
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	b25a      	sxtb	r2, r3
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	dbca      	blt.n	8009c86 <PxMessagingTask+0x3a>
				longMessage =0;
 8009cf0:	4ab6      	ldr	r2, [pc, #728]	; (8009fcc <PxMessagingTask+0x380>)
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	7010      	strb	r0, [r2, #0]
			dst =cMessage[port - 1][0];
 8009cf6:	4ab4      	ldr	r2, [pc, #720]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009cf8:	5cb0      	ldrb	r0, [r6, r2]
 8009cfa:	4681      	mov	r9, r0
			src =cMessage[port - 1][1];
 8009cfc:	1992      	adds	r2, r2, r6
 8009cfe:	7852      	ldrb	r2, [r2, #1]
 8009d00:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8009d02:	2201      	movs	r2, #1
 8009d04:	401a      	ands	r2, r3
			shift =0;
 8009d06:	9206      	str	r2, [sp, #24]
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 8009d08:	4cb3      	ldr	r4, [pc, #716]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009d0a:	0718      	lsls	r0, r3, #28
 8009d0c:	0f80      	lsrs	r0, r0, #30
 8009d0e:	71e0      	strb	r0, [r4, #7]
			BOS.response =(cMessage[port - 1][2]) & 0x60; // 6th-7th bits Response mode
 8009d10:	2060      	movs	r0, #96	; 0x60
 8009d12:	4018      	ands	r0, r3
 8009d14:	71a0      	strb	r0, [r4, #6]
			if(extendCode == true){
 8009d16:	079b      	lsls	r3, r3, #30
 8009d18:	d5b9      	bpl.n	8009c8e <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8009d1a:	4bab      	ldr	r3, [pc, #684]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d1c:	199b      	adds	r3, r3, r6
 8009d1e:	189b      	adds	r3, r3, r2
 8009d20:	7918      	ldrb	r0, [r3, #4]
 8009d22:	0200      	lsls	r0, r0, #8
 8009d24:	78db      	ldrb	r3, [r3, #3]
 8009d26:	181b      	adds	r3, r3, r0
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	4698      	mov	r8, r3
				++shift;
 8009d2c:	1c53      	adds	r3, r2, #1
 8009d2e:	9306      	str	r3, [sp, #24]
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009d30:	464b      	mov	r3, r9
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2bfc      	cmp	r3, #252	; 0xfc
 8009d38:	d901      	bls.n	8009d3e <PxMessagingTask+0xf2>
 8009d3a:	f001 faae 	bl	800b29a <PxMessagingTask+0x164e>
 8009d3e:	4ba7      	ldr	r3, [pc, #668]	; (8009fdc <PxMessagingTask+0x390>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	454b      	cmp	r3, r9
 8009d44:	d101      	bne.n	8009d4a <PxMessagingTask+0xfe>
 8009d46:	f001 faa8 	bl	800b29a <PxMessagingTask+0x164e>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d101      	bne.n	8009d52 <PxMessagingTask+0x106>
 8009d4e:	f001 fa9d 	bl	800b28c <PxMessagingTask+0x1640>
				ForwardReceivedMessage(port);
 8009d52:	9808      	ldr	r0, [sp, #32]
 8009d54:	f7ff fc4e 	bl	80095f4 <ForwardReceivedMessage>
				if(BOS.trace)
 8009d58:	4b9f      	ldr	r3, [pc, #636]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009d5a:	79db      	ldrb	r3, [r3, #7]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d09c      	beq.n	8009c9a <PxMessagingTask+0x4e>
					indMode =IND_SHORT_BLINK;
 8009d60:	4b9f      	ldr	r3, [pc, #636]	; (8009fe0 <PxMessagingTask+0x394>)
 8009d62:	2203      	movs	r2, #3
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e798      	b.n	8009c9a <PxMessagingTask+0x4e>
					Delay_ms(100);
 8009d68:	2064      	movs	r0, #100	; 0x64
 8009d6a:	f005 fc8f 	bl	800f68c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9a08      	ldr	r2, [sp, #32]
 8009d72:	4649      	mov	r1, r9
 8009d74:	9804      	ldr	r0, [sp, #16]
 8009d76:	f7f9 fee9 	bl	8003b4c <remoteBootloaderUpdate>
 8009d7a:	e793      	b.n	8009ca4 <PxMessagingTask+0x58>
					Delay_ms(100);
 8009d7c:	2064      	movs	r0, #100	; 0x64
 8009d7e:	f005 fc85 	bl	800f68c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8009d82:	4b91      	ldr	r3, [pc, #580]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d84:	199b      	adds	r3, r3, r6
 8009d86:	9a06      	ldr	r2, [sp, #24]
 8009d88:	5c9b      	ldrb	r3, [r3, r2]
 8009d8a:	9a08      	ldr	r2, [sp, #32]
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	9804      	ldr	r0, [sp, #16]
 8009d90:	f7f9 fedc 	bl	8003b4c <remoteBootloaderUpdate>
 8009d94:	e786      	b.n	8009ca4 <PxMessagingTask+0x58>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009d96:	4b8c      	ldr	r3, [pc, #560]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d98:	199b      	adds	r3, r3, r6
 8009d9a:	1859      	adds	r1, r3, r1
 8009d9c:	3901      	subs	r1, #1
 8009d9e:	780b      	ldrb	r3, [r1, #0]
 8009da0:	4a90      	ldr	r2, [pc, #576]	; (8009fe4 <PxMessagingTask+0x398>)
 8009da2:	7812      	ldrb	r2, [r2, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d113      	bne.n	8009dd0 <PxMessagingTask+0x184>
					result =BOS_ERR_MSG_Reflection;
 8009da8:	2703      	movs	r7, #3
				if(result == BOS_OK){
 8009daa:	2f00      	cmp	r7, #0
 8009dac:	d000      	beq.n	8009db0 <PxMessagingTask+0x164>
 8009dae:	e779      	b.n	8009ca4 <PxMessagingTask+0x58>
				shift +=4;
 8009db0:	9c06      	ldr	r4, [sp, #24]
 8009db2:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8009db4:	4b86      	ldr	r3, [pc, #536]	; (8009fd0 <PxMessagingTask+0x384>)
 8009db6:	5d59      	ldrb	r1, [r3, r5]
 8009db8:	1b0a      	subs	r2, r1, r4
 8009dba:	b2d3      	uxtb	r3, r2
 8009dbc:	9306      	str	r3, [sp, #24]
					switch(code){
 8009dbe:	4643      	mov	r3, r8
 8009dc0:	2b24      	cmp	r3, #36	; 0x24
 8009dc2:	d901      	bls.n	8009dc8 <PxMessagingTask+0x17c>
 8009dc4:	f001 fa04 	bl	800b1d0 <PxMessagingTask+0x1584>
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4a87      	ldr	r2, [pc, #540]	; (8009fe8 <PxMessagingTask+0x39c>)
 8009dcc:	58d3      	ldr	r3, [r2, r3]
 8009dce:	469f      	mov	pc, r3
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009dd0:	4a84      	ldr	r2, [pc, #528]	; (8009fe4 <PxMessagingTask+0x398>)
 8009dd2:	7013      	strb	r3, [r2, #0]
 8009dd4:	4a85      	ldr	r2, [pc, #532]	; (8009fec <PxMessagingTask+0x3a0>)
 8009dd6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8009dd8:	9908      	ldr	r1, [sp, #32]
 8009dda:	20ff      	movs	r0, #255	; 0xff
 8009ddc:	f7ff fc2a 	bl	8009634 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009de0:	4b7b      	ldr	r3, [pc, #492]	; (8009fd0 <PxMessagingTask+0x384>)
 8009de2:	5d5a      	ldrb	r2, [r3, r5]
 8009de4:	4b78      	ldr	r3, [pc, #480]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009de6:	199b      	adds	r3, r3, r6
 8009de8:	189b      	adds	r3, r3, r2
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]
 8009df0:	e7db      	b.n	8009daa <PxMessagingTask+0x15e>
							for(p =0; p < numOfParams; p++){
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01f      	beq.n	8009e38 <PxMessagingTask+0x1ec>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	1e58      	subs	r0, r3, #1
 8009dfc:	0042      	lsls	r2, r0, #1
 8009dfe:	4b7c      	ldr	r3, [pc, #496]	; (8009ff0 <PxMessagingTask+0x3a4>)
 8009e00:	5ad3      	ldrh	r3, [r2, r3]
 8009e02:	4652      	mov	r2, sl
 8009e04:	18a1      	adds	r1, r4, r2
 8009e06:	4a70      	ldr	r2, [pc, #448]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009e08:	1889      	adds	r1, r1, r2
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	4452      	add	r2, sl
 8009e0e:	1914      	adds	r4, r2, r4
 8009e10:	9a06      	ldr	r2, [sp, #24]
 8009e12:	3a01      	subs	r2, #1
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	18a4      	adds	r4, r4, r2
 8009e18:	2780      	movs	r7, #128	; 0x80
 8009e1a:	023f      	lsls	r7, r7, #8
 8009e1c:	4684      	mov	ip, r0
 8009e1e:	780a      	ldrb	r2, [r1, #0]
 8009e20:	3a01      	subs	r2, #1
 8009e22:	0038      	movs	r0, r7
 8009e24:	4110      	asrs	r0, r2
 8009e26:	4303      	orrs	r3, r0
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 8009e2c:	42a1      	cmp	r1, r4
 8009e2e:	d1f6      	bne.n	8009e1e <PxMessagingTask+0x1d2>
 8009e30:	4660      	mov	r0, ip
 8009e32:	0040      	lsls	r0, r0, #1
 8009e34:	4a6e      	ldr	r2, [pc, #440]	; (8009ff0 <PxMessagingTask+0x3a4>)
 8009e36:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 8009e38:	4b6e      	ldr	r3, [pc, #440]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	701a      	strb	r2, [r3, #0]
							break;
 8009e3e:	2700      	movs	r7, #0
 8009e40:	e734      	b.n	8009cac <PxMessagingTask+0x60>
							indMode =IND_PING;
 8009e42:	4b67      	ldr	r3, [pc, #412]	; (8009fe0 <PxMessagingTask+0x394>)
 8009e44:	2201      	movs	r2, #1
 8009e46:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009e48:	200a      	movs	r0, #10
 8009e4a:	f003 fbf4 	bl	800d636 <osDelay>
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009e4e:	4b62      	ldr	r3, [pc, #392]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009e50:	799b      	ldrb	r3, [r3, #6]
 8009e52:	2240      	movs	r2, #64	; 0x40
 8009e54:	4393      	bics	r3, r2
 8009e56:	2700      	movs	r7, #0
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d000      	beq.n	8009e5e <PxMessagingTask+0x212>
 8009e5c:	e726      	b.n	8009cac <PxMessagingTask+0x60>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8009e5e:	003a      	movs	r2, r7
 8009e60:	2102      	movs	r1, #2
 8009e62:	9804      	ldr	r0, [sp, #16]
 8009e64:	f7ff fc2e 	bl	80096c4 <SendMessageToModule>
 8009e68:	e720      	b.n	8009cac <PxMessagingTask+0x60>
							if(!moduleAlias[myID][0])
 8009e6a:	4b5c      	ldr	r3, [pc, #368]	; (8009fdc <PxMessagingTask+0x390>)
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	0093      	lsls	r3, r2, #2
 8009e70:	189b      	adds	r3, r3, r2
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	4a60      	ldr	r2, [pc, #384]	; (8009ff8 <PxMessagingTask+0x3ac>)
 8009e76:	5c9b      	ldrb	r3, [r3, r2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d117      	bne.n	8009eac <PxMessagingTask+0x260>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8009e7c:	9a04      	ldr	r2, [sp, #16]
 8009e7e:	495f      	ldr	r1, [pc, #380]	; (8009ffc <PxMessagingTask+0x3b0>)
 8009e80:	485f      	ldr	r0, [pc, #380]	; (800a000 <PxMessagingTask+0x3b4>)
 8009e82:	f009 fa95 	bl	80133b0 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8009e86:	4c5e      	ldr	r4, [pc, #376]	; (800a000 <PxMessagingTask+0x3b4>)
 8009e88:	0020      	movs	r0, r4
 8009e8a:	f7f6 f945 	bl	8000118 <strlen>
 8009e8e:	b282      	uxth	r2, r0
 8009e90:	4b5c      	ldr	r3, [pc, #368]	; (800a004 <PxMessagingTask+0x3b8>)
 8009e92:	7818      	ldrb	r0, [r3, #0]
 8009e94:	2301      	movs	r3, #1
 8009e96:	425b      	negs	r3, r3
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	3333      	adds	r3, #51	; 0x33
 8009e9c:	0021      	movs	r1, r4
 8009e9e:	f003 fa9d 	bl	800d3dc <writePxMutex>
							responseStatus =BOS_OK;
 8009ea2:	4b54      	ldr	r3, [pc, #336]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	701a      	strb	r2, [r3, #0]
							break;
 8009ea8:	2700      	movs	r7, #0
 8009eaa:	e6ff      	b.n	8009cac <PxMessagingTask+0x60>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8009eac:	230a      	movs	r3, #10
 8009eae:	9904      	ldr	r1, [sp, #16]
 8009eb0:	434b      	muls	r3, r1
 8009eb2:	4a51      	ldr	r2, [pc, #324]	; (8009ff8 <PxMessagingTask+0x3ac>)
 8009eb4:	189b      	adds	r3, r3, r2
 8009eb6:	000a      	movs	r2, r1
 8009eb8:	4953      	ldr	r1, [pc, #332]	; (800a008 <PxMessagingTask+0x3bc>)
 8009eba:	4851      	ldr	r0, [pc, #324]	; (800a000 <PxMessagingTask+0x3b4>)
 8009ebc:	f009 fa78 	bl	80133b0 <sprintf>
 8009ec0:	e7e1      	b.n	8009e86 <PxMessagingTask+0x23a>
							IND_ON();
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	2090      	movs	r0, #144	; 0x90
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	0109      	lsls	r1, r1, #4
 8009eca:	05c0      	lsls	r0, r0, #23
 8009ecc:	f007 f848 	bl	8010f60 <HAL_GPIO_WritePin>
							break;
 8009ed0:	2700      	movs	r7, #0
 8009ed2:	e6eb      	b.n	8009cac <PxMessagingTask+0x60>
							IND_OFF();
 8009ed4:	2180      	movs	r1, #128	; 0x80
 8009ed6:	2090      	movs	r0, #144	; 0x90
 8009ed8:	2200      	movs	r2, #0
 8009eda:	0109      	lsls	r1, r1, #4
 8009edc:	05c0      	lsls	r0, r0, #23
 8009ede:	f007 f83f 	bl	8010f60 <HAL_GPIO_WritePin>
							break;
 8009ee2:	2700      	movs	r7, #0
 8009ee4:	e6e2      	b.n	8009cac <PxMessagingTask+0x60>
							IND_toggle();
 8009ee6:	2180      	movs	r1, #128	; 0x80
 8009ee8:	2090      	movs	r0, #144	; 0x90
 8009eea:	0109      	lsls	r1, r1, #4
 8009eec:	05c0      	lsls	r0, r0, #23
 8009eee:	f007 f83d 	bl	8010f6c <HAL_GPIO_TogglePin>
							break;
 8009ef2:	2700      	movs	r7, #0
 8009ef4:	e6da      	b.n	8009cac <PxMessagingTask+0x60>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009ef6:	4f45      	ldr	r7, [pc, #276]	; (800a00c <PxMessagingTask+0x3c0>)
 8009ef8:	00ab      	lsls	r3, r5, #2
 8009efa:	4a33      	ldr	r2, [pc, #204]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009efc:	1992      	adds	r2, r2, r6
 8009efe:	1910      	adds	r0, r2, r4
 8009f00:	7881      	ldrb	r1, [r0, #2]
 8009f02:	468c      	mov	ip, r1
 8009f04:	9904      	ldr	r1, [sp, #16]
 8009f06:	0209      	lsls	r1, r1, #8
 8009f08:	4461      	add	r1, ip
 8009f0a:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f0c:	18fb      	adds	r3, r7, r3
 8009f0e:	5d11      	ldrb	r1, [r2, r4]
 8009f10:	0209      	lsls	r1, r1, #8
 8009f12:	7842      	ldrb	r2, [r0, #1]
 8009f14:	1852      	adds	r2, r2, r1
 8009f16:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8009f18:	4b3d      	ldr	r3, [pc, #244]	; (800a010 <PxMessagingTask+0x3c4>)
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	4a3d      	ldr	r2, [pc, #244]	; (800a014 <PxMessagingTask+0x3c8>)
 8009f1e:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8009f20:	0a1b      	lsrs	r3, r3, #8
 8009f22:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8009f24:	9c08      	ldr	r4, [sp, #32]
 8009f26:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8009f28:	2002      	movs	r0, #2
 8009f2a:	f003 fb84 	bl	800d636 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8009f2e:	2303      	movs	r3, #3
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	0020      	movs	r0, r4
 8009f3a:	f7ff f99b 	bl	8009274 <SendMessageFromPort>
							break;
 8009f3e:	2700      	movs	r7, #0
 8009f40:	e6b4      	b.n	8009cac <PxMessagingTask+0x60>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009f42:	4f32      	ldr	r7, [pc, #200]	; (800a00c <PxMessagingTask+0x3c0>)
 8009f44:	00ab      	lsls	r3, r5, #2
 8009f46:	4a20      	ldr	r2, [pc, #128]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009f48:	1992      	adds	r2, r2, r6
 8009f4a:	1910      	adds	r0, r2, r4
 8009f4c:	7881      	ldrb	r1, [r0, #2]
 8009f4e:	468c      	mov	ip, r1
 8009f50:	9904      	ldr	r1, [sp, #16]
 8009f52:	0209      	lsls	r1, r1, #8
 8009f54:	4461      	add	r1, ip
 8009f56:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	5d11      	ldrb	r1, [r2, r4]
 8009f5c:	0209      	lsls	r1, r1, #8
 8009f5e:	7842      	ldrb	r2, [r0, #1]
 8009f60:	1852      	adds	r2, r2, r1
 8009f62:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8009f64:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	701a      	strb	r2, [r3, #0]
							break;
 8009f6a:	2700      	movs	r7, #0
 8009f6c:	e69e      	b.n	8009cac <PxMessagingTask+0x60>
							ExploreNeighbors(port);
 8009f6e:	9808      	ldr	r0, [sp, #32]
 8009f70:	f7f9 fc24 	bl	80037bc <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8009f74:	4b1a      	ldr	r3, [pc, #104]	; (8009fe0 <PxMessagingTask+0x394>)
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009f7a:	200a      	movs	r0, #10
 8009f7c:	f003 fb5b 	bl	800d636 <osDelay>
 8009f80:	4f22      	ldr	r7, [pc, #136]	; (800a00c <PxMessagingTask+0x3c0>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009f82:	2401      	movs	r4, #1
							temp =0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	e004      	b.n	8009f94 <PxMessagingTask+0x348>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009f8a:	3401      	adds	r4, #1
 8009f8c:	b2e4      	uxtb	r4, r4
 8009f8e:	3704      	adds	r7, #4
 8009f90:	2c07      	cmp	r4, #7
 8009f92:	d011      	beq.n	8009fb8 <PxMessagingTask+0x36c>
								if(neighbors[p - 1][0]){
 8009f94:	883b      	ldrh	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0f7      	beq.n	8009f8a <PxMessagingTask+0x33e>
									messageParams[temp] =p;
 8009f9a:	4a1e      	ldr	r2, [pc, #120]	; (800a014 <PxMessagingTask+0x3c8>)
 8009f9c:	9b05      	ldr	r3, [sp, #20]
 8009f9e:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8009fa0:	1c58      	adds	r0, r3, #1
 8009fa2:	4694      	mov	ip, r2
 8009fa4:	4460      	add	r0, ip
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	0039      	movs	r1, r7
 8009faa:	f008 fffe 	bl	8012faa <memcpy>
									temp +=5;
 8009fae:	9b05      	ldr	r3, [sp, #20]
 8009fb0:	3305      	adds	r3, #5
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	e7e8      	b.n	8009f8a <PxMessagingTask+0x33e>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8009fb8:	466b      	mov	r3, sp
 8009fba:	8a9a      	ldrh	r2, [r3, #20]
 8009fbc:	210d      	movs	r1, #13
 8009fbe:	9804      	ldr	r0, [sp, #16]
 8009fc0:	f7ff fb80 	bl	80096c4 <SendMessageToModule>
							break;
 8009fc4:	2700      	movs	r7, #0
 8009fc6:	e671      	b.n	8009cac <PxMessagingTask+0x60>
 8009fc8:	20000d08 	.word	0x20000d08
 8009fcc:	20000ef5 	.word	0x20000ef5
 8009fd0:	20000f30 	.word	0x20000f30
 8009fd4:	200010f8 	.word	0x200010f8
 8009fd8:	200069c4 	.word	0x200069c4
 8009fdc:	20001076 	.word	0x20001076
 8009fe0:	20000ef4 	.word	0x20000ef4
 8009fe4:	200015f2 	.word	0x200015f2
 8009fe8:	0801a230 	.word	0x0801a230
 8009fec:	20000cb4 	.word	0x20000cb4
 8009ff0:	20006e40 	.word	0x20006e40
 8009ff4:	20001110 	.word	0x20001110
 8009ff8:	20000f68 	.word	0x20000f68
 8009ffc:	08018ae8 	.word	0x08018ae8
 800a000:	20001748 	.word	0x20001748
 800a004:	20000a77 	.word	0x20000a77
 800a008:	08018afc 	.word	0x08018afc
 800a00c:	20001078 	.word	0x20001078
 800a010:	20000050 	.word	0x20000050
 800a014:	20000f38 	.word	0x20000f38
							temp =numOfParams / 5;
 800a018:	2105      	movs	r1, #5
 800a01a:	9806      	ldr	r0, [sp, #24]
 800a01c:	f7f6 f898 	bl	8000150 <__udivsi3>
 800a020:	b2c2      	uxtb	r2, r0
 800a022:	9205      	str	r2, [sp, #20]
							for(uint8_t k =0; k < temp; k++){
 800a024:	2a00      	cmp	r2, #0
 800a026:	d018      	beq.n	800a05a <PxMessagingTask+0x40e>
 800a028:	4653      	mov	r3, sl
 800a02a:	191f      	adds	r7, r3, r4
 800a02c:	4bd4      	ldr	r3, [pc, #848]	; (800a380 <PxMessagingTask+0x734>)
 800a02e:	18ff      	adds	r7, r7, r3
 800a030:	3305      	adds	r3, #5
 800a032:	4453      	add	r3, sl
 800a034:	191c      	adds	r4, r3, r4
 800a036:	1e53      	subs	r3, r2, #1
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	009a      	lsls	r2, r3, #2
 800a03c:	18d3      	adds	r3, r2, r3
 800a03e:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a040:	4bd0      	ldr	r3, [pc, #832]	; (800a384 <PxMessagingTask+0x738>)
 800a042:	4698      	mov	r8, r3
 800a044:	7838      	ldrb	r0, [r7, #0]
 800a046:	3801      	subs	r0, #1
 800a048:	0080      	lsls	r0, r0, #2
 800a04a:	4440      	add	r0, r8
 800a04c:	1c79      	adds	r1, r7, #1
 800a04e:	2204      	movs	r2, #4
 800a050:	f008 ffab 	bl	8012faa <memcpy>
 800a054:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800a056:	42bc      	cmp	r4, r7
 800a058:	d1f4      	bne.n	800a044 <PxMessagingTask+0x3f8>
							responseStatus =BOS_OK;
 800a05a:	4bcb      	ldr	r3, [pc, #812]	; (800a388 <PxMessagingTask+0x73c>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
							break;
 800a060:	2700      	movs	r7, #0
 800a062:	e623      	b.n	8009cac <PxMessagingTask+0x60>
 800a064:	4653      	mov	r3, sl
 800a066:	18e3      	adds	r3, r4, r3
 800a068:	4ac5      	ldr	r2, [pc, #788]	; (800a380 <PxMessagingTask+0x734>)
 800a06a:	4698      	mov	r8, r3
 800a06c:	4490      	add	r8, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a06e:	2701      	movs	r7, #1
								if(p != port)
 800a070:	9b08      	ldr	r3, [sp, #32]
 800a072:	42bb      	cmp	r3, r7
 800a074:	d006      	beq.n	800a084 <PxMessagingTask+0x438>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a076:	0038      	movs	r0, r7
 800a078:	f003 f98e 	bl	800d398 <GetUart>
 800a07c:	4643      	mov	r3, r8
 800a07e:	7819      	ldrb	r1, [r3, #0]
 800a080:	f003 fa24 	bl	800d4cc <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a084:	3701      	adds	r7, #1
 800a086:	b2ff      	uxtb	r7, r7
 800a088:	2301      	movs	r3, #1
 800a08a:	469c      	mov	ip, r3
 800a08c:	44e0      	add	r8, ip
 800a08e:	2f07      	cmp	r7, #7
 800a090:	d1ee      	bne.n	800a070 <PxMessagingTask+0x424>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a092:	9808      	ldr	r0, [sp, #32]
 800a094:	f003 f980 	bl	800d398 <GetUart>
 800a098:	4bb9      	ldr	r3, [pc, #740]	; (800a380 <PxMessagingTask+0x734>)
 800a09a:	199b      	adds	r3, r3, r6
 800a09c:	191c      	adds	r4, r3, r4
 800a09e:	7aa1      	ldrb	r1, [r4, #10]
 800a0a0:	f003 fa14 	bl	800d4cc <SwapUartPins>
							break;
 800a0a4:	2700      	movs	r7, #0
 800a0a6:	e601      	b.n	8009cac <PxMessagingTask+0x60>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a0a8:	4bb5      	ldr	r3, [pc, #724]	; (800a380 <PxMessagingTask+0x734>)
 800a0aa:	199b      	adds	r3, r3, r6
 800a0ac:	5d1b      	ldrb	r3, [r3, r4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <PxMessagingTask+0x47a>
								myID =cMessage[port - 1][1 + shift];
 800a0b2:	2238      	movs	r2, #56	; 0x38
 800a0b4:	436a      	muls	r2, r5
 800a0b6:	4bb2      	ldr	r3, [pc, #712]	; (800a380 <PxMessagingTask+0x734>)
 800a0b8:	189b      	adds	r3, r3, r2
 800a0ba:	191c      	adds	r4, r3, r4
 800a0bc:	7862      	ldrb	r2, [r4, #1]
 800a0be:	4bb3      	ldr	r3, [pc, #716]	; (800a38c <PxMessagingTask+0x740>)
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	2700      	movs	r7, #0
 800a0c4:	e5f2      	b.n	8009cac <PxMessagingTask+0x60>
 800a0c6:	2700      	movs	r7, #0
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d000      	beq.n	800a0ce <PxMessagingTask+0x482>
 800a0cc:	e5ee      	b.n	8009cac <PxMessagingTask+0x60>
								messageParams[0] =0; /* change own ID */
 800a0ce:	49b0      	ldr	r1, [pc, #704]	; (800a390 <PxMessagingTask+0x744>)
 800a0d0:	700f      	strb	r7, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a0d2:	2238      	movs	r2, #56	; 0x38
 800a0d4:	436a      	muls	r2, r5
 800a0d6:	4baa      	ldr	r3, [pc, #680]	; (800a380 <PxMessagingTask+0x734>)
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	191b      	adds	r3, r3, r4
 800a0dc:	785a      	ldrb	r2, [r3, #1]
 800a0de:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a0e0:	7898      	ldrb	r0, [r3, #2]
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	330d      	adds	r3, #13
 800a0e8:	003a      	movs	r2, r7
 800a0ea:	0039      	movs	r1, r7
 800a0ec:	f7ff f8c2 	bl	8009274 <SendMessageFromPort>
 800a0f0:	e5dc      	b.n	8009cac <PxMessagingTask+0x60>
							if(longMessage){
 800a0f2:	4ba8      	ldr	r3, [pc, #672]	; (800a394 <PxMessagingTask+0x748>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d011      	beq.n	800a11e <PxMessagingTask+0x4d2>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a0fa:	4ba7      	ldr	r3, [pc, #668]	; (800a398 <PxMessagingTask+0x74c>)
 800a0fc:	4698      	mov	r8, r3
 800a0fe:	881f      	ldrh	r7, [r3, #0]
 800a100:	48a6      	ldr	r0, [pc, #664]	; (800a39c <PxMessagingTask+0x750>)
 800a102:	1838      	adds	r0, r7, r0
 800a104:	4454      	add	r4, sl
 800a106:	499e      	ldr	r1, [pc, #632]	; (800a380 <PxMessagingTask+0x734>)
 800a108:	1861      	adds	r1, r4, r1
 800a10a:	9c06      	ldr	r4, [sp, #24]
 800a10c:	0022      	movs	r2, r4
 800a10e:	f008 ff4c 	bl	8012faa <memcpy>
								longMessageLastPtr +=numOfParams;
 800a112:	46a4      	mov	ip, r4
 800a114:	4467      	add	r7, ip
 800a116:	4643      	mov	r3, r8
 800a118:	801f      	strh	r7, [r3, #0]
 800a11a:	2700      	movs	r7, #0
 800a11c:	e5c6      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a11e:	4b9e      	ldr	r3, [pc, #632]	; (800a398 <PxMessagingTask+0x74c>)
 800a120:	4699      	mov	r9, r3
 800a122:	881f      	ldrh	r7, [r3, #0]
 800a124:	4b9d      	ldr	r3, [pc, #628]	; (800a39c <PxMessagingTask+0x750>)
 800a126:	4698      	mov	r8, r3
 800a128:	18f8      	adds	r0, r7, r3
 800a12a:	4454      	add	r4, sl
 800a12c:	4994      	ldr	r1, [pc, #592]	; (800a380 <PxMessagingTask+0x734>)
 800a12e:	1861      	adds	r1, r4, r1
 800a130:	9c06      	ldr	r4, [sp, #24]
 800a132:	0022      	movs	r2, r4
 800a134:	f008 ff39 	bl	8012faa <memcpy>
								longMessageLastPtr +=numOfParams;
 800a138:	193c      	adds	r4, r7, r4
 800a13a:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a13c:	2116      	movs	r1, #22
 800a13e:	0020      	movs	r0, r4
 800a140:	f7f6 f806 	bl	8000150 <__udivsi3>
 800a144:	4b96      	ldr	r3, [pc, #600]	; (800a3a0 <PxMessagingTask+0x754>)
 800a146:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a148:	0022      	movs	r2, r4
 800a14a:	4641      	mov	r1, r8
 800a14c:	4895      	ldr	r0, [pc, #596]	; (800a3a4 <PxMessagingTask+0x758>)
 800a14e:	f008 ff2c 	bl	8012faa <memcpy>
								longMessageLastPtr =0;
 800a152:	2700      	movs	r7, #0
 800a154:	464b      	mov	r3, r9
 800a156:	801f      	strh	r7, [r3, #0]
 800a158:	e5a8      	b.n	8009cac <PxMessagingTask+0x60>
							for(p =1; p <= NumOfPorts; p++){
 800a15a:	2401      	movs	r4, #1
							temp =0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	9305      	str	r3, [sp, #20]
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a160:	2780      	movs	r7, #128	; 0x80
 800a162:	023f      	lsls	r7, r7, #8
 800a164:	e003      	b.n	800a16e <PxMessagingTask+0x522>
							for(p =1; p <= NumOfPorts; p++){
 800a166:	3401      	adds	r4, #1
 800a168:	b2e4      	uxtb	r4, r4
 800a16a:	2c07      	cmp	r4, #7
 800a16c:	d00c      	beq.n	800a188 <PxMessagingTask+0x53c>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a16e:	0020      	movs	r0, r4
 800a170:	f003 f912 	bl	800d398 <GetUart>
 800a174:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a176:	42bb      	cmp	r3, r7
 800a178:	d1f5      	bne.n	800a166 <PxMessagingTask+0x51a>
									messageParams[temp++] =p;
 800a17a:	9a05      	ldr	r2, [sp, #20]
 800a17c:	1c53      	adds	r3, r2, #1
 800a17e:	4984      	ldr	r1, [pc, #528]	; (800a390 <PxMessagingTask+0x744>)
 800a180:	548c      	strb	r4, [r1, r2]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	9305      	str	r3, [sp, #20]
 800a186:	e7ee      	b.n	800a166 <PxMessagingTask+0x51a>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a188:	466b      	mov	r3, sp
 800a18a:	8a9a      	ldrh	r2, [r3, #20]
 800a18c:	2114      	movs	r1, #20
 800a18e:	9804      	ldr	r0, [sp, #16]
 800a190:	f7ff fa98 	bl	80096c4 <SendMessageToModule>
							break;
 800a194:	2700      	movs	r7, #0
 800a196:	e589      	b.n	8009cac <PxMessagingTask+0x60>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a198:	4b79      	ldr	r3, [pc, #484]	; (800a380 <PxMessagingTask+0x734>)
 800a19a:	199b      	adds	r3, r3, r6
 800a19c:	5d1a      	ldrb	r2, [r3, r4]
 800a19e:	0612      	lsls	r2, r2, #24
 800a1a0:	191b      	adds	r3, r3, r4
 800a1a2:	78d9      	ldrb	r1, [r3, #3]
 800a1a4:	1852      	adds	r2, r2, r1
 800a1a6:	7859      	ldrb	r1, [r3, #1]
 800a1a8:	0409      	lsls	r1, r1, #16
 800a1aa:	1852      	adds	r2, r2, r1
 800a1ac:	7899      	ldrb	r1, [r3, #2]
 800a1ae:	0209      	lsls	r1, r1, #8
 800a1b0:	1852      	adds	r2, r2, r1
 800a1b2:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a1b4:	791b      	ldrb	r3, [r3, #4]
 800a1b6:	2bff      	cmp	r3, #255	; 0xff
 800a1b8:	d01b      	beq.n	800a1f2 <PxMessagingTask+0x5a6>
								for(p =0; p < numOfParams; p++){
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d015      	beq.n	800a1ec <PxMessagingTask+0x5a0>
 800a1c0:	4653      	mov	r3, sl
 800a1c2:	1d1f      	adds	r7, r3, #4
 800a1c4:	193f      	adds	r7, r7, r4
 800a1c6:	4b6e      	ldr	r3, [pc, #440]	; (800a380 <PxMessagingTask+0x734>)
 800a1c8:	18ff      	adds	r7, r7, r3
 800a1ca:	3305      	adds	r3, #5
 800a1cc:	4453      	add	r3, sl
 800a1ce:	191c      	adds	r4, r3, r4
 800a1d0:	9b06      	ldr	r3, [sp, #24]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 800a1d8:	783b      	ldrb	r3, [r7, #0]
 800a1da:	9305      	str	r3, [sp, #20]
									if(temp > 0 && temp <= NumOfPorts){
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	2b05      	cmp	r3, #5
 800a1e0:	d914      	bls.n	800a20c <PxMessagingTask+0x5c0>
 800a1e2:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 800a1e4:	42a7      	cmp	r7, r4
 800a1e6:	d1f7      	bne.n	800a1d8 <PxMessagingTask+0x58c>
 800a1e8:	2700      	movs	r7, #0
 800a1ea:	e55f      	b.n	8009cac <PxMessagingTask+0x60>
							temp =temp32 =0;
 800a1ec:	9305      	str	r3, [sp, #20]
								for(p =0; p < numOfParams; p++){
 800a1ee:	2700      	movs	r7, #0
 800a1f0:	e55c      	b.n	8009cac <PxMessagingTask+0x60>
								for(p =1; p <= NumOfPorts; p++){
 800a1f2:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800a1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1f6:	0020      	movs	r0, r4
 800a1f8:	f003 f95e 	bl	800d4b8 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a1fc:	3401      	adds	r4, #1
 800a1fe:	b2e4      	uxtb	r4, r4
 800a200:	2c07      	cmp	r4, #7
 800a202:	d1f7      	bne.n	800a1f4 <PxMessagingTask+0x5a8>
							temp =temp32 =0;
 800a204:	2300      	movs	r3, #0
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	001f      	movs	r7, r3
 800a20a:	e54f      	b.n	8009cac <PxMessagingTask+0x60>
										UpdateBaudrate(temp,temp32);
 800a20c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a20e:	9805      	ldr	r0, [sp, #20]
 800a210:	f003 f952 	bl	800d4b8 <UpdateBaudrate>
 800a214:	e7e5      	b.n	800a1e2 <PxMessagingTask+0x596>
							SaveToRO();
 800a216:	f001 f901 	bl	800b41c <SaveToRO>
							SaveEEportsDir();
 800a21a:	f7f9 f8ed 	bl	80033f8 <SaveEEportsDir>
							indMode =IND_PING;
 800a21e:	4b62      	ldr	r3, [pc, #392]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a220:	2201      	movs	r2, #1
 800a222:	701a      	strb	r2, [r3, #0]
							break;
 800a224:	2700      	movs	r7, #0
 800a226:	e541      	b.n	8009cac <PxMessagingTask+0x60>
							ClearEEportsDir();
 800a228:	f7f9 f9d0 	bl	80035cc <ClearEEportsDir>
							ClearROtopology();
 800a22c:	f001 f9fe 	bl	800b62c <ClearROtopology>
							osDelay(100);
 800a230:	2064      	movs	r0, #100	; 0x64
 800a232:	f003 fa00 	bl	800d636 <osDelay>
							indMode =IND_TOPOLOGY;
 800a236:	4b5c      	ldr	r3, [pc, #368]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a238:	2202      	movs	r2, #2
 800a23a:	701a      	strb	r2, [r3, #0]
							break;
 800a23c:	2700      	movs	r7, #0
 800a23e:	e535      	b.n	8009cac <PxMessagingTask+0x60>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a240:	f003 fb0e 	bl	800d860 <FreeRTOS_CLIGetOutputBuffer>
 800a244:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 800a246:	464b      	mov	r3, r9
 800a248:	2bff      	cmp	r3, #255	; 0xff
 800a24a:	d026      	beq.n	800a29a <PxMessagingTask+0x64e>
							else if(dst == BOS_MULTICAST)
 800a24c:	2bfe      	cmp	r3, #254	; 0xfe
 800a24e:	d02d      	beq.n	800a2ac <PxMessagingTask+0x660>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a250:	4454      	add	r4, sl
 800a252:	494b      	ldr	r1, [pc, #300]	; (800a380 <PxMessagingTask+0x734>)
 800a254:	1861      	adds	r1, r4, r1
 800a256:	9a06      	ldr	r2, [sp, #24]
 800a258:	4854      	ldr	r0, [pc, #336]	; (800a3ac <PxMessagingTask+0x760>)
 800a25a:	f008 fea6 	bl	8012faa <memcpy>
								temp =PcPort;
 800a25e:	4c54      	ldr	r4, [pc, #336]	; (800a3b0 <PxMessagingTask+0x764>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a260:	4b52      	ldr	r3, [pc, #328]	; (800a3ac <PxMessagingTask+0x760>)
 800a262:	4699      	mov	r9, r3
								if(BOS.response == BOS_RESPONSE_ALL){
 800a264:	4b53      	ldr	r3, [pc, #332]	; (800a3b4 <PxMessagingTask+0x768>)
 800a266:	4698      	mov	r8, r3
								temp =PcPort;
 800a268:	7823      	ldrb	r3, [r4, #0]
 800a26a:	9305      	str	r3, [sp, #20]
								PcPort =port;
 800a26c:	9a08      	ldr	r2, [sp, #32]
 800a26e:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a270:	2299      	movs	r2, #153	; 0x99
 800a272:	0092      	lsls	r2, r2, #2
 800a274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a276:	4648      	mov	r0, r9
 800a278:	f003 fa74 	bl	800d764 <FreeRTOS_CLIProcessCommand>
 800a27c:	0007      	movs	r7, r0
								PcPort =temp;
 800a27e:	9b05      	ldr	r3, [sp, #20]
 800a280:	7023      	strb	r3, [r4, #0]
								if(BOS.response == BOS_RESPONSE_ALL){
 800a282:	4643      	mov	r3, r8
 800a284:	799b      	ldrb	r3, [r3, #6]
 800a286:	2b60      	cmp	r3, #96	; 0x60
 800a288:	d01b      	beq.n	800a2c2 <PxMessagingTask+0x676>
							} while(xReturned != pdFALSE);
 800a28a:	2f00      	cmp	r7, #0
 800a28c:	d1ec      	bne.n	800a268 <PxMessagingTask+0x61c>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a28e:	2232      	movs	r2, #50	; 0x32
 800a290:	2100      	movs	r1, #0
 800a292:	4846      	ldr	r0, [pc, #280]	; (800a3ac <PxMessagingTask+0x760>)
 800a294:	f008 fe92 	bl	8012fbc <memset>
							break;
 800a298:	e508      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a29a:	9a06      	ldr	r2, [sp, #24]
 800a29c:	3a01      	subs	r2, #1
 800a29e:	4454      	add	r4, sl
 800a2a0:	4937      	ldr	r1, [pc, #220]	; (800a380 <PxMessagingTask+0x734>)
 800a2a2:	1861      	adds	r1, r4, r1
 800a2a4:	4841      	ldr	r0, [pc, #260]	; (800a3ac <PxMessagingTask+0x760>)
 800a2a6:	f008 fe80 	bl	8012faa <memcpy>
 800a2aa:	e7d8      	b.n	800a25e <PxMessagingTask+0x612>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a2ac:	9b06      	ldr	r3, [sp, #24]
 800a2ae:	9a05      	ldr	r2, [sp, #20]
 800a2b0:	1a9a      	subs	r2, r3, r2
 800a2b2:	3a02      	subs	r2, #2
 800a2b4:	4454      	add	r4, sl
 800a2b6:	4932      	ldr	r1, [pc, #200]	; (800a380 <PxMessagingTask+0x734>)
 800a2b8:	1861      	adds	r1, r4, r1
 800a2ba:	483c      	ldr	r0, [pc, #240]	; (800a3ac <PxMessagingTask+0x760>)
 800a2bc:	f008 fe75 	bl	8012faa <memcpy>
 800a2c0:	e7cd      	b.n	800a25e <PxMessagingTask+0x612>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a2c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2c4:	f7f5 ff28 	bl	8000118 <strlen>
 800a2c8:	0002      	movs	r2, r0
 800a2ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2cc:	4830      	ldr	r0, [pc, #192]	; (800a390 <PxMessagingTask+0x744>)
 800a2ce:	f008 fe6c 	bl	8012faa <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a2d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2d4:	f7f5 ff20 	bl	8000118 <strlen>
 800a2d8:	b282      	uxth	r2, r0
 800a2da:	2118      	movs	r1, #24
 800a2dc:	9804      	ldr	r0, [sp, #16]
 800a2de:	f7ff f9f1 	bl	80096c4 <SendMessageToModule>
									osDelay(10);
 800a2e2:	200a      	movs	r0, #10
 800a2e4:	f003 f9a7 	bl	800d636 <osDelay>
 800a2e8:	e7cf      	b.n	800a28a <PxMessagingTask+0x63e>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a2ea:	f003 fab9 	bl	800d860 <FreeRTOS_CLIGetOutputBuffer>
 800a2ee:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a2f0:	f7f5 ff12 	bl	8000118 <strlen>
 800a2f4:	0002      	movs	r2, r0
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	0038      	movs	r0, r7
 800a2fa:	f008 fe5f 	bl	8012fbc <memset>
							if(longMessage){
 800a2fe:	4b25      	ldr	r3, [pc, #148]	; (800a394 <PxMessagingTask+0x748>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d012      	beq.n	800a32c <PxMessagingTask+0x6e0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a306:	4b24      	ldr	r3, [pc, #144]	; (800a398 <PxMessagingTask+0x74c>)
 800a308:	4698      	mov	r8, r3
 800a30a:	8818      	ldrh	r0, [r3, #0]
 800a30c:	1838      	adds	r0, r7, r0
 800a30e:	4454      	add	r4, sl
 800a310:	491b      	ldr	r1, [pc, #108]	; (800a380 <PxMessagingTask+0x734>)
 800a312:	1861      	adds	r1, r4, r1
 800a314:	9c06      	ldr	r4, [sp, #24]
 800a316:	0022      	movs	r2, r4
 800a318:	f008 fe47 	bl	8012faa <memcpy>
								longMessageLastPtr +=numOfParams;
 800a31c:	4643      	mov	r3, r8
 800a31e:	881a      	ldrh	r2, [r3, #0]
 800a320:	46a4      	mov	ip, r4
 800a322:	4462      	add	r2, ip
 800a324:	4643      	mov	r3, r8
 800a326:	801a      	strh	r2, [r3, #0]
 800a328:	2700      	movs	r7, #0
 800a32a:	e4bf      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a32c:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <PxMessagingTask+0x74c>)
 800a32e:	4698      	mov	r8, r3
 800a330:	8818      	ldrh	r0, [r3, #0]
 800a332:	1838      	adds	r0, r7, r0
 800a334:	4454      	add	r4, sl
 800a336:	4912      	ldr	r1, [pc, #72]	; (800a380 <PxMessagingTask+0x734>)
 800a338:	1861      	adds	r1, r4, r1
 800a33a:	9a06      	ldr	r2, [sp, #24]
 800a33c:	f008 fe35 	bl	8012faa <memcpy>
								longMessageLastPtr =0;
 800a340:	2700      	movs	r7, #0
 800a342:	4643      	mov	r3, r8
 800a344:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800a346:	4b10      	ldr	r3, [pc, #64]	; (800a388 <PxMessagingTask+0x73c>)
 800a348:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a34a:	003b      	movs	r3, r7
 800a34c:	003a      	movs	r2, r7
 800a34e:	0039      	movs	r1, r7
 800a350:	4819      	ldr	r0, [pc, #100]	; (800a3b8 <PxMessagingTask+0x76c>)
 800a352:	6800      	ldr	r0, [r0, #0]
 800a354:	f004 fd8e 	bl	800ee74 <xTaskGenericNotify>
 800a358:	e4a8      	b.n	8009cac <PxMessagingTask+0x60>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a35a:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <PxMessagingTask+0x770>)
 800a35c:	4a18      	ldr	r2, [pc, #96]	; (800a3c0 <PxMessagingTask+0x774>)
 800a35e:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a360:	4b11      	ldr	r3, [pc, #68]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a362:	2201      	movs	r2, #1
 800a364:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a366:	200a      	movs	r0, #10
 800a368:	f003 f965 	bl	800d636 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	4b14      	ldr	r3, [pc, #80]	; (800a3c4 <PxMessagingTask+0x778>)
 800a372:	4a15      	ldr	r2, [pc, #84]	; (800a3c8 <PxMessagingTask+0x77c>)
 800a374:	60da      	str	r2, [r3, #12]
 800a376:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	e7fd      	b.n	800a37a <PxMessagingTask+0x72e>
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	20000d08 	.word	0x20000d08
 800a384:	20001090 	.word	0x20001090
 800a388:	20001110 	.word	0x20001110
 800a38c:	20001076 	.word	0x20001076
 800a390:	20000f38 	.word	0x20000f38
 800a394:	20000ef5 	.word	0x20000ef5
 800a398:	20000ef6 	.word	0x20000ef6
 800a39c:	20001628 	.word	0x20001628
 800a3a0:	2000001c 	.word	0x2000001c
 800a3a4:	20000a78 	.word	0x20000a78
 800a3a8:	20000ef4 	.word	0x20000ef4
 800a3ac:	200015f4 	.word	0x200015f4
 800a3b0:	20000a77 	.word	0x20000a77
 800a3b4:	200069c4 	.word	0x200069c4
 800a3b8:	20001504 	.word	0x20001504
 800a3bc:	20007ff0 	.word	0x20007ff0
 800a3c0:	deadbeef 	.word	0xdeadbeef
 800a3c4:	e000ed00 	.word	0xe000ed00
 800a3c8:	05fa0004 	.word	0x05fa0004
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a3cc:	4fef      	ldr	r7, [pc, #956]	; (800a78c <PxMessagingTask+0xb40>)
 800a3ce:	19bf      	adds	r7, r7, r6
 800a3d0:	5d38      	ldrb	r0, [r7, r4]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	3319      	adds	r3, #25
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2100      	movs	r1, #0
 800a3dc:	f7fe ff4a 	bl	8009274 <SendMessageFromPort>
							osDelay(100);
 800a3e0:	2064      	movs	r0, #100	; 0x64
 800a3e2:	f003 f928 	bl	800d636 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a3e6:	5d3b      	ldrb	r3, [r7, r4]
 800a3e8:	4ae9      	ldr	r2, [pc, #932]	; (800a790 <PxMessagingTask+0xb44>)
 800a3ea:	7811      	ldrb	r1, [r2, #0]
 800a3ec:	9a08      	ldr	r2, [sp, #32]
 800a3ee:	9804      	ldr	r0, [sp, #16]
 800a3f0:	f7f9 fbac 	bl	8003b4c <remoteBootloaderUpdate>
							break;
 800a3f4:	2700      	movs	r7, #0
 800a3f6:	e459      	b.n	8009cac <PxMessagingTask+0x60>
							temp =cMessage[port - 1][11 + shift];
 800a3f8:	46a0      	mov	r8, r4
 800a3fa:	0027      	movs	r7, r4
 800a3fc:	370b      	adds	r7, #11
 800a3fe:	4be3      	ldr	r3, [pc, #908]	; (800a78c <PxMessagingTask+0xb40>)
 800a400:	199b      	adds	r3, r3, r6
 800a402:	5ddb      	ldrb	r3, [r3, r7]
 800a404:	4699      	mov	r9, r3
							if(numOfParams == 15)
 800a406:	9b06      	ldr	r3, [sp, #24]
 800a408:	2b0f      	cmp	r3, #15
 800a40a:	d100      	bne.n	800a40e <PxMessagingTask+0x7c2>
 800a40c:	e087      	b.n	800a51e <PxMessagingTask+0x8d2>
							if(numOfParams == 17)
 800a40e:	9b06      	ldr	r3, [sp, #24]
 800a410:	2b11      	cmp	r3, #17
 800a412:	d100      	bne.n	800a416 <PxMessagingTask+0x7ca>
 800a414:	e08b      	b.n	800a52e <PxMessagingTask+0x8e2>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a416:	4643      	mov	r3, r8
 800a418:	1c58      	adds	r0, r3, #1
 800a41a:	900c      	str	r0, [sp, #48]	; 0x30
 800a41c:	1c9c      	adds	r4, r3, #2
 800a41e:	940d      	str	r4, [sp, #52]	; 0x34
 800a420:	1cd9      	adds	r1, r3, #3
 800a422:	910e      	str	r1, [sp, #56]	; 0x38
 800a424:	4bd9      	ldr	r3, [pc, #868]	; (800a78c <PxMessagingTask+0xb40>)
 800a426:	199b      	adds	r3, r3, r6
 800a428:	4642      	mov	r2, r8
 800a42a:	5c9a      	ldrb	r2, [r3, r2]
 800a42c:	0612      	lsls	r2, r2, #24
 800a42e:	5c59      	ldrb	r1, [r3, r1]
 800a430:	1852      	adds	r2, r2, r1
 800a432:	5c19      	ldrb	r1, [r3, r0]
 800a434:	0409      	lsls	r1, r1, #16
 800a436:	1852      	adds	r2, r2, r1
 800a438:	5d19      	ldrb	r1, [r3, r4]
 800a43a:	0209      	lsls	r1, r1, #8
 800a43c:	1852      	adds	r2, r2, r1
 800a43e:	920b      	str	r2, [sp, #44]	; 0x2c
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a440:	4642      	mov	r2, r8
 800a442:	3204      	adds	r2, #4
 800a444:	920f      	str	r2, [sp, #60]	; 0x3c
 800a446:	4641      	mov	r1, r8
 800a448:	3105      	adds	r1, #5
 800a44a:	9110      	str	r1, [sp, #64]	; 0x40
 800a44c:	4640      	mov	r0, r8
 800a44e:	3006      	adds	r0, #6
 800a450:	9011      	str	r0, [sp, #68]	; 0x44
 800a452:	4644      	mov	r4, r8
 800a454:	3407      	adds	r4, #7
 800a456:	9405      	str	r4, [sp, #20]
 800a458:	5c9c      	ldrb	r4, [r3, r2]
 800a45a:	0624      	lsls	r4, r4, #24
 800a45c:	5c5a      	ldrb	r2, [r3, r1]
 800a45e:	0412      	lsls	r2, r2, #16
 800a460:	18a4      	adds	r4, r4, r2
 800a462:	9a05      	ldr	r2, [sp, #20]
 800a464:	5c9a      	ldrb	r2, [r3, r2]
 800a466:	18a4      	adds	r4, r4, r2
 800a468:	5c1b      	ldrb	r3, [r3, r0]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	18e4      	adds	r4, r4, r3
							if(temp == false){
 800a46e:	464b      	mov	r3, r9
 800a470:	2b00      	cmp	r3, #0
 800a472:	d164      	bne.n	800a53e <PxMessagingTask+0x8f2>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a474:	4bc5      	ldr	r3, [pc, #788]	; (800a78c <PxMessagingTask+0xb40>)
 800a476:	199b      	adds	r3, r3, r6
 800a478:	4443      	add	r3, r8
 800a47a:	7a5b      	ldrb	r3, [r3, #9]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d012      	beq.n	800a4a6 <PxMessagingTask+0x85a>
 800a480:	2138      	movs	r1, #56	; 0x38
 800a482:	4369      	muls	r1, r5
 800a484:	4ac1      	ldr	r2, [pc, #772]	; (800a78c <PxMessagingTask+0xb40>)
 800a486:	1852      	adds	r2, r2, r1
 800a488:	4442      	add	r2, r8
 800a48a:	7a91      	ldrb	r1, [r2, #10]
 800a48c:	2900      	cmp	r1, #0
 800a48e:	d00a      	beq.n	800a4a6 <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a490:	2038      	movs	r0, #56	; 0x38
 800a492:	4368      	muls	r0, r5
 800a494:	4abd      	ldr	r2, [pc, #756]	; (800a78c <PxMessagingTask+0xb40>)
 800a496:	1812      	adds	r2, r2, r0
 800a498:	4442      	add	r2, r8
 800a49a:	7a10      	ldrb	r0, [r2, #8]
 800a49c:	9100      	str	r1, [sp, #0]
 800a49e:	0022      	movs	r2, r4
 800a4a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4a2:	f7fe fdc5 	bl	8009030 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a4a6:	4bb9      	ldr	r3, [pc, #740]	; (800a78c <PxMessagingTask+0xb40>)
 800a4a8:	199b      	adds	r3, r3, r6
 800a4aa:	5ddb      	ldrb	r3, [r3, r7]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d012      	beq.n	800a4d6 <PxMessagingTask+0x88a>
 800a4b0:	2138      	movs	r1, #56	; 0x38
 800a4b2:	4369      	muls	r1, r5
 800a4b4:	4ab5      	ldr	r2, [pc, #724]	; (800a78c <PxMessagingTask+0xb40>)
 800a4b6:	1852      	adds	r2, r2, r1
 800a4b8:	4442      	add	r2, r8
 800a4ba:	7b11      	ldrb	r1, [r2, #12]
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d00a      	beq.n	800a4d6 <PxMessagingTask+0x88a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a4c0:	2038      	movs	r0, #56	; 0x38
 800a4c2:	4368      	muls	r0, r5
 800a4c4:	4ab1      	ldr	r2, [pc, #708]	; (800a78c <PxMessagingTask+0xb40>)
 800a4c6:	1812      	adds	r2, r2, r0
 800a4c8:	4442      	add	r2, r8
 800a4ca:	7a10      	ldrb	r0, [r2, #8]
 800a4cc:	9100      	str	r1, [sp, #0]
 800a4ce:	0022      	movs	r2, r4
 800a4d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4d2:	f7fe fdad 	bl	8009030 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a4d6:	4bad      	ldr	r3, [pc, #692]	; (800a78c <PxMessagingTask+0xb40>)
 800a4d8:	199b      	adds	r3, r3, r6
 800a4da:	4443      	add	r3, r8
 800a4dc:	7b5b      	ldrb	r3, [r3, #13]
 800a4de:	9305      	str	r3, [sp, #20]
 800a4e0:	2700      	movs	r7, #0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <PxMessagingTask+0x89e>
 800a4e6:	f7ff fbe1 	bl	8009cac <PxMessagingTask+0x60>
 800a4ea:	2238      	movs	r2, #56	; 0x38
 800a4ec:	436a      	muls	r2, r5
 800a4ee:	4ba7      	ldr	r3, [pc, #668]	; (800a78c <PxMessagingTask+0xb40>)
 800a4f0:	189b      	adds	r3, r3, r2
 800a4f2:	4443      	add	r3, r8
 800a4f4:	7b9a      	ldrb	r2, [r3, #14]
 800a4f6:	42ba      	cmp	r2, r7
 800a4f8:	d101      	bne.n	800a4fe <PxMessagingTask+0x8b2>
 800a4fa:	f000 fea0 	bl	800b23e <PxMessagingTask+0x15f2>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800a4fe:	2138      	movs	r1, #56	; 0x38
 800a500:	4369      	muls	r1, r5
 800a502:	4ba2      	ldr	r3, [pc, #648]	; (800a78c <PxMessagingTask+0xb40>)
 800a504:	185b      	adds	r3, r3, r1
 800a506:	4443      	add	r3, r8
 800a508:	7a18      	ldrb	r0, [r3, #8]
 800a50a:	9200      	str	r2, [sp, #0]
 800a50c:	9b05      	ldr	r3, [sp, #20]
 800a50e:	0022      	movs	r2, r4
 800a510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a512:	f7fe fd8d 	bl	8009030 <SetupDMAStreams>
 800a516:	464b      	mov	r3, r9
 800a518:	9305      	str	r3, [sp, #20]
 800a51a:	f7ff fbc7 	bl	8009cac <PxMessagingTask+0x60>
								temp =cMessage[port - 1][13 + shift];
 800a51e:	2238      	movs	r2, #56	; 0x38
 800a520:	436a      	muls	r2, r5
 800a522:	4b9a      	ldr	r3, [pc, #616]	; (800a78c <PxMessagingTask+0xb40>)
 800a524:	189b      	adds	r3, r3, r2
 800a526:	191c      	adds	r4, r3, r4
 800a528:	7b63      	ldrb	r3, [r4, #13]
 800a52a:	4699      	mov	r9, r3
 800a52c:	e773      	b.n	800a416 <PxMessagingTask+0x7ca>
								temp =cMessage[port - 1][15 + shift];
 800a52e:	2238      	movs	r2, #56	; 0x38
 800a530:	436a      	muls	r2, r5
 800a532:	4b96      	ldr	r3, [pc, #600]	; (800a78c <PxMessagingTask+0xb40>)
 800a534:	189b      	adds	r3, r3, r2
 800a536:	4443      	add	r3, r8
 800a538:	7bdb      	ldrb	r3, [r3, #15]
 800a53a:	4699      	mov	r9, r3
 800a53c:	e76b      	b.n	800a416 <PxMessagingTask+0x7ca>
 800a53e:	46c2      	mov	sl, r8
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800a540:	2338      	movs	r3, #56	; 0x38
 800a542:	436b      	muls	r3, r5
 800a544:	4c91      	ldr	r4, [pc, #580]	; (800a78c <PxMessagingTask+0xb40>)
 800a546:	18e4      	adds	r4, r4, r3
 800a548:	4653      	mov	r3, sl
 800a54a:	18e6      	adds	r6, r4, r3
 800a54c:	7a31      	ldrb	r1, [r6, #8]
 800a54e:	20e4      	movs	r0, #228	; 0xe4
 800a550:	f7fd f946 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a554:	4653      	mov	r3, sl
 800a556:	5ce3      	ldrb	r3, [r4, r3]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a55c:	5ca1      	ldrb	r1, [r4, r2]
 800a55e:	18c9      	adds	r1, r1, r3
 800a560:	b289      	uxth	r1, r1
 800a562:	20e5      	movs	r0, #229	; 0xe5
 800a564:	f7fd f93c 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a56a:	5ce3      	ldrb	r3, [r4, r3]
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a570:	5ca1      	ldrb	r1, [r4, r2]
 800a572:	18c9      	adds	r1, r1, r3
 800a574:	b289      	uxth	r1, r1
 800a576:	20e6      	movs	r0, #230	; 0xe6
 800a578:	f7fd f932 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a57c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a57e:	5ce3      	ldrb	r3, [r4, r3]
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a584:	5ca1      	ldrb	r1, [r4, r2]
 800a586:	18c9      	adds	r1, r1, r3
 800a588:	b289      	uxth	r1, r1
 800a58a:	20e7      	movs	r0, #231	; 0xe7
 800a58c:	f7fd f928 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a592:	5ce3      	ldrb	r3, [r4, r3]
 800a594:	021b      	lsls	r3, r3, #8
 800a596:	9a05      	ldr	r2, [sp, #20]
 800a598:	5ca1      	ldrb	r1, [r4, r2]
 800a59a:	18c9      	adds	r1, r1, r3
 800a59c:	b289      	uxth	r1, r1
 800a59e:	20e8      	movs	r0, #232	; 0xe8
 800a5a0:	f7fd f91e 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a5a4:	7a73      	ldrb	r3, [r6, #9]
 800a5a6:	021b      	lsls	r3, r3, #8
 800a5a8:	7ab1      	ldrb	r1, [r6, #10]
 800a5aa:	18c9      	adds	r1, r1, r3
 800a5ac:	b289      	uxth	r1, r1
 800a5ae:	20e9      	movs	r0, #233	; 0xe9
 800a5b0:	f7fd f916 	bl	80077e0 <EE_WriteVariable>
								if(numOfParams == 19)
 800a5b4:	9b06      	ldr	r3, [sp, #24]
 800a5b6:	2b13      	cmp	r3, #19
 800a5b8:	d115      	bne.n	800a5e6 <PxMessagingTask+0x99a>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a5ba:	3325      	adds	r3, #37	; 0x25
 800a5bc:	436b      	muls	r3, r5
 800a5be:	4d73      	ldr	r5, [pc, #460]	; (800a78c <PxMessagingTask+0xb40>)
 800a5c0:	18ed      	adds	r5, r5, r3
 800a5c2:	5deb      	ldrb	r3, [r5, r7]
 800a5c4:	021b      	lsls	r3, r3, #8
 800a5c6:	4455      	add	r5, sl
 800a5c8:	7b29      	ldrb	r1, [r5, #12]
 800a5ca:	18c9      	adds	r1, r1, r3
 800a5cc:	b289      	uxth	r1, r1
 800a5ce:	20ea      	movs	r0, #234	; 0xea
 800a5d0:	f7fd f906 	bl	80077e0 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	4b6e      	ldr	r3, [pc, #440]	; (800a794 <PxMessagingTask+0xb48>)
 800a5da:	4a6f      	ldr	r2, [pc, #444]	; (800a798 <PxMessagingTask+0xb4c>)
 800a5dc:	60da      	str	r2, [r3, #12]
 800a5de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a5e2:	46c0      	nop			; (mov r8, r8)
 800a5e4:	e7fd      	b.n	800a5e2 <PxMessagingTask+0x996>
								if(numOfParams == 21)
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	2b15      	cmp	r3, #21
 800a5ea:	d1f3      	bne.n	800a5d4 <PxMessagingTask+0x988>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800a5ec:	3323      	adds	r3, #35	; 0x23
 800a5ee:	435d      	muls	r5, r3
 800a5f0:	4b66      	ldr	r3, [pc, #408]	; (800a78c <PxMessagingTask+0xb40>)
 800a5f2:	195b      	adds	r3, r3, r5
 800a5f4:	4453      	add	r3, sl
 800a5f6:	7b5a      	ldrb	r2, [r3, #13]
 800a5f8:	0212      	lsls	r2, r2, #8
 800a5fa:	7b99      	ldrb	r1, [r3, #14]
 800a5fc:	1889      	adds	r1, r1, r2
 800a5fe:	b289      	uxth	r1, r1
 800a600:	20eb      	movs	r0, #235	; 0xeb
 800a602:	f7fd f8ed 	bl	80077e0 <EE_WriteVariable>
 800a606:	e7e5      	b.n	800a5d4 <PxMessagingTask+0x988>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a608:	4f60      	ldr	r7, [pc, #384]	; (800a78c <PxMessagingTask+0xb40>)
 800a60a:	19bf      	adds	r7, r7, r6
 800a60c:	1939      	adds	r1, r7, r4
 800a60e:	7a8b      	ldrb	r3, [r1, #10]
 800a610:	9306      	str	r3, [sp, #24]
 800a612:	7aca      	ldrb	r2, [r1, #11]
 800a614:	485e      	ldr	r0, [pc, #376]	; (800a790 <PxMessagingTask+0xb44>)
 800a616:	7803      	ldrb	r3, [r0, #0]
 800a618:	4698      	mov	r8, r3
 800a61a:	7a4b      	ldrb	r3, [r1, #9]
 800a61c:	4699      	mov	r9, r3
 800a61e:	7b08      	ldrb	r0, [r1, #12]
 800a620:	0003      	movs	r3, r0
 800a622:	1e58      	subs	r0, r3, #1
 800a624:	4183      	sbcs	r3, r0
 800a626:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a628:	7908      	ldrb	r0, [r1, #4]
 800a62a:	0603      	lsls	r3, r0, #24
 800a62c:	469c      	mov	ip, r3
 800a62e:	7948      	ldrb	r0, [r1, #5]
 800a630:	0400      	lsls	r0, r0, #16
 800a632:	4460      	add	r0, ip
 800a634:	79cb      	ldrb	r3, [r1, #7]
 800a636:	469c      	mov	ip, r3
 800a638:	4460      	add	r0, ip
 800a63a:	798b      	ldrb	r3, [r1, #6]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	469c      	mov	ip, r3
 800a640:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a642:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a644:	5d38      	ldrb	r0, [r7, r4]
 800a646:	0600      	lsls	r0, r0, #24
 800a648:	78cc      	ldrb	r4, [r1, #3]
 800a64a:	1900      	adds	r0, r0, r4
 800a64c:	784c      	ldrb	r4, [r1, #1]
 800a64e:	0424      	lsls	r4, r4, #16
 800a650:	1900      	adds	r0, r0, r4
 800a652:	788c      	ldrb	r4, [r1, #2]
 800a654:	0224      	lsls	r4, r4, #8
 800a656:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a658:	9001      	str	r0, [sp, #4]
 800a65a:	7a09      	ldrb	r1, [r1, #8]
 800a65c:	9100      	str	r1, [sp, #0]
 800a65e:	9b06      	ldr	r3, [sp, #24]
 800a660:	4641      	mov	r1, r8
 800a662:	4648      	mov	r0, r9
 800a664:	f7ff f854 	bl	8009710 <StartScastDMAStream>
							break;
 800a668:	2700      	movs	r7, #0
 800a66a:	f7ff fb1f 	bl	8009cac <PxMessagingTask+0x60>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a66e:	0023      	movs	r3, r4
 800a670:	4a46      	ldr	r2, [pc, #280]	; (800a78c <PxMessagingTask+0xb40>)
 800a672:	1992      	adds	r2, r2, r6
 800a674:	5d12      	ldrb	r2, [r2, r4]
 800a676:	2a00      	cmp	r2, #0
 800a678:	d000      	beq.n	800a67c <PxMessagingTask+0xa30>
 800a67a:	e093      	b.n	800a7a4 <PxMessagingTask+0xb58>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a67c:	3238      	adds	r2, #56	; 0x38
 800a67e:	436a      	muls	r2, r5
 800a680:	4b42      	ldr	r3, [pc, #264]	; (800a78c <PxMessagingTask+0xb40>)
 800a682:	189b      	adds	r3, r3, r2
 800a684:	191c      	adds	r4, r3, r4
 800a686:	78a3      	ldrb	r3, [r4, #2]
 800a688:	061b      	lsls	r3, r3, #24
 800a68a:	78e2      	ldrb	r2, [r4, #3]
 800a68c:	0412      	lsls	r2, r2, #16
 800a68e:	189b      	adds	r3, r3, r2
 800a690:	7962      	ldrb	r2, [r4, #5]
 800a692:	189b      	adds	r3, r3, r2
 800a694:	7922      	ldrb	r2, [r4, #4]
 800a696:	0212      	lsls	r2, r2, #8
 800a698:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a69a:	7862      	ldrb	r2, [r4, #1]
 800a69c:	3a01      	subs	r2, #1
 800a69e:	b2d1      	uxtb	r1, r2
 800a6a0:	2907      	cmp	r1, #7
 800a6a2:	d901      	bls.n	800a6a8 <PxMessagingTask+0xa5c>
 800a6a4:	f000 fdb7 	bl	800b216 <PxMessagingTask+0x15ca>
 800a6a8:	b2d2      	uxtb	r2, r2
 800a6aa:	0092      	lsls	r2, r2, #2
 800a6ac:	493b      	ldr	r1, [pc, #236]	; (800a79c <PxMessagingTask+0xb50>)
 800a6ae:	588a      	ldr	r2, [r1, r2]
 800a6b0:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800a6b2:	781a      	ldrb	r2, [r3, #0]
 800a6b4:	4b3a      	ldr	r3, [pc, #232]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6b6:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	211f      	movs	r1, #31
 800a6bc:	9804      	ldr	r0, [sp, #16]
 800a6be:	f7ff f801 	bl	80096c4 <SendMessageToModule>
										break;
 800a6c2:	2700      	movs	r7, #0
 800a6c4:	f7ff faf2 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =*(__IO int8_t* )temp32;
 800a6c8:	781a      	ldrb	r2, [r3, #0]
 800a6ca:	4b35      	ldr	r3, [pc, #212]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6cc:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	211f      	movs	r1, #31
 800a6d2:	9804      	ldr	r0, [sp, #16]
 800a6d4:	f7fe fff6 	bl	80096c4 <SendMessageToModule>
										break;
 800a6d8:	2700      	movs	r7, #0
 800a6da:	f7ff fae7 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a6de:	8819      	ldrh	r1, [r3, #0]
 800a6e0:	4a2f      	ldr	r2, [pc, #188]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6e2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	0a1b      	lsrs	r3, r3, #8
 800a6e8:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	211f      	movs	r1, #31
 800a6ee:	9804      	ldr	r0, [sp, #16]
 800a6f0:	f7fe ffe8 	bl	80096c4 <SendMessageToModule>
										break;
 800a6f4:	2700      	movs	r7, #0
 800a6f6:	f7ff fad9 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a6fa:	8819      	ldrh	r1, [r3, #0]
 800a6fc:	4a28      	ldr	r2, [pc, #160]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6fe:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b21b      	sxth	r3, r3
 800a704:	121b      	asrs	r3, r3, #8
 800a706:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800a708:	2202      	movs	r2, #2
 800a70a:	211f      	movs	r1, #31
 800a70c:	9804      	ldr	r0, [sp, #16]
 800a70e:	f7fe ffd9 	bl	80096c4 <SendMessageToModule>
										break;
 800a712:	2700      	movs	r7, #0
 800a714:	f7ff faca 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	4a21      	ldr	r2, [pc, #132]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a71c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	0a09      	lsrs	r1, r1, #8
 800a722:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a724:	6819      	ldr	r1, [r3, #0]
 800a726:	0c09      	lsrs	r1, r1, #16
 800a728:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	0e1b      	lsrs	r3, r3, #24
 800a72e:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a730:	2204      	movs	r2, #4
 800a732:	211f      	movs	r1, #31
 800a734:	9804      	ldr	r0, [sp, #16]
 800a736:	f7fe ffc5 	bl	80096c4 <SendMessageToModule>
										break;
 800a73a:	2700      	movs	r7, #0
 800a73c:	f7ff fab6 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a740:	6819      	ldr	r1, [r3, #0]
 800a742:	4a17      	ldr	r2, [pc, #92]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a744:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a746:	6819      	ldr	r1, [r3, #0]
 800a748:	1209      	asrs	r1, r1, #8
 800a74a:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a74c:	6819      	ldr	r1, [r3, #0]
 800a74e:	1409      	asrs	r1, r1, #16
 800a750:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	161b      	asrs	r3, r3, #24
 800a756:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a758:	2204      	movs	r2, #4
 800a75a:	211f      	movs	r1, #31
 800a75c:	9804      	ldr	r0, [sp, #16]
 800a75e:	f7fe ffb1 	bl	80096c4 <SendMessageToModule>
										break;
 800a762:	2700      	movs	r7, #0
 800a764:	f7ff faa2 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800a768:	7819      	ldrb	r1, [r3, #0]
 800a76a:	4a0d      	ldr	r2, [pc, #52]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a76c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800a76e:	7859      	ldrb	r1, [r3, #1]
 800a770:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800a772:	7899      	ldrb	r1, [r3, #2]
 800a774:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800a776:	78db      	ldrb	r3, [r3, #3]
 800a778:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a77a:	2208      	movs	r2, #8
 800a77c:	211f      	movs	r1, #31
 800a77e:	9804      	ldr	r0, [sp, #16]
 800a780:	f7fe ffa0 	bl	80096c4 <SendMessageToModule>
										break; // You cannot bitwise floats
 800a784:	2700      	movs	r7, #0
 800a786:	f7ff fa91 	bl	8009cac <PxMessagingTask+0x60>
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	20000d08 	.word	0x20000d08
 800a790:	20001076 	.word	0x20001076
 800a794:	e000ed00 	.word	0xe000ed00
 800a798:	05fa0004 	.word	0x05fa0004
 800a79c:	0801a2c4 	.word	0x0801a2c4
 800a7a0:	20000f38 	.word	0x20000f38
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800a7a4:	2a02      	cmp	r2, #2
 800a7a6:	d000      	beq.n	800a7aa <PxMessagingTask+0xb5e>
 800a7a8:	e097      	b.n	800a8da <PxMessagingTask+0xc8e>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800a7aa:	48e6      	ldr	r0, [pc, #920]	; (800ab44 <PxMessagingTask+0xef8>)
 800a7ac:	3236      	adds	r2, #54	; 0x36
 800a7ae:	436a      	muls	r2, r5
 800a7b0:	1882      	adds	r2, r0, r2
 800a7b2:	1851      	adds	r1, r2, r1
 800a7b4:	3901      	subs	r1, #1
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	4453      	add	r3, sl
 800a7be:	1818      	adds	r0, r3, r0
 800a7c0:	f7f8 ffaa 	bl	8003718 <IsModuleParameter>
 800a7c4:	9005      	str	r0, [sp, #20]
								if(temp == 0){ // Parameter does not exist
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d107      	bne.n	800a7da <PxMessagingTask+0xb8e>
									SendMessageToModule(src,
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	211f      	movs	r1, #31
 800a7ce:	9804      	ldr	r0, [sp, #16]
 800a7d0:	f7fe ff78 	bl	80096c4 <SendMessageToModule>
 800a7d4:	2700      	movs	r7, #0
 800a7d6:	f7ff fa69 	bl	8009cac <PxMessagingTask+0x60>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800a7da:	3801      	subs	r0, #1
 800a7dc:	4ada      	ldr	r2, [pc, #872]	; (800ab48 <PxMessagingTask+0xefc>)
 800a7de:	210c      	movs	r1, #12
 800a7e0:	4341      	muls	r1, r0
 800a7e2:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800a7e4:	1852      	adds	r2, r2, r1
 800a7e6:	7912      	ldrb	r2, [r2, #4]
 800a7e8:	49d8      	ldr	r1, [pc, #864]	; (800ab4c <PxMessagingTask+0xf00>)
 800a7ea:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800a7ec:	3a01      	subs	r2, #1
 800a7ee:	b2d1      	uxtb	r1, r2
 800a7f0:	2907      	cmp	r1, #7
 800a7f2:	d901      	bls.n	800a7f8 <PxMessagingTask+0xbac>
 800a7f4:	f000 fd12 	bl	800b21c <PxMessagingTask+0x15d0>
 800a7f8:	b2d2      	uxtb	r2, r2
 800a7fa:	0092      	lsls	r2, r2, #2
 800a7fc:	49d4      	ldr	r1, [pc, #848]	; (800ab50 <PxMessagingTask+0xf04>)
 800a7fe:	588a      	ldr	r2, [r1, r2]
 800a800:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	4bd1      	ldr	r3, [pc, #836]	; (800ab4c <PxMessagingTask+0xf00>)
 800a806:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a808:	2202      	movs	r2, #2
 800a80a:	211f      	movs	r1, #31
 800a80c:	9804      	ldr	r0, [sp, #16]
 800a80e:	f7fe ff59 	bl	80096c4 <SendMessageToModule>
											break;
 800a812:	2700      	movs	r7, #0
 800a814:	f7ff fa4a 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO int8_t* )temp32;
 800a818:	781a      	ldrb	r2, [r3, #0]
 800a81a:	4bcc      	ldr	r3, [pc, #816]	; (800ab4c <PxMessagingTask+0xf00>)
 800a81c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a81e:	2202      	movs	r2, #2
 800a820:	211f      	movs	r1, #31
 800a822:	9804      	ldr	r0, [sp, #16]
 800a824:	f7fe ff4e 	bl	80096c4 <SendMessageToModule>
											break;
 800a828:	2700      	movs	r7, #0
 800a82a:	f7ff fa3f 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a82e:	8819      	ldrh	r1, [r3, #0]
 800a830:	4ac6      	ldr	r2, [pc, #792]	; (800ab4c <PxMessagingTask+0xf00>)
 800a832:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	0a1b      	lsrs	r3, r3, #8
 800a838:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a83a:	2203      	movs	r2, #3
 800a83c:	211f      	movs	r1, #31
 800a83e:	9804      	ldr	r0, [sp, #16]
 800a840:	f7fe ff40 	bl	80096c4 <SendMessageToModule>
											break;
 800a844:	2700      	movs	r7, #0
 800a846:	f7ff fa31 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a84a:	8819      	ldrh	r1, [r3, #0]
 800a84c:	4abf      	ldr	r2, [pc, #764]	; (800ab4c <PxMessagingTask+0xf00>)
 800a84e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	b21b      	sxth	r3, r3
 800a854:	121b      	asrs	r3, r3, #8
 800a856:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a858:	2203      	movs	r2, #3
 800a85a:	211f      	movs	r1, #31
 800a85c:	9804      	ldr	r0, [sp, #16]
 800a85e:	f7fe ff31 	bl	80096c4 <SendMessageToModule>
											break;
 800a862:	2700      	movs	r7, #0
 800a864:	f7ff fa22 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	4ab8      	ldr	r2, [pc, #736]	; (800ab4c <PxMessagingTask+0xf00>)
 800a86c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a86e:	6819      	ldr	r1, [r3, #0]
 800a870:	0a09      	lsrs	r1, r1, #8
 800a872:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a874:	6819      	ldr	r1, [r3, #0]
 800a876:	0c09      	lsrs	r1, r1, #16
 800a878:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	0e1b      	lsrs	r3, r3, #24
 800a87e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a880:	2205      	movs	r2, #5
 800a882:	211f      	movs	r1, #31
 800a884:	9804      	ldr	r0, [sp, #16]
 800a886:	f7fe ff1d 	bl	80096c4 <SendMessageToModule>
											break;
 800a88a:	2700      	movs	r7, #0
 800a88c:	f7ff fa0e 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a890:	6819      	ldr	r1, [r3, #0]
 800a892:	4aae      	ldr	r2, [pc, #696]	; (800ab4c <PxMessagingTask+0xf00>)
 800a894:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a896:	6819      	ldr	r1, [r3, #0]
 800a898:	1209      	asrs	r1, r1, #8
 800a89a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a89c:	6819      	ldr	r1, [r3, #0]
 800a89e:	1409      	asrs	r1, r1, #16
 800a8a0:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	161b      	asrs	r3, r3, #24
 800a8a6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a8a8:	2205      	movs	r2, #5
 800a8aa:	211f      	movs	r1, #31
 800a8ac:	9804      	ldr	r0, [sp, #16]
 800a8ae:	f7fe ff09 	bl	80096c4 <SendMessageToModule>
											break;
 800a8b2:	2700      	movs	r7, #0
 800a8b4:	f7ff f9fa 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	4aa4      	ldr	r2, [pc, #656]	; (800ab4c <PxMessagingTask+0xf00>)
 800a8bc:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a8be:	7859      	ldrb	r1, [r3, #1]
 800a8c0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a8c2:	7899      	ldrb	r1, [r3, #2]
 800a8c4:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a8c6:	78db      	ldrb	r3, [r3, #3]
 800a8c8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a8ca:	2209      	movs	r2, #9
 800a8cc:	211f      	movs	r1, #31
 800a8ce:	9804      	ldr	r0, [sp, #16]
 800a8d0:	f7fe fef8 	bl	80096c4 <SendMessageToModule>
											break;
 800a8d4:	2700      	movs	r7, #0
 800a8d6:	f7ff f9e9 	bl	8009cac <PxMessagingTask+0x60>
								}
 800a8da:	2700      	movs	r7, #0
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800a8dc:	2a02      	cmp	r2, #2
 800a8de:	d801      	bhi.n	800a8e4 <PxMessagingTask+0xc98>
 800a8e0:	f7ff f9e4 	bl	8009cac <PxMessagingTask+0x60>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800a8e4:	3a04      	subs	r2, #4
 800a8e6:	0092      	lsls	r2, r2, #2
 800a8e8:	4b9a      	ldr	r3, [pc, #616]	; (800ab54 <PxMessagingTask+0xf08>)
 800a8ea:	58d1      	ldr	r1, [r2, r3]
 800a8ec:	220f      	movs	r2, #15
 800a8ee:	400a      	ands	r2, r1
 800a8f0:	4b96      	ldr	r3, [pc, #600]	; (800ab4c <PxMessagingTask+0xf00>)
 800a8f2:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800a8f4:	42ba      	cmp	r2, r7
 800a8f6:	d106      	bne.n	800a906 <PxMessagingTask+0xcba>
									SendMessageToModule(src,
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	211f      	movs	r1, #31
 800a8fc:	9804      	ldr	r0, [sp, #16]
 800a8fe:	f7fe fee1 	bl	80096c4 <SendMessageToModule>
 800a902:	f7ff f9d3 	bl	8009cac <PxMessagingTask+0x60>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800a906:	0c09      	lsrs	r1, r1, #16
 800a908:	2380      	movs	r3, #128	; 0x80
 800a90a:	059b      	lsls	r3, r3, #22
 800a90c:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800a90e:	3a01      	subs	r2, #1
 800a910:	b2d0      	uxtb	r0, r2
 800a912:	2807      	cmp	r0, #7
 800a914:	d901      	bls.n	800a91a <PxMessagingTask+0xcce>
 800a916:	f000 fc84 	bl	800b222 <PxMessagingTask+0x15d6>
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	0092      	lsls	r2, r2, #2
 800a91e:	488e      	ldr	r0, [pc, #568]	; (800ab58 <PxMessagingTask+0xf0c>)
 800a920:	5882      	ldr	r2, [r0, r2]
 800a922:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	4b89      	ldr	r3, [pc, #548]	; (800ab4c <PxMessagingTask+0xf00>)
 800a928:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a92a:	2202      	movs	r2, #2
 800a92c:	211f      	movs	r1, #31
 800a92e:	9804      	ldr	r0, [sp, #16]
 800a930:	f7fe fec8 	bl	80096c4 <SendMessageToModule>
											break;
 800a934:	2700      	movs	r7, #0
 800a936:	f7ff f9b9 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO int8_t* )temp32;
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	4b83      	ldr	r3, [pc, #524]	; (800ab4c <PxMessagingTask+0xf00>)
 800a93e:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a940:	2202      	movs	r2, #2
 800a942:	211f      	movs	r1, #31
 800a944:	9804      	ldr	r0, [sp, #16]
 800a946:	f7fe febd 	bl	80096c4 <SendMessageToModule>
											break;
 800a94a:	2700      	movs	r7, #0
 800a94c:	f7ff f9ae 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a950:	8819      	ldrh	r1, [r3, #0]
 800a952:	4a7e      	ldr	r2, [pc, #504]	; (800ab4c <PxMessagingTask+0xf00>)
 800a954:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a95c:	2203      	movs	r2, #3
 800a95e:	211f      	movs	r1, #31
 800a960:	9804      	ldr	r0, [sp, #16]
 800a962:	f7fe feaf 	bl	80096c4 <SendMessageToModule>
											break;
 800a966:	2700      	movs	r7, #0
 800a968:	f7ff f9a0 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a96c:	8819      	ldrh	r1, [r3, #0]
 800a96e:	4a77      	ldr	r2, [pc, #476]	; (800ab4c <PxMessagingTask+0xf00>)
 800a970:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b21b      	sxth	r3, r3
 800a976:	121b      	asrs	r3, r3, #8
 800a978:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a97a:	2203      	movs	r2, #3
 800a97c:	211f      	movs	r1, #31
 800a97e:	9804      	ldr	r0, [sp, #16]
 800a980:	f7fe fea0 	bl	80096c4 <SendMessageToModule>
											break;
 800a984:	2700      	movs	r7, #0
 800a986:	f7ff f991 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a98a:	6819      	ldr	r1, [r3, #0]
 800a98c:	4a6f      	ldr	r2, [pc, #444]	; (800ab4c <PxMessagingTask+0xf00>)
 800a98e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a990:	6819      	ldr	r1, [r3, #0]
 800a992:	0a09      	lsrs	r1, r1, #8
 800a994:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a996:	6819      	ldr	r1, [r3, #0]
 800a998:	0c09      	lsrs	r1, r1, #16
 800a99a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	0e1b      	lsrs	r3, r3, #24
 800a9a0:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a9a2:	2205      	movs	r2, #5
 800a9a4:	211f      	movs	r1, #31
 800a9a6:	9804      	ldr	r0, [sp, #16]
 800a9a8:	f7fe fe8c 	bl	80096c4 <SendMessageToModule>
											break;
 800a9ac:	2700      	movs	r7, #0
 800a9ae:	f7ff f97d 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a9b2:	6819      	ldr	r1, [r3, #0]
 800a9b4:	4a65      	ldr	r2, [pc, #404]	; (800ab4c <PxMessagingTask+0xf00>)
 800a9b6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a9b8:	6819      	ldr	r1, [r3, #0]
 800a9ba:	1209      	asrs	r1, r1, #8
 800a9bc:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a9be:	6819      	ldr	r1, [r3, #0]
 800a9c0:	1409      	asrs	r1, r1, #16
 800a9c2:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	161b      	asrs	r3, r3, #24
 800a9c8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a9ca:	2205      	movs	r2, #5
 800a9cc:	211f      	movs	r1, #31
 800a9ce:	9804      	ldr	r0, [sp, #16]
 800a9d0:	f7fe fe78 	bl	80096c4 <SendMessageToModule>
											break;
 800a9d4:	2700      	movs	r7, #0
 800a9d6:	f7ff f969 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a9da:	781a      	ldrb	r2, [r3, #0]
 800a9dc:	4b5b      	ldr	r3, [pc, #364]	; (800ab4c <PxMessagingTask+0xf00>)
 800a9de:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a9e0:	4a5e      	ldr	r2, [pc, #376]	; (800ab5c <PxMessagingTask+0xf10>)
 800a9e2:	188a      	adds	r2, r1, r2
 800a9e4:	7812      	ldrb	r2, [r2, #0]
 800a9e6:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a9e8:	4a5d      	ldr	r2, [pc, #372]	; (800ab60 <PxMessagingTask+0xf14>)
 800a9ea:	188a      	adds	r2, r1, r2
 800a9ec:	7812      	ldrb	r2, [r2, #0]
 800a9ee:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a9f0:	4a5c      	ldr	r2, [pc, #368]	; (800ab64 <PxMessagingTask+0xf18>)
 800a9f2:	4694      	mov	ip, r2
 800a9f4:	4461      	add	r1, ip
 800a9f6:	780a      	ldrb	r2, [r1, #0]
 800a9f8:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800a9fa:	2209      	movs	r2, #9
 800a9fc:	211f      	movs	r1, #31
 800a9fe:	9804      	ldr	r0, [sp, #16]
 800aa00:	f7fe fe60 	bl	80096c4 <SendMessageToModule>
											break;
 800aa04:	2700      	movs	r7, #0
 800aa06:	f7ff f951 	bl	8009cac <PxMessagingTask+0x60>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800aa0a:	4b57      	ldr	r3, [pc, #348]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2002      	movs	r0, #2
 800aa12:	4240      	negs	r0, r0
 800aa14:	17c1      	asrs	r1, r0, #31
 800aa16:	1812      	adds	r2, r2, r0
 800aa18:	414b      	adcs	r3, r1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00b      	beq.n	800aa36 <PxMessagingTask+0xdea>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800aa1e:	4b53      	ldr	r3, [pc, #332]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d101      	bne.n	800aa2a <PxMessagingTask+0xdde>
 800aa26:	f000 fc0e 	bl	800b246 <PxMessagingTask+0x15fa>
								responseStatus =BOS_OK;
 800aa2a:	4b50      	ldr	r3, [pc, #320]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	2700      	movs	r7, #0
 800aa32:	f7ff f93b 	bl	8009cac <PxMessagingTask+0x60>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <PxMessagingTask+0xdf2>
 800aa3a:	2a01      	cmp	r2, #1
 800aa3c:	d8ef      	bhi.n	800aa1e <PxMessagingTask+0xdd2>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800aa3e:	2138      	movs	r1, #56	; 0x38
 800aa40:	4369      	muls	r1, r5
 800aa42:	4a40      	ldr	r2, [pc, #256]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa44:	1852      	adds	r2, r2, r1
 800aa46:	5d12      	ldrb	r2, [r2, r4]
 800aa48:	4949      	ldr	r1, [pc, #292]	; (800ab70 <PxMessagingTask+0xf24>)
 800aa4a:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800aa4c:	2a08      	cmp	r2, #8
 800aa4e:	d8e6      	bhi.n	800aa1e <PxMessagingTask+0xdd2>
 800aa50:	0092      	lsls	r2, r2, #2
 800aa52:	4948      	ldr	r1, [pc, #288]	; (800ab74 <PxMessagingTask+0xf28>)
 800aa54:	588a      	ldr	r2, [r1, r2]
 800aa56:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800aa58:	4b44      	ldr	r3, [pc, #272]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa5a:	2210      	movs	r2, #16
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	2700      	movs	r7, #0
 800aa60:	f7ff f924 	bl	8009cac <PxMessagingTask+0x60>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800aa64:	4a40      	ldr	r2, [pc, #256]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa66:	2038      	movs	r0, #56	; 0x38
 800aa68:	4368      	muls	r0, r5
 800aa6a:	4936      	ldr	r1, [pc, #216]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa6c:	1809      	adds	r1, r1, r0
 800aa6e:	1909      	adds	r1, r1, r4
 800aa70:	784b      	ldrb	r3, [r1, #1]
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	6053      	str	r3, [r2, #4]
										break;
 800aa78:	e7d1      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800aa7a:	4a3b      	ldr	r2, [pc, #236]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa7c:	2038      	movs	r0, #56	; 0x38
 800aa7e:	4368      	muls	r0, r5
 800aa80:	4930      	ldr	r1, [pc, #192]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa82:	1809      	adds	r1, r1, r0
 800aa84:	1909      	adds	r1, r1, r4
 800aa86:	2301      	movs	r3, #1
 800aa88:	56cb      	ldrsb	r3, [r1, r3]
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	17db      	asrs	r3, r3, #31
 800aa8e:	6053      	str	r3, [r2, #4]
										break;
 800aa90:	e7c5      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800aa92:	4a35      	ldr	r2, [pc, #212]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa94:	2038      	movs	r0, #56	; 0x38
 800aa96:	4368      	muls	r0, r5
 800aa98:	492a      	ldr	r1, [pc, #168]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa9a:	1809      	adds	r1, r1, r0
 800aa9c:	1909      	adds	r1, r1, r4
 800aa9e:	788b      	ldrb	r3, [r1, #2]
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	7849      	ldrb	r1, [r1, #1]
 800aaa4:	185b      	adds	r3, r3, r1
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	17db      	asrs	r3, r3, #31
 800aaaa:	6053      	str	r3, [r2, #4]
										break;
 800aaac:	e7b7      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800aaae:	4a2e      	ldr	r2, [pc, #184]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aab0:	2038      	movs	r0, #56	; 0x38
 800aab2:	4368      	muls	r0, r5
 800aab4:	4923      	ldr	r1, [pc, #140]	; (800ab44 <PxMessagingTask+0xef8>)
 800aab6:	1809      	adds	r1, r1, r0
 800aab8:	1909      	adds	r1, r1, r4
 800aaba:	788b      	ldrb	r3, [r1, #2]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	7849      	ldrb	r1, [r1, #1]
 800aac0:	185b      	adds	r3, r3, r1
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	17db      	asrs	r3, r3, #31
 800aac6:	6053      	str	r3, [r2, #4]
										break;
 800aac8:	e7a9      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800aaca:	4a27      	ldr	r2, [pc, #156]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aacc:	2038      	movs	r0, #56	; 0x38
 800aace:	4368      	muls	r0, r5
 800aad0:	491c      	ldr	r1, [pc, #112]	; (800ab44 <PxMessagingTask+0xef8>)
 800aad2:	1809      	adds	r1, r1, r0
 800aad4:	1909      	adds	r1, r1, r4
 800aad6:	788b      	ldrb	r3, [r1, #2]
 800aad8:	021b      	lsls	r3, r3, #8
 800aada:	78c8      	ldrb	r0, [r1, #3]
 800aadc:	0400      	lsls	r0, r0, #16
 800aade:	181b      	adds	r3, r3, r0
 800aae0:	7848      	ldrb	r0, [r1, #1]
 800aae2:	181b      	adds	r3, r3, r0
 800aae4:	7909      	ldrb	r1, [r1, #4]
 800aae6:	0609      	lsls	r1, r1, #24
 800aae8:	185b      	adds	r3, r3, r1
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	2300      	movs	r3, #0
 800aaee:	6053      	str	r3, [r2, #4]
										break;
 800aaf0:	e795      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800aaf2:	4a1d      	ldr	r2, [pc, #116]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aaf4:	2038      	movs	r0, #56	; 0x38
 800aaf6:	4368      	muls	r0, r5
 800aaf8:	4912      	ldr	r1, [pc, #72]	; (800ab44 <PxMessagingTask+0xef8>)
 800aafa:	1809      	adds	r1, r1, r0
 800aafc:	1909      	adds	r1, r1, r4
 800aafe:	788b      	ldrb	r3, [r1, #2]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	7848      	ldrb	r0, [r1, #1]
 800ab04:	181b      	adds	r3, r3, r0
 800ab06:	78c8      	ldrb	r0, [r1, #3]
 800ab08:	0400      	lsls	r0, r0, #16
 800ab0a:	181b      	adds	r3, r3, r0
 800ab0c:	7909      	ldrb	r1, [r1, #4]
 800ab0e:	0609      	lsls	r1, r1, #24
 800ab10:	185b      	adds	r3, r3, r1
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	17db      	asrs	r3, r3, #31
 800ab16:	6053      	str	r3, [r2, #4]
										break;
 800ab18:	e781      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ab1a:	4a13      	ldr	r2, [pc, #76]	; (800ab68 <PxMessagingTask+0xf1c>)
 800ab1c:	2038      	movs	r0, #56	; 0x38
 800ab1e:	4368      	muls	r0, r5
 800ab20:	4908      	ldr	r1, [pc, #32]	; (800ab44 <PxMessagingTask+0xef8>)
 800ab22:	1809      	adds	r1, r1, r0
 800ab24:	1909      	adds	r1, r1, r4
 800ab26:	788b      	ldrb	r3, [r1, #2]
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	78c8      	ldrb	r0, [r1, #3]
 800ab2c:	0400      	lsls	r0, r0, #16
 800ab2e:	181b      	adds	r3, r3, r0
 800ab30:	7848      	ldrb	r0, [r1, #1]
 800ab32:	181b      	adds	r3, r3, r0
 800ab34:	7909      	ldrb	r1, [r1, #4]
 800ab36:	0609      	lsls	r1, r1, #24
 800ab38:	185b      	adds	r3, r3, r1
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6053      	str	r3, [r2, #4]
										break;
 800ab40:	e76d      	b.n	800aa1e <PxMessagingTask+0xdd2>
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	20000d08 	.word	0x20000d08
 800ab48:	20000084 	.word	0x20000084
 800ab4c:	20000f38 	.word	0x20000f38
 800ab50:	0801a2e4 	.word	0x0801a2e4
 800ab54:	2000694c 	.word	0x2000694c
 800ab58:	0801a304 	.word	0x0801a304
 800ab5c:	20000001 	.word	0x20000001
 800ab60:	20000002 	.word	0x20000002
 800ab64:	20000003 	.word	0x20000003
 800ab68:	20001108 	.word	0x20001108
 800ab6c:	20001110 	.word	0x20001110
 800ab70:	20000070 	.word	0x20000070
 800ab74:	0801a324 	.word	0x0801a324
							responseStatus =BOS_OK; // Initialize response
 800ab78:	4bcd      	ldr	r3, [pc, #820]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800ab7e:	0027      	movs	r7, r4
 800ab80:	4bcc      	ldr	r3, [pc, #816]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ab82:	199b      	adds	r3, r3, r6
 800ab84:	5d1b      	ldrb	r3, [r3, r4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d100      	bne.n	800ab8c <PxMessagingTask+0xf40>
 800ab8a:	e10b      	b.n	800ada4 <PxMessagingTask+0x1158>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800ab8c:	2b1e      	cmp	r3, #30
 800ab8e:	d900      	bls.n	800ab92 <PxMessagingTask+0xf46>
 800ab90:	e104      	b.n	800ad9c <PxMessagingTask+0x1150>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800ab92:	1e5c      	subs	r4, r3, #1
 800ab94:	00a2      	lsls	r2, r4, #2
 800ab96:	4bc8      	ldr	r3, [pc, #800]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ab98:	58d1      	ldr	r1, [r2, r3]
 800ab9a:	0c0b      	lsrs	r3, r1, #16
 800ab9c:	2280      	movs	r2, #128	; 0x80
 800ab9e:	0592      	lsls	r2, r2, #22
 800aba0:	4694      	mov	ip, r2
 800aba2:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800aba4:	1c7a      	adds	r2, r7, #1
 800aba6:	4690      	mov	r8, r2
 800aba8:	2038      	movs	r0, #56	; 0x38
 800abaa:	4368      	muls	r0, r5
 800abac:	4ac1      	ldr	r2, [pc, #772]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abae:	1812      	adds	r2, r2, r0
 800abb0:	4640      	mov	r0, r8
 800abb2:	5c12      	ldrb	r2, [r2, r0]
 800abb4:	4691      	mov	r9, r2
 800abb6:	3a01      	subs	r2, #1
 800abb8:	b2d0      	uxtb	r0, r2
 800abba:	2807      	cmp	r0, #7
 800abbc:	d81b      	bhi.n	800abf6 <PxMessagingTask+0xfaa>
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	0092      	lsls	r2, r2, #2
 800abc2:	48be      	ldr	r0, [pc, #760]	; (800aebc <PxMessagingTask+0x1270>)
 800abc4:	5882      	ldr	r2, [r0, r2]
 800abc6:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800abc8:	070a      	lsls	r2, r1, #28
 800abca:	d109      	bne.n	800abe0 <PxMessagingTask+0xf94>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800abcc:	2001      	movs	r0, #1
 800abce:	f007 ff9f 	bl	8012b10 <malloc>
 800abd2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800abd4:	d00c      	beq.n	800abf0 <PxMessagingTask+0xfa4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800abd6:	00a4      	lsls	r4, r4, #2
 800abd8:	0400      	lsls	r0, r0, #16
 800abda:	4448      	add	r0, r9
 800abdc:	4ab6      	ldr	r2, [pc, #728]	; (800aeb8 <PxMessagingTask+0x126c>)
 800abde:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800abe0:	2138      	movs	r1, #56	; 0x38
 800abe2:	4369      	muls	r1, r5
 800abe4:	4ab3      	ldr	r2, [pc, #716]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abe6:	1852      	adds	r2, r2, r1
 800abe8:	19d2      	adds	r2, r2, r7
 800abea:	7892      	ldrb	r2, [r2, #2]
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	e002      	b.n	800abf6 <PxMessagingTask+0xfaa>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800abf0:	4baf      	ldr	r3, [pc, #700]	; (800aeb0 <PxMessagingTask+0x1264>)
 800abf2:	2212      	movs	r2, #18
 800abf4:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800abf6:	2338      	movs	r3, #56	; 0x38
 800abf8:	436b      	muls	r3, r5
 800abfa:	4aae      	ldr	r2, [pc, #696]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abfc:	18d2      	adds	r2, r2, r3
 800abfe:	5dd3      	ldrb	r3, [r2, r7]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	0098      	lsls	r0, r3, #2
 800ac04:	49ac      	ldr	r1, [pc, #688]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac06:	5841      	ldr	r1, [r0, r1]
 800ac08:	4640      	mov	r0, r8
 800ac0a:	5c12      	ldrb	r2, [r2, r0]
 800ac0c:	200f      	movs	r0, #15
 800ac0e:	4008      	ands	r0, r1
 800ac10:	4290      	cmp	r0, r2
 800ac12:	d009      	beq.n	800ac28 <PxMessagingTask+0xfdc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	48aa      	ldr	r0, [pc, #680]	; (800aec0 <PxMessagingTask+0x1274>)
 800ac18:	4684      	mov	ip, r0
 800ac1a:	4462      	add	r2, ip
 800ac1c:	400a      	ands	r2, r1
 800ac1e:	49a6      	ldr	r1, [pc, #664]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac20:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ac22:	4ba3      	ldr	r3, [pc, #652]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ac24:	2214      	movs	r2, #20
 800ac26:	701a      	strb	r2, [r3, #0]
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG){
 800ac28:	4ba6      	ldr	r3, [pc, #664]	; (800aec4 <PxMessagingTask+0x1278>)
 800ac2a:	799b      	ldrb	r3, [r3, #6]
 800ac2c:	2240      	movs	r2, #64	; 0x40
 800ac2e:	4393      	bics	r3, r2
 800ac30:	2700      	movs	r7, #0
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d001      	beq.n	800ac3a <PxMessagingTask+0xfee>
 800ac36:	f7ff f839 	bl	8009cac <PxMessagingTask+0x60>
								messageParams[0] =responseStatus;
 800ac3a:	4b9d      	ldr	r3, [pc, #628]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	4ba2      	ldr	r3, [pc, #648]	; (800aec8 <PxMessagingTask+0x127c>)
 800ac40:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ac42:	2201      	movs	r2, #1
 800ac44:	2121      	movs	r1, #33	; 0x21
 800ac46:	9804      	ldr	r0, [sp, #16]
 800ac48:	f7fe fd3c 	bl	80096c4 <SendMessageToModule>
 800ac4c:	f7ff f82e 	bl	8009cac <PxMessagingTask+0x60>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac50:	070a      	lsls	r2, r1, #28
 800ac52:	d10a      	bne.n	800ac6a <PxMessagingTask+0x101e>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800ac54:	2001      	movs	r0, #1
 800ac56:	f007 ff5b 	bl	8012b10 <malloc>
 800ac5a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ac5c:	d100      	bne.n	800ac60 <PxMessagingTask+0x1014>
 800ac5e:	e369      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ac60:	00a4      	lsls	r4, r4, #2
 800ac62:	0400      	lsls	r0, r0, #16
 800ac64:	3002      	adds	r0, #2
 800ac66:	4a94      	ldr	r2, [pc, #592]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac68:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800ac6a:	2138      	movs	r1, #56	; 0x38
 800ac6c:	4369      	muls	r1, r5
 800ac6e:	4a91      	ldr	r2, [pc, #580]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ac70:	1852      	adds	r2, r2, r1
 800ac72:	19d2      	adds	r2, r2, r7
 800ac74:	7892      	ldrb	r2, [r2, #2]
 800ac76:	b252      	sxtb	r2, r2
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	e7bc      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac7c:	070a      	lsls	r2, r1, #28
 800ac7e:	d10a      	bne.n	800ac96 <PxMessagingTask+0x104a>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800ac80:	2002      	movs	r0, #2
 800ac82:	f007 ff45 	bl	8012b10 <malloc>
 800ac86:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ac88:	d100      	bne.n	800ac8c <PxMessagingTask+0x1040>
 800ac8a:	e353      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ac8c:	00a4      	lsls	r4, r4, #2
 800ac8e:	0400      	lsls	r0, r0, #16
 800ac90:	3003      	adds	r0, #3
 800ac92:	4a89      	ldr	r2, [pc, #548]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac94:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ac96:	2138      	movs	r1, #56	; 0x38
 800ac98:	4369      	muls	r1, r5
 800ac9a:	4a86      	ldr	r2, [pc, #536]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ac9c:	1852      	adds	r2, r2, r1
 800ac9e:	19d2      	adds	r2, r2, r7
 800aca0:	78d1      	ldrb	r1, [r2, #3]
 800aca2:	0209      	lsls	r1, r1, #8
 800aca4:	7892      	ldrb	r2, [r2, #2]
 800aca6:	1852      	adds	r2, r2, r1
 800aca8:	b292      	uxth	r2, r2
 800acaa:	801a      	strh	r2, [r3, #0]
 800acac:	e7a3      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acae:	070a      	lsls	r2, r1, #28
 800acb0:	d10a      	bne.n	800acc8 <PxMessagingTask+0x107c>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800acb2:	2002      	movs	r0, #2
 800acb4:	f007 ff2c 	bl	8012b10 <malloc>
 800acb8:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800acba:	d100      	bne.n	800acbe <PxMessagingTask+0x1072>
 800acbc:	e33a      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acbe:	00a4      	lsls	r4, r4, #2
 800acc0:	0400      	lsls	r0, r0, #16
 800acc2:	3004      	adds	r0, #4
 800acc4:	4a7c      	ldr	r2, [pc, #496]	; (800aeb8 <PxMessagingTask+0x126c>)
 800acc6:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800acc8:	2138      	movs	r1, #56	; 0x38
 800acca:	4369      	muls	r1, r5
 800accc:	4a79      	ldr	r2, [pc, #484]	; (800aeb4 <PxMessagingTask+0x1268>)
 800acce:	1852      	adds	r2, r2, r1
 800acd0:	19d2      	adds	r2, r2, r7
 800acd2:	78d1      	ldrb	r1, [r2, #3]
 800acd4:	0209      	lsls	r1, r1, #8
 800acd6:	7892      	ldrb	r2, [r2, #2]
 800acd8:	1852      	adds	r2, r2, r1
 800acda:	b212      	sxth	r2, r2
 800acdc:	801a      	strh	r2, [r3, #0]
 800acde:	e78a      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ace0:	070a      	lsls	r2, r1, #28
 800ace2:	d10a      	bne.n	800acfa <PxMessagingTask+0x10ae>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800ace4:	2004      	movs	r0, #4
 800ace6:	f007 ff13 	bl	8012b10 <malloc>
 800acea:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800acec:	d100      	bne.n	800acf0 <PxMessagingTask+0x10a4>
 800acee:	e321      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acf0:	00a4      	lsls	r4, r4, #2
 800acf2:	0400      	lsls	r0, r0, #16
 800acf4:	3005      	adds	r0, #5
 800acf6:	4a70      	ldr	r2, [pc, #448]	; (800aeb8 <PxMessagingTask+0x126c>)
 800acf8:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800acfa:	2238      	movs	r2, #56	; 0x38
 800acfc:	436a      	muls	r2, r5
 800acfe:	496d      	ldr	r1, [pc, #436]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad00:	1889      	adds	r1, r1, r2
 800ad02:	19c9      	adds	r1, r1, r7
 800ad04:	78ca      	ldrb	r2, [r1, #3]
 800ad06:	0212      	lsls	r2, r2, #8
 800ad08:	7908      	ldrb	r0, [r1, #4]
 800ad0a:	0400      	lsls	r0, r0, #16
 800ad0c:	1812      	adds	r2, r2, r0
 800ad0e:	7888      	ldrb	r0, [r1, #2]
 800ad10:	1812      	adds	r2, r2, r0
 800ad12:	7949      	ldrb	r1, [r1, #5]
 800ad14:	0609      	lsls	r1, r1, #24
 800ad16:	1852      	adds	r2, r2, r1
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	e76c      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad1c:	070a      	lsls	r2, r1, #28
 800ad1e:	d10a      	bne.n	800ad36 <PxMessagingTask+0x10ea>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800ad20:	2004      	movs	r0, #4
 800ad22:	f007 fef5 	bl	8012b10 <malloc>
 800ad26:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ad28:	d100      	bne.n	800ad2c <PxMessagingTask+0x10e0>
 800ad2a:	e303      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad2c:	00a4      	lsls	r4, r4, #2
 800ad2e:	0400      	lsls	r0, r0, #16
 800ad30:	3006      	adds	r0, #6
 800ad32:	4a61      	ldr	r2, [pc, #388]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ad34:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800ad36:	2238      	movs	r2, #56	; 0x38
 800ad38:	436a      	muls	r2, r5
 800ad3a:	495e      	ldr	r1, [pc, #376]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad3c:	1889      	adds	r1, r1, r2
 800ad3e:	19c9      	adds	r1, r1, r7
 800ad40:	78ca      	ldrb	r2, [r1, #3]
 800ad42:	0212      	lsls	r2, r2, #8
 800ad44:	7888      	ldrb	r0, [r1, #2]
 800ad46:	1812      	adds	r2, r2, r0
 800ad48:	7908      	ldrb	r0, [r1, #4]
 800ad4a:	0400      	lsls	r0, r0, #16
 800ad4c:	1812      	adds	r2, r2, r0
 800ad4e:	7949      	ldrb	r1, [r1, #5]
 800ad50:	0609      	lsls	r1, r1, #24
 800ad52:	1852      	adds	r2, r2, r1
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e74e      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad58:	070a      	lsls	r2, r1, #28
 800ad5a:	d10a      	bne.n	800ad72 <PxMessagingTask+0x1126>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800ad5c:	2004      	movs	r0, #4
 800ad5e:	f007 fed7 	bl	8012b10 <malloc>
 800ad62:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ad64:	d100      	bne.n	800ad68 <PxMessagingTask+0x111c>
 800ad66:	e2e5      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad68:	00a4      	lsls	r4, r4, #2
 800ad6a:	0400      	lsls	r0, r0, #16
 800ad6c:	3007      	adds	r0, #7
 800ad6e:	4a52      	ldr	r2, [pc, #328]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ad70:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800ad72:	2238      	movs	r2, #56	; 0x38
 800ad74:	436a      	muls	r2, r5
 800ad76:	494f      	ldr	r1, [pc, #316]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad78:	1889      	adds	r1, r1, r2
 800ad7a:	19c9      	adds	r1, r1, r7
 800ad7c:	78ca      	ldrb	r2, [r1, #3]
 800ad7e:	0212      	lsls	r2, r2, #8
 800ad80:	7908      	ldrb	r0, [r1, #4]
 800ad82:	0400      	lsls	r0, r0, #16
 800ad84:	1812      	adds	r2, r2, r0
 800ad86:	7888      	ldrb	r0, [r1, #2]
 800ad88:	1812      	adds	r2, r2, r0
 800ad8a:	7949      	ldrb	r1, [r1, #5]
 800ad8c:	0609      	lsls	r1, r1, #24
 800ad8e:	1852      	adds	r2, r2, r1
 800ad90:	494e      	ldr	r1, [pc, #312]	; (800aecc <PxMessagingTask+0x1280>)
 800ad92:	600a      	str	r2, [r1, #0]
 800ad94:	2000      	movs	r0, #0
 800ad96:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	e72c      	b.n	800abf6 <PxMessagingTask+0xfaa>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ad9c:	4b44      	ldr	r3, [pc, #272]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ad9e:	2213      	movs	r2, #19
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	e741      	b.n	800ac28 <PxMessagingTask+0xfdc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ada4:	2238      	movs	r2, #56	; 0x38
 800ada6:	436a      	muls	r2, r5
 800ada8:	4b42      	ldr	r3, [pc, #264]	; (800aeb4 <PxMessagingTask+0x1268>)
 800adaa:	189b      	adds	r3, r3, r2
 800adac:	191b      	adds	r3, r3, r4
 800adae:	789c      	ldrb	r4, [r3, #2]
 800adb0:	0624      	lsls	r4, r4, #24
 800adb2:	78da      	ldrb	r2, [r3, #3]
 800adb4:	0412      	lsls	r2, r2, #16
 800adb6:	18a4      	adds	r4, r4, r2
 800adb8:	795a      	ldrb	r2, [r3, #5]
 800adba:	18a4      	adds	r4, r4, r2
 800adbc:	791b      	ldrb	r3, [r3, #4]
 800adbe:	021b      	lsls	r3, r3, #8
 800adc0:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800adc2:	23e0      	movs	r3, #224	; 0xe0
 800adc4:	061b      	lsls	r3, r3, #24
 800adc6:	18e2      	adds	r2, r4, r3
 800adc8:	4b41      	ldr	r3, [pc, #260]	; (800aed0 <PxMessagingTask+0x1284>)
 800adca:	429a      	cmp	r2, r3
 800adcc:	d900      	bls.n	800add0 <PxMessagingTask+0x1184>
 800adce:	e083      	b.n	800aed8 <PxMessagingTask+0x128c>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800add0:	2238      	movs	r2, #56	; 0x38
 800add2:	436a      	muls	r2, r5
 800add4:	4b37      	ldr	r3, [pc, #220]	; (800aeb4 <PxMessagingTask+0x1268>)
 800add6:	189b      	adds	r3, r3, r2
 800add8:	19db      	adds	r3, r3, r7
 800adda:	785b      	ldrb	r3, [r3, #1]
 800addc:	3b01      	subs	r3, #1
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	2a07      	cmp	r2, #7
 800ade2:	d900      	bls.n	800ade6 <PxMessagingTask+0x119a>
 800ade4:	e720      	b.n	800ac28 <PxMessagingTask+0xfdc>
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4a3a      	ldr	r2, [pc, #232]	; (800aed4 <PxMessagingTask+0x1288>)
 800adec:	58d3      	ldr	r3, [r2, r3]
 800adee:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800adf0:	2238      	movs	r2, #56	; 0x38
 800adf2:	436a      	muls	r2, r5
 800adf4:	4b2f      	ldr	r3, [pc, #188]	; (800aeb4 <PxMessagingTask+0x1268>)
 800adf6:	189b      	adds	r3, r3, r2
 800adf8:	19df      	adds	r7, r3, r7
 800adfa:	79bb      	ldrb	r3, [r7, #6]
 800adfc:	7023      	strb	r3, [r4, #0]
											break;
 800adfe:	e713      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800ae00:	2238      	movs	r2, #56	; 0x38
 800ae02:	436a      	muls	r2, r5
 800ae04:	4b2b      	ldr	r3, [pc, #172]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae06:	189b      	adds	r3, r3, r2
 800ae08:	19df      	adds	r7, r3, r7
 800ae0a:	2306      	movs	r3, #6
 800ae0c:	56fb      	ldrsb	r3, [r7, r3]
 800ae0e:	7023      	strb	r3, [r4, #0]
											break;
 800ae10:	e70a      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800ae12:	2238      	movs	r2, #56	; 0x38
 800ae14:	436a      	muls	r2, r5
 800ae16:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae18:	189b      	adds	r3, r3, r2
 800ae1a:	19df      	adds	r7, r3, r7
 800ae1c:	79fa      	ldrb	r2, [r7, #7]
 800ae1e:	0212      	lsls	r2, r2, #8
 800ae20:	79bb      	ldrb	r3, [r7, #6]
 800ae22:	189b      	adds	r3, r3, r2
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	8023      	strh	r3, [r4, #0]
											break;
 800ae28:	e6fe      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800ae2a:	2238      	movs	r2, #56	; 0x38
 800ae2c:	436a      	muls	r2, r5
 800ae2e:	4b21      	ldr	r3, [pc, #132]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae30:	189b      	adds	r3, r3, r2
 800ae32:	19df      	adds	r7, r3, r7
 800ae34:	79fa      	ldrb	r2, [r7, #7]
 800ae36:	0212      	lsls	r2, r2, #8
 800ae38:	79bb      	ldrb	r3, [r7, #6]
 800ae3a:	189b      	adds	r3, r3, r2
 800ae3c:	b21b      	sxth	r3, r3
 800ae3e:	8023      	strh	r3, [r4, #0]
											break;
 800ae40:	e6f2      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae42:	2238      	movs	r2, #56	; 0x38
 800ae44:	436a      	muls	r2, r5
 800ae46:	4b1b      	ldr	r3, [pc, #108]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae48:	189b      	adds	r3, r3, r2
 800ae4a:	19df      	adds	r7, r3, r7
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
 800ae4e:	021b      	lsls	r3, r3, #8
 800ae50:	7a3a      	ldrb	r2, [r7, #8]
 800ae52:	0412      	lsls	r2, r2, #16
 800ae54:	189b      	adds	r3, r3, r2
 800ae56:	79ba      	ldrb	r2, [r7, #6]
 800ae58:	189b      	adds	r3, r3, r2
 800ae5a:	7a7a      	ldrb	r2, [r7, #9]
 800ae5c:	0612      	lsls	r2, r2, #24
 800ae5e:	189b      	adds	r3, r3, r2
 800ae60:	6023      	str	r3, [r4, #0]
											break;
 800ae62:	e6e1      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800ae64:	2238      	movs	r2, #56	; 0x38
 800ae66:	436a      	muls	r2, r5
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae6a:	189b      	adds	r3, r3, r2
 800ae6c:	19df      	adds	r7, r3, r7
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	021b      	lsls	r3, r3, #8
 800ae72:	79ba      	ldrb	r2, [r7, #6]
 800ae74:	189b      	adds	r3, r3, r2
 800ae76:	7a3a      	ldrb	r2, [r7, #8]
 800ae78:	0412      	lsls	r2, r2, #16
 800ae7a:	189b      	adds	r3, r3, r2
 800ae7c:	7a7a      	ldrb	r2, [r7, #9]
 800ae7e:	0612      	lsls	r2, r2, #24
 800ae80:	189b      	adds	r3, r3, r2
 800ae82:	6023      	str	r3, [r4, #0]
											break;
 800ae84:	e6d0      	b.n	800ac28 <PxMessagingTask+0xfdc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae86:	2238      	movs	r2, #56	; 0x38
 800ae88:	436a      	muls	r2, r5
 800ae8a:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae8c:	189b      	adds	r3, r3, r2
 800ae8e:	19df      	adds	r7, r3, r7
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	021b      	lsls	r3, r3, #8
 800ae94:	7a3a      	ldrb	r2, [r7, #8]
 800ae96:	0412      	lsls	r2, r2, #16
 800ae98:	189b      	adds	r3, r3, r2
 800ae9a:	79ba      	ldrb	r2, [r7, #6]
 800ae9c:	189b      	adds	r3, r3, r2
 800ae9e:	7a7a      	ldrb	r2, [r7, #9]
 800aea0:	0612      	lsls	r2, r2, #24
 800aea2:	189b      	adds	r3, r3, r2
 800aea4:	4a09      	ldr	r2, [pc, #36]	; (800aecc <PxMessagingTask+0x1280>)
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800aeac:	6023      	str	r3, [r4, #0]
											break;
 800aeae:	e6bb      	b.n	800ac28 <PxMessagingTask+0xfdc>
 800aeb0:	20001110 	.word	0x20001110
 800aeb4:	20000d08 	.word	0x20000d08
 800aeb8:	2000694c 	.word	0x2000694c
 800aebc:	0801a348 	.word	0x0801a348
 800aec0:	0000fff0 	.word	0x0000fff0
 800aec4:	200069c4 	.word	0x200069c4
 800aec8:	20000f38 	.word	0x20000f38
 800aecc:	20001108 	.word	0x20001108
 800aed0:	00007fff 	.word	0x00007fff
 800aed4:	0801a368 	.word	0x0801a368
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800aed8:	4adc      	ldr	r2, [pc, #880]	; (800b24c <PxMessagingTask+0x1600>)
 800aeda:	23f8      	movs	r3, #248	; 0xf8
 800aedc:	061b      	lsls	r3, r3, #24
 800aede:	18e3      	adds	r3, r4, r3
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d900      	bls.n	800aee6 <PxMessagingTask+0x129a>
 800aee4:	e0a7      	b.n	800b036 <PxMessagingTask+0x13ea>
									HAL_FLASH_Unlock();
 800aee6:	f005 fd93 	bl	8010a10 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800aeea:	4643      	mov	r3, r8
 800aeec:	2b22      	cmp	r3, #34	; 0x22
 800aeee:	d111      	bne.n	800af14 <PxMessagingTask+0x12c8>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aef0:	2300      	movs	r3, #0
 800aef2:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800aef4:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages =1;
 800aef6:	3301      	adds	r3, #1
 800aef8:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800aefa:	a912      	add	r1, sp, #72	; 0x48
 800aefc:	a813      	add	r0, sp, #76	; 0x4c
 800aefe:	f005 fe5b 	bl	8010bb8 <HAL_FLASHEx_Erase>
 800af02:	900a      	str	r0, [sp, #40]	; 0x28
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800af04:	2800      	cmp	r0, #0
 800af06:	d102      	bne.n	800af0e <PxMessagingTask+0x12c2>
 800af08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af0a:	3301      	adds	r3, #1
 800af0c:	d002      	beq.n	800af14 <PxMessagingTask+0x12c8>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af0e:	4bd0      	ldr	r3, [pc, #832]	; (800b250 <PxMessagingTask+0x1604>)
 800af10:	2216      	movs	r2, #22
 800af12:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800af14:	4bce      	ldr	r3, [pc, #824]	; (800b250 <PxMessagingTask+0x1604>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d116      	bne.n	800af4a <PxMessagingTask+0x12fe>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800af1c:	2238      	movs	r2, #56	; 0x38
 800af1e:	436a      	muls	r2, r5
 800af20:	4bcc      	ldr	r3, [pc, #816]	; (800b254 <PxMessagingTask+0x1608>)
 800af22:	189b      	adds	r3, r3, r2
 800af24:	19db      	adds	r3, r3, r7
 800af26:	785b      	ldrb	r3, [r3, #1]
 800af28:	3b01      	subs	r3, #1
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	2a07      	cmp	r2, #7
 800af2e:	d80c      	bhi.n	800af4a <PxMessagingTask+0x12fe>
 800af30:	b2db      	uxtb	r3, r3
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4ac8      	ldr	r2, [pc, #800]	; (800b258 <PxMessagingTask+0x160c>)
 800af36:	58d3      	ldr	r3, [r2, r3]
 800af38:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800af3a:	8823      	ldrh	r3, [r4, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	4ac7      	ldr	r2, [pc, #796]	; (800b25c <PxMessagingTask+0x1610>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d00c      	beq.n	800af5e <PxMessagingTask+0x1312>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af44:	4bc2      	ldr	r3, [pc, #776]	; (800b250 <PxMessagingTask+0x1604>)
 800af46:	2216      	movs	r2, #22
 800af48:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800af4a:	f005 fd73 	bl	8010a34 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800af4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af50:	2b00      	cmp	r3, #0
 800af52:	d100      	bne.n	800af56 <PxMessagingTask+0x130a>
 800af54:	e668      	b.n	800ac28 <PxMessagingTask+0xfdc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af56:	4bbe      	ldr	r3, [pc, #760]	; (800b250 <PxMessagingTask+0x1604>)
 800af58:	2216      	movs	r2, #22
 800af5a:	701a      	strb	r2, [r3, #0]
 800af5c:	e664      	b.n	800ac28 <PxMessagingTask+0xfdc>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800af5e:	2238      	movs	r2, #56	; 0x38
 800af60:	436a      	muls	r2, r5
 800af62:	4bbc      	ldr	r3, [pc, #752]	; (800b254 <PxMessagingTask+0x1608>)
 800af64:	189b      	adds	r3, r3, r2
 800af66:	19df      	adds	r7, r3, r7
 800af68:	79ba      	ldrb	r2, [r7, #6]
 800af6a:	2300      	movs	r3, #0
 800af6c:	49bc      	ldr	r1, [pc, #752]	; (800b260 <PxMessagingTask+0x1614>)
 800af6e:	600a      	str	r2, [r1, #0]
 800af70:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800af72:	0021      	movs	r1, r4
 800af74:	2001      	movs	r0, #1
 800af76:	f005 fd95 	bl	8010aa4 <HAL_FLASH_Program>
 800af7a:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800af7c:	e7e5      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800af7e:	8823      	ldrh	r3, [r4, #0]
 800af80:	b29b      	uxth	r3, r3
 800af82:	4ab6      	ldr	r2, [pc, #728]	; (800b25c <PxMessagingTask+0x1610>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <PxMessagingTask+0x1344>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af88:	4bb1      	ldr	r3, [pc, #708]	; (800b250 <PxMessagingTask+0x1604>)
 800af8a:	2216      	movs	r2, #22
 800af8c:	701a      	strb	r2, [r3, #0]
													break;
 800af8e:	e7dc      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800af90:	2238      	movs	r2, #56	; 0x38
 800af92:	436a      	muls	r2, r5
 800af94:	4baf      	ldr	r3, [pc, #700]	; (800b254 <PxMessagingTask+0x1608>)
 800af96:	189b      	adds	r3, r3, r2
 800af98:	19df      	adds	r7, r3, r7
 800af9a:	79fa      	ldrb	r2, [r7, #7]
 800af9c:	0212      	lsls	r2, r2, #8
 800af9e:	79bb      	ldrb	r3, [r7, #6]
 800afa0:	18d2      	adds	r2, r2, r3
 800afa2:	17d3      	asrs	r3, r2, #31
 800afa4:	49ae      	ldr	r1, [pc, #696]	; (800b260 <PxMessagingTask+0x1614>)
 800afa6:	600a      	str	r2, [r1, #0]
 800afa8:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800afaa:	0021      	movs	r1, r4
 800afac:	2001      	movs	r0, #1
 800afae:	f005 fd79 	bl	8010aa4 <HAL_FLASH_Program>
 800afb2:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800afb4:	e7c9      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	d003      	beq.n	800afc4 <PxMessagingTask+0x1378>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800afbc:	4ba4      	ldr	r3, [pc, #656]	; (800b250 <PxMessagingTask+0x1604>)
 800afbe:	2216      	movs	r2, #22
 800afc0:	701a      	strb	r2, [r3, #0]
													break;
 800afc2:	e7c2      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800afc4:	2238      	movs	r2, #56	; 0x38
 800afc6:	436a      	muls	r2, r5
 800afc8:	4ba2      	ldr	r3, [pc, #648]	; (800b254 <PxMessagingTask+0x1608>)
 800afca:	189b      	adds	r3, r3, r2
 800afcc:	19df      	adds	r7, r3, r7
 800afce:	79fa      	ldrb	r2, [r7, #7]
 800afd0:	0212      	lsls	r2, r2, #8
 800afd2:	7a3b      	ldrb	r3, [r7, #8]
 800afd4:	041b      	lsls	r3, r3, #16
 800afd6:	18d2      	adds	r2, r2, r3
 800afd8:	79bb      	ldrb	r3, [r7, #6]
 800afda:	18d2      	adds	r2, r2, r3
 800afdc:	7a7b      	ldrb	r3, [r7, #9]
 800afde:	061b      	lsls	r3, r3, #24
 800afe0:	18d2      	adds	r2, r2, r3
 800afe2:	2300      	movs	r3, #0
 800afe4:	499e      	ldr	r1, [pc, #632]	; (800b260 <PxMessagingTask+0x1614>)
 800afe6:	600a      	str	r2, [r1, #0]
 800afe8:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800afea:	0021      	movs	r1, r4
 800afec:	2002      	movs	r0, #2
 800afee:	f005 fd59 	bl	8010aa4 <HAL_FLASH_Program>
 800aff2:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800aff4:	e7a9      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	3301      	adds	r3, #1
 800affa:	d003      	beq.n	800b004 <PxMessagingTask+0x13b8>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800affc:	4b94      	ldr	r3, [pc, #592]	; (800b250 <PxMessagingTask+0x1604>)
 800affe:	2216      	movs	r2, #22
 800b000:	701a      	strb	r2, [r3, #0]
													break;
 800b002:	e7a2      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b004:	2238      	movs	r2, #56	; 0x38
 800b006:	436a      	muls	r2, r5
 800b008:	4b92      	ldr	r3, [pc, #584]	; (800b254 <PxMessagingTask+0x1608>)
 800b00a:	189b      	adds	r3, r3, r2
 800b00c:	19df      	adds	r7, r3, r7
 800b00e:	79fa      	ldrb	r2, [r7, #7]
 800b010:	0212      	lsls	r2, r2, #8
 800b012:	7a3b      	ldrb	r3, [r7, #8]
 800b014:	041b      	lsls	r3, r3, #16
 800b016:	18d2      	adds	r2, r2, r3
 800b018:	79bb      	ldrb	r3, [r7, #6]
 800b01a:	18d2      	adds	r2, r2, r3
 800b01c:	7a7b      	ldrb	r3, [r7, #9]
 800b01e:	061b      	lsls	r3, r3, #24
 800b020:	18d2      	adds	r2, r2, r3
 800b022:	2300      	movs	r3, #0
 800b024:	498e      	ldr	r1, [pc, #568]	; (800b260 <PxMessagingTask+0x1614>)
 800b026:	600a      	str	r2, [r1, #0]
 800b028:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b02a:	0021      	movs	r1, r4
 800b02c:	2003      	movs	r0, #3
 800b02e:	f005 fd39 	bl	8010aa4 <HAL_FLASH_Program>
 800b032:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b034:	e789      	b.n	800af4a <PxMessagingTask+0x12fe>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b036:	4b86      	ldr	r3, [pc, #536]	; (800b250 <PxMessagingTask+0x1604>)
 800b038:	2215      	movs	r2, #21
 800b03a:	701a      	strb	r2, [r3, #0]
 800b03c:	e5f4      	b.n	800ac28 <PxMessagingTask+0xfdc>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b03e:	4b85      	ldr	r3, [pc, #532]	; (800b254 <PxMessagingTask+0x1608>)
 800b040:	199b      	adds	r3, r3, r6
 800b042:	5d1a      	ldrb	r2, [r3, r4]
 800b044:	4b82      	ldr	r3, [pc, #520]	; (800b250 <PxMessagingTask+0x1604>)
 800b046:	701a      	strb	r2, [r3, #0]
							break;
 800b048:	2700      	movs	r7, #0
 800b04a:	f7fe fe2f 	bl	8009cac <PxMessagingTask+0x60>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b04e:	9a06      	ldr	r2, [sp, #24]
 800b050:	3a01      	subs	r2, #1
 800b052:	b292      	uxth	r2, r2
 800b054:	1c61      	adds	r1, r4, #1
 800b056:	4451      	add	r1, sl
 800b058:	4b7e      	ldr	r3, [pc, #504]	; (800b254 <PxMessagingTask+0x1608>)
 800b05a:	18c9      	adds	r1, r1, r3
 800b05c:	199b      	adds	r3, r3, r6
 800b05e:	5d18      	ldrb	r0, [r3, r4]
 800b060:	230a      	movs	r3, #10
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	f002 f9ba 	bl	800d3dc <writePxMutex>
							break;
 800b068:	2700      	movs	r7, #0
 800b06a:	f7fe fe1f 	bl	8009cac <PxMessagingTask+0x60>
							switch(cMessage[port - 1][0 + shift]){
 800b06e:	9406      	str	r4, [sp, #24]
 800b070:	4b78      	ldr	r3, [pc, #480]	; (800b254 <PxMessagingTask+0x1608>)
 800b072:	199b      	adds	r3, r3, r6
 800b074:	5d18      	ldrb	r0, [r3, r4]
 800b076:	282b      	cmp	r0, #43	; 0x2b
 800b078:	d900      	bls.n	800b07c <PxMessagingTask+0x1430>
 800b07a:	e0a9      	b.n	800b1d0 <PxMessagingTask+0x1584>
 800b07c:	0083      	lsls	r3, r0, #2
 800b07e:	4a79      	ldr	r2, [pc, #484]	; (800b264 <PxMessagingTask+0x1618>)
 800b080:	58d3      	ldr	r3, [r2, r3]
 800b082:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b084:	2338      	movs	r3, #56	; 0x38
 800b086:	436b      	muls	r3, r5
 800b088:	4f72      	ldr	r7, [pc, #456]	; (800b254 <PxMessagingTask+0x1608>)
 800b08a:	18ff      	adds	r7, r7, r3
 800b08c:	9b06      	ldr	r3, [sp, #24]
 800b08e:	469c      	mov	ip, r3
 800b090:	4467      	add	r7, ip
 800b092:	78bb      	ldrb	r3, [r7, #2]
 800b094:	021b      	lsls	r3, r3, #8
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	0412      	lsls	r2, r2, #16
 800b09a:	189b      	adds	r3, r3, r2
 800b09c:	787a      	ldrb	r2, [r7, #1]
 800b09e:	189b      	adds	r3, r3, r2
 800b0a0:	793a      	ldrb	r2, [r7, #4]
 800b0a2:	0612      	lsls	r2, r2, #24
 800b0a4:	189b      	adds	r3, r3, r2
 800b0a6:	4a70      	ldr	r2, [pc, #448]	; (800b268 <PxMessagingTask+0x161c>)
 800b0a8:	6013      	str	r3, [r2, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b0aa:	79bb      	ldrb	r3, [r7, #6]
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	79f9      	ldrb	r1, [r7, #7]
 800b0b0:	0409      	lsls	r1, r1, #16
 800b0b2:	185b      	adds	r3, r3, r1
 800b0b4:	7979      	ldrb	r1, [r7, #5]
 800b0b6:	185b      	adds	r3, r3, r1
 800b0b8:	7a39      	ldrb	r1, [r7, #8]
 800b0ba:	0609      	lsls	r1, r1, #24
 800b0bc:	185b      	adds	r3, r3, r1
 800b0be:	6053      	str	r3, [r2, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b0c0:	7abb      	ldrb	r3, [r7, #10]
 800b0c2:	021b      	lsls	r3, r3, #8
 800b0c4:	7af9      	ldrb	r1, [r7, #11]
 800b0c6:	0409      	lsls	r1, r1, #16
 800b0c8:	185b      	adds	r3, r3, r1
 800b0ca:	7a79      	ldrb	r1, [r7, #9]
 800b0cc:	185b      	adds	r3, r3, r1
 800b0ce:	7b39      	ldrb	r1, [r7, #12]
 800b0d0:	0609      	lsls	r1, r1, #24
 800b0d2:	185b      	adds	r3, r3, r1
 800b0d4:	6093      	str	r3, [r2, #8]
									break;
 800b0d6:	e07b      	b.n	800b1d0 <PxMessagingTask+0x1584>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b0d8:	2338      	movs	r3, #56	; 0x38
 800b0da:	436b      	muls	r3, r5
 800b0dc:	4f5d      	ldr	r7, [pc, #372]	; (800b254 <PxMessagingTask+0x1608>)
 800b0de:	18ff      	adds	r7, r7, r3
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	469c      	mov	ip, r3
 800b0e4:	4467      	add	r7, ip
 800b0e6:	78bb      	ldrb	r3, [r7, #2]
 800b0e8:	021b      	lsls	r3, r3, #8
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	0412      	lsls	r2, r2, #16
 800b0ee:	189b      	adds	r3, r3, r2
 800b0f0:	787a      	ldrb	r2, [r7, #1]
 800b0f2:	189b      	adds	r3, r3, r2
 800b0f4:	793a      	ldrb	r2, [r7, #4]
 800b0f6:	0612      	lsls	r2, r2, #24
 800b0f8:	189b      	adds	r3, r3, r2
 800b0fa:	4a5b      	ldr	r2, [pc, #364]	; (800b268 <PxMessagingTask+0x161c>)
 800b0fc:	60d3      	str	r3, [r2, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b0fe:	79bb      	ldrb	r3, [r7, #6]
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	79f9      	ldrb	r1, [r7, #7]
 800b104:	0409      	lsls	r1, r1, #16
 800b106:	185b      	adds	r3, r3, r1
 800b108:	7979      	ldrb	r1, [r7, #5]
 800b10a:	185b      	adds	r3, r3, r1
 800b10c:	7a39      	ldrb	r1, [r7, #8]
 800b10e:	0609      	lsls	r1, r1, #24
 800b110:	185b      	adds	r3, r3, r1
 800b112:	6113      	str	r3, [r2, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b114:	7abb      	ldrb	r3, [r7, #10]
 800b116:	021b      	lsls	r3, r3, #8
 800b118:	7af9      	ldrb	r1, [r7, #11]
 800b11a:	0409      	lsls	r1, r1, #16
 800b11c:	185b      	adds	r3, r3, r1
 800b11e:	7a79      	ldrb	r1, [r7, #9]
 800b120:	185b      	adds	r3, r3, r1
 800b122:	7b39      	ldrb	r1, [r7, #12]
 800b124:	0609      	lsls	r1, r1, #24
 800b126:	185b      	adds	r3, r3, r1
 800b128:	6153      	str	r3, [r2, #20]
									break;
 800b12a:	e051      	b.n	800b1d0 <PxMessagingTask+0x1584>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b12c:	2338      	movs	r3, #56	; 0x38
 800b12e:	436b      	muls	r3, r5
 800b130:	4a48      	ldr	r2, [pc, #288]	; (800b254 <PxMessagingTask+0x1608>)
 800b132:	18d2      	adds	r2, r2, r3
 800b134:	9b06      	ldr	r3, [sp, #24]
 800b136:	469c      	mov	ip, r3
 800b138:	4462      	add	r2, ip
 800b13a:	7893      	ldrb	r3, [r2, #2]
 800b13c:	021b      	lsls	r3, r3, #8
 800b13e:	78d1      	ldrb	r1, [r2, #3]
 800b140:	0409      	lsls	r1, r1, #16
 800b142:	185b      	adds	r3, r3, r1
 800b144:	7851      	ldrb	r1, [r2, #1]
 800b146:	185b      	adds	r3, r3, r1
 800b148:	7912      	ldrb	r2, [r2, #4]
 800b14a:	0612      	lsls	r2, r2, #24
 800b14c:	189b      	adds	r3, r3, r2
 800b14e:	4a46      	ldr	r2, [pc, #280]	; (800b268 <PxMessagingTask+0x161c>)
 800b150:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b152:	4b46      	ldr	r3, [pc, #280]	; (800b26c <PxMessagingTask+0x1620>)
 800b154:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b156:	2238      	movs	r2, #56	; 0x38
 800b158:	436a      	muls	r2, r5
 800b15a:	4b3e      	ldr	r3, [pc, #248]	; (800b254 <PxMessagingTask+0x1608>)
 800b15c:	189b      	adds	r3, r3, r2
 800b15e:	9a06      	ldr	r2, [sp, #24]
 800b160:	4694      	mov	ip, r2
 800b162:	4463      	add	r3, ip
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	4a42      	ldr	r2, [pc, #264]	; (800b270 <PxMessagingTask+0x1624>)
 800b168:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d146      	bne.n	800b1fc <PxMessagingTask+0x15b0>
										ADCSelectChannel(ADCPort,"top");
 800b16e:	4f41      	ldr	r7, [pc, #260]	; (800b274 <PxMessagingTask+0x1628>)
 800b170:	0039      	movs	r1, r7
 800b172:	f7fd fc9b 	bl	8008aac <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b176:	4b3d      	ldr	r3, [pc, #244]	; (800b26c <PxMessagingTask+0x1620>)
 800b178:	7818      	ldrb	r0, [r3, #0]
 800b17a:	4a3f      	ldr	r2, [pc, #252]	; (800b278 <PxMessagingTask+0x162c>)
 800b17c:	0039      	movs	r1, r7
 800b17e:	f7fd fcc3 	bl	8008b08 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b182:	493e      	ldr	r1, [pc, #248]	; (800b27c <PxMessagingTask+0x1630>)
 800b184:	483e      	ldr	r0, [pc, #248]	; (800b280 <PxMessagingTask+0x1634>)
 800b186:	f7fd fb09 	bl	800879c <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b18a:	4f32      	ldr	r7, [pc, #200]	; (800b254 <PxMessagingTask+0x1608>)
 800b18c:	19bf      	adds	r7, r7, r6
 800b18e:	9b06      	ldr	r3, [sp, #24]
 800b190:	5cf8      	ldrb	r0, [r7, r3]
 800b192:	4b36      	ldr	r3, [pc, #216]	; (800b26c <PxMessagingTask+0x1620>)
 800b194:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b196:	493b      	ldr	r1, [pc, #236]	; (800b284 <PxMessagingTask+0x1638>)
 800b198:	f7fd fbbe 	bl	8008918 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	469c      	mov	ip, r3
 800b1a0:	4467      	add	r7, ip
 800b1a2:	79bb      	ldrb	r3, [r7, #6]
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	79fa      	ldrb	r2, [r7, #7]
 800b1a8:	0412      	lsls	r2, r2, #16
 800b1aa:	189b      	adds	r3, r3, r2
 800b1ac:	797a      	ldrb	r2, [r7, #5]
 800b1ae:	189b      	adds	r3, r3, r2
 800b1b0:	7a3a      	ldrb	r2, [r7, #8]
 800b1b2:	0612      	lsls	r2, r2, #24
 800b1b4:	189b      	adds	r3, r3, r2
 800b1b6:	4a2c      	ldr	r2, [pc, #176]	; (800b268 <PxMessagingTask+0x161c>)
 800b1b8:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b1ba:	7abb      	ldrb	r3, [r7, #10]
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	7af9      	ldrb	r1, [r7, #11]
 800b1c0:	0409      	lsls	r1, r1, #16
 800b1c2:	185b      	adds	r3, r3, r1
 800b1c4:	7a79      	ldrb	r1, [r7, #9]
 800b1c6:	185b      	adds	r3, r3, r1
 800b1c8:	7b39      	ldrb	r1, [r7, #12]
 800b1ca:	0609      	lsls	r1, r1, #24
 800b1cc:	185b      	adds	r3, r3, r1
 800b1ce:	6213      	str	r3, [r2, #32]
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b1d0:	9400      	str	r4, [sp, #0]
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	9a04      	ldr	r2, [sp, #16]
 800b1d6:	9908      	ldr	r1, [sp, #32]
 800b1d8:	4640      	mov	r0, r8
 800b1da:	f7fe fd35 	bl	8009c48 <User_MessagingParser>
 800b1de:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800b1e0:	2801      	cmp	r0, #1
 800b1e2:	d001      	beq.n	800b1e8 <PxMessagingTask+0x159c>
 800b1e4:	f7fe fd62 	bl	8009cac <PxMessagingTask+0x60>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b1e8:	9400      	str	r4, [sp, #0]
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	9a04      	ldr	r2, [sp, #16]
 800b1ee:	9908      	ldr	r1, [sp, #32]
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	f000 fa49 	bl	800b688 <Module_MessagingTask>
 800b1f6:	0007      	movs	r7, r0
 800b1f8:	f7fe fd54 	bl	8009ca4 <PxMessagingTask+0x58>
									else if(1 == ADCSide){
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d1c0      	bne.n	800b182 <PxMessagingTask+0x1536>
										ADCSelectChannel(ADCPort,"bottom");
 800b200:	4f21      	ldr	r7, [pc, #132]	; (800b288 <PxMessagingTask+0x163c>)
 800b202:	0039      	movs	r1, r7
 800b204:	f7fd fc52 	bl	8008aac <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b208:	4b18      	ldr	r3, [pc, #96]	; (800b26c <PxMessagingTask+0x1620>)
 800b20a:	7818      	ldrb	r0, [r3, #0]
 800b20c:	4a1a      	ldr	r2, [pc, #104]	; (800b278 <PxMessagingTask+0x162c>)
 800b20e:	0039      	movs	r1, r7
 800b210:	f7fd fc7a 	bl	8008b08 <ReadADCChannel>
 800b214:	e7b5      	b.n	800b182 <PxMessagingTask+0x1536>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800b216:	2700      	movs	r7, #0
 800b218:	f7fe fd44 	bl	8009ca4 <PxMessagingTask+0x58>
									switch(messageParams[0]) // requested format
 800b21c:	2700      	movs	r7, #0
 800b21e:	f7fe fd41 	bl	8009ca4 <PxMessagingTask+0x58>
									switch(messageParams[0]) // requested format
 800b222:	2700      	movs	r7, #0
 800b224:	f7fe fd3e 	bl	8009ca4 <PxMessagingTask+0x58>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b228:	2200      	movs	r2, #0
 800b22a:	2100      	movs	r1, #0
 800b22c:	9804      	ldr	r0, [sp, #16]
 800b22e:	f7fe fa49 	bl	80096c4 <SendMessageToModule>
			result =BOS_OK;
 800b232:	2700      	movs	r7, #0
 800b234:	f7fe fd3a 	bl	8009cac <PxMessagingTask+0x60>
					switch(code){
 800b238:	2700      	movs	r7, #0
 800b23a:	f7fe fd37 	bl	8009cac <PxMessagingTask+0x60>
 800b23e:	9205      	str	r2, [sp, #20]
 800b240:	2700      	movs	r7, #0
 800b242:	f7fe fd33 	bl	8009cac <PxMessagingTask+0x60>
 800b246:	2700      	movs	r7, #0
 800b248:	f7fe fd30 	bl	8009cac <PxMessagingTask+0x60>
 800b24c:	0001ffff 	.word	0x0001ffff
 800b250:	20001110 	.word	0x20001110
 800b254:	20000d08 	.word	0x20000d08
 800b258:	0801a388 	.word	0x0801a388
 800b25c:	0000ffff 	.word	0x0000ffff
 800b260:	20001108 	.word	0x20001108
 800b264:	0801a3a8 	.word	0x0801a3a8
 800b268:	200015cc 	.word	0x200015cc
 800b26c:	200015bc 	.word	0x200015bc
 800b270:	200015be 	.word	0x200015be
 800b274:	0801835c 	.word	0x0801835c
 800b278:	200015c0 	.word	0x200015c0
 800b27c:	200015c8 	.word	0x200015c8
 800b280:	200015c4 	.word	0x200015c4
 800b284:	200015b8 	.word	0x200015b8
 800b288:	08018360 	.word	0x08018360
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b28c:	454b      	cmp	r3, r9
 800b28e:	d004      	beq.n	800b29a <PxMessagingTask+0x164e>
 800b290:	4643      	mov	r3, r8
 800b292:	2b10      	cmp	r3, #16
 800b294:	d001      	beq.n	800b29a <PxMessagingTask+0x164e>
 800b296:	f7fe fd5c 	bl	8009d52 <PxMessagingTask+0x106>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b29a:	464b      	mov	r3, r9
 800b29c:	2bff      	cmp	r3, #255	; 0xff
 800b29e:	d101      	bne.n	800b2a4 <PxMessagingTask+0x1658>
 800b2a0:	f7fe fd79 	bl	8009d96 <PxMessagingTask+0x14a>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b2a4:	2bfe      	cmp	r3, #254	; 0xfe
 800b2a6:	d001      	beq.n	800b2ac <PxMessagingTask+0x1660>
 800b2a8:	f7fe fd7f 	bl	8009daa <PxMessagingTask+0x15e>
 800b2ac:	4b29      	ldr	r3, [pc, #164]	; (800b354 <PxMessagingTask+0x1708>)
 800b2ae:	199b      	adds	r3, r3, r6
 800b2b0:	1859      	adds	r1, r3, r1
 800b2b2:	3901      	subs	r1, #1
 800b2b4:	780b      	ldrb	r3, [r1, #0]
 800b2b6:	4a28      	ldr	r2, [pc, #160]	; (800b358 <PxMessagingTask+0x170c>)
 800b2b8:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800b2ba:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d101      	bne.n	800b2c4 <PxMessagingTask+0x1678>
 800b2c0:	f7fe fcf0 	bl	8009ca4 <PxMessagingTask+0x58>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800b2c4:	4a24      	ldr	r2, [pc, #144]	; (800b358 <PxMessagingTask+0x170c>)
 800b2c6:	7013      	strb	r3, [r2, #0]
 800b2c8:	4a24      	ldr	r2, [pc, #144]	; (800b35c <PxMessagingTask+0x1710>)
 800b2ca:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800b2cc:	9908      	ldr	r1, [sp, #32]
 800b2ce:	20fe      	movs	r0, #254	; 0xfe
 800b2d0:	f7fe f9b0 	bl	8009634 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800b2d4:	4b22      	ldr	r3, [pc, #136]	; (800b360 <PxMessagingTask+0x1714>)
 800b2d6:	5d59      	ldrb	r1, [r3, r5]
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <PxMessagingTask+0x1708>)
 800b2da:	199b      	adds	r3, r3, r6
 800b2dc:	185a      	adds	r2, r3, r1
 800b2de:	3a01      	subs	r2, #1
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b2e4:	1e8a      	subs	r2, r1, #2
 800b2e6:	5c9c      	ldrb	r4, [r3, r2]
 800b2e8:	9405      	str	r4, [sp, #20]
					for(i =0; i < temp; i++){
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	d02e      	beq.n	800b34c <PxMessagingTask+0x1700>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b2ee:	1b13      	subs	r3, r2, r4
 800b2f0:	469c      	mov	ip, r3
 800b2f2:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <PxMessagingTask+0x1718>)
 800b2f4:	7818      	ldrb	r0, [r3, #0]
 800b2f6:	4b17      	ldr	r3, [pc, #92]	; (800b354 <PxMessagingTask+0x1708>)
 800b2f8:	199b      	adds	r3, r3, r6
 800b2fa:	4662      	mov	r2, ip
 800b2fc:	5c9b      	ldrb	r3, [r3, r2]
 800b2fe:	4283      	cmp	r3, r0
 800b300:	d011      	beq.n	800b326 <PxMessagingTask+0x16da>
 800b302:	4653      	mov	r3, sl
 800b304:	3301      	adds	r3, #1
 800b306:	4463      	add	r3, ip
 800b308:	4a12      	ldr	r2, [pc, #72]	; (800b354 <PxMessagingTask+0x1708>)
 800b30a:	189b      	adds	r3, r3, r2
 800b30c:	3201      	adds	r2, #1
 800b30e:	4452      	add	r2, sl
 800b310:	1e67      	subs	r7, r4, #1
 800b312:	b2ff      	uxtb	r7, r7
 800b314:	19d2      	adds	r2, r2, r7
 800b316:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800b318:	4293      	cmp	r3, r2
 800b31a:	d017      	beq.n	800b34c <PxMessagingTask+0x1700>
 800b31c:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b31e:	1e5c      	subs	r4, r3, #1
 800b320:	7824      	ldrb	r4, [r4, #0]
 800b322:	4284      	cmp	r4, r0
 800b324:	d1f8      	bne.n	800b318 <PxMessagingTask+0x16cc>
				shift +=4;
 800b326:	9c06      	ldr	r4, [sp, #24]
 800b328:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800b32a:	1b0a      	subs	r2, r1, r4
 800b32c:	b2d3      	uxtb	r3, r2
 800b32e:	9306      	str	r3, [sp, #24]
 800b330:	f7fe fd45 	bl	8009dbe <PxMessagingTask+0x172>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b334:	2338      	movs	r3, #56	; 0x38
 800b336:	436b      	muls	r3, r5
 800b338:	4a06      	ldr	r2, [pc, #24]	; (800b354 <PxMessagingTask+0x1708>)
 800b33a:	18d2      	adds	r2, r2, r3
 800b33c:	5dd3      	ldrb	r3, [r2, r7]
 800b33e:	3b01      	subs	r3, #1
 800b340:	0098      	lsls	r0, r3, #2
 800b342:	4909      	ldr	r1, [pc, #36]	; (800b368 <PxMessagingTask+0x171c>)
 800b344:	5841      	ldr	r1, [r0, r1]
 800b346:	4640      	mov	r0, r8
 800b348:	5c12      	ldrb	r2, [r2, r0]
 800b34a:	e463      	b.n	800ac14 <PxMessagingTask+0xfc8>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b34c:	2766      	movs	r7, #102	; 0x66
 800b34e:	f7fe fcad 	bl	8009cac <PxMessagingTask+0x60>
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	20000d08 	.word	0x20000d08
 800b358:	200015f2 	.word	0x200015f2
 800b35c:	20000cb4 	.word	0x20000cb4
 800b360:	20000f30 	.word	0x20000f30
 800b364:	20001076 	.word	0x20001076
 800b368:	2000694c 	.word	0x2000694c

0800b36c <SystemClock_Config>:
	|												 Private Functions	 														|
   ----------------------------------------------------------------------- 
*/

void SystemClock_Config(void)
{
 800b36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36e:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b370:	2401      	movs	r4, #1
 800b372:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b374:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b376:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b378:	2310      	movs	r3, #16
 800b37a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b37c:	2702      	movs	r7, #2
 800b37e:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b380:	2680      	movs	r6, #128	; 0x80
 800b382:	0276      	lsls	r6, r6, #9
 800b384:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b386:	2380      	movs	r3, #128	; 0x80
 800b388:	035b      	lsls	r3, r3, #13
 800b38a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b38c:	2500      	movs	r5, #0
 800b38e:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b390:	a80d      	add	r0, sp, #52	; 0x34
 800b392:	f005 fdfb 	bl	8010f8c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b396:	2307      	movs	r3, #7
 800b398:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b39a:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b39c:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b39e:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	a809      	add	r0, sp, #36	; 0x24
 800b3a4:	f006 f8b4 	bl	8011510 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <SystemClock_Config+0xa8>)
 800b3aa:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b3ac:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b3ae:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b3b0:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b3b2:	a802      	add	r0, sp, #8
 800b3b4:	f006 fa5a 	bl	801186c <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800b3b8:	4d17      	ldr	r5, [pc, #92]	; (800b418 <SystemClock_Config+0xac>)
 800b3ba:	69ea      	ldr	r2, [r5, #28]
 800b3bc:	2180      	movs	r1, #128	; 0x80
 800b3be:	0549      	lsls	r1, r1, #21
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	61ea      	str	r2, [r5, #28]
 800b3c4:	69eb      	ldr	r3, [r5, #28]
 800b3c6:	400b      	ands	r3, r1
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b3cc:	f005 fdd4 	bl	8010f78 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3d0:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b3d2:	23c0      	movs	r3, #192	; 0xc0
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b3d8:	a802      	add	r0, sp, #8
 800b3da:	f006 fa47 	bl	801186c <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b3de:	f006 fa21 	bl	8011824 <HAL_RCC_GetHCLKFreq>
 800b3e2:	21fa      	movs	r1, #250	; 0xfa
 800b3e4:	0089      	lsls	r1, r1, #2
 800b3e6:	f7f4 feb3 	bl	8000150 <__udivsi3>
 800b3ea:	f004 fcc3 	bl	800fd74 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b3ee:	2004      	movs	r0, #4
 800b3f0:	f004 fcdc 	bl	800fdac <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 800b3f4:	69ab      	ldr	r3, [r5, #24]
 800b3f6:	4323      	orrs	r3, r4
 800b3f8:	61ab      	str	r3, [r5, #24]
 800b3fa:	69ab      	ldr	r3, [r5, #24]
 800b3fc:	401c      	ands	r4, r3
 800b3fe:	9401      	str	r4, [sp, #4]
 800b400:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b402:	2001      	movs	r0, #1
 800b404:	2200      	movs	r2, #0
 800b406:	2100      	movs	r1, #0
 800b408:	4240      	negs	r0, r0
 800b40a:	f004 fc6b 	bl	800fce4 <HAL_NVIC_SetPriority>
	
}
 800b40e:	b01b      	add	sp, #108	; 0x6c
 800b410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	00040003 	.word	0x00040003
 800b418:	40021000 	.word	0x40021000

0800b41c <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800b41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41e:	46de      	mov	lr, fp
 800b420:	4657      	mov	r7, sl
 800b422:	464e      	mov	r6, r9
 800b424:	4645      	mov	r5, r8
 800b426:	b5e0      	push	{r5, r6, r7, lr}
 800b428:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b42a:	2215      	movs	r2, #21
 800b42c:	2100      	movs	r1, #0
 800b42e:	a802      	add	r0, sp, #8
 800b430:	f007 fdc4 	bl	8012fbc <memset>
	
	HAL_FLASH_Unlock();
 800b434:	f005 faec 	bl	8010a10 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800b438:	4872      	ldr	r0, [pc, #456]	; (800b604 <SaveToRO+0x1e8>)
 800b43a:	f005 fbab 	bl	8010b94 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b43e:	4872      	ldr	r0, [pc, #456]	; (800b608 <SaveToRO+0x1ec>)
 800b440:	f005 fb02 	bl	8010a48 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800b444:	2800      	cmp	r0, #0
 800b446:	d112      	bne.n	800b46e <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b448:	4a70      	ldr	r2, [pc, #448]	; (800b60c <SaveToRO+0x1f0>)
 800b44a:	6913      	ldr	r3, [r2, #16]
 800b44c:	2102      	movs	r1, #2
 800b44e:	438b      	bics	r3, r1
 800b450:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800b452:	4b6f      	ldr	r3, [pc, #444]	; (800b610 <SaveToRO+0x1f4>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d113      	bne.n	800b482 <SaveToRO+0x66>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b45a:	4b6e      	ldr	r3, [pc, #440]	; (800b614 <SaveToRO+0x1f8>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d100      	bne.n	800b464 <SaveToRO+0x48>
 800b462:	e0ca      	b.n	800b5fa <SaveToRO+0x1de>
 800b464:	2500      	movs	r5, #0
 800b466:	4c6c      	ldr	r4, [pc, #432]	; (800b618 <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType) 
 800b468:	4b6c      	ldr	r3, [pc, #432]	; (800b61c <SaveToRO+0x200>)
 800b46a:	4698      	mov	r8, r3
 800b46c:	e06e      	b.n	800b54c <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800b46e:	4b6c      	ldr	r3, [pc, #432]	; (800b620 <SaveToRO+0x204>)
 800b470:	69d8      	ldr	r0, [r3, #28]
 800b472:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800b474:	b009      	add	sp, #36	; 0x24
 800b476:	bc3c      	pop	{r2, r3, r4, r5}
 800b478:	4690      	mov	r8, r2
 800b47a:	4699      	mov	r9, r3
 800b47c:	46a2      	mov	sl, r4
 800b47e:	46ab      	mov	fp, r5
 800b480:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b482:	4a68      	ldr	r2, [pc, #416]	; (800b624 <SaveToRO+0x208>)
 800b484:	7812      	ldrb	r2, [r2, #0]
 800b486:	0212      	lsls	r2, r2, #8
 800b488:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b48a:	b292      	uxth	r2, r2
 800b48c:	2300      	movs	r3, #0
 800b48e:	495d      	ldr	r1, [pc, #372]	; (800b604 <SaveToRO+0x1e8>)
 800b490:	2001      	movs	r0, #1
 800b492:	f005 fb07 	bl	8010aa4 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b496:	485c      	ldr	r0, [pc, #368]	; (800b608 <SaveToRO+0x1ec>)
 800b498:	f005 fad6 	bl	8010a48 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d111      	bne.n	800b4c4 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b4a0:	4a5a      	ldr	r2, [pc, #360]	; (800b60c <SaveToRO+0x1f0>)
 800b4a2:	6913      	ldr	r3, [r2, #16]
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	438b      	bics	r3, r1
 800b4a8:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b4aa:	4b5e      	ldr	r3, [pc, #376]	; (800b624 <SaveToRO+0x208>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b4b2:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0d0      	beq.n	800b45a <SaveToRO+0x3e>
 800b4b8:	2316      	movs	r3, #22
 800b4ba:	469b      	mov	fp, r3
 800b4bc:	4b5a      	ldr	r3, [pc, #360]	; (800b628 <SaveToRO+0x20c>)
 800b4be:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800b4c0:	4698      	mov	r8, r3
 800b4c2:	e02a      	b.n	800b51a <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800b4c4:	4b56      	ldr	r3, [pc, #344]	; (800b620 <SaveToRO+0x204>)
 800b4c6:	69d8      	ldr	r0, [r3, #28]
 800b4c8:	b2c0      	uxtb	r0, r0
 800b4ca:	e7d3      	b.n	800b474 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800b4cc:	4b54      	ldr	r3, [pc, #336]	; (800b620 <SaveToRO+0x204>)
 800b4ce:	69d8      	ldr	r0, [r3, #28]
 800b4d0:	b2c0      	uxtb	r0, r0
 800b4d2:	e7cf      	b.n	800b474 <SaveToRO+0x58>
 800b4d4:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b4d6:	42b4      	cmp	r4, r6
 800b4d8:	d017      	beq.n	800b50a <SaveToRO+0xee>
				if (array[i-1][0]) {
 800b4da:	4643      	mov	r3, r8
 800b4dc:	5afb      	ldrh	r3, [r7, r3]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0f8      	beq.n	800b4d4 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b4e2:	8822      	ldrh	r2, [r4, #0]
 800b4e4:	4b47      	ldr	r3, [pc, #284]	; (800b604 <SaveToRO+0x1e8>)
 800b4e6:	18e9      	adds	r1, r5, r3
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	f005 fada 	bl	8010aa4 <HAL_FLASH_Program>
					add += 2;
 800b4f0:	3502      	adds	r5, #2
 800b4f2:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b4f4:	4844      	ldr	r0, [pc, #272]	; (800b608 <SaveToRO+0x1ec>)
 800b4f6:	f005 faa7 	bl	8010a48 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d1e6      	bne.n	800b4cc <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b4fe:	4a43      	ldr	r2, [pc, #268]	; (800b60c <SaveToRO+0x1f0>)
 800b500:	6913      	ldr	r3, [r2, #16]
 800b502:	2101      	movs	r1, #1
 800b504:	438b      	bics	r3, r1
 800b506:	6113      	str	r3, [r2, #16]
 800b508:	e7e4      	b.n	800b4d4 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800b50a:	464b      	mov	r3, r9
 800b50c:	3301      	adds	r3, #1
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	4699      	mov	r9, r3
 800b512:	4b44      	ldr	r3, [pc, #272]	; (800b624 <SaveToRO+0x208>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	454b      	cmp	r3, r9
 800b518:	d39f      	bcc.n	800b45a <SaveToRO+0x3e>
 800b51a:	465e      	mov	r6, fp
 800b51c:	464b      	mov	r3, r9
 800b51e:	435e      	muls	r6, r3
 800b520:	0034      	movs	r4, r6
 800b522:	3c16      	subs	r4, #22
 800b524:	4454      	add	r4, sl
 800b526:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800b528:	1e5f      	subs	r7, r3, #1
 800b52a:	465b      	mov	r3, fp
 800b52c:	435f      	muls	r7, r3
 800b52e:	e7d4      	b.n	800b4da <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800b530:	4b3b      	ldr	r3, [pc, #236]	; (800b620 <SaveToRO+0x204>)
 800b532:	69d8      	ldr	r0, [r3, #28]
 800b534:	b2c0      	uxtb	r0, r0
 800b536:	e79d      	b.n	800b474 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b538:	4b39      	ldr	r3, [pc, #228]	; (800b620 <SaveToRO+0x204>)
 800b53a:	69d8      	ldr	r0, [r3, #28]
 800b53c:	b2c0      	uxtb	r0, r0
 800b53e:	e799      	b.n	800b474 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b540:	3501      	adds	r5, #1
 800b542:	b2ed      	uxtb	r5, r5
 800b544:	4b33      	ldr	r3, [pc, #204]	; (800b614 <SaveToRO+0x1f8>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	42ab      	cmp	r3, r5
 800b54a:	d956      	bls.n	800b5fa <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 800b54c:	9501      	str	r5, [sp, #4]
 800b54e:	00ab      	lsls	r3, r5, #2
 800b550:	195b      	adds	r3, r3, r5
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	4642      	mov	r2, r8
 800b556:	5c9b      	ldrb	r3, [r3, r2]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0f1      	beq.n	800b540 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b55c:	23fe      	movs	r3, #254	; 0xfe
 800b55e:	aa02      	add	r2, sp, #8
 800b560:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b562:	00a9      	lsls	r1, r5, #2
 800b564:	1949      	adds	r1, r1, r5
 800b566:	0089      	lsls	r1, r1, #2
 800b568:	4b2c      	ldr	r3, [pc, #176]	; (800b61c <SaveToRO+0x200>)
 800b56a:	469c      	mov	ip, r3
 800b56c:	4461      	add	r1, ip
 800b56e:	2214      	movs	r2, #20
 800b570:	ab02      	add	r3, sp, #8
 800b572:	1c58      	adds	r0, r3, #1
 800b574:	f007 fd19 	bl	8012faa <memcpy>
 800b578:	2314      	movs	r3, #20
 800b57a:	469b      	mov	fp, r3
 800b57c:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b57e:	ae02      	add	r6, sp, #8
 800b580:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b582:	4f22      	ldr	r7, [pc, #136]	; (800b60c <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b584:	5b32      	ldrh	r2, [r6, r4]
 800b586:	2300      	movs	r3, #0
 800b588:	0021      	movs	r1, r4
 800b58a:	2001      	movs	r0, #1
 800b58c:	f005 fa8a 	bl	8010aa4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b590:	481d      	ldr	r0, [pc, #116]	; (800b608 <SaveToRO+0x1ec>)
 800b592:	f005 fa59 	bl	8010a48 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b596:	2800      	cmp	r0, #0
 800b598:	d1ca      	bne.n	800b530 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	2201      	movs	r2, #1
 800b59e:	4393      	bics	r3, r2
 800b5a0:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b5a2:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b5a4:	455c      	cmp	r4, fp
 800b5a6:	d1ed      	bne.n	800b584 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5a8:	2700      	movs	r7, #0
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	0093      	lsls	r3, r2, #2
 800b5ae:	189e      	adds	r6, r3, r2
 800b5b0:	00b6      	lsls	r6, r6, #2
 800b5b2:	4b1a      	ldr	r3, [pc, #104]	; (800b61c <SaveToRO+0x200>)
 800b5b4:	469a      	mov	sl, r3
 800b5b6:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5b8:	4b14      	ldr	r3, [pc, #80]	; (800b60c <SaveToRO+0x1f0>)
 800b5ba:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5bc:	4653      	mov	r3, sl
 800b5be:	68de      	ldr	r6, [r3, #12]
 800b5c0:	0030      	movs	r0, r6
 800b5c2:	f7f4 fda9 	bl	8000118 <strlen>
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	0840      	lsrs	r0, r0, #1
 800b5ca:	4287      	cmp	r7, r0
 800b5cc:	d2b8      	bcs.n	800b540 <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b5ce:	007b      	lsls	r3, r7, #1
 800b5d0:	5af2      	ldrh	r2, [r6, r3]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	0021      	movs	r1, r4
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	f005 fa64 	bl	8010aa4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b5dc:	480a      	ldr	r0, [pc, #40]	; (800b608 <SaveToRO+0x1ec>)
 800b5de:	f005 fa33 	bl	8010a48 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d1a8      	bne.n	800b538 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5e6:	465b      	mov	r3, fp
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	4393      	bics	r3, r2
 800b5ee:	465a      	mov	r2, fp
 800b5f0:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b5f2:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5f4:	3701      	adds	r7, #1
 800b5f6:	b2ff      	uxtb	r7, r7
 800b5f8:	e7e0      	b.n	800b5bc <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800b5fa:	f005 fa1b 	bl	8010a34 <HAL_FLASH_Lock>
	return result;
 800b5fe:	2000      	movs	r0, #0
 800b600:	e738      	b.n	800b474 <SaveToRO+0x58>
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	0801d800 	.word	0x0801d800
 800b608:	0000c350 	.word	0x0000c350
 800b60c:	40022000 	.word	0x40022000
 800b610:	20001076 	.word	0x20001076
 800b614:	2000121f 	.word	0x2000121f
 800b618:	0801dc00 	.word	0x0801dc00
 800b61c:	200069e0 	.word	0x200069e0
 800b620:	20006eb8 	.word	0x20006eb8
 800b624:	2000001c 	.word	0x2000001c
 800b628:	20000a78 	.word	0x20000a78

0800b62c <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800b62c:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800b62e:	228f      	movs	r2, #143	; 0x8f
 800b630:	0092      	lsls	r2, r2, #2
 800b632:	2100      	movs	r1, #0
 800b634:	4805      	ldr	r0, [pc, #20]	; (800b64c <ClearROtopology+0x20>)
 800b636:	f007 fcc1 	bl	8012fbc <memset>
	N = 1; myID = 0;
 800b63a:	4b05      	ldr	r3, [pc, #20]	; (800b650 <ClearROtopology+0x24>)
 800b63c:	2201      	movs	r2, #1
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	4b04      	ldr	r3, [pc, #16]	; (800b654 <ClearROtopology+0x28>)
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800b646:	f7ff fee9 	bl	800b41c <SaveToRO>
}
 800b64a:	bd10      	pop	{r4, pc}
 800b64c:	20000a78 	.word	0x20000a78
 800b650:	2000001c 	.word	0x2000001c
 800b654:	20001076 	.word	0x20001076

0800b658 <Module_Peripheral_Init>:
/*-----------------------------------------------------------*/
/* --- H1AR0 module initialization. 
*/
void Module_Peripheral_Init(void)
{
 800b658:	b510      	push	{r4, lr}
	/* Array ports */
  MX_USART1_UART_Init();
 800b65a:	f001 fcd5 	bl	800d008 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b65e:	f001 fceb 	bl	800d038 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b662:	f001 fd01 	bl	800d068 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 800b666:	f001 fd2f 	bl	800d0c8 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b66a:	f001 fd45 	bl	800d0f8 <MX_USART6_UART_Init>
	
	/* USB port */
  MX_USART4_UART_Init();
 800b66e:	f001 fd13 	bl	800d098 <MX_USART4_UART_Init>
	
	/* Bridge USB and P5 ports by default - only if PUSB is not bridged with any other port */
	if (portStatus[PUSB] != STREAM)
 800b672:	4b04      	ldr	r3, [pc, #16]	; (800b684 <Module_Peripheral_Init+0x2c>)
 800b674:	799b      	ldrb	r3, [r3, #6]
 800b676:	2b02      	cmp	r3, #2
 800b678:	d003      	beq.n	800b682 <Module_Peripheral_Init+0x2a>
		Bridge(PUSB, P5);
 800b67a:	2105      	movs	r1, #5
 800b67c:	2006      	movs	r0, #6
 800b67e:	f7f9 f823 	bl	80046c8 <Bridge>
	
}
 800b682:	bd10      	pop	{r4, pc}
 800b684:	200010f8 	.word	0x200010f8

0800b688 <Module_MessagingTask>:
			result = H1AR0_ERR_UnknownMessage;
			break;
	}			

	return result;	
}
 800b688:	2001      	movs	r0, #1
 800b68a:	4770      	bx	lr

0800b68c <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands 
*/
void RegisterModuleCLICommands(void)
{

}
 800b68c:	4770      	bx	lr
	...

0800b690 <GetPort>:
}
/* --- Get the port for a given UART. 
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART2)
 800b690:	6800      	ldr	r0, [r0, #0]
 800b692:	4b11      	ldr	r3, [pc, #68]	; (800b6d8 <GetPort+0x48>)
 800b694:	4298      	cmp	r0, r3
 800b696:	d014      	beq.n	800b6c2 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART6)
 800b698:	4b10      	ldr	r3, [pc, #64]	; (800b6dc <GetPort+0x4c>)
 800b69a:	4298      	cmp	r0, r3
 800b69c:	d013      	beq.n	800b6c6 <GetPort+0x36>
			return P2;
	else if (huart->Instance == USART3)
 800b69e:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <GetPort+0x50>)
 800b6a0:	4298      	cmp	r0, r3
 800b6a2:	d012      	beq.n	800b6ca <GetPort+0x3a>
			return P3;
	else if (huart->Instance == USART1)
 800b6a4:	4b0f      	ldr	r3, [pc, #60]	; (800b6e4 <GetPort+0x54>)
 800b6a6:	4298      	cmp	r0, r3
 800b6a8:	d011      	beq.n	800b6ce <GetPort+0x3e>
			return P4;
	else if (huart->Instance == USART5)
 800b6aa:	4b0f      	ldr	r3, [pc, #60]	; (800b6e8 <GetPort+0x58>)
 800b6ac:	4298      	cmp	r0, r3
 800b6ae:	d010      	beq.n	800b6d2 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART4)
			return P6;
		
	return 0;
 800b6b0:	4b0e      	ldr	r3, [pc, #56]	; (800b6ec <GetPort+0x5c>)
 800b6b2:	469c      	mov	ip, r3
 800b6b4:	4460      	add	r0, ip
 800b6b6:	4243      	negs	r3, r0
 800b6b8:	4158      	adcs	r0, r3
 800b6ba:	4240      	negs	r0, r0
 800b6bc:	2306      	movs	r3, #6
 800b6be:	4018      	ands	r0, r3
}
 800b6c0:	4770      	bx	lr
			return P1;
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	e7fc      	b.n	800b6c0 <GetPort+0x30>
			return P2;
 800b6c6:	2002      	movs	r0, #2
 800b6c8:	e7fa      	b.n	800b6c0 <GetPort+0x30>
			return P3;
 800b6ca:	2003      	movs	r0, #3
 800b6cc:	e7f8      	b.n	800b6c0 <GetPort+0x30>
			return P4;
 800b6ce:	2004      	movs	r0, #4
 800b6d0:	e7f6      	b.n	800b6c0 <GetPort+0x30>
			return P5;
 800b6d2:	2005      	movs	r0, #5
 800b6d4:	e7f4      	b.n	800b6c0 <GetPort+0x30>
 800b6d6:	46c0      	nop			; (mov r8, r8)
 800b6d8:	40004400 	.word	0x40004400
 800b6dc:	40011400 	.word	0x40011400
 800b6e0:	40004800 	.word	0x40004800
 800b6e4:	40013800 	.word	0x40013800
 800b6e8:	40005000 	.word	0x40005000
 800b6ec:	bfffb400 	.word	0xbfffb400

0800b6f0 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b6f0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b6f2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b6f8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b6fa:	2280      	movs	r2, #128	; 0x80
 800b6fc:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b6fe:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b700:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b702:	3320      	adds	r3, #32
 800b704:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b706:	2380      	movs	r3, #128	; 0x80
 800b708:	019b      	lsls	r3, r3, #6
 800b70a:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b70c:	f004 fc88 	bl	8010020 <HAL_DMA_Init>
}
 800b710:	bd10      	pop	{r4, pc}

0800b712 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b712:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b714:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b716:	2310      	movs	r3, #16
 800b718:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b71e:	2280      	movs	r2, #128	; 0x80
 800b720:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b722:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b724:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b726:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b728:	2380      	movs	r3, #128	; 0x80
 800b72a:	019b      	lsls	r3, r3, #6
 800b72c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b72e:	f004 fc77 	bl	8010020 <HAL_DMA_Init>
}
 800b732:	bd10      	pop	{r4, pc}

0800b734 <DMA_Init>:
{
 800b734:	b510      	push	{r4, lr}
 800b736:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800b738:	4b20      	ldr	r3, [pc, #128]	; (800b7bc <DMA_Init+0x88>)
 800b73a:	6959      	ldr	r1, [r3, #20]
 800b73c:	2201      	movs	r2, #1
 800b73e:	4311      	orrs	r1, r2
 800b740:	6159      	str	r1, [r3, #20]
 800b742:	6959      	ldr	r1, [r3, #20]
 800b744:	400a      	ands	r2, r1
 800b746:	9200      	str	r2, [sp, #0]
 800b748:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b74a:	6959      	ldr	r1, [r3, #20]
 800b74c:	2202      	movs	r2, #2
 800b74e:	4311      	orrs	r1, r2
 800b750:	6159      	str	r1, [r3, #20]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	401a      	ands	r2, r3
 800b756:	9201      	str	r2, [sp, #4]
 800b758:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800b75a:	4c19      	ldr	r4, [pc, #100]	; (800b7c0 <DMA_Init+0x8c>)
 800b75c:	4919      	ldr	r1, [pc, #100]	; (800b7c4 <DMA_Init+0x90>)
 800b75e:	0020      	movs	r0, r4
 800b760:	f7ff ffc6 	bl	800b6f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800b764:	0020      	movs	r0, r4
 800b766:	3038      	adds	r0, #56	; 0x38
 800b768:	4917      	ldr	r1, [pc, #92]	; (800b7c8 <DMA_Init+0x94>)
 800b76a:	f7ff ffc1 	bl	800b6f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800b76e:	0020      	movs	r0, r4
 800b770:	3070      	adds	r0, #112	; 0x70
 800b772:	4916      	ldr	r1, [pc, #88]	; (800b7cc <DMA_Init+0x98>)
 800b774:	f7ff ffbc 	bl	800b6f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800b778:	0020      	movs	r0, r4
 800b77a:	30a8      	adds	r0, #168	; 0xa8
 800b77c:	4914      	ldr	r1, [pc, #80]	; (800b7d0 <DMA_Init+0x9c>)
 800b77e:	f7ff ffb7 	bl	800b6f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800b782:	0020      	movs	r0, r4
 800b784:	30e0      	adds	r0, #224	; 0xe0
 800b786:	4913      	ldr	r1, [pc, #76]	; (800b7d4 <DMA_Init+0xa0>)
 800b788:	f7ff ffb2 	bl	800b6f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800b78c:	0020      	movs	r0, r4
 800b78e:	3019      	adds	r0, #25
 800b790:	30ff      	adds	r0, #255	; 0xff
 800b792:	4911      	ldr	r1, [pc, #68]	; (800b7d8 <DMA_Init+0xa4>)
 800b794:	f7ff ffac 	bl	800b6f0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800b798:	4c10      	ldr	r4, [pc, #64]	; (800b7dc <DMA_Init+0xa8>)
 800b79a:	4911      	ldr	r1, [pc, #68]	; (800b7e0 <DMA_Init+0xac>)
 800b79c:	0020      	movs	r0, r4
 800b79e:	f7ff ffb8 	bl	800b712 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800b7a2:	0020      	movs	r0, r4
 800b7a4:	3038      	adds	r0, #56	; 0x38
 800b7a6:	490f      	ldr	r1, [pc, #60]	; (800b7e4 <DMA_Init+0xb0>)
 800b7a8:	f7ff ffb3 	bl	800b712 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800b7ac:	0020      	movs	r0, r4
 800b7ae:	3070      	adds	r0, #112	; 0x70
 800b7b0:	490d      	ldr	r1, [pc, #52]	; (800b7e8 <DMA_Init+0xb4>)
 800b7b2:	f7ff ffae 	bl	800b712 <DMA_MSG_TX_CH_Init>
}
 800b7b6:	b002      	add	sp, #8
 800b7b8:	bd10      	pop	{r4, pc}
 800b7ba:	46c0      	nop			; (mov r8, r8)
 800b7bc:	40021000 	.word	0x40021000
 800b7c0:	2000179c 	.word	0x2000179c
 800b7c4:	40020008 	.word	0x40020008
 800b7c8:	40020030 	.word	0x40020030
 800b7cc:	40020058 	.word	0x40020058
 800b7d0:	4002006c 	.word	0x4002006c
 800b7d4:	4002041c 	.word	0x4002041c
 800b7d8:	40020430 	.word	0x40020430
 800b7dc:	200018ec 	.word	0x200018ec
 800b7e0:	4002001c 	.word	0x4002001c
 800b7e4:	40020044 	.word	0x40020044
 800b7e8:	40020080 	.word	0x40020080

0800b7ec <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b7ec:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b7ee:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b7f4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b7f6:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7f8:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7fa:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7fc:	3320      	adds	r3, #32
 800b7fe:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b800:	2380      	movs	r3, #128	; 0x80
 800b802:	015b      	lsls	r3, r3, #5
 800b804:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b806:	f004 fc0b 	bl	8010020 <HAL_DMA_Init>
}
 800b80a:	bd10      	pop	{r4, pc}

0800b80c <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800b80c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b80e:	6803      	ldr	r3, [r0, #0]
 800b810:	4a20      	ldr	r2, [pc, #128]	; (800b894 <SetupDMAInterrupts+0x88>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d020      	beq.n	800b858 <SetupDMAInterrupts+0x4c>
 800b816:	d827      	bhi.n	800b868 <SetupDMAInterrupts+0x5c>
 800b818:	4a1f      	ldr	r2, [pc, #124]	; (800b898 <SetupDMAInterrupts+0x8c>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d00e      	beq.n	800b83c <SetupDMAInterrupts+0x30>
 800b81e:	d815      	bhi.n	800b84c <SetupDMAInterrupts+0x40>
 800b820:	4a1e      	ldr	r2, [pc, #120]	; (800b89c <SetupDMAInterrupts+0x90>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d107      	bne.n	800b836 <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b826:	2200      	movs	r2, #0
 800b828:	2009      	movs	r0, #9
 800b82a:	f004 fa5b 	bl	800fce4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b82e:	2009      	movs	r0, #9
 800b830:	f004 fa8c 	bl	800fd4c <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b834:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b836:	4a1a      	ldr	r2, [pc, #104]	; (800b8a0 <SetupDMAInterrupts+0x94>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d1fb      	bne.n	800b834 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b83c:	2200      	movs	r2, #0
 800b83e:	200a      	movs	r0, #10
 800b840:	f004 fa50 	bl	800fce4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b844:	200a      	movs	r0, #10
 800b846:	f004 fa81 	bl	800fd4c <HAL_NVIC_EnableIRQ>
			break;
 800b84a:	e7f3      	b.n	800b834 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b84c:	4a15      	ldr	r2, [pc, #84]	; (800b8a4 <SetupDMAInterrupts+0x98>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d002      	beq.n	800b858 <SetupDMAInterrupts+0x4c>
 800b852:	4a15      	ldr	r2, [pc, #84]	; (800b8a8 <SetupDMAInterrupts+0x9c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d1ed      	bne.n	800b834 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b858:	2200      	movs	r2, #0
 800b85a:	200b      	movs	r0, #11
 800b85c:	f004 fa42 	bl	800fce4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b860:	200b      	movs	r0, #11
 800b862:	f004 fa73 	bl	800fd4c <HAL_NVIC_EnableIRQ>
}
 800b866:	e7e5      	b.n	800b834 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b868:	4a10      	ldr	r2, [pc, #64]	; (800b8ac <SetupDMAInterrupts+0xa0>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d0e6      	beq.n	800b83c <SetupDMAInterrupts+0x30>
 800b86e:	d909      	bls.n	800b884 <SetupDMAInterrupts+0x78>
 800b870:	4a0f      	ldr	r2, [pc, #60]	; (800b8b0 <SetupDMAInterrupts+0xa4>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d0f0      	beq.n	800b858 <SetupDMAInterrupts+0x4c>
 800b876:	4a0f      	ldr	r2, [pc, #60]	; (800b8b4 <SetupDMAInterrupts+0xa8>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d0ed      	beq.n	800b858 <SetupDMAInterrupts+0x4c>
 800b87c:	4a0e      	ldr	r2, [pc, #56]	; (800b8b8 <SetupDMAInterrupts+0xac>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d1d8      	bne.n	800b834 <SetupDMAInterrupts+0x28>
 800b882:	e7e9      	b.n	800b858 <SetupDMAInterrupts+0x4c>
 800b884:	4a0d      	ldr	r2, [pc, #52]	; (800b8bc <SetupDMAInterrupts+0xb0>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d0e6      	beq.n	800b858 <SetupDMAInterrupts+0x4c>
 800b88a:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <SetupDMAInterrupts+0xb4>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d0d5      	beq.n	800b83c <SetupDMAInterrupts+0x30>
 800b890:	e7d0      	b.n	800b834 <SetupDMAInterrupts+0x28>
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	4002006c 	.word	0x4002006c
 800b898:	40020030 	.word	0x40020030
 800b89c:	40020008 	.word	0x40020008
 800b8a0:	4002001c 	.word	0x4002001c
 800b8a4:	40020044 	.word	0x40020044
 800b8a8:	40020058 	.word	0x40020058
 800b8ac:	4002041c 	.word	0x4002041c
 800b8b0:	40020444 	.word	0x40020444
 800b8b4:	40020458 	.word	0x40020458
 800b8b8:	40020430 	.word	0x40020430
 800b8bc:	40020080 	.word	0x40020080
 800b8c0:	40020408 	.word	0x40020408

0800b8c4 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800b8c4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b8c6:	6803      	ldr	r3, [r0, #0]
 800b8c8:	4a1a      	ldr	r2, [pc, #104]	; (800b934 <UnSetupDMAInterrupts+0x70>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d018      	beq.n	800b900 <UnSetupDMAInterrupts+0x3c>
 800b8ce:	d81b      	bhi.n	800b908 <UnSetupDMAInterrupts+0x44>
 800b8d0:	4a19      	ldr	r2, [pc, #100]	; (800b938 <UnSetupDMAInterrupts+0x74>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d00a      	beq.n	800b8ec <UnSetupDMAInterrupts+0x28>
 800b8d6:	d80d      	bhi.n	800b8f4 <UnSetupDMAInterrupts+0x30>
 800b8d8:	4a18      	ldr	r2, [pc, #96]	; (800b93c <UnSetupDMAInterrupts+0x78>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d103      	bne.n	800b8e6 <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b8de:	2009      	movs	r0, #9
 800b8e0:	f004 fa3e 	bl	800fd60 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b8e4:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b8e6:	4a16      	ldr	r2, [pc, #88]	; (800b940 <UnSetupDMAInterrupts+0x7c>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d1fb      	bne.n	800b8e4 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b8ec:	200a      	movs	r0, #10
 800b8ee:	f004 fa37 	bl	800fd60 <HAL_NVIC_DisableIRQ>
			break;
 800b8f2:	e7f7      	b.n	800b8e4 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b8f4:	4a13      	ldr	r2, [pc, #76]	; (800b944 <UnSetupDMAInterrupts+0x80>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d002      	beq.n	800b900 <UnSetupDMAInterrupts+0x3c>
 800b8fa:	4a13      	ldr	r2, [pc, #76]	; (800b948 <UnSetupDMAInterrupts+0x84>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d1f1      	bne.n	800b8e4 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b900:	200b      	movs	r0, #11
 800b902:	f004 fa2d 	bl	800fd60 <HAL_NVIC_DisableIRQ>
}
 800b906:	e7ed      	b.n	800b8e4 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b908:	4a10      	ldr	r2, [pc, #64]	; (800b94c <UnSetupDMAInterrupts+0x88>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d0ee      	beq.n	800b8ec <UnSetupDMAInterrupts+0x28>
 800b90e:	d909      	bls.n	800b924 <UnSetupDMAInterrupts+0x60>
 800b910:	4a0f      	ldr	r2, [pc, #60]	; (800b950 <UnSetupDMAInterrupts+0x8c>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d0f4      	beq.n	800b900 <UnSetupDMAInterrupts+0x3c>
 800b916:	4a0f      	ldr	r2, [pc, #60]	; (800b954 <UnSetupDMAInterrupts+0x90>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d0f1      	beq.n	800b900 <UnSetupDMAInterrupts+0x3c>
 800b91c:	4a0e      	ldr	r2, [pc, #56]	; (800b958 <UnSetupDMAInterrupts+0x94>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d1e0      	bne.n	800b8e4 <UnSetupDMAInterrupts+0x20>
 800b922:	e7ed      	b.n	800b900 <UnSetupDMAInterrupts+0x3c>
 800b924:	4a0d      	ldr	r2, [pc, #52]	; (800b95c <UnSetupDMAInterrupts+0x98>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d0ea      	beq.n	800b900 <UnSetupDMAInterrupts+0x3c>
 800b92a:	4a0d      	ldr	r2, [pc, #52]	; (800b960 <UnSetupDMAInterrupts+0x9c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d0dd      	beq.n	800b8ec <UnSetupDMAInterrupts+0x28>
 800b930:	e7d8      	b.n	800b8e4 <UnSetupDMAInterrupts+0x20>
 800b932:	46c0      	nop			; (mov r8, r8)
 800b934:	4002006c 	.word	0x4002006c
 800b938:	40020030 	.word	0x40020030
 800b93c:	40020008 	.word	0x40020008
 800b940:	4002001c 	.word	0x4002001c
 800b944:	40020044 	.word	0x40020044
 800b948:	40020058 	.word	0x40020058
 800b94c:	4002041c 	.word	0x4002041c
 800b950:	40020444 	.word	0x40020444
 800b954:	40020458 	.word	0x40020458
 800b958:	40020430 	.word	0x40020430
 800b95c:	40020080 	.word	0x40020080
 800b960:	40020408 	.word	0x40020408

0800b964 <DMA_MSG_TX_UnSetup>:
{	
 800b964:	b510      	push	{r4, lr}
 800b966:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800b968:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b96a:	f7ff ffab 	bl	800b8c4 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800b96e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b970:	2300      	movs	r3, #0
 800b972:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800b974:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b976:	bd10      	pop	{r4, pc}

0800b978 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b978:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b97a:	6803      	ldr	r3, [r0, #0]
 800b97c:	4abd      	ldr	r2, [pc, #756]	; (800bc74 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d02f      	beq.n	800b9e2 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b982:	4abd      	ldr	r2, [pc, #756]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x300>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d100      	bne.n	800b98a <RemapAndLinkDMAtoUARTRx+0x12>
 800b988:	e087      	b.n	800ba9a <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b98a:	4abc      	ldr	r2, [pc, #752]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x304>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d100      	bne.n	800b992 <RemapAndLinkDMAtoUARTRx+0x1a>
 800b990:	e0dc      	b.n	800bb4c <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b992:	4abb      	ldr	r2, [pc, #748]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x308>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d000      	beq.n	800b99a <RemapAndLinkDMAtoUARTRx+0x22>
 800b998:	e18a      	b.n	800bcb0 <RemapAndLinkDMAtoUARTRx+0x338>
 800b99a:	680b      	ldr	r3, [r1, #0]
 800b99c:	4ab9      	ldr	r2, [pc, #740]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d100      	bne.n	800b9a4 <RemapAndLinkDMAtoUARTRx+0x2c>
 800b9a2:	e12d      	b.n	800bc00 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b9a4:	4ab8      	ldr	r2, [pc, #736]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d100      	bne.n	800b9ac <RemapAndLinkDMAtoUARTRx+0x34>
 800b9aa:	e134      	b.n	800bc16 <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b9ac:	4ab7      	ldr	r2, [pc, #732]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x314>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d100      	bne.n	800b9b4 <RemapAndLinkDMAtoUARTRx+0x3c>
 800b9b2:	e13c      	b.n	800bc2e <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b9b4:	4ab6      	ldr	r2, [pc, #728]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d100      	bne.n	800b9bc <RemapAndLinkDMAtoUARTRx+0x44>
 800b9ba:	e144      	b.n	800bc46 <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b9bc:	4ab5      	ldr	r2, [pc, #724]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d100      	bne.n	800b9c4 <RemapAndLinkDMAtoUARTRx+0x4c>
 800b9c2:	e14c      	b.n	800bc5e <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b9c4:	4ab4      	ldr	r2, [pc, #720]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d11e      	bne.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b9ca:	4ab4      	ldr	r2, [pc, #720]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b9cc:	23a8      	movs	r3, #168	; 0xa8
 800b9ce:	58d4      	ldr	r4, [r2, r3]
 800b9d0:	4db3      	ldr	r5, [pc, #716]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b9d2:	402c      	ands	r4, r5
 800b9d4:	50d4      	str	r4, [r2, r3]
 800b9d6:	58d5      	ldr	r5, [r2, r3]
 800b9d8:	24b0      	movs	r4, #176	; 0xb0
 800b9da:	0124      	lsls	r4, r4, #4
 800b9dc:	432c      	orrs	r4, r5
 800b9de:	50d4      	str	r4, [r2, r3]
 800b9e0:	e012      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b9e2:	680b      	ldr	r3, [r1, #0]
 800b9e4:	4aa7      	ldr	r2, [pc, #668]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d011      	beq.n	800ba0e <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b9ea:	4aa7      	ldr	r2, [pc, #668]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d019      	beq.n	800ba24 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b9f0:	4aa6      	ldr	r2, [pc, #664]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x314>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d022      	beq.n	800ba3c <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b9f6:	4aa6      	ldr	r2, [pc, #664]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d02b      	beq.n	800ba54 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b9fc:	4aa5      	ldr	r2, [pc, #660]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d034      	beq.n	800ba6c <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800ba02:	4aa5      	ldr	r2, [pc, #660]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x320>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d03c      	beq.n	800ba82 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800ba08:	6641      	str	r1, [r0, #100]	; 0x64
 800ba0a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800ba0e:	4aa5      	ldr	r2, [pc, #660]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba10:	23a8      	movs	r3, #168	; 0xa8
 800ba12:	58d4      	ldr	r4, [r2, r3]
 800ba14:	250f      	movs	r5, #15
 800ba16:	43ac      	bics	r4, r5
 800ba18:	50d4      	str	r4, [r2, r3]
 800ba1a:	58d4      	ldr	r4, [r2, r3]
 800ba1c:	3d07      	subs	r5, #7
 800ba1e:	432c      	orrs	r4, r5
 800ba20:	50d4      	str	r4, [r2, r3]
 800ba22:	e7f1      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800ba24:	4a9f      	ldr	r2, [pc, #636]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba26:	23a8      	movs	r3, #168	; 0xa8
 800ba28:	58d4      	ldr	r4, [r2, r3]
 800ba2a:	4d9d      	ldr	r5, [pc, #628]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ba2c:	402c      	ands	r4, r5
 800ba2e:	50d4      	str	r4, [r2, r3]
 800ba30:	58d5      	ldr	r5, [r2, r3]
 800ba32:	2480      	movs	r4, #128	; 0x80
 800ba34:	0124      	lsls	r4, r4, #4
 800ba36:	432c      	orrs	r4, r5
 800ba38:	50d4      	str	r4, [r2, r3]
 800ba3a:	e7e5      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800ba3c:	4a99      	ldr	r2, [pc, #612]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba3e:	23a8      	movs	r3, #168	; 0xa8
 800ba40:	58d4      	ldr	r4, [r2, r3]
 800ba42:	4d99      	ldr	r5, [pc, #612]	; (800bca8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800ba44:	402c      	ands	r4, r5
 800ba46:	50d4      	str	r4, [r2, r3]
 800ba48:	58d5      	ldr	r5, [r2, r3]
 800ba4a:	2480      	movs	r4, #128	; 0x80
 800ba4c:	0324      	lsls	r4, r4, #12
 800ba4e:	432c      	orrs	r4, r5
 800ba50:	50d4      	str	r4, [r2, r3]
 800ba52:	e7d9      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800ba54:	4a93      	ldr	r2, [pc, #588]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba56:	23a8      	movs	r3, #168	; 0xa8
 800ba58:	58d4      	ldr	r4, [r2, r3]
 800ba5a:	4d94      	ldr	r5, [pc, #592]	; (800bcac <RemapAndLinkDMAtoUARTRx+0x334>)
 800ba5c:	402c      	ands	r4, r5
 800ba5e:	50d4      	str	r4, [r2, r3]
 800ba60:	58d5      	ldr	r5, [r2, r3]
 800ba62:	2480      	movs	r4, #128	; 0x80
 800ba64:	0424      	lsls	r4, r4, #16
 800ba66:	432c      	orrs	r4, r5
 800ba68:	50d4      	str	r4, [r2, r3]
 800ba6a:	e7cd      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ba6c:	4a8b      	ldr	r2, [pc, #556]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x324>)
 800ba6e:	23a8      	movs	r3, #168	; 0xa8
 800ba70:	58d4      	ldr	r4, [r2, r3]
 800ba72:	25f0      	movs	r5, #240	; 0xf0
 800ba74:	43ac      	bics	r4, r5
 800ba76:	50d4      	str	r4, [r2, r3]
 800ba78:	58d4      	ldr	r4, [r2, r3]
 800ba7a:	3d70      	subs	r5, #112	; 0x70
 800ba7c:	432c      	orrs	r4, r5
 800ba7e:	50d4      	str	r4, [r2, r3]
 800ba80:	e7c2      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ba82:	4a86      	ldr	r2, [pc, #536]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x324>)
 800ba84:	23a8      	movs	r3, #168	; 0xa8
 800ba86:	58d4      	ldr	r4, [r2, r3]
 800ba88:	4d85      	ldr	r5, [pc, #532]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ba8a:	402c      	ands	r4, r5
 800ba8c:	50d4      	str	r4, [r2, r3]
 800ba8e:	58d5      	ldr	r5, [r2, r3]
 800ba90:	2480      	movs	r4, #128	; 0x80
 800ba92:	0124      	lsls	r4, r4, #4
 800ba94:	432c      	orrs	r4, r5
 800ba96:	50d4      	str	r4, [r2, r3]
 800ba98:	e7b6      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ba9a:	680b      	ldr	r3, [r1, #0]
 800ba9c:	4a79      	ldr	r2, [pc, #484]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d01a      	beq.n	800bad8 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800baa2:	4a79      	ldr	r2, [pc, #484]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x310>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d022      	beq.n	800baee <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800baa8:	4a78      	ldr	r2, [pc, #480]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x314>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d02b      	beq.n	800bb06 <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800baae:	4a78      	ldr	r2, [pc, #480]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d034      	beq.n	800bb1e <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800bab4:	4a77      	ldr	r2, [pc, #476]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d03d      	beq.n	800bb36 <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800baba:	4a77      	ldr	r2, [pc, #476]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x320>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d1a3      	bne.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bac0:	4a76      	ldr	r2, [pc, #472]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x324>)
 800bac2:	23a8      	movs	r3, #168	; 0xa8
 800bac4:	58d4      	ldr	r4, [r2, r3]
 800bac6:	4d76      	ldr	r5, [pc, #472]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bac8:	402c      	ands	r4, r5
 800baca:	50d4      	str	r4, [r2, r3]
 800bacc:	58d5      	ldr	r5, [r2, r3]
 800bace:	2490      	movs	r4, #144	; 0x90
 800bad0:	0124      	lsls	r4, r4, #4
 800bad2:	432c      	orrs	r4, r5
 800bad4:	50d4      	str	r4, [r2, r3]
 800bad6:	e797      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bad8:	4a72      	ldr	r2, [pc, #456]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bada:	23a8      	movs	r3, #168	; 0xa8
 800badc:	58d4      	ldr	r4, [r2, r3]
 800bade:	250f      	movs	r5, #15
 800bae0:	43ac      	bics	r4, r5
 800bae2:	50d4      	str	r4, [r2, r3]
 800bae4:	58d4      	ldr	r4, [r2, r3]
 800bae6:	3d06      	subs	r5, #6
 800bae8:	432c      	orrs	r4, r5
 800baea:	50d4      	str	r4, [r2, r3]
 800baec:	e78c      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800baee:	4a6d      	ldr	r2, [pc, #436]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800baf0:	23a8      	movs	r3, #168	; 0xa8
 800baf2:	58d4      	ldr	r4, [r2, r3]
 800baf4:	4d6a      	ldr	r5, [pc, #424]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800baf6:	402c      	ands	r4, r5
 800baf8:	50d4      	str	r4, [r2, r3]
 800bafa:	58d5      	ldr	r5, [r2, r3]
 800bafc:	2490      	movs	r4, #144	; 0x90
 800bafe:	0124      	lsls	r4, r4, #4
 800bb00:	432c      	orrs	r4, r5
 800bb02:	50d4      	str	r4, [r2, r3]
 800bb04:	e780      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800bb06:	4a67      	ldr	r2, [pc, #412]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb08:	23a8      	movs	r3, #168	; 0xa8
 800bb0a:	58d4      	ldr	r4, [r2, r3]
 800bb0c:	4d66      	ldr	r5, [pc, #408]	; (800bca8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800bb0e:	402c      	ands	r4, r5
 800bb10:	50d4      	str	r4, [r2, r3]
 800bb12:	58d5      	ldr	r5, [r2, r3]
 800bb14:	2490      	movs	r4, #144	; 0x90
 800bb16:	0324      	lsls	r4, r4, #12
 800bb18:	432c      	orrs	r4, r5
 800bb1a:	50d4      	str	r4, [r2, r3]
 800bb1c:	e774      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800bb1e:	4a61      	ldr	r2, [pc, #388]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb20:	23a8      	movs	r3, #168	; 0xa8
 800bb22:	58d4      	ldr	r4, [r2, r3]
 800bb24:	4d61      	ldr	r5, [pc, #388]	; (800bcac <RemapAndLinkDMAtoUARTRx+0x334>)
 800bb26:	402c      	ands	r4, r5
 800bb28:	50d4      	str	r4, [r2, r3]
 800bb2a:	58d5      	ldr	r5, [r2, r3]
 800bb2c:	2490      	movs	r4, #144	; 0x90
 800bb2e:	0424      	lsls	r4, r4, #16
 800bb30:	432c      	orrs	r4, r5
 800bb32:	50d4      	str	r4, [r2, r3]
 800bb34:	e768      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800bb36:	4a59      	ldr	r2, [pc, #356]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb38:	23a8      	movs	r3, #168	; 0xa8
 800bb3a:	58d4      	ldr	r4, [r2, r3]
 800bb3c:	25f0      	movs	r5, #240	; 0xf0
 800bb3e:	43ac      	bics	r4, r5
 800bb40:	50d4      	str	r4, [r2, r3]
 800bb42:	58d4      	ldr	r4, [r2, r3]
 800bb44:	3d60      	subs	r5, #96	; 0x60
 800bb46:	432c      	orrs	r4, r5
 800bb48:	50d4      	str	r4, [r2, r3]
 800bb4a:	e75d      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bb4c:	680b      	ldr	r3, [r1, #0]
 800bb4e:	4a4d      	ldr	r2, [pc, #308]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d01b      	beq.n	800bb8c <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800bb54:	4a4c      	ldr	r2, [pc, #304]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x310>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d023      	beq.n	800bba2 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800bb5a:	4a4c      	ldr	r2, [pc, #304]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x314>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d02c      	beq.n	800bbba <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800bb60:	4a4b      	ldr	r2, [pc, #300]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d035      	beq.n	800bbd2 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800bb66:	4a4b      	ldr	r2, [pc, #300]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d03e      	beq.n	800bbea <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800bb6c:	4a4a      	ldr	r2, [pc, #296]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x320>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d000      	beq.n	800bb74 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800bb72:	e749      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800bb74:	4a49      	ldr	r2, [pc, #292]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb76:	23a8      	movs	r3, #168	; 0xa8
 800bb78:	58d4      	ldr	r4, [r2, r3]
 800bb7a:	4d49      	ldr	r5, [pc, #292]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb7c:	402c      	ands	r4, r5
 800bb7e:	50d4      	str	r4, [r2, r3]
 800bb80:	58d5      	ldr	r5, [r2, r3]
 800bb82:	24a0      	movs	r4, #160	; 0xa0
 800bb84:	0124      	lsls	r4, r4, #4
 800bb86:	432c      	orrs	r4, r5
 800bb88:	50d4      	str	r4, [r2, r3]
 800bb8a:	e73d      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800bb8c:	4a45      	ldr	r2, [pc, #276]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb8e:	23a8      	movs	r3, #168	; 0xa8
 800bb90:	58d4      	ldr	r4, [r2, r3]
 800bb92:	250f      	movs	r5, #15
 800bb94:	43ac      	bics	r4, r5
 800bb96:	50d4      	str	r4, [r2, r3]
 800bb98:	58d4      	ldr	r4, [r2, r3]
 800bb9a:	3d05      	subs	r5, #5
 800bb9c:	432c      	orrs	r4, r5
 800bb9e:	50d4      	str	r4, [r2, r3]
 800bba0:	e732      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800bba2:	4a40      	ldr	r2, [pc, #256]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bba4:	23a8      	movs	r3, #168	; 0xa8
 800bba6:	58d4      	ldr	r4, [r2, r3]
 800bba8:	4d3d      	ldr	r5, [pc, #244]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bbaa:	402c      	ands	r4, r5
 800bbac:	50d4      	str	r4, [r2, r3]
 800bbae:	58d5      	ldr	r5, [r2, r3]
 800bbb0:	24a0      	movs	r4, #160	; 0xa0
 800bbb2:	0124      	lsls	r4, r4, #4
 800bbb4:	432c      	orrs	r4, r5
 800bbb6:	50d4      	str	r4, [r2, r3]
 800bbb8:	e726      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800bbba:	4a3a      	ldr	r2, [pc, #232]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbbc:	23a8      	movs	r3, #168	; 0xa8
 800bbbe:	58d4      	ldr	r4, [r2, r3]
 800bbc0:	4d39      	ldr	r5, [pc, #228]	; (800bca8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800bbc2:	402c      	ands	r4, r5
 800bbc4:	50d4      	str	r4, [r2, r3]
 800bbc6:	58d5      	ldr	r5, [r2, r3]
 800bbc8:	24a0      	movs	r4, #160	; 0xa0
 800bbca:	0324      	lsls	r4, r4, #12
 800bbcc:	432c      	orrs	r4, r5
 800bbce:	50d4      	str	r4, [r2, r3]
 800bbd0:	e71a      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800bbd2:	4a34      	ldr	r2, [pc, #208]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbd4:	23a8      	movs	r3, #168	; 0xa8
 800bbd6:	58d4      	ldr	r4, [r2, r3]
 800bbd8:	4d34      	ldr	r5, [pc, #208]	; (800bcac <RemapAndLinkDMAtoUARTRx+0x334>)
 800bbda:	402c      	ands	r4, r5
 800bbdc:	50d4      	str	r4, [r2, r3]
 800bbde:	58d5      	ldr	r5, [r2, r3]
 800bbe0:	24a0      	movs	r4, #160	; 0xa0
 800bbe2:	0424      	lsls	r4, r4, #16
 800bbe4:	432c      	orrs	r4, r5
 800bbe6:	50d4      	str	r4, [r2, r3]
 800bbe8:	e70e      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800bbea:	4a2c      	ldr	r2, [pc, #176]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x324>)
 800bbec:	23a8      	movs	r3, #168	; 0xa8
 800bbee:	58d4      	ldr	r4, [r2, r3]
 800bbf0:	25f0      	movs	r5, #240	; 0xf0
 800bbf2:	43ac      	bics	r4, r5
 800bbf4:	50d4      	str	r4, [r2, r3]
 800bbf6:	58d4      	ldr	r4, [r2, r3]
 800bbf8:	3d50      	subs	r5, #80	; 0x50
 800bbfa:	432c      	orrs	r4, r5
 800bbfc:	50d4      	str	r4, [r2, r3]
 800bbfe:	e703      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800bc00:	4a28      	ldr	r2, [pc, #160]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc02:	23a8      	movs	r3, #168	; 0xa8
 800bc04:	58d4      	ldr	r4, [r2, r3]
 800bc06:	250f      	movs	r5, #15
 800bc08:	43ac      	bics	r4, r5
 800bc0a:	50d4      	str	r4, [r2, r3]
 800bc0c:	58d4      	ldr	r4, [r2, r3]
 800bc0e:	3d04      	subs	r5, #4
 800bc10:	432c      	orrs	r4, r5
 800bc12:	50d4      	str	r4, [r2, r3]
 800bc14:	e6f8      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800bc16:	4a23      	ldr	r2, [pc, #140]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc18:	23a8      	movs	r3, #168	; 0xa8
 800bc1a:	58d4      	ldr	r4, [r2, r3]
 800bc1c:	4d20      	ldr	r5, [pc, #128]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bc1e:	402c      	ands	r4, r5
 800bc20:	50d4      	str	r4, [r2, r3]
 800bc22:	58d5      	ldr	r5, [r2, r3]
 800bc24:	24b0      	movs	r4, #176	; 0xb0
 800bc26:	0124      	lsls	r4, r4, #4
 800bc28:	432c      	orrs	r4, r5
 800bc2a:	50d4      	str	r4, [r2, r3]
 800bc2c:	e6ec      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800bc2e:	4a1d      	ldr	r2, [pc, #116]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc30:	23a8      	movs	r3, #168	; 0xa8
 800bc32:	58d4      	ldr	r4, [r2, r3]
 800bc34:	4d1c      	ldr	r5, [pc, #112]	; (800bca8 <RemapAndLinkDMAtoUARTRx+0x330>)
 800bc36:	402c      	ands	r4, r5
 800bc38:	50d4      	str	r4, [r2, r3]
 800bc3a:	58d5      	ldr	r5, [r2, r3]
 800bc3c:	24b0      	movs	r4, #176	; 0xb0
 800bc3e:	0324      	lsls	r4, r4, #12
 800bc40:	432c      	orrs	r4, r5
 800bc42:	50d4      	str	r4, [r2, r3]
 800bc44:	e6e0      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800bc46:	4a17      	ldr	r2, [pc, #92]	; (800bca4 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc48:	23a8      	movs	r3, #168	; 0xa8
 800bc4a:	58d4      	ldr	r4, [r2, r3]
 800bc4c:	4d17      	ldr	r5, [pc, #92]	; (800bcac <RemapAndLinkDMAtoUARTRx+0x334>)
 800bc4e:	402c      	ands	r4, r5
 800bc50:	50d4      	str	r4, [r2, r3]
 800bc52:	58d5      	ldr	r5, [r2, r3]
 800bc54:	24b0      	movs	r4, #176	; 0xb0
 800bc56:	0424      	lsls	r4, r4, #16
 800bc58:	432c      	orrs	r4, r5
 800bc5a:	50d4      	str	r4, [r2, r3]
 800bc5c:	e6d4      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800bc5e:	4a0f      	ldr	r2, [pc, #60]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x324>)
 800bc60:	23a8      	movs	r3, #168	; 0xa8
 800bc62:	58d4      	ldr	r4, [r2, r3]
 800bc64:	25f0      	movs	r5, #240	; 0xf0
 800bc66:	43ac      	bics	r4, r5
 800bc68:	50d4      	str	r4, [r2, r3]
 800bc6a:	58d4      	ldr	r4, [r2, r3]
 800bc6c:	3d40      	subs	r5, #64	; 0x40
 800bc6e:	432c      	orrs	r4, r5
 800bc70:	50d4      	str	r4, [r2, r3]
 800bc72:	e6c9      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
 800bc74:	40013800 	.word	0x40013800
 800bc78:	40004400 	.word	0x40004400
 800bc7c:	40004800 	.word	0x40004800
 800bc80:	40004c00 	.word	0x40004c00
 800bc84:	40020008 	.word	0x40020008
 800bc88:	40020030 	.word	0x40020030
 800bc8c:	40020058 	.word	0x40020058
 800bc90:	4002006c 	.word	0x4002006c
 800bc94:	4002041c 	.word	0x4002041c
 800bc98:	40020430 	.word	0x40020430
 800bc9c:	40020400 	.word	0x40020400
 800bca0:	fffff0ff 	.word	0xfffff0ff
 800bca4:	40020000 	.word	0x40020000
 800bca8:	fff0ffff 	.word	0xfff0ffff
 800bcac:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bcb0:	4ab9      	ldr	r2, [pc, #740]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x620>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d159      	bne.n	800bd6a <RemapAndLinkDMAtoUARTRx+0x3f2>
 800bcb6:	680b      	ldr	r3, [r1, #0]
 800bcb8:	4ab8      	ldr	r2, [pc, #736]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x624>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d01b      	beq.n	800bcf6 <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800bcbe:	4ab8      	ldr	r2, [pc, #736]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d023      	beq.n	800bd0c <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800bcc4:	4ab7      	ldr	r2, [pc, #732]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d02c      	beq.n	800bd24 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800bcca:	4ab7      	ldr	r2, [pc, #732]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x630>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d035      	beq.n	800bd3c <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800bcd0:	4ab6      	ldr	r2, [pc, #728]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x634>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d03e      	beq.n	800bd54 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800bcd6:	4ab6      	ldr	r2, [pc, #728]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d000      	beq.n	800bcde <RemapAndLinkDMAtoUARTRx+0x366>
 800bcdc:	e694      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800bcde:	4ab5      	ldr	r2, [pc, #724]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bce0:	23a8      	movs	r3, #168	; 0xa8
 800bce2:	58d4      	ldr	r4, [r2, r3]
 800bce4:	4db4      	ldr	r5, [pc, #720]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bce6:	402c      	ands	r4, r5
 800bce8:	50d4      	str	r4, [r2, r3]
 800bcea:	58d5      	ldr	r5, [r2, r3]
 800bcec:	24c0      	movs	r4, #192	; 0xc0
 800bcee:	0124      	lsls	r4, r4, #4
 800bcf0:	432c      	orrs	r4, r5
 800bcf2:	50d4      	str	r4, [r2, r3]
 800bcf4:	e688      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800bcf6:	4ab1      	ldr	r2, [pc, #708]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bcf8:	23a8      	movs	r3, #168	; 0xa8
 800bcfa:	58d4      	ldr	r4, [r2, r3]
 800bcfc:	250f      	movs	r5, #15
 800bcfe:	43ac      	bics	r4, r5
 800bd00:	50d4      	str	r4, [r2, r3]
 800bd02:	58d4      	ldr	r4, [r2, r3]
 800bd04:	3d03      	subs	r5, #3
 800bd06:	432c      	orrs	r4, r5
 800bd08:	50d4      	str	r4, [r2, r3]
 800bd0a:	e67d      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800bd0c:	4aab      	ldr	r2, [pc, #684]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd0e:	23a8      	movs	r3, #168	; 0xa8
 800bd10:	58d4      	ldr	r4, [r2, r3]
 800bd12:	4da9      	ldr	r5, [pc, #676]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bd14:	402c      	ands	r4, r5
 800bd16:	50d4      	str	r4, [r2, r3]
 800bd18:	58d5      	ldr	r5, [r2, r3]
 800bd1a:	24c0      	movs	r4, #192	; 0xc0
 800bd1c:	0124      	lsls	r4, r4, #4
 800bd1e:	432c      	orrs	r4, r5
 800bd20:	50d4      	str	r4, [r2, r3]
 800bd22:	e671      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800bd24:	4aa5      	ldr	r2, [pc, #660]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd26:	23a8      	movs	r3, #168	; 0xa8
 800bd28:	58d4      	ldr	r4, [r2, r3]
 800bd2a:	4da5      	ldr	r5, [pc, #660]	; (800bfc0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bd2c:	402c      	ands	r4, r5
 800bd2e:	50d4      	str	r4, [r2, r3]
 800bd30:	58d5      	ldr	r5, [r2, r3]
 800bd32:	24c0      	movs	r4, #192	; 0xc0
 800bd34:	0324      	lsls	r4, r4, #12
 800bd36:	432c      	orrs	r4, r5
 800bd38:	50d4      	str	r4, [r2, r3]
 800bd3a:	e665      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800bd3c:	4a9f      	ldr	r2, [pc, #636]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd3e:	23a8      	movs	r3, #168	; 0xa8
 800bd40:	58d4      	ldr	r4, [r2, r3]
 800bd42:	4da0      	ldr	r5, [pc, #640]	; (800bfc4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bd44:	402c      	ands	r4, r5
 800bd46:	50d4      	str	r4, [r2, r3]
 800bd48:	58d5      	ldr	r5, [r2, r3]
 800bd4a:	24c0      	movs	r4, #192	; 0xc0
 800bd4c:	0424      	lsls	r4, r4, #16
 800bd4e:	432c      	orrs	r4, r5
 800bd50:	50d4      	str	r4, [r2, r3]
 800bd52:	e659      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800bd54:	4a97      	ldr	r2, [pc, #604]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bd56:	23a8      	movs	r3, #168	; 0xa8
 800bd58:	58d4      	ldr	r4, [r2, r3]
 800bd5a:	25f0      	movs	r5, #240	; 0xf0
 800bd5c:	43ac      	bics	r4, r5
 800bd5e:	50d4      	str	r4, [r2, r3]
 800bd60:	58d4      	ldr	r4, [r2, r3]
 800bd62:	3d30      	subs	r5, #48	; 0x30
 800bd64:	432c      	orrs	r4, r5
 800bd66:	50d4      	str	r4, [r2, r3]
 800bd68:	e64e      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bd6a:	4a97      	ldr	r2, [pc, #604]	; (800bfc8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d159      	bne.n	800be24 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800bd70:	680b      	ldr	r3, [r1, #0]
 800bd72:	4a8a      	ldr	r2, [pc, #552]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x624>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d01b      	beq.n	800bdb0 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800bd78:	4a89      	ldr	r2, [pc, #548]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d023      	beq.n	800bdc6 <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800bd7e:	4a89      	ldr	r2, [pc, #548]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d02c      	beq.n	800bdde <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800bd84:	4a88      	ldr	r2, [pc, #544]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x630>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d035      	beq.n	800bdf6 <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800bd8a:	4a88      	ldr	r2, [pc, #544]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x634>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d03e      	beq.n	800be0e <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800bd90:	4a87      	ldr	r2, [pc, #540]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d000      	beq.n	800bd98 <RemapAndLinkDMAtoUARTRx+0x420>
 800bd96:	e637      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800bd98:	4a86      	ldr	r2, [pc, #536]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bd9a:	23a8      	movs	r3, #168	; 0xa8
 800bd9c:	58d4      	ldr	r4, [r2, r3]
 800bd9e:	4d86      	ldr	r5, [pc, #536]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bda0:	402c      	ands	r4, r5
 800bda2:	50d4      	str	r4, [r2, r3]
 800bda4:	58d5      	ldr	r5, [r2, r3]
 800bda6:	24d0      	movs	r4, #208	; 0xd0
 800bda8:	0124      	lsls	r4, r4, #4
 800bdaa:	432c      	orrs	r4, r5
 800bdac:	50d4      	str	r4, [r2, r3]
 800bdae:	e62b      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800bdb0:	4a82      	ldr	r2, [pc, #520]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdb2:	23a8      	movs	r3, #168	; 0xa8
 800bdb4:	58d4      	ldr	r4, [r2, r3]
 800bdb6:	250f      	movs	r5, #15
 800bdb8:	43ac      	bics	r4, r5
 800bdba:	50d4      	str	r4, [r2, r3]
 800bdbc:	58d4      	ldr	r4, [r2, r3]
 800bdbe:	3d02      	subs	r5, #2
 800bdc0:	432c      	orrs	r4, r5
 800bdc2:	50d4      	str	r4, [r2, r3]
 800bdc4:	e620      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800bdc6:	4a7d      	ldr	r2, [pc, #500]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdc8:	23a8      	movs	r3, #168	; 0xa8
 800bdca:	58d4      	ldr	r4, [r2, r3]
 800bdcc:	4d7a      	ldr	r5, [pc, #488]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bdce:	402c      	ands	r4, r5
 800bdd0:	50d4      	str	r4, [r2, r3]
 800bdd2:	58d5      	ldr	r5, [r2, r3]
 800bdd4:	24d0      	movs	r4, #208	; 0xd0
 800bdd6:	0124      	lsls	r4, r4, #4
 800bdd8:	432c      	orrs	r4, r5
 800bdda:	50d4      	str	r4, [r2, r3]
 800bddc:	e614      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800bdde:	4a77      	ldr	r2, [pc, #476]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bde0:	23a8      	movs	r3, #168	; 0xa8
 800bde2:	58d4      	ldr	r4, [r2, r3]
 800bde4:	4d76      	ldr	r5, [pc, #472]	; (800bfc0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bde6:	402c      	ands	r4, r5
 800bde8:	50d4      	str	r4, [r2, r3]
 800bdea:	58d5      	ldr	r5, [r2, r3]
 800bdec:	24d0      	movs	r4, #208	; 0xd0
 800bdee:	0324      	lsls	r4, r4, #12
 800bdf0:	432c      	orrs	r4, r5
 800bdf2:	50d4      	str	r4, [r2, r3]
 800bdf4:	e608      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800bdf6:	4a71      	ldr	r2, [pc, #452]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdf8:	23a8      	movs	r3, #168	; 0xa8
 800bdfa:	58d4      	ldr	r4, [r2, r3]
 800bdfc:	4d71      	ldr	r5, [pc, #452]	; (800bfc4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bdfe:	402c      	ands	r4, r5
 800be00:	50d4      	str	r4, [r2, r3]
 800be02:	58d5      	ldr	r5, [r2, r3]
 800be04:	24d0      	movs	r4, #208	; 0xd0
 800be06:	0424      	lsls	r4, r4, #16
 800be08:	432c      	orrs	r4, r5
 800be0a:	50d4      	str	r4, [r2, r3]
 800be0c:	e5fc      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800be0e:	4a69      	ldr	r2, [pc, #420]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800be10:	23a8      	movs	r3, #168	; 0xa8
 800be12:	58d4      	ldr	r4, [r2, r3]
 800be14:	25f0      	movs	r5, #240	; 0xf0
 800be16:	43ac      	bics	r4, r5
 800be18:	50d4      	str	r4, [r2, r3]
 800be1a:	58d4      	ldr	r4, [r2, r3]
 800be1c:	3d20      	subs	r5, #32
 800be1e:	432c      	orrs	r4, r5
 800be20:	50d4      	str	r4, [r2, r3]
 800be22:	e5f1      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800be24:	4a69      	ldr	r2, [pc, #420]	; (800bfcc <RemapAndLinkDMAtoUARTRx+0x654>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d159      	bne.n	800bede <RemapAndLinkDMAtoUARTRx+0x566>
 800be2a:	680b      	ldr	r3, [r1, #0]
 800be2c:	4a5b      	ldr	r2, [pc, #364]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x624>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d01b      	beq.n	800be6a <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800be32:	4a5b      	ldr	r2, [pc, #364]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x628>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d023      	beq.n	800be80 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800be38:	4a5a      	ldr	r2, [pc, #360]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d02c      	beq.n	800be98 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800be3e:	4a5a      	ldr	r2, [pc, #360]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x630>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d035      	beq.n	800beb0 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800be44:	4a59      	ldr	r2, [pc, #356]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x634>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d03e      	beq.n	800bec8 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800be4a:	4a59      	ldr	r2, [pc, #356]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d000      	beq.n	800be52 <RemapAndLinkDMAtoUARTRx+0x4da>
 800be50:	e5da      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800be52:	4a58      	ldr	r2, [pc, #352]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800be54:	23a8      	movs	r3, #168	; 0xa8
 800be56:	58d4      	ldr	r4, [r2, r3]
 800be58:	4d57      	ldr	r5, [pc, #348]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800be5a:	402c      	ands	r4, r5
 800be5c:	50d4      	str	r4, [r2, r3]
 800be5e:	58d5      	ldr	r5, [r2, r3]
 800be60:	24e0      	movs	r4, #224	; 0xe0
 800be62:	0124      	lsls	r4, r4, #4
 800be64:	432c      	orrs	r4, r5
 800be66:	50d4      	str	r4, [r2, r3]
 800be68:	e5ce      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800be6a:	4a54      	ldr	r2, [pc, #336]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800be6c:	23a8      	movs	r3, #168	; 0xa8
 800be6e:	58d4      	ldr	r4, [r2, r3]
 800be70:	250f      	movs	r5, #15
 800be72:	43ac      	bics	r4, r5
 800be74:	50d4      	str	r4, [r2, r3]
 800be76:	58d4      	ldr	r4, [r2, r3]
 800be78:	3d01      	subs	r5, #1
 800be7a:	432c      	orrs	r4, r5
 800be7c:	50d4      	str	r4, [r2, r3]
 800be7e:	e5c3      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800be80:	4a4e      	ldr	r2, [pc, #312]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800be82:	23a8      	movs	r3, #168	; 0xa8
 800be84:	58d4      	ldr	r4, [r2, r3]
 800be86:	4d4c      	ldr	r5, [pc, #304]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800be88:	402c      	ands	r4, r5
 800be8a:	50d4      	str	r4, [r2, r3]
 800be8c:	58d5      	ldr	r5, [r2, r3]
 800be8e:	24e0      	movs	r4, #224	; 0xe0
 800be90:	0124      	lsls	r4, r4, #4
 800be92:	432c      	orrs	r4, r5
 800be94:	50d4      	str	r4, [r2, r3]
 800be96:	e5b7      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800be98:	4a48      	ldr	r2, [pc, #288]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800be9a:	23a8      	movs	r3, #168	; 0xa8
 800be9c:	58d4      	ldr	r4, [r2, r3]
 800be9e:	4d48      	ldr	r5, [pc, #288]	; (800bfc0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bea0:	402c      	ands	r4, r5
 800bea2:	50d4      	str	r4, [r2, r3]
 800bea4:	58d5      	ldr	r5, [r2, r3]
 800bea6:	24e0      	movs	r4, #224	; 0xe0
 800bea8:	0324      	lsls	r4, r4, #12
 800beaa:	432c      	orrs	r4, r5
 800beac:	50d4      	str	r4, [r2, r3]
 800beae:	e5ab      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800beb0:	4a42      	ldr	r2, [pc, #264]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800beb2:	23a8      	movs	r3, #168	; 0xa8
 800beb4:	58d4      	ldr	r4, [r2, r3]
 800beb6:	4d43      	ldr	r5, [pc, #268]	; (800bfc4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800beb8:	402c      	ands	r4, r5
 800beba:	50d4      	str	r4, [r2, r3]
 800bebc:	58d5      	ldr	r5, [r2, r3]
 800bebe:	24e0      	movs	r4, #224	; 0xe0
 800bec0:	0424      	lsls	r4, r4, #16
 800bec2:	432c      	orrs	r4, r5
 800bec4:	50d4      	str	r4, [r2, r3]
 800bec6:	e59f      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800bec8:	4a3a      	ldr	r2, [pc, #232]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800beca:	23a8      	movs	r3, #168	; 0xa8
 800becc:	58d4      	ldr	r4, [r2, r3]
 800bece:	25f0      	movs	r5, #240	; 0xf0
 800bed0:	43ac      	bics	r4, r5
 800bed2:	50d4      	str	r4, [r2, r3]
 800bed4:	58d4      	ldr	r4, [r2, r3]
 800bed6:	3d10      	subs	r5, #16
 800bed8:	432c      	orrs	r4, r5
 800beda:	50d4      	str	r4, [r2, r3]
 800bedc:	e594      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800bede:	4a3c      	ldr	r2, [pc, #240]	; (800bfd0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d000      	beq.n	800bee6 <RemapAndLinkDMAtoUARTRx+0x56e>
 800bee4:	e590      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
 800bee6:	680b      	ldr	r3, [r1, #0]
 800bee8:	4a2c      	ldr	r2, [pc, #176]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x624>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d01b      	beq.n	800bf26 <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800beee:	4a2c      	ldr	r2, [pc, #176]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d022      	beq.n	800bf3a <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800bef4:	4a2b      	ldr	r2, [pc, #172]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d02b      	beq.n	800bf52 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800befa:	4a2b      	ldr	r2, [pc, #172]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x630>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d034      	beq.n	800bf6a <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800bf00:	4a2a      	ldr	r2, [pc, #168]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x634>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d03d      	beq.n	800bf82 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800bf06:	4a2a      	ldr	r2, [pc, #168]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d000      	beq.n	800bf0e <RemapAndLinkDMAtoUARTRx+0x596>
 800bf0c:	e57c      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800bf0e:	4a29      	ldr	r2, [pc, #164]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bf10:	23a8      	movs	r3, #168	; 0xa8
 800bf12:	58d4      	ldr	r4, [r2, r3]
 800bf14:	4d28      	ldr	r5, [pc, #160]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bf16:	402c      	ands	r4, r5
 800bf18:	50d4      	str	r4, [r2, r3]
 800bf1a:	58d5      	ldr	r5, [r2, r3]
 800bf1c:	24f0      	movs	r4, #240	; 0xf0
 800bf1e:	0124      	lsls	r4, r4, #4
 800bf20:	432c      	orrs	r4, r5
 800bf22:	50d4      	str	r4, [r2, r3]
 800bf24:	e570      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800bf26:	4a25      	ldr	r2, [pc, #148]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf28:	23a8      	movs	r3, #168	; 0xa8
 800bf2a:	58d5      	ldr	r5, [r2, r3]
 800bf2c:	260f      	movs	r6, #15
 800bf2e:	43b5      	bics	r5, r6
 800bf30:	50d5      	str	r5, [r2, r3]
 800bf32:	58d4      	ldr	r4, [r2, r3]
 800bf34:	4334      	orrs	r4, r6
 800bf36:	50d4      	str	r4, [r2, r3]
 800bf38:	e566      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800bf3a:	4a20      	ldr	r2, [pc, #128]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf3c:	23a8      	movs	r3, #168	; 0xa8
 800bf3e:	58d4      	ldr	r4, [r2, r3]
 800bf40:	4d1d      	ldr	r5, [pc, #116]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x640>)
 800bf42:	402c      	ands	r4, r5
 800bf44:	50d4      	str	r4, [r2, r3]
 800bf46:	58d5      	ldr	r5, [r2, r3]
 800bf48:	24f0      	movs	r4, #240	; 0xf0
 800bf4a:	0124      	lsls	r4, r4, #4
 800bf4c:	432c      	orrs	r4, r5
 800bf4e:	50d4      	str	r4, [r2, r3]
 800bf50:	e55a      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800bf52:	4a1a      	ldr	r2, [pc, #104]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf54:	23a8      	movs	r3, #168	; 0xa8
 800bf56:	58d4      	ldr	r4, [r2, r3]
 800bf58:	4d19      	ldr	r5, [pc, #100]	; (800bfc0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bf5a:	402c      	ands	r4, r5
 800bf5c:	50d4      	str	r4, [r2, r3]
 800bf5e:	58d5      	ldr	r5, [r2, r3]
 800bf60:	24f0      	movs	r4, #240	; 0xf0
 800bf62:	0324      	lsls	r4, r4, #12
 800bf64:	432c      	orrs	r4, r5
 800bf66:	50d4      	str	r4, [r2, r3]
 800bf68:	e54e      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800bf6a:	4a14      	ldr	r2, [pc, #80]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf6c:	23a8      	movs	r3, #168	; 0xa8
 800bf6e:	58d4      	ldr	r4, [r2, r3]
 800bf70:	4d14      	ldr	r5, [pc, #80]	; (800bfc4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bf72:	402c      	ands	r4, r5
 800bf74:	50d4      	str	r4, [r2, r3]
 800bf76:	58d5      	ldr	r5, [r2, r3]
 800bf78:	24f0      	movs	r4, #240	; 0xf0
 800bf7a:	0424      	lsls	r4, r4, #16
 800bf7c:	432c      	orrs	r4, r5
 800bf7e:	50d4      	str	r4, [r2, r3]
 800bf80:	e542      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800bf82:	4a0c      	ldr	r2, [pc, #48]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bf84:	23a8      	movs	r3, #168	; 0xa8
 800bf86:	58d5      	ldr	r5, [r2, r3]
 800bf88:	26f0      	movs	r6, #240	; 0xf0
 800bf8a:	43b5      	bics	r5, r6
 800bf8c:	50d5      	str	r5, [r2, r3]
 800bf8e:	58d4      	ldr	r4, [r2, r3]
 800bf90:	4334      	orrs	r4, r6
 800bf92:	50d4      	str	r4, [r2, r3]
 800bf94:	e538      	b.n	800ba08 <RemapAndLinkDMAtoUARTRx+0x90>
 800bf96:	46c0      	nop			; (mov r8, r8)
 800bf98:	40005000 	.word	0x40005000
 800bf9c:	40020008 	.word	0x40020008
 800bfa0:	40020030 	.word	0x40020030
 800bfa4:	40020058 	.word	0x40020058
 800bfa8:	4002006c 	.word	0x4002006c
 800bfac:	4002041c 	.word	0x4002041c
 800bfb0:	40020430 	.word	0x40020430
 800bfb4:	40020400 	.word	0x40020400
 800bfb8:	fffff0ff 	.word	0xfffff0ff
 800bfbc:	40020000 	.word	0x40020000
 800bfc0:	fff0ffff 	.word	0xfff0ffff
 800bfc4:	ff0fffff 	.word	0xff0fffff
 800bfc8:	40011400 	.word	0x40011400
 800bfcc:	40011800 	.word	0x40011800
 800bfd0:	40011c00 	.word	0x40011c00

0800bfd4 <DMA_MSG_RX_Setup>:
{	
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	0004      	movs	r4, r0
 800bfd8:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800bfda:	f7ff fccd 	bl	800b978 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800bfde:	2100      	movs	r1, #0
 800bfe0:	0028      	movs	r0, r5
 800bfe2:	f7ff fc13 	bl	800b80c <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800bfe6:	0020      	movs	r0, r4
 800bfe8:	f7ff fb52 	bl	800b690 <GetPort>
 800bfec:	1e41      	subs	r1, r0, #1
 800bfee:	0189      	lsls	r1, r1, #6
 800bff0:	4803      	ldr	r0, [pc, #12]	; (800c000 <DMA_MSG_RX_Setup+0x2c>)
 800bff2:	1809      	adds	r1, r1, r0
 800bff4:	2240      	movs	r2, #64	; 0x40
 800bff6:	0020      	movs	r0, r4
 800bff8:	f006 f8a8 	bl	801214c <HAL_UART_Receive_DMA>
}
 800bffc:	bd70      	pop	{r4, r5, r6, pc}
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	200012d0 	.word	0x200012d0

0800c004 <SetupMessagingRxDMAs>:
{	
 800c004:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800c006:	4b1b      	ldr	r3, [pc, #108]	; (800c074 <SetupMessagingRxDMAs+0x70>)
 800c008:	785b      	ldrb	r3, [r3, #1]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d014      	beq.n	800c038 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800c00e:	4b19      	ldr	r3, [pc, #100]	; (800c074 <SetupMessagingRxDMAs+0x70>)
 800c010:	789b      	ldrb	r3, [r3, #2]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d015      	beq.n	800c042 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800c016:	4b17      	ldr	r3, [pc, #92]	; (800c074 <SetupMessagingRxDMAs+0x70>)
 800c018:	78db      	ldrb	r3, [r3, #3]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d016      	beq.n	800c04c <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800c01e:	4b15      	ldr	r3, [pc, #84]	; (800c074 <SetupMessagingRxDMAs+0x70>)
 800c020:	791b      	ldrb	r3, [r3, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d017      	beq.n	800c056 <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800c026:	4b13      	ldr	r3, [pc, #76]	; (800c074 <SetupMessagingRxDMAs+0x70>)
 800c028:	795b      	ldrb	r3, [r3, #5]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d018      	beq.n	800c060 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800c02e:	4b11      	ldr	r3, [pc, #68]	; (800c074 <SetupMessagingRxDMAs+0x70>)
 800c030:	799b      	ldrb	r3, [r3, #6]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d019      	beq.n	800c06a <SetupMessagingRxDMAs+0x66>
}
 800c036:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c038:	490f      	ldr	r1, [pc, #60]	; (800c078 <SetupMessagingRxDMAs+0x74>)
 800c03a:	4810      	ldr	r0, [pc, #64]	; (800c07c <SetupMessagingRxDMAs+0x78>)
 800c03c:	f7ff ffca 	bl	800bfd4 <DMA_MSG_RX_Setup>
 800c040:	e7e5      	b.n	800c00e <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c042:	490f      	ldr	r1, [pc, #60]	; (800c080 <SetupMessagingRxDMAs+0x7c>)
 800c044:	480f      	ldr	r0, [pc, #60]	; (800c084 <SetupMessagingRxDMAs+0x80>)
 800c046:	f7ff ffc5 	bl	800bfd4 <DMA_MSG_RX_Setup>
 800c04a:	e7e4      	b.n	800c016 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c04c:	490e      	ldr	r1, [pc, #56]	; (800c088 <SetupMessagingRxDMAs+0x84>)
 800c04e:	480f      	ldr	r0, [pc, #60]	; (800c08c <SetupMessagingRxDMAs+0x88>)
 800c050:	f7ff ffc0 	bl	800bfd4 <DMA_MSG_RX_Setup>
 800c054:	e7e3      	b.n	800c01e <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c056:	490e      	ldr	r1, [pc, #56]	; (800c090 <SetupMessagingRxDMAs+0x8c>)
 800c058:	480e      	ldr	r0, [pc, #56]	; (800c094 <SetupMessagingRxDMAs+0x90>)
 800c05a:	f7ff ffbb 	bl	800bfd4 <DMA_MSG_RX_Setup>
 800c05e:	e7e2      	b.n	800c026 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c060:	490d      	ldr	r1, [pc, #52]	; (800c098 <SetupMessagingRxDMAs+0x94>)
 800c062:	480e      	ldr	r0, [pc, #56]	; (800c09c <SetupMessagingRxDMAs+0x98>)
 800c064:	f7ff ffb6 	bl	800bfd4 <DMA_MSG_RX_Setup>
 800c068:	e7e1      	b.n	800c02e <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800c06a:	490d      	ldr	r1, [pc, #52]	; (800c0a0 <SetupMessagingRxDMAs+0x9c>)
 800c06c:	480d      	ldr	r0, [pc, #52]	; (800c0a4 <SetupMessagingRxDMAs+0xa0>)
 800c06e:	f7ff ffb1 	bl	800bfd4 <DMA_MSG_RX_Setup>
}
 800c072:	e7e0      	b.n	800c036 <SetupMessagingRxDMAs+0x32>
 800c074:	200010f8 	.word	0x200010f8
 800c078:	2000179c 	.word	0x2000179c
 800c07c:	20006d14 	.word	0x20006d14
 800c080:	200017d4 	.word	0x200017d4
 800c084:	20006c34 	.word	0x20006c34
 800c088:	2000180c 	.word	0x2000180c
 800c08c:	20006ae4 	.word	0x20006ae4
 800c090:	20001844 	.word	0x20001844
 800c094:	20006bc4 	.word	0x20006bc4
 800c098:	2000187c 	.word	0x2000187c
 800c09c:	20006b54 	.word	0x20006b54
 800c0a0:	200018b4 	.word	0x200018b4
 800c0a4:	20006ca4 	.word	0x20006ca4

0800c0a8 <DMA_STREAM_Setup>:
{	
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	0005      	movs	r5, r0
 800c0ac:	000f      	movs	r7, r1
 800c0ae:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c0b0:	f7ff faee 	bl	800b690 <GetPort>
	hDMA = &streamDMA[port-1];
 800c0b4:	3801      	subs	r0, #1
 800c0b6:	00c4      	lsls	r4, r0, #3
 800c0b8:	1a24      	subs	r4, r4, r0
 800c0ba:	00e4      	lsls	r4, r4, #3
 800c0bc:	4809      	ldr	r0, [pc, #36]	; (800c0e4 <DMA_STREAM_Setup+0x3c>)
 800c0be:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c0c0:	0021      	movs	r1, r4
 800c0c2:	0028      	movs	r0, r5
 800c0c4:	f7ff fc58 	bl	800b978 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	0020      	movs	r0, r4
 800c0cc:	f7ff fb9e 	bl	800b80c <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c0d0:	2369      	movs	r3, #105	; 0x69
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	3128      	adds	r1, #40	; 0x28
 800c0da:	0032      	movs	r2, r6
 800c0dc:	0028      	movs	r0, r5
 800c0de:	f006 f835 	bl	801214c <HAL_UART_Receive_DMA>
}
 800c0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e4:	20001994 	.word	0x20001994

0800c0e8 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c0e8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c0ea:	6803      	ldr	r3, [r0, #0]
 800c0ec:	4abd      	ldr	r2, [pc, #756]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d02f      	beq.n	800c152 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c0f2:	4abd      	ldr	r2, [pc, #756]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x300>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d100      	bne.n	800c0fa <RemapAndLinkDMAtoUARTTx+0x12>
 800c0f8:	e087      	b.n	800c20a <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c0fa:	4abc      	ldr	r2, [pc, #752]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x304>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d100      	bne.n	800c102 <RemapAndLinkDMAtoUARTTx+0x1a>
 800c100:	e0dc      	b.n	800c2bc <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c102:	4abb      	ldr	r2, [pc, #748]	; (800c3f0 <RemapAndLinkDMAtoUARTTx+0x308>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d000      	beq.n	800c10a <RemapAndLinkDMAtoUARTTx+0x22>
 800c108:	e18a      	b.n	800c420 <RemapAndLinkDMAtoUARTTx+0x338>
 800c10a:	680b      	ldr	r3, [r1, #0]
 800c10c:	4ab9      	ldr	r2, [pc, #740]	; (800c3f4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d100      	bne.n	800c114 <RemapAndLinkDMAtoUARTTx+0x2c>
 800c112:	e12d      	b.n	800c370 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c114:	4ab8      	ldr	r2, [pc, #736]	; (800c3f8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d100      	bne.n	800c11c <RemapAndLinkDMAtoUARTTx+0x34>
 800c11a:	e134      	b.n	800c386 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c11c:	4ab7      	ldr	r2, [pc, #732]	; (800c3fc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d100      	bne.n	800c124 <RemapAndLinkDMAtoUARTTx+0x3c>
 800c122:	e13c      	b.n	800c39e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c124:	4ab6      	ldr	r2, [pc, #728]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d100      	bne.n	800c12c <RemapAndLinkDMAtoUARTTx+0x44>
 800c12a:	e144      	b.n	800c3b6 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c12c:	4ab5      	ldr	r2, [pc, #724]	; (800c404 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d100      	bne.n	800c134 <RemapAndLinkDMAtoUARTTx+0x4c>
 800c132:	e14b      	b.n	800c3cc <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c134:	4ab4      	ldr	r2, [pc, #720]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d11e      	bne.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c13a:	4ab4      	ldr	r2, [pc, #720]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c13c:	23a8      	movs	r3, #168	; 0xa8
 800c13e:	58d4      	ldr	r4, [r2, r3]
 800c140:	4db3      	ldr	r5, [pc, #716]	; (800c410 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c142:	402c      	ands	r4, r5
 800c144:	50d4      	str	r4, [r2, r3]
 800c146:	58d5      	ldr	r5, [r2, r3]
 800c148:	24b0      	movs	r4, #176	; 0xb0
 800c14a:	0324      	lsls	r4, r4, #12
 800c14c:	432c      	orrs	r4, r5
 800c14e:	50d4      	str	r4, [r2, r3]
 800c150:	e012      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c152:	680b      	ldr	r3, [r1, #0]
 800c154:	4aa7      	ldr	r2, [pc, #668]	; (800c3f4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d011      	beq.n	800c17e <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c15a:	4aa7      	ldr	r2, [pc, #668]	; (800c3f8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d019      	beq.n	800c194 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c160:	4aa6      	ldr	r2, [pc, #664]	; (800c3fc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d022      	beq.n	800c1ac <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c166:	4aa6      	ldr	r2, [pc, #664]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d02b      	beq.n	800c1c4 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c16c:	4aa5      	ldr	r2, [pc, #660]	; (800c404 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d033      	beq.n	800c1da <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c172:	4aa5      	ldr	r2, [pc, #660]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d03c      	beq.n	800c1f2 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c178:	6601      	str	r1, [r0, #96]	; 0x60
 800c17a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c17c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c17e:	4aa5      	ldr	r2, [pc, #660]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c180:	23a8      	movs	r3, #168	; 0xa8
 800c182:	58d4      	ldr	r4, [r2, r3]
 800c184:	25f0      	movs	r5, #240	; 0xf0
 800c186:	43ac      	bics	r4, r5
 800c188:	50d4      	str	r4, [r2, r3]
 800c18a:	58d4      	ldr	r4, [r2, r3]
 800c18c:	3d70      	subs	r5, #112	; 0x70
 800c18e:	432c      	orrs	r4, r5
 800c190:	50d4      	str	r4, [r2, r3]
 800c192:	e7f1      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c194:	4a9f      	ldr	r2, [pc, #636]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c196:	23a8      	movs	r3, #168	; 0xa8
 800c198:	58d4      	ldr	r4, [r2, r3]
 800c19a:	4d9f      	ldr	r5, [pc, #636]	; (800c418 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c19c:	402c      	ands	r4, r5
 800c19e:	50d4      	str	r4, [r2, r3]
 800c1a0:	58d5      	ldr	r5, [r2, r3]
 800c1a2:	2480      	movs	r4, #128	; 0x80
 800c1a4:	0224      	lsls	r4, r4, #8
 800c1a6:	432c      	orrs	r4, r5
 800c1a8:	50d4      	str	r4, [r2, r3]
 800c1aa:	e7e5      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c1ac:	4a99      	ldr	r2, [pc, #612]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c1ae:	23a8      	movs	r3, #168	; 0xa8
 800c1b0:	58d4      	ldr	r4, [r2, r3]
 800c1b2:	4d9a      	ldr	r5, [pc, #616]	; (800c41c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c1b4:	402c      	ands	r4, r5
 800c1b6:	50d4      	str	r4, [r2, r3]
 800c1b8:	58d5      	ldr	r5, [r2, r3]
 800c1ba:	2480      	movs	r4, #128	; 0x80
 800c1bc:	0524      	lsls	r4, r4, #20
 800c1be:	432c      	orrs	r4, r5
 800c1c0:	50d4      	str	r4, [r2, r3]
 800c1c2:	e7d9      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c1c4:	4a91      	ldr	r2, [pc, #580]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1c6:	23a8      	movs	r3, #168	; 0xa8
 800c1c8:	58d4      	ldr	r4, [r2, r3]
 800c1ca:	250f      	movs	r5, #15
 800c1cc:	43ac      	bics	r4, r5
 800c1ce:	50d4      	str	r4, [r2, r3]
 800c1d0:	58d4      	ldr	r4, [r2, r3]
 800c1d2:	3d07      	subs	r5, #7
 800c1d4:	432c      	orrs	r4, r5
 800c1d6:	50d4      	str	r4, [r2, r3]
 800c1d8:	e7ce      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c1da:	4a8c      	ldr	r2, [pc, #560]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1dc:	23a8      	movs	r3, #168	; 0xa8
 800c1de:	58d4      	ldr	r4, [r2, r3]
 800c1e0:	4d8d      	ldr	r5, [pc, #564]	; (800c418 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c1e2:	402c      	ands	r4, r5
 800c1e4:	50d4      	str	r4, [r2, r3]
 800c1e6:	58d5      	ldr	r5, [r2, r3]
 800c1e8:	2480      	movs	r4, #128	; 0x80
 800c1ea:	0224      	lsls	r4, r4, #8
 800c1ec:	432c      	orrs	r4, r5
 800c1ee:	50d4      	str	r4, [r2, r3]
 800c1f0:	e7c2      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c1f2:	4a86      	ldr	r2, [pc, #536]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1f4:	23a8      	movs	r3, #168	; 0xa8
 800c1f6:	58d4      	ldr	r4, [r2, r3]
 800c1f8:	4d85      	ldr	r5, [pc, #532]	; (800c410 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c1fa:	402c      	ands	r4, r5
 800c1fc:	50d4      	str	r4, [r2, r3]
 800c1fe:	58d5      	ldr	r5, [r2, r3]
 800c200:	2480      	movs	r4, #128	; 0x80
 800c202:	0324      	lsls	r4, r4, #12
 800c204:	432c      	orrs	r4, r5
 800c206:	50d4      	str	r4, [r2, r3]
 800c208:	e7b6      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c20a:	680b      	ldr	r3, [r1, #0]
 800c20c:	4a79      	ldr	r2, [pc, #484]	; (800c3f4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d01a      	beq.n	800c248 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c212:	4a79      	ldr	r2, [pc, #484]	; (800c3f8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d022      	beq.n	800c25e <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c218:	4a78      	ldr	r2, [pc, #480]	; (800c3fc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d02b      	beq.n	800c276 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c21e:	4a78      	ldr	r2, [pc, #480]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d034      	beq.n	800c28e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c224:	4a77      	ldr	r2, [pc, #476]	; (800c404 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d03c      	beq.n	800c2a4 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c22a:	4a77      	ldr	r2, [pc, #476]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d1a3      	bne.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c230:	4a76      	ldr	r2, [pc, #472]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c232:	23a8      	movs	r3, #168	; 0xa8
 800c234:	58d4      	ldr	r4, [r2, r3]
 800c236:	4d76      	ldr	r5, [pc, #472]	; (800c410 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c238:	402c      	ands	r4, r5
 800c23a:	50d4      	str	r4, [r2, r3]
 800c23c:	58d5      	ldr	r5, [r2, r3]
 800c23e:	2490      	movs	r4, #144	; 0x90
 800c240:	0324      	lsls	r4, r4, #12
 800c242:	432c      	orrs	r4, r5
 800c244:	50d4      	str	r4, [r2, r3]
 800c246:	e797      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c248:	4a72      	ldr	r2, [pc, #456]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c24a:	23a8      	movs	r3, #168	; 0xa8
 800c24c:	58d4      	ldr	r4, [r2, r3]
 800c24e:	25f0      	movs	r5, #240	; 0xf0
 800c250:	43ac      	bics	r4, r5
 800c252:	50d4      	str	r4, [r2, r3]
 800c254:	58d4      	ldr	r4, [r2, r3]
 800c256:	3d60      	subs	r5, #96	; 0x60
 800c258:	432c      	orrs	r4, r5
 800c25a:	50d4      	str	r4, [r2, r3]
 800c25c:	e78c      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c25e:	4a6d      	ldr	r2, [pc, #436]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c260:	23a8      	movs	r3, #168	; 0xa8
 800c262:	58d4      	ldr	r4, [r2, r3]
 800c264:	4d6c      	ldr	r5, [pc, #432]	; (800c418 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c266:	402c      	ands	r4, r5
 800c268:	50d4      	str	r4, [r2, r3]
 800c26a:	58d5      	ldr	r5, [r2, r3]
 800c26c:	2490      	movs	r4, #144	; 0x90
 800c26e:	0224      	lsls	r4, r4, #8
 800c270:	432c      	orrs	r4, r5
 800c272:	50d4      	str	r4, [r2, r3]
 800c274:	e780      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c276:	4a67      	ldr	r2, [pc, #412]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c278:	23a8      	movs	r3, #168	; 0xa8
 800c27a:	58d4      	ldr	r4, [r2, r3]
 800c27c:	4d67      	ldr	r5, [pc, #412]	; (800c41c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c27e:	402c      	ands	r4, r5
 800c280:	50d4      	str	r4, [r2, r3]
 800c282:	58d5      	ldr	r5, [r2, r3]
 800c284:	2490      	movs	r4, #144	; 0x90
 800c286:	0524      	lsls	r4, r4, #20
 800c288:	432c      	orrs	r4, r5
 800c28a:	50d4      	str	r4, [r2, r3]
 800c28c:	e774      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c28e:	4a5f      	ldr	r2, [pc, #380]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c290:	23a8      	movs	r3, #168	; 0xa8
 800c292:	58d4      	ldr	r4, [r2, r3]
 800c294:	250f      	movs	r5, #15
 800c296:	43ac      	bics	r4, r5
 800c298:	50d4      	str	r4, [r2, r3]
 800c29a:	58d4      	ldr	r4, [r2, r3]
 800c29c:	3d06      	subs	r5, #6
 800c29e:	432c      	orrs	r4, r5
 800c2a0:	50d4      	str	r4, [r2, r3]
 800c2a2:	e769      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c2a4:	4a59      	ldr	r2, [pc, #356]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c2a6:	23a8      	movs	r3, #168	; 0xa8
 800c2a8:	58d4      	ldr	r4, [r2, r3]
 800c2aa:	4d5b      	ldr	r5, [pc, #364]	; (800c418 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c2ac:	402c      	ands	r4, r5
 800c2ae:	50d4      	str	r4, [r2, r3]
 800c2b0:	58d5      	ldr	r5, [r2, r3]
 800c2b2:	2490      	movs	r4, #144	; 0x90
 800c2b4:	0224      	lsls	r4, r4, #8
 800c2b6:	432c      	orrs	r4, r5
 800c2b8:	50d4      	str	r4, [r2, r3]
 800c2ba:	e75d      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c2bc:	680b      	ldr	r3, [r1, #0]
 800c2be:	4a4d      	ldr	r2, [pc, #308]	; (800c3f4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d01b      	beq.n	800c2fc <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c2c4:	4a4c      	ldr	r2, [pc, #304]	; (800c3f8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d023      	beq.n	800c312 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c2ca:	4a4c      	ldr	r2, [pc, #304]	; (800c3fc <RemapAndLinkDMAtoUARTTx+0x314>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d02c      	beq.n	800c32a <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c2d0:	4a4b      	ldr	r2, [pc, #300]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d035      	beq.n	800c342 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c2d6:	4a4b      	ldr	r2, [pc, #300]	; (800c404 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d03d      	beq.n	800c358 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c2dc:	4a4a      	ldr	r2, [pc, #296]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x320>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d000      	beq.n	800c2e4 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c2e2:	e749      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c2e4:	4a49      	ldr	r2, [pc, #292]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c2e6:	23a8      	movs	r3, #168	; 0xa8
 800c2e8:	58d4      	ldr	r4, [r2, r3]
 800c2ea:	4d49      	ldr	r5, [pc, #292]	; (800c410 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c2ec:	402c      	ands	r4, r5
 800c2ee:	50d4      	str	r4, [r2, r3]
 800c2f0:	58d5      	ldr	r5, [r2, r3]
 800c2f2:	24a0      	movs	r4, #160	; 0xa0
 800c2f4:	0324      	lsls	r4, r4, #12
 800c2f6:	432c      	orrs	r4, r5
 800c2f8:	50d4      	str	r4, [r2, r3]
 800c2fa:	e73d      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c2fc:	4a45      	ldr	r2, [pc, #276]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c2fe:	23a8      	movs	r3, #168	; 0xa8
 800c300:	58d4      	ldr	r4, [r2, r3]
 800c302:	25f0      	movs	r5, #240	; 0xf0
 800c304:	43ac      	bics	r4, r5
 800c306:	50d4      	str	r4, [r2, r3]
 800c308:	58d4      	ldr	r4, [r2, r3]
 800c30a:	3d50      	subs	r5, #80	; 0x50
 800c30c:	432c      	orrs	r4, r5
 800c30e:	50d4      	str	r4, [r2, r3]
 800c310:	e732      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c312:	4a40      	ldr	r2, [pc, #256]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c314:	23a8      	movs	r3, #168	; 0xa8
 800c316:	58d4      	ldr	r4, [r2, r3]
 800c318:	4d3f      	ldr	r5, [pc, #252]	; (800c418 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c31a:	402c      	ands	r4, r5
 800c31c:	50d4      	str	r4, [r2, r3]
 800c31e:	58d5      	ldr	r5, [r2, r3]
 800c320:	24a0      	movs	r4, #160	; 0xa0
 800c322:	0224      	lsls	r4, r4, #8
 800c324:	432c      	orrs	r4, r5
 800c326:	50d4      	str	r4, [r2, r3]
 800c328:	e726      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c32a:	4a3a      	ldr	r2, [pc, #232]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c32c:	23a8      	movs	r3, #168	; 0xa8
 800c32e:	58d4      	ldr	r4, [r2, r3]
 800c330:	4d3a      	ldr	r5, [pc, #232]	; (800c41c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c332:	402c      	ands	r4, r5
 800c334:	50d4      	str	r4, [r2, r3]
 800c336:	58d5      	ldr	r5, [r2, r3]
 800c338:	24a0      	movs	r4, #160	; 0xa0
 800c33a:	0524      	lsls	r4, r4, #20
 800c33c:	432c      	orrs	r4, r5
 800c33e:	50d4      	str	r4, [r2, r3]
 800c340:	e71a      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c342:	4a32      	ldr	r2, [pc, #200]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c344:	23a8      	movs	r3, #168	; 0xa8
 800c346:	58d4      	ldr	r4, [r2, r3]
 800c348:	250f      	movs	r5, #15
 800c34a:	43ac      	bics	r4, r5
 800c34c:	50d4      	str	r4, [r2, r3]
 800c34e:	58d4      	ldr	r4, [r2, r3]
 800c350:	3d05      	subs	r5, #5
 800c352:	432c      	orrs	r4, r5
 800c354:	50d4      	str	r4, [r2, r3]
 800c356:	e70f      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c358:	4a2c      	ldr	r2, [pc, #176]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c35a:	23a8      	movs	r3, #168	; 0xa8
 800c35c:	58d4      	ldr	r4, [r2, r3]
 800c35e:	4d2e      	ldr	r5, [pc, #184]	; (800c418 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c360:	402c      	ands	r4, r5
 800c362:	50d4      	str	r4, [r2, r3]
 800c364:	58d5      	ldr	r5, [r2, r3]
 800c366:	24a0      	movs	r4, #160	; 0xa0
 800c368:	0224      	lsls	r4, r4, #8
 800c36a:	432c      	orrs	r4, r5
 800c36c:	50d4      	str	r4, [r2, r3]
 800c36e:	e703      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c370:	4a28      	ldr	r2, [pc, #160]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c372:	23a8      	movs	r3, #168	; 0xa8
 800c374:	58d4      	ldr	r4, [r2, r3]
 800c376:	25f0      	movs	r5, #240	; 0xf0
 800c378:	43ac      	bics	r4, r5
 800c37a:	50d4      	str	r4, [r2, r3]
 800c37c:	58d4      	ldr	r4, [r2, r3]
 800c37e:	3d40      	subs	r5, #64	; 0x40
 800c380:	432c      	orrs	r4, r5
 800c382:	50d4      	str	r4, [r2, r3]
 800c384:	e6f8      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c386:	4a23      	ldr	r2, [pc, #140]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c388:	23a8      	movs	r3, #168	; 0xa8
 800c38a:	58d4      	ldr	r4, [r2, r3]
 800c38c:	4d22      	ldr	r5, [pc, #136]	; (800c418 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c38e:	402c      	ands	r4, r5
 800c390:	50d4      	str	r4, [r2, r3]
 800c392:	58d5      	ldr	r5, [r2, r3]
 800c394:	24b0      	movs	r4, #176	; 0xb0
 800c396:	0224      	lsls	r4, r4, #8
 800c398:	432c      	orrs	r4, r5
 800c39a:	50d4      	str	r4, [r2, r3]
 800c39c:	e6ec      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c39e:	4a1d      	ldr	r2, [pc, #116]	; (800c414 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c3a0:	23a8      	movs	r3, #168	; 0xa8
 800c3a2:	58d4      	ldr	r4, [r2, r3]
 800c3a4:	4d1d      	ldr	r5, [pc, #116]	; (800c41c <RemapAndLinkDMAtoUARTTx+0x334>)
 800c3a6:	402c      	ands	r4, r5
 800c3a8:	50d4      	str	r4, [r2, r3]
 800c3aa:	58d5      	ldr	r5, [r2, r3]
 800c3ac:	24b0      	movs	r4, #176	; 0xb0
 800c3ae:	0524      	lsls	r4, r4, #20
 800c3b0:	432c      	orrs	r4, r5
 800c3b2:	50d4      	str	r4, [r2, r3]
 800c3b4:	e6e0      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c3b6:	4a15      	ldr	r2, [pc, #84]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c3b8:	23a8      	movs	r3, #168	; 0xa8
 800c3ba:	58d4      	ldr	r4, [r2, r3]
 800c3bc:	250f      	movs	r5, #15
 800c3be:	43ac      	bics	r4, r5
 800c3c0:	50d4      	str	r4, [r2, r3]
 800c3c2:	58d4      	ldr	r4, [r2, r3]
 800c3c4:	3d04      	subs	r5, #4
 800c3c6:	432c      	orrs	r4, r5
 800c3c8:	50d4      	str	r4, [r2, r3]
 800c3ca:	e6d5      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c3cc:	4a0f      	ldr	r2, [pc, #60]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x324>)
 800c3ce:	23a8      	movs	r3, #168	; 0xa8
 800c3d0:	58d4      	ldr	r4, [r2, r3]
 800c3d2:	4d11      	ldr	r5, [pc, #68]	; (800c418 <RemapAndLinkDMAtoUARTTx+0x330>)
 800c3d4:	402c      	ands	r4, r5
 800c3d6:	50d4      	str	r4, [r2, r3]
 800c3d8:	58d5      	ldr	r5, [r2, r3]
 800c3da:	24b0      	movs	r4, #176	; 0xb0
 800c3dc:	0224      	lsls	r4, r4, #8
 800c3de:	432c      	orrs	r4, r5
 800c3e0:	50d4      	str	r4, [r2, r3]
 800c3e2:	e6c9      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
 800c3e4:	40013800 	.word	0x40013800
 800c3e8:	40004400 	.word	0x40004400
 800c3ec:	40004800 	.word	0x40004800
 800c3f0:	40004c00 	.word	0x40004c00
 800c3f4:	4002001c 	.word	0x4002001c
 800c3f8:	40020044 	.word	0x40020044
 800c3fc:	40020080 	.word	0x40020080
 800c400:	40020408 	.word	0x40020408
 800c404:	40020444 	.word	0x40020444
 800c408:	40020458 	.word	0x40020458
 800c40c:	40020400 	.word	0x40020400
 800c410:	fff0ffff 	.word	0xfff0ffff
 800c414:	40020000 	.word	0x40020000
 800c418:	ffff0fff 	.word	0xffff0fff
 800c41c:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c420:	4ab9      	ldr	r2, [pc, #740]	; (800c708 <RemapAndLinkDMAtoUARTTx+0x620>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d159      	bne.n	800c4da <RemapAndLinkDMAtoUARTTx+0x3f2>
 800c426:	680b      	ldr	r3, [r1, #0]
 800c428:	4ab8      	ldr	r2, [pc, #736]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x624>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d01b      	beq.n	800c466 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c42e:	4ab8      	ldr	r2, [pc, #736]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d023      	beq.n	800c47c <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c434:	4ab7      	ldr	r2, [pc, #732]	; (800c714 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d02c      	beq.n	800c494 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c43a:	4ab7      	ldr	r2, [pc, #732]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d035      	beq.n	800c4ac <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c440:	4ab6      	ldr	r2, [pc, #728]	; (800c71c <RemapAndLinkDMAtoUARTTx+0x634>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d03d      	beq.n	800c4c2 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c446:	4ab6      	ldr	r2, [pc, #728]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d000      	beq.n	800c44e <RemapAndLinkDMAtoUARTTx+0x366>
 800c44c:	e694      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c44e:	4ab5      	ldr	r2, [pc, #724]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c450:	23a8      	movs	r3, #168	; 0xa8
 800c452:	58d4      	ldr	r4, [r2, r3]
 800c454:	4db4      	ldr	r5, [pc, #720]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c456:	402c      	ands	r4, r5
 800c458:	50d4      	str	r4, [r2, r3]
 800c45a:	58d5      	ldr	r5, [r2, r3]
 800c45c:	24c0      	movs	r4, #192	; 0xc0
 800c45e:	0324      	lsls	r4, r4, #12
 800c460:	432c      	orrs	r4, r5
 800c462:	50d4      	str	r4, [r2, r3]
 800c464:	e688      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c466:	4ab1      	ldr	r2, [pc, #708]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c468:	23a8      	movs	r3, #168	; 0xa8
 800c46a:	58d4      	ldr	r4, [r2, r3]
 800c46c:	25f0      	movs	r5, #240	; 0xf0
 800c46e:	43ac      	bics	r4, r5
 800c470:	50d4      	str	r4, [r2, r3]
 800c472:	58d4      	ldr	r4, [r2, r3]
 800c474:	3d30      	subs	r5, #48	; 0x30
 800c476:	432c      	orrs	r4, r5
 800c478:	50d4      	str	r4, [r2, r3]
 800c47a:	e67d      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c47c:	4aab      	ldr	r2, [pc, #684]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c47e:	23a8      	movs	r3, #168	; 0xa8
 800c480:	58d4      	ldr	r4, [r2, r3]
 800c482:	4dab      	ldr	r5, [pc, #684]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c484:	402c      	ands	r4, r5
 800c486:	50d4      	str	r4, [r2, r3]
 800c488:	58d5      	ldr	r5, [r2, r3]
 800c48a:	24c0      	movs	r4, #192	; 0xc0
 800c48c:	0224      	lsls	r4, r4, #8
 800c48e:	432c      	orrs	r4, r5
 800c490:	50d4      	str	r4, [r2, r3]
 800c492:	e671      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c494:	4aa5      	ldr	r2, [pc, #660]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c496:	23a8      	movs	r3, #168	; 0xa8
 800c498:	58d4      	ldr	r4, [r2, r3]
 800c49a:	4da6      	ldr	r5, [pc, #664]	; (800c734 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c49c:	402c      	ands	r4, r5
 800c49e:	50d4      	str	r4, [r2, r3]
 800c4a0:	58d5      	ldr	r5, [r2, r3]
 800c4a2:	24c0      	movs	r4, #192	; 0xc0
 800c4a4:	0524      	lsls	r4, r4, #20
 800c4a6:	432c      	orrs	r4, r5
 800c4a8:	50d4      	str	r4, [r2, r3]
 800c4aa:	e665      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c4ac:	4a9d      	ldr	r2, [pc, #628]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c4ae:	23a8      	movs	r3, #168	; 0xa8
 800c4b0:	58d4      	ldr	r4, [r2, r3]
 800c4b2:	250f      	movs	r5, #15
 800c4b4:	43ac      	bics	r4, r5
 800c4b6:	50d4      	str	r4, [r2, r3]
 800c4b8:	58d4      	ldr	r4, [r2, r3]
 800c4ba:	3d03      	subs	r5, #3
 800c4bc:	432c      	orrs	r4, r5
 800c4be:	50d4      	str	r4, [r2, r3]
 800c4c0:	e65a      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c4c2:	4a98      	ldr	r2, [pc, #608]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c4c4:	23a8      	movs	r3, #168	; 0xa8
 800c4c6:	58d4      	ldr	r4, [r2, r3]
 800c4c8:	4d99      	ldr	r5, [pc, #612]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c4ca:	402c      	ands	r4, r5
 800c4cc:	50d4      	str	r4, [r2, r3]
 800c4ce:	58d5      	ldr	r5, [r2, r3]
 800c4d0:	24c0      	movs	r4, #192	; 0xc0
 800c4d2:	0224      	lsls	r4, r4, #8
 800c4d4:	432c      	orrs	r4, r5
 800c4d6:	50d4      	str	r4, [r2, r3]
 800c4d8:	e64e      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c4da:	4a97      	ldr	r2, [pc, #604]	; (800c738 <RemapAndLinkDMAtoUARTTx+0x650>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d159      	bne.n	800c594 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800c4e0:	680b      	ldr	r3, [r1, #0]
 800c4e2:	4a8a      	ldr	r2, [pc, #552]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x624>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d01b      	beq.n	800c520 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c4e8:	4a89      	ldr	r2, [pc, #548]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d023      	beq.n	800c536 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c4ee:	4a89      	ldr	r2, [pc, #548]	; (800c714 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d02c      	beq.n	800c54e <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c4f4:	4a88      	ldr	r2, [pc, #544]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d035      	beq.n	800c566 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c4fa:	4a88      	ldr	r2, [pc, #544]	; (800c71c <RemapAndLinkDMAtoUARTTx+0x634>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d03d      	beq.n	800c57c <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c500:	4a87      	ldr	r2, [pc, #540]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d000      	beq.n	800c508 <RemapAndLinkDMAtoUARTTx+0x420>
 800c506:	e637      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c508:	4a86      	ldr	r2, [pc, #536]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c50a:	23a8      	movs	r3, #168	; 0xa8
 800c50c:	58d4      	ldr	r4, [r2, r3]
 800c50e:	4d86      	ldr	r5, [pc, #536]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c510:	402c      	ands	r4, r5
 800c512:	50d4      	str	r4, [r2, r3]
 800c514:	58d5      	ldr	r5, [r2, r3]
 800c516:	24d0      	movs	r4, #208	; 0xd0
 800c518:	0324      	lsls	r4, r4, #12
 800c51a:	432c      	orrs	r4, r5
 800c51c:	50d4      	str	r4, [r2, r3]
 800c51e:	e62b      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c520:	4a82      	ldr	r2, [pc, #520]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c522:	23a8      	movs	r3, #168	; 0xa8
 800c524:	58d4      	ldr	r4, [r2, r3]
 800c526:	25f0      	movs	r5, #240	; 0xf0
 800c528:	43ac      	bics	r4, r5
 800c52a:	50d4      	str	r4, [r2, r3]
 800c52c:	58d4      	ldr	r4, [r2, r3]
 800c52e:	3d20      	subs	r5, #32
 800c530:	432c      	orrs	r4, r5
 800c532:	50d4      	str	r4, [r2, r3]
 800c534:	e620      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c536:	4a7d      	ldr	r2, [pc, #500]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c538:	23a8      	movs	r3, #168	; 0xa8
 800c53a:	58d4      	ldr	r4, [r2, r3]
 800c53c:	4d7c      	ldr	r5, [pc, #496]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c53e:	402c      	ands	r4, r5
 800c540:	50d4      	str	r4, [r2, r3]
 800c542:	58d5      	ldr	r5, [r2, r3]
 800c544:	24d0      	movs	r4, #208	; 0xd0
 800c546:	0224      	lsls	r4, r4, #8
 800c548:	432c      	orrs	r4, r5
 800c54a:	50d4      	str	r4, [r2, r3]
 800c54c:	e614      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c54e:	4a77      	ldr	r2, [pc, #476]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c550:	23a8      	movs	r3, #168	; 0xa8
 800c552:	58d4      	ldr	r4, [r2, r3]
 800c554:	4d77      	ldr	r5, [pc, #476]	; (800c734 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c556:	402c      	ands	r4, r5
 800c558:	50d4      	str	r4, [r2, r3]
 800c55a:	58d5      	ldr	r5, [r2, r3]
 800c55c:	24d0      	movs	r4, #208	; 0xd0
 800c55e:	0524      	lsls	r4, r4, #20
 800c560:	432c      	orrs	r4, r5
 800c562:	50d4      	str	r4, [r2, r3]
 800c564:	e608      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c566:	4a6f      	ldr	r2, [pc, #444]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c568:	23a8      	movs	r3, #168	; 0xa8
 800c56a:	58d4      	ldr	r4, [r2, r3]
 800c56c:	250f      	movs	r5, #15
 800c56e:	43ac      	bics	r4, r5
 800c570:	50d4      	str	r4, [r2, r3]
 800c572:	58d4      	ldr	r4, [r2, r3]
 800c574:	3d02      	subs	r5, #2
 800c576:	432c      	orrs	r4, r5
 800c578:	50d4      	str	r4, [r2, r3]
 800c57a:	e5fd      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c57c:	4a69      	ldr	r2, [pc, #420]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c57e:	23a8      	movs	r3, #168	; 0xa8
 800c580:	58d4      	ldr	r4, [r2, r3]
 800c582:	4d6b      	ldr	r5, [pc, #428]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c584:	402c      	ands	r4, r5
 800c586:	50d4      	str	r4, [r2, r3]
 800c588:	58d5      	ldr	r5, [r2, r3]
 800c58a:	24d0      	movs	r4, #208	; 0xd0
 800c58c:	0224      	lsls	r4, r4, #8
 800c58e:	432c      	orrs	r4, r5
 800c590:	50d4      	str	r4, [r2, r3]
 800c592:	e5f1      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c594:	4a69      	ldr	r2, [pc, #420]	; (800c73c <RemapAndLinkDMAtoUARTTx+0x654>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d159      	bne.n	800c64e <RemapAndLinkDMAtoUARTTx+0x566>
 800c59a:	680b      	ldr	r3, [r1, #0]
 800c59c:	4a5b      	ldr	r2, [pc, #364]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x624>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d01b      	beq.n	800c5da <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c5a2:	4a5b      	ldr	r2, [pc, #364]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d023      	beq.n	800c5f0 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c5a8:	4a5a      	ldr	r2, [pc, #360]	; (800c714 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d02c      	beq.n	800c608 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c5ae:	4a5a      	ldr	r2, [pc, #360]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d035      	beq.n	800c620 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c5b4:	4a59      	ldr	r2, [pc, #356]	; (800c71c <RemapAndLinkDMAtoUARTTx+0x634>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d03d      	beq.n	800c636 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c5ba:	4a59      	ldr	r2, [pc, #356]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d000      	beq.n	800c5c2 <RemapAndLinkDMAtoUARTTx+0x4da>
 800c5c0:	e5da      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c5c2:	4a58      	ldr	r2, [pc, #352]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c5c4:	23a8      	movs	r3, #168	; 0xa8
 800c5c6:	58d4      	ldr	r4, [r2, r3]
 800c5c8:	4d57      	ldr	r5, [pc, #348]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c5ca:	402c      	ands	r4, r5
 800c5cc:	50d4      	str	r4, [r2, r3]
 800c5ce:	58d5      	ldr	r5, [r2, r3]
 800c5d0:	24e0      	movs	r4, #224	; 0xe0
 800c5d2:	0324      	lsls	r4, r4, #12
 800c5d4:	432c      	orrs	r4, r5
 800c5d6:	50d4      	str	r4, [r2, r3]
 800c5d8:	e5ce      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c5da:	4a54      	ldr	r2, [pc, #336]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5dc:	23a8      	movs	r3, #168	; 0xa8
 800c5de:	58d4      	ldr	r4, [r2, r3]
 800c5e0:	25f0      	movs	r5, #240	; 0xf0
 800c5e2:	43ac      	bics	r4, r5
 800c5e4:	50d4      	str	r4, [r2, r3]
 800c5e6:	58d4      	ldr	r4, [r2, r3]
 800c5e8:	3d10      	subs	r5, #16
 800c5ea:	432c      	orrs	r4, r5
 800c5ec:	50d4      	str	r4, [r2, r3]
 800c5ee:	e5c3      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c5f0:	4a4e      	ldr	r2, [pc, #312]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5f2:	23a8      	movs	r3, #168	; 0xa8
 800c5f4:	58d4      	ldr	r4, [r2, r3]
 800c5f6:	4d4e      	ldr	r5, [pc, #312]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c5f8:	402c      	ands	r4, r5
 800c5fa:	50d4      	str	r4, [r2, r3]
 800c5fc:	58d5      	ldr	r5, [r2, r3]
 800c5fe:	24e0      	movs	r4, #224	; 0xe0
 800c600:	0224      	lsls	r4, r4, #8
 800c602:	432c      	orrs	r4, r5
 800c604:	50d4      	str	r4, [r2, r3]
 800c606:	e5b7      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c608:	4a48      	ldr	r2, [pc, #288]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c60a:	23a8      	movs	r3, #168	; 0xa8
 800c60c:	58d4      	ldr	r4, [r2, r3]
 800c60e:	4d49      	ldr	r5, [pc, #292]	; (800c734 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c610:	402c      	ands	r4, r5
 800c612:	50d4      	str	r4, [r2, r3]
 800c614:	58d5      	ldr	r5, [r2, r3]
 800c616:	24e0      	movs	r4, #224	; 0xe0
 800c618:	0524      	lsls	r4, r4, #20
 800c61a:	432c      	orrs	r4, r5
 800c61c:	50d4      	str	r4, [r2, r3]
 800c61e:	e5ab      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c620:	4a40      	ldr	r2, [pc, #256]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c622:	23a8      	movs	r3, #168	; 0xa8
 800c624:	58d4      	ldr	r4, [r2, r3]
 800c626:	250f      	movs	r5, #15
 800c628:	43ac      	bics	r4, r5
 800c62a:	50d4      	str	r4, [r2, r3]
 800c62c:	58d4      	ldr	r4, [r2, r3]
 800c62e:	3d01      	subs	r5, #1
 800c630:	432c      	orrs	r4, r5
 800c632:	50d4      	str	r4, [r2, r3]
 800c634:	e5a0      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c636:	4a3b      	ldr	r2, [pc, #236]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c638:	23a8      	movs	r3, #168	; 0xa8
 800c63a:	58d4      	ldr	r4, [r2, r3]
 800c63c:	4d3c      	ldr	r5, [pc, #240]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c63e:	402c      	ands	r4, r5
 800c640:	50d4      	str	r4, [r2, r3]
 800c642:	58d5      	ldr	r5, [r2, r3]
 800c644:	24e0      	movs	r4, #224	; 0xe0
 800c646:	0224      	lsls	r4, r4, #8
 800c648:	432c      	orrs	r4, r5
 800c64a:	50d4      	str	r4, [r2, r3]
 800c64c:	e594      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c64e:	4a3c      	ldr	r2, [pc, #240]	; (800c740 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d000      	beq.n	800c656 <RemapAndLinkDMAtoUARTTx+0x56e>
 800c654:	e590      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
 800c656:	680b      	ldr	r3, [r1, #0]
 800c658:	4a2c      	ldr	r2, [pc, #176]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x624>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d01b      	beq.n	800c696 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c65e:	4a2c      	ldr	r2, [pc, #176]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d022      	beq.n	800c6aa <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c664:	4a2b      	ldr	r2, [pc, #172]	; (800c714 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d02b      	beq.n	800c6c2 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c66a:	4a2b      	ldr	r2, [pc, #172]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d034      	beq.n	800c6da <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c670:	4a2a      	ldr	r2, [pc, #168]	; (800c71c <RemapAndLinkDMAtoUARTTx+0x634>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d03b      	beq.n	800c6ee <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c676:	4a2a      	ldr	r2, [pc, #168]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d000      	beq.n	800c67e <RemapAndLinkDMAtoUARTTx+0x596>
 800c67c:	e57c      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c67e:	4a29      	ldr	r2, [pc, #164]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c680:	23a8      	movs	r3, #168	; 0xa8
 800c682:	58d4      	ldr	r4, [r2, r3]
 800c684:	4d28      	ldr	r5, [pc, #160]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c686:	402c      	ands	r4, r5
 800c688:	50d4      	str	r4, [r2, r3]
 800c68a:	58d5      	ldr	r5, [r2, r3]
 800c68c:	24f0      	movs	r4, #240	; 0xf0
 800c68e:	0324      	lsls	r4, r4, #12
 800c690:	432c      	orrs	r4, r5
 800c692:	50d4      	str	r4, [r2, r3]
 800c694:	e570      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c696:	4a25      	ldr	r2, [pc, #148]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c698:	23a8      	movs	r3, #168	; 0xa8
 800c69a:	58d5      	ldr	r5, [r2, r3]
 800c69c:	26f0      	movs	r6, #240	; 0xf0
 800c69e:	43b5      	bics	r5, r6
 800c6a0:	50d5      	str	r5, [r2, r3]
 800c6a2:	58d4      	ldr	r4, [r2, r3]
 800c6a4:	4334      	orrs	r4, r6
 800c6a6:	50d4      	str	r4, [r2, r3]
 800c6a8:	e566      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c6aa:	4a20      	ldr	r2, [pc, #128]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c6ac:	23a8      	movs	r3, #168	; 0xa8
 800c6ae:	58d4      	ldr	r4, [r2, r3]
 800c6b0:	4d1f      	ldr	r5, [pc, #124]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c6b2:	402c      	ands	r4, r5
 800c6b4:	50d4      	str	r4, [r2, r3]
 800c6b6:	58d5      	ldr	r5, [r2, r3]
 800c6b8:	24f0      	movs	r4, #240	; 0xf0
 800c6ba:	0224      	lsls	r4, r4, #8
 800c6bc:	432c      	orrs	r4, r5
 800c6be:	50d4      	str	r4, [r2, r3]
 800c6c0:	e55a      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c6c2:	4a1a      	ldr	r2, [pc, #104]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c6c4:	23a8      	movs	r3, #168	; 0xa8
 800c6c6:	58d4      	ldr	r4, [r2, r3]
 800c6c8:	4d1a      	ldr	r5, [pc, #104]	; (800c734 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c6ca:	402c      	ands	r4, r5
 800c6cc:	50d4      	str	r4, [r2, r3]
 800c6ce:	58d5      	ldr	r5, [r2, r3]
 800c6d0:	24f0      	movs	r4, #240	; 0xf0
 800c6d2:	0524      	lsls	r4, r4, #20
 800c6d4:	432c      	orrs	r4, r5
 800c6d6:	50d4      	str	r4, [r2, r3]
 800c6d8:	e54e      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c6da:	4a12      	ldr	r2, [pc, #72]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c6dc:	23a8      	movs	r3, #168	; 0xa8
 800c6de:	58d5      	ldr	r5, [r2, r3]
 800c6e0:	260f      	movs	r6, #15
 800c6e2:	43b5      	bics	r5, r6
 800c6e4:	50d5      	str	r5, [r2, r3]
 800c6e6:	58d4      	ldr	r4, [r2, r3]
 800c6e8:	4334      	orrs	r4, r6
 800c6ea:	50d4      	str	r4, [r2, r3]
 800c6ec:	e544      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c6ee:	4a0d      	ldr	r2, [pc, #52]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c6f0:	23a8      	movs	r3, #168	; 0xa8
 800c6f2:	58d4      	ldr	r4, [r2, r3]
 800c6f4:	4d0e      	ldr	r5, [pc, #56]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c6f6:	402c      	ands	r4, r5
 800c6f8:	50d4      	str	r4, [r2, r3]
 800c6fa:	58d5      	ldr	r5, [r2, r3]
 800c6fc:	24f0      	movs	r4, #240	; 0xf0
 800c6fe:	0224      	lsls	r4, r4, #8
 800c700:	432c      	orrs	r4, r5
 800c702:	50d4      	str	r4, [r2, r3]
 800c704:	e538      	b.n	800c178 <RemapAndLinkDMAtoUARTTx+0x90>
 800c706:	46c0      	nop			; (mov r8, r8)
 800c708:	40005000 	.word	0x40005000
 800c70c:	4002001c 	.word	0x4002001c
 800c710:	40020044 	.word	0x40020044
 800c714:	40020080 	.word	0x40020080
 800c718:	40020408 	.word	0x40020408
 800c71c:	40020444 	.word	0x40020444
 800c720:	40020458 	.word	0x40020458
 800c724:	40020400 	.word	0x40020400
 800c728:	fff0ffff 	.word	0xfff0ffff
 800c72c:	40020000 	.word	0x40020000
 800c730:	ffff0fff 	.word	0xffff0fff
 800c734:	f0ffffff 	.word	0xf0ffffff
 800c738:	40011400 	.word	0x40011400
 800c73c:	40011800 	.word	0x40011800
 800c740:	40011c00 	.word	0x40011c00

0800c744 <DMA_MSG_TX_Setup>:
{	
 800c744:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c746:	4b0d      	ldr	r3, [pc, #52]	; (800c77c <DMA_MSG_TX_Setup+0x38>)
 800c748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d012      	beq.n	800c774 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800c74e:	4b0b      	ldr	r3, [pc, #44]	; (800c77c <DMA_MSG_TX_Setup+0x38>)
 800c750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c752:	2b00      	cmp	r3, #0
 800c754:	d010      	beq.n	800c778 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800c756:	4a09      	ldr	r2, [pc, #36]	; (800c77c <DMA_MSG_TX_Setup+0x38>)
 800c758:	2394      	movs	r3, #148	; 0x94
 800c75a:	58d3      	ldr	r3, [r2, r3]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d007      	beq.n	800c770 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c760:	0021      	movs	r1, r4
 800c762:	f7ff fcc1 	bl	800c0e8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c766:	2100      	movs	r1, #0
 800c768:	0020      	movs	r0, r4
 800c76a:	f7ff f84f 	bl	800b80c <SetupDMAInterrupts>
}
 800c76e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800c770:	4c03      	ldr	r4, [pc, #12]	; (800c780 <DMA_MSG_TX_Setup+0x3c>)
 800c772:	e7f5      	b.n	800c760 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800c774:	4c01      	ldr	r4, [pc, #4]	; (800c77c <DMA_MSG_TX_Setup+0x38>)
 800c776:	e7f3      	b.n	800c760 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800c778:	4c02      	ldr	r4, [pc, #8]	; (800c784 <DMA_MSG_TX_Setup+0x40>)
 800c77a:	e7f1      	b.n	800c760 <DMA_MSG_TX_Setup+0x1c>
 800c77c:	200018ec 	.word	0x200018ec
 800c780:	2000195c 	.word	0x2000195c
 800c784:	20001924 	.word	0x20001924

0800c788 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800c788:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800c78a:	4807      	ldr	r0, [pc, #28]	; (800c7a8 <CRC_Init+0x20>)
 800c78c:	4b07      	ldr	r3, [pc, #28]	; (800c7ac <CRC_Init+0x24>)
 800c78e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c790:	2310      	movs	r3, #16
 800c792:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800c794:	2300      	movs	r3, #0
 800c796:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c798:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800c79a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800c79c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c79e:	3303      	adds	r3, #3
 800c7a0:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c7a2:	f003 fb69 	bl	800fe78 <HAL_CRC_Init>
}
 800c7a6:	bd10      	pop	{r4, pc}
 800c7a8:	20006d84 	.word	0x20006d84
 800c7ac:	40023000 	.word	0x40023000

0800c7b0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c7b0:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c7b2:	4a05      	ldr	r2, [pc, #20]	; (800c7c8 <HAL_CRC_MspInit+0x18>)
 800c7b4:	6951      	ldr	r1, [r2, #20]
 800c7b6:	2340      	movs	r3, #64	; 0x40
 800c7b8:	4319      	orrs	r1, r3
 800c7ba:	6151      	str	r1, [r2, #20]
 800c7bc:	6952      	ldr	r2, [r2, #20]
 800c7be:	4013      	ands	r3, r2
 800c7c0:	9301      	str	r3, [sp, #4]
 800c7c2:	9b01      	ldr	r3, [sp, #4]
}
 800c7c4:	b002      	add	sp, #8
 800c7c6:	4770      	bx	lr
 800c7c8:	40021000 	.word	0x40021000

0800c7cc <CalculateCRC8>:
	/* Disable peripheral clock */
	__HAL_RCC_CRC_CLK_DISABLE();
}

uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	0004      	movs	r4, r0
 800c7d0:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d015      	beq.n	800c802 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800c7d6:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	d100      	bne.n	800c7de <CalculateCRC8+0x12>
}
 800c7dc:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c7de:	088e      	lsrs	r6, r1, #2
 800c7e0:	0032      	movs	r2, r6
 800c7e2:	0021      	movs	r1, r4
 800c7e4:	4808      	ldr	r0, [pc, #32]	; (800c808 <CalculateCRC8+0x3c>)
 800c7e6:	f003 fba4 	bl	800ff32 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800c7ea:	07ab      	lsls	r3, r5, #30
 800c7ec:	d101      	bne.n	800c7f2 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c7ee:	b2c0      	uxtb	r0, r0
 800c7f0:	e7f4      	b.n	800c7dc <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800c7f2:	0131      	lsls	r1, r6, #4
 800c7f4:	1861      	adds	r1, r4, r1
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	4803      	ldr	r0, [pc, #12]	; (800c808 <CalculateCRC8+0x3c>)
 800c7fa:	f003 fb6e 	bl	800feda <HAL_CRC_Accumulate>
 800c7fe:	b2c0      	uxtb	r0, r0
 800c800:	e7ec      	b.n	800c7dc <CalculateCRC8+0x10>
	return 0;
 800c802:	2000      	movs	r0, #0
 800c804:	e7ea      	b.n	800c7dc <CalculateCRC8+0x10>
 800c806:	46c0      	nop			; (mov r8, r8)
 800c808:	20006d84 	.word	0x20006d84

0800c80c <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800c80c:	b500      	push	{lr}
 800c80e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c810:	2380      	movs	r3, #128	; 0x80
 800c812:	011b      	lsls	r3, r3, #4
 800c814:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c816:	2301      	movs	r3, #1
 800c818:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c81e:	3303      	adds	r3, #3
 800c820:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c822:	2090      	movs	r0, #144	; 0x90
 800c824:	a901      	add	r1, sp, #4
 800c826:	05c0      	lsls	r0, r0, #23
 800c828:	f004 fa26 	bl	8010c78 <HAL_GPIO_Init>
}
 800c82c:	b007      	add	sp, #28
 800c82e:	bd00      	pop	{pc}

0800c830 <GPIO_Init>:
{
 800c830:	b500      	push	{lr}
 800c832:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800c834:	4b18      	ldr	r3, [pc, #96]	; (800c898 <GPIO_Init+0x68>)
 800c836:	6959      	ldr	r1, [r3, #20]
 800c838:	2080      	movs	r0, #128	; 0x80
 800c83a:	0300      	lsls	r0, r0, #12
 800c83c:	4301      	orrs	r1, r0
 800c83e:	6159      	str	r1, [r3, #20]
 800c840:	695a      	ldr	r2, [r3, #20]
 800c842:	4002      	ands	r2, r0
 800c844:	9201      	str	r2, [sp, #4]
 800c846:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800c848:	6959      	ldr	r1, [r3, #20]
 800c84a:	2080      	movs	r0, #128	; 0x80
 800c84c:	0280      	lsls	r0, r0, #10
 800c84e:	4301      	orrs	r1, r0
 800c850:	6159      	str	r1, [r3, #20]
 800c852:	695a      	ldr	r2, [r3, #20]
 800c854:	4002      	ands	r2, r0
 800c856:	9202      	str	r2, [sp, #8]
 800c858:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800c85a:	6959      	ldr	r1, [r3, #20]
 800c85c:	2080      	movs	r0, #128	; 0x80
 800c85e:	0340      	lsls	r0, r0, #13
 800c860:	4301      	orrs	r1, r0
 800c862:	6159      	str	r1, [r3, #20]
 800c864:	695a      	ldr	r2, [r3, #20]
 800c866:	4002      	ands	r2, r0
 800c868:	9203      	str	r2, [sp, #12]
 800c86a:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800c86c:	6959      	ldr	r1, [r3, #20]
 800c86e:	2080      	movs	r0, #128	; 0x80
 800c870:	02c0      	lsls	r0, r0, #11
 800c872:	4301      	orrs	r1, r0
 800c874:	6159      	str	r1, [r3, #20]
 800c876:	695a      	ldr	r2, [r3, #20]
 800c878:	4002      	ands	r2, r0
 800c87a:	9204      	str	r2, [sp, #16]
 800c87c:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c87e:	695a      	ldr	r2, [r3, #20]
 800c880:	2180      	movs	r1, #128	; 0x80
 800c882:	03c9      	lsls	r1, r1, #15
 800c884:	430a      	orrs	r2, r1
 800c886:	615a      	str	r2, [r3, #20]
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	400b      	ands	r3, r1
 800c88c:	9305      	str	r3, [sp, #20]
 800c88e:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800c890:	f7ff ffbc 	bl	800c80c <IND_LED_Init>
}
 800c894:	b007      	add	sp, #28
 800c896:	bd00      	pop	{pc}
 800c898:	40021000 	.word	0x40021000

0800c89c <GetPortGPIOs>:

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	000e      	movs	r6, r1
 800c8a0:	0015      	movs	r5, r2
 800c8a2:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c8a4:	f000 fd78 	bl	800d398 <GetUart>
	
	if (huart == &huart1) 
 800c8a8:	4b2b      	ldr	r3, [pc, #172]	; (800c958 <GetPortGPIOs+0xbc>)
 800c8aa:	4298      	cmp	r0, r3
 800c8ac:	d01a      	beq.n	800c8e4 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c8ae:	4b2b      	ldr	r3, [pc, #172]	; (800c95c <GetPortGPIOs+0xc0>)
 800c8b0:	4298      	cmp	r0, r3
 800c8b2:	d025      	beq.n	800c900 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c8b4:	4b2a      	ldr	r3, [pc, #168]	; (800c960 <GetPortGPIOs+0xc4>)
 800c8b6:	4298      	cmp	r0, r3
 800c8b8:	d02d      	beq.n	800c916 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c8ba:	4b2a      	ldr	r3, [pc, #168]	; (800c964 <GetPortGPIOs+0xc8>)
 800c8bc:	4298      	cmp	r0, r3
 800c8be:	d036      	beq.n	800c92e <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c8c0:	4b29      	ldr	r3, [pc, #164]	; (800c968 <GetPortGPIOs+0xcc>)
 800c8c2:	4298      	cmp	r0, r3
 800c8c4:	d03e      	beq.n	800c944 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c8c6:	4a29      	ldr	r2, [pc, #164]	; (800c96c <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c8c8:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800c8ca:	4290      	cmp	r0, r2
 800c8cc:	d116      	bne.n	800c8fc <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c8ce:	2390      	movs	r3, #144	; 0x90
 800c8d0:	05db      	lsls	r3, r3, #23
 800c8d2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c8d4:	2210      	movs	r2, #16
 800c8d6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c8d8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800c8da:	2320      	movs	r3, #32
 800c8dc:	9a04      	ldr	r2, [sp, #16]
 800c8de:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	e00b      	b.n	800c8fc <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c8e4:	2390      	movs	r3, #144	; 0x90
 800c8e6:	05db      	lsls	r3, r3, #23
 800c8e8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c8ea:	2280      	movs	r2, #128	; 0x80
 800c8ec:	0092      	lsls	r2, r2, #2
 800c8ee:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c8f0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c8f2:	2380      	movs	r3, #128	; 0x80
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	9a04      	ldr	r2, [sp, #16]
 800c8f8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c8fa:	2300      	movs	r3, #0
	
	return result;	
}
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c900:	2390      	movs	r3, #144	; 0x90
 800c902:	05db      	lsls	r3, r3, #23
 800c904:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c906:	2204      	movs	r2, #4
 800c908:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c90a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800c90c:	2308      	movs	r3, #8
 800c90e:	9a04      	ldr	r2, [sp, #16]
 800c910:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	e7f2      	b.n	800c8fc <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c916:	4b16      	ldr	r3, [pc, #88]	; (800c970 <GetPortGPIOs+0xd4>)
 800c918:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c91a:	2280      	movs	r2, #128	; 0x80
 800c91c:	00d2      	lsls	r2, r2, #3
 800c91e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c920:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800c922:	2380      	movs	r3, #128	; 0x80
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	9a04      	ldr	r2, [sp, #16]
 800c928:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	e7e6      	b.n	800c8fc <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c92e:	2390      	movs	r3, #144	; 0x90
 800c930:	05db      	lsls	r3, r3, #23
 800c932:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800c934:	2201      	movs	r2, #1
 800c936:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800c938:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800c93a:	2302      	movs	r3, #2
 800c93c:	9a04      	ldr	r2, [sp, #16]
 800c93e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c940:	2300      	movs	r3, #0
 800c942:	e7db      	b.n	800c8fc <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c944:	4b0a      	ldr	r3, [pc, #40]	; (800c970 <GetPortGPIOs+0xd4>)
 800c946:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c948:	2208      	movs	r2, #8
 800c94a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c94c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800c94e:	2310      	movs	r3, #16
 800c950:	9a04      	ldr	r2, [sp, #16]
 800c952:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	e7d1      	b.n	800c8fc <GetPortGPIOs+0x60>
 800c958:	20006bc4 	.word	0x20006bc4
 800c95c:	20006d14 	.word	0x20006d14
 800c960:	20006ae4 	.word	0x20006ae4
 800c964:	20006ca4 	.word	0x20006ca4
 800c968:	20006b54 	.word	0x20006b54
 800c96c:	20006c34 	.word	0x20006c34
 800c970:	48000400 	.word	0x48000400

0800c974 <IsFactoryReset>:

/* --- Check for factory reset condition: 
				- P1 TXD is connected to last port RXD    
*/
uint8_t IsFactoryReset(void)
{
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	b092      	sub	sp, #72	; 0x48
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800c978:	4b39      	ldr	r3, [pc, #228]	; (800ca60 <IsFactoryReset+0xec>)
 800c97a:	6959      	ldr	r1, [r3, #20]
 800c97c:	2080      	movs	r0, #128	; 0x80
 800c97e:	0280      	lsls	r0, r0, #10
 800c980:	4301      	orrs	r1, r0
 800c982:	6159      	str	r1, [r3, #20]
 800c984:	695a      	ldr	r2, [r3, #20]
 800c986:	4002      	ands	r2, r0
 800c988:	9203      	str	r2, [sp, #12]
 800c98a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c98c:	6959      	ldr	r1, [r3, #20]
 800c98e:	2080      	movs	r0, #128	; 0x80
 800c990:	02c0      	lsls	r0, r0, #11
 800c992:	4301      	orrs	r1, r0
 800c994:	6159      	str	r1, [r3, #20]
 800c996:	695a      	ldr	r2, [r3, #20]
 800c998:	4002      	ands	r2, r0
 800c99a:	9204      	str	r2, [sp, #16]
 800c99c:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800c99e:	6959      	ldr	r1, [r3, #20]
 800c9a0:	2080      	movs	r0, #128	; 0x80
 800c9a2:	0300      	lsls	r0, r0, #12
 800c9a4:	4301      	orrs	r1, r0
 800c9a6:	6159      	str	r1, [r3, #20]
 800c9a8:	695a      	ldr	r2, [r3, #20]
 800c9aa:	4002      	ands	r2, r0
 800c9ac:	9205      	str	r2, [sp, #20]
 800c9ae:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800c9b0:	695a      	ldr	r2, [r3, #20]
 800c9b2:	2180      	movs	r1, #128	; 0x80
 800c9b4:	0349      	lsls	r1, r1, #13
 800c9b6:	430a      	orrs	r2, r1
 800c9b8:	615a      	str	r2, [r3, #20]
 800c9ba:	695b      	ldr	r3, [r3, #20]
 800c9bc:	400b      	ands	r3, r1
 800c9be:	9306      	str	r3, [sp, #24]
 800c9c0:	9b06      	ldr	r3, [sp, #24]
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c9c2:	2522      	movs	r5, #34	; 0x22
 800c9c4:	446d      	add	r5, sp
 800c9c6:	ab08      	add	r3, sp, #32
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	ab0b      	add	r3, sp, #44	; 0x2c
 800c9cc:	002a      	movs	r2, r5
 800c9ce:	a90c      	add	r1, sp, #48	; 0x30
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	f7ff ff63 	bl	800c89c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c9d6:	ac07      	add	r4, sp, #28
 800c9d8:	9400      	str	r4, [sp, #0]
 800c9da:	ab09      	add	r3, sp, #36	; 0x24
 800c9dc:	221e      	movs	r2, #30
 800c9de:	446a      	add	r2, sp
 800c9e0:	a90a      	add	r1, sp, #40	; 0x28
 800c9e2:	2006      	movs	r0, #6
 800c9e4:	f7ff ff5a 	bl	800c89c <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ec:	2600      	movs	r6, #0
 800c9ee:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c9f0:	882b      	ldrh	r3, [r5, #0]
 800c9f2:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c9f4:	a90d      	add	r1, sp, #52	; 0x34
 800c9f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9f8:	f004 f93e 	bl	8010c78 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9fc:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c9fe:	2302      	movs	r3, #2
 800ca00:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ca02:	8823      	ldrh	r3, [r4, #0]
 800ca04:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ca06:	a90d      	add	r1, sp, #52	; 0x34
 800ca08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca0a:	f004 f935 	bl	8010c78 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ca0e:	8829      	ldrh	r1, [r5, #0]
 800ca10:	2200      	movs	r2, #0
 800ca12:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca14:	f004 faa4 	bl	8010f60 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800ca18:	2005      	movs	r0, #5
 800ca1a:	f000 fae3 	bl	800cfe4 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800ca1e:	8821      	ldrh	r1, [r4, #0]
 800ca20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca22:	f004 fa97 	bl	8010f54 <HAL_GPIO_ReadPin>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d006      	beq.n	800ca38 <IsFactoryReset+0xc4>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ca2a:	4b0e      	ldr	r3, [pc, #56]	; (800ca64 <IsFactoryReset+0xf0>)
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	4252      	negs	r2, r2
 800ca30:	601a      	str	r2, [r3, #0]
	
	return 0;
 800ca32:	2000      	movs	r0, #0
}
 800ca34:	b012      	add	sp, #72	; 0x48
 800ca36:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800ca38:	2322      	movs	r3, #34	; 0x22
 800ca3a:	446b      	add	r3, sp
 800ca3c:	8819      	ldrh	r1, [r3, #0]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca42:	f004 fa8d 	bl	8010f60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800ca46:	2005      	movs	r0, #5
 800ca48:	f000 facc 	bl	800cfe4 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800ca4c:	ab07      	add	r3, sp, #28
 800ca4e:	8819      	ldrh	r1, [r3, #0]
 800ca50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca52:	f004 fa7f 	bl	8010f54 <HAL_GPIO_ReadPin>
 800ca56:	2801      	cmp	r0, #1
 800ca58:	d1e7      	bne.n	800ca2a <IsFactoryReset+0xb6>
			return 1;
 800ca5a:	2001      	movs	r0, #1
 800ca5c:	e7ea      	b.n	800ca34 <IsFactoryReset+0xc0>
 800ca5e:	46c0      	nop			; (mov r8, r8)
 800ca60:	40021000 	.word	0x40021000
 800ca64:	20007ff0 	.word	0x20007ff0

0800ca68 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ca68:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800ca6a:	f002 fe01 	bl	800f670 <HAL_IncTick>
  osSystickHandler();  
 800ca6e:	f000 fe55 	bl	800d71c <osSystickHandler>

}
 800ca72:	bd10      	pop	{r4, pc}

0800ca74 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800ca74:	e7fe      	b.n	800ca74 <HardFault_Handler>
	...

0800ca78 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800ca78:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800ca7a:	4802      	ldr	r0, [pc, #8]	; (800ca84 <USART1_IRQHandler+0xc>)
 800ca7c:	f005 ff7d 	bl	801297a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ca80:	bd10      	pop	{r4, pc}
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	20006bc4 	.word	0x20006bc4

0800ca88 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800ca88:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800ca8a:	4802      	ldr	r0, [pc, #8]	; (800ca94 <USART2_IRQHandler+0xc>)
 800ca8c:	f005 ff75 	bl	801297a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ca90:	bd10      	pop	{r4, pc}
 800ca92:	46c0      	nop			; (mov r8, r8)
 800ca94:	20006d14 	.word	0x20006d14

0800ca98 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800ca98:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800ca9a:	4806      	ldr	r0, [pc, #24]	; (800cab4 <USART3_8_IRQHandler+0x1c>)
 800ca9c:	f005 ff6d 	bl	801297a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800caa0:	4805      	ldr	r0, [pc, #20]	; (800cab8 <USART3_8_IRQHandler+0x20>)
 800caa2:	f005 ff6a 	bl	801297a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800caa6:	4805      	ldr	r0, [pc, #20]	; (800cabc <USART3_8_IRQHandler+0x24>)
 800caa8:	f005 ff67 	bl	801297a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800caac:	4804      	ldr	r0, [pc, #16]	; (800cac0 <USART3_8_IRQHandler+0x28>)
 800caae:	f005 ff64 	bl	801297a <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cab2:	bd10      	pop	{r4, pc}
 800cab4:	20006ae4 	.word	0x20006ae4
 800cab8:	20006ca4 	.word	0x20006ca4
 800cabc:	20006b54 	.word	0x20006b54
 800cac0:	20006c34 	.word	0x20006c34

0800cac4 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800cac4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800cac6:	2001      	movs	r0, #1
 800cac8:	f7fa fda0 	bl	800760c <DMA_IRQHandler>
	
}
 800cacc:	bd10      	pop	{r4, pc}
	...

0800cad0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800cad0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cad2:	4b0c      	ldr	r3, [pc, #48]	; (800cb04 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	06db      	lsls	r3, r3, #27
 800cad8:	d408      	bmi.n	800caec <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cada:	4b0b      	ldr	r3, [pc, #44]	; (800cb08 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	05db      	lsls	r3, r3, #23
 800cae0:	d408      	bmi.n	800caf4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cae2:	4b09      	ldr	r3, [pc, #36]	; (800cb08 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	06db      	lsls	r3, r3, #27
 800cae8:	d408      	bmi.n	800cafc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800caea:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800caec:	2005      	movs	r0, #5
 800caee:	f7fa fd8d 	bl	800760c <DMA_IRQHandler>
 800caf2:	e7fa      	b.n	800caea <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800caf4:	2002      	movs	r0, #2
 800caf6:	f7fa fd89 	bl	800760c <DMA_IRQHandler>
 800cafa:	e7f6      	b.n	800caea <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cafc:	4803      	ldr	r0, [pc, #12]	; (800cb0c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cafe:	f003 fb17 	bl	8010130 <HAL_DMA_IRQHandler>
}
 800cb02:	e7f2      	b.n	800caea <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800cb04:	40020400 	.word	0x40020400
 800cb08:	40020000 	.word	0x40020000
 800cb0c:	200018ec 	.word	0x200018ec

0800cb10 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800cb10:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cb12:	4b14      	ldr	r3, [pc, #80]	; (800cb64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	03db      	lsls	r3, r3, #15
 800cb18:	d413      	bmi.n	800cb42 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cb1a:	4b12      	ldr	r3, [pc, #72]	; (800cb64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	02db      	lsls	r3, r3, #11
 800cb20:	d413      	bmi.n	800cb4a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cb22:	4b11      	ldr	r3, [pc, #68]	; (800cb68 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	05db      	lsls	r3, r3, #23
 800cb28:	d413      	bmi.n	800cb52 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cb2a:	4b0e      	ldr	r3, [pc, #56]	; (800cb64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	04db      	lsls	r3, r3, #19
 800cb30:	d413      	bmi.n	800cb5a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cb32:	4b0c      	ldr	r3, [pc, #48]	; (800cb64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	01db      	lsls	r3, r3, #7
 800cb38:	d506      	bpl.n	800cb48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cb3a:	480c      	ldr	r0, [pc, #48]	; (800cb6c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800cb3c:	f003 faf8 	bl	8010130 <HAL_DMA_IRQHandler>
	}
}
 800cb40:	e002      	b.n	800cb48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800cb42:	2003      	movs	r0, #3
 800cb44:	f7fa fd62 	bl	800760c <DMA_IRQHandler>
}
 800cb48:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800cb4a:	2004      	movs	r0, #4
 800cb4c:	f7fa fd5e 	bl	800760c <DMA_IRQHandler>
 800cb50:	e7fa      	b.n	800cb48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800cb52:	2006      	movs	r0, #6
 800cb54:	f7fa fd5a 	bl	800760c <DMA_IRQHandler>
 800cb58:	e7f6      	b.n	800cb48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cb5a:	4805      	ldr	r0, [pc, #20]	; (800cb70 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800cb5c:	f003 fae8 	bl	8010130 <HAL_DMA_IRQHandler>
 800cb60:	e7f2      	b.n	800cb48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800cb62:	46c0      	nop			; (mov r8, r8)
 800cb64:	40020000 	.word	0x40020000
 800cb68:	40020400 	.word	0x40020400
 800cb6c:	2000195c 	.word	0x2000195c
 800cb70:	20001924 	.word	0x20001924

0800cb74 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb74:	b510      	push	{r4, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cb7e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d001      	beq.n	800cb88 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cb84:	f7fe feee 	bl	800b964 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cb88:	0020      	movs	r0, r4
 800cb8a:	f7fe fd81 	bl	800b690 <GetPort>
 800cb8e:	0080      	lsls	r0, r0, #2
 800cb90:	4b03      	ldr	r3, [pc, #12]	; (800cba0 <HAL_UART_TxCpltCallback+0x2c>)
 800cb92:	58c0      	ldr	r0, [r0, r3]
 800cb94:	a901      	add	r1, sp, #4
 800cb96:	f001 f945 	bl	800de24 <xQueueGiveFromISR>
}
 800cb9a:	b002      	add	sp, #8
 800cb9c:	bd10      	pop	{r4, pc}
 800cb9e:	46c0      	nop			; (mov r8, r8)
 800cba0:	20006a44 	.word	0x20006a44

0800cba4 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cba4:	b510      	push	{r4, lr}
 800cba6:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cba8:	2369      	movs	r3, #105	; 0x69
 800cbaa:	2201      	movs	r2, #1
 800cbac:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cbae:	f7fe fd6f 	bl	800b690 <GetPort>
	if (portStatus[port] == STREAM) {
 800cbb2:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <HAL_UART_ErrorCallback+0x40>)
 800cbb4:	5c1b      	ldrb	r3, [r3, r0]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d005      	beq.n	800cbc6 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cbba:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <HAL_UART_ErrorCallback+0x44>)
 800cbbc:	1818      	adds	r0, r3, r0
 800cbbe:	3801      	subs	r0, #1
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	7003      	strb	r3, [r0, #0]
	}	
}
 800cbc4:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cbc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	b292      	uxth	r2, r2
 800cbce:	3801      	subs	r0, #1
 800cbd0:	0080      	lsls	r0, r0, #2
 800cbd2:	4b06      	ldr	r3, [pc, #24]	; (800cbec <HAL_UART_ErrorCallback+0x48>)
 800cbd4:	58c3      	ldr	r3, [r0, r3]
 800cbd6:	6819      	ldr	r1, [r3, #0]
 800cbd8:	3128      	adds	r1, #40	; 0x28
 800cbda:	0020      	movs	r0, r4
 800cbdc:	f005 fab6 	bl	801214c <HAL_UART_Receive_DMA>
 800cbe0:	e7f0      	b.n	800cbc4 <HAL_UART_ErrorCallback+0x20>
 800cbe2:	46c0      	nop			; (mov r8, r8)
 800cbe4:	200010f8 	.word	0x200010f8
 800cbe8:	200012c8 	.word	0x200012c8
 800cbec:	200014a8 	.word	0x200014a8

0800cbf0 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800cbf4:	f7fe fd4c 	bl	800b690 <GetPort>
 800cbf8:	4b13      	ldr	r3, [pc, #76]	; (800cc48 <HAL_UART_RxCpltCallback+0x58>)
 800cbfa:	5c1b      	ldrb	r3, [r3, r0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d006      	beq.n	800cc0e <HAL_UART_RxCpltCallback+0x1e>
 800cc00:	0020      	movs	r0, r4
 800cc02:	f7fe fd45 	bl	800b690 <GetPort>
 800cc06:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <HAL_UART_RxCpltCallback+0x58>)
 800cc08:	5c1b      	ldrb	r3, [r3, r0]
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d11a      	bne.n	800cc44 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800cc0e:	0020      	movs	r0, r4
 800cc10:	f7fe fd3e 	bl	800b690 <GetPort>
 800cc14:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <HAL_UART_RxCpltCallback+0x5c>)
 800cc16:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800cc18:	0020      	movs	r0, r4
 800cc1a:	f7fe fd39 	bl	800b690 <GetPort>
 800cc1e:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <HAL_UART_RxCpltCallback+0x58>)
 800cc20:	2205      	movs	r2, #5
 800cc22:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800cc24:	0020      	movs	r0, r4
 800cc26:	f7fe fd33 	bl	800b690 <GetPort>
 800cc2a:	4b09      	ldr	r3, [pc, #36]	; (800cc50 <HAL_UART_RxCpltCallback+0x60>)
 800cc2c:	1818      	adds	r0, r3, r0
 800cc2e:	3801      	subs	r0, #1
 800cc30:	2300      	movs	r3, #0
 800cc32:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800cc34:	0020      	movs	r0, r4
 800cc36:	f7fe fd2b 	bl	800b690 <GetPort>
 800cc3a:	4b06      	ldr	r3, [pc, #24]	; (800cc54 <HAL_UART_RxCpltCallback+0x64>)
 800cc3c:	1818      	adds	r0, r3, r0
 800cc3e:	3801      	subs	r0, #1
 800cc40:	2301      	movs	r3, #1
 800cc42:	7003      	strb	r3, [r0, #0]
	}
}
 800cc44:	bd10      	pop	{r4, pc}
 800cc46:	46c0      	nop			; (mov r8, r8)
 800cc48:	200010f8 	.word	0x200010f8
 800cc4c:	200069c4 	.word	0x200069c4
 800cc50:	20001450 	.word	0x20001450
 800cc54:	200012c8 	.word	0x200012c8

0800cc58 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800cc58:	b672      	cpsid	i
 800cc5a:	e7fe      	b.n	800cc5a <vApplicationStackOverflowHook+0x2>

0800cc5c <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800cc5c:	b672      	cpsid	i
 800cc5e:	e7fe      	b.n	800cc5e <vApplicationMallocFailedHook+0x2>

0800cc60 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc62:	46ce      	mov	lr, r9
 800cc64:	b500      	push	{lr}
 800cc66:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cc68:	ac05      	add	r4, sp, #20
 800cc6a:	4b34      	ldr	r3, [pc, #208]	; (800cd3c <RTC_CalendarConfig+0xdc>)
 800cc6c:	0022      	movs	r2, r4
 800cc6e:	cb43      	ldmia	r3!, {r0, r1, r6}
 800cc70:	c243      	stmia	r2!, {r0, r1, r6}
 800cc72:	aa02      	add	r2, sp, #8
 800cc74:	4b32      	ldr	r3, [pc, #200]	; (800cd40 <RTC_CalendarConfig+0xe0>)
 800cc76:	cb03      	ldmia	r3!, {r0, r1}
 800cc78:	c203      	stmia	r2!, {r0, r1}
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800cc7e:	2015      	movs	r0, #21
 800cc80:	ab02      	add	r3, sp, #8
 800cc82:	469c      	mov	ip, r3
 800cc84:	4460      	add	r0, ip
 800cc86:	f005 ff00 	bl	8012a8a <atoi>
 800cc8a:	b2c3      	uxtb	r3, r0
 800cc8c:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800cc8e:	2600      	movs	r6, #0
 800cc90:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800cc92:	a806      	add	r0, sp, #24
 800cc94:	f005 fef9 	bl	8012a8a <atoi>
 800cc98:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800cc9a:	70e6      	strb	r6, [r4, #3]
 800cc9c:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cc9e:	4e29      	ldr	r6, [pc, #164]	; (800cd44 <RTC_CalendarConfig+0xe4>)
 800cca0:	e002      	b.n	800cca8 <RTC_CalendarConfig+0x48>
 800cca2:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800cca4:	2c0d      	cmp	r4, #13
 800cca6:	d009      	beq.n	800ccbc <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cca8:	00a3      	lsls	r3, r4, #2
 800ccaa:	3b04      	subs	r3, #4
 800ccac:	58f1      	ldr	r1, [r6, r3]
 800ccae:	a805      	add	r0, sp, #20
 800ccb0:	f7f3 fa28 	bl	8000104 <strcmp>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d1f4      	bne.n	800cca2 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800ccb8:	b2e5      	uxtb	r5, r4
 800ccba:	e7f2      	b.n	800cca2 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800ccbc:	ab02      	add	r3, sp, #8
 800ccbe:	1d98      	adds	r0, r3, #6
 800ccc0:	f005 fee3 	bl	8012a8a <atoi>
 800ccc4:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800ccc6:	ac05      	add	r4, sp, #20
 800ccc8:	2600      	movs	r6, #0
 800ccca:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800cccc:	ab02      	add	r3, sp, #8
 800ccce:	1cd8      	adds	r0, r3, #3
 800ccd0:	f005 fedb 	bl	8012a8a <atoi>
 800ccd4:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800ccd6:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800ccd8:	a802      	add	r0, sp, #8
 800ccda:	f005 fed6 	bl	8012a8a <atoi>
 800ccde:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800cce0:	a90d      	add	r1, sp, #52	; 0x34
 800cce2:	464b      	mov	r3, r9
 800cce4:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800cce6:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800cce8:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800ccea:	2301      	movs	r3, #1
 800ccec:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	4815      	ldr	r0, [pc, #84]	; (800cd48 <RTC_CalendarConfig+0xe8>)
 800ccf2:	f004 ff77 	bl	8011be4 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800ccf6:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d119      	bne.n	800cd30 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800ccfc:	a908      	add	r1, sp, #32
 800ccfe:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800cd00:	9b01      	ldr	r3, [sp, #4]
 800cd02:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800cd04:	9b00      	ldr	r3, [sp, #0]
 800cd06:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	720b      	strb	r3, [r1, #8]
 800cd0c:	4a0f      	ldr	r2, [pc, #60]	; (800cd4c <RTC_CalendarConfig+0xec>)
 800cd0e:	3018      	adds	r0, #24
 800cd10:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cd12:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800cd14:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cd16:	2200      	movs	r2, #0
 800cd18:	480b      	ldr	r0, [pc, #44]	; (800cd48 <RTC_CalendarConfig+0xe8>)
 800cd1a:	f004 fedd 	bl	8011ad8 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800cd1e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d105      	bne.n	800cd30 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cd24:	4a0a      	ldr	r2, [pc, #40]	; (800cd50 <RTC_CalendarConfig+0xf0>)
 800cd26:	2101      	movs	r1, #1
 800cd28:	4807      	ldr	r0, [pc, #28]	; (800cd48 <RTC_CalendarConfig+0xe8>)
 800cd2a:	f005 f81f 	bl	8011d6c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	0018      	movs	r0, r3
 800cd32:	b00e      	add	sp, #56	; 0x38
 800cd34:	bc04      	pop	{r2}
 800cd36:	4691      	mov	r9, r2
 800cd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd3a:	46c0      	nop			; (mov r8, r8)
 800cd3c:	08017920 	.word	0x08017920
 800cd40:	0801a458 	.word	0x0801a458
 800cd44:	20000020 	.word	0x20000020
 800cd48:	20006da8 	.word	0x20006da8
 800cd4c:	200069c4 	.word	0x200069c4
 800cd50:	000032f2 	.word	0x000032f2

0800cd54 <RTC_Init>:
{
 800cd54:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800cd56:	4a1c      	ldr	r2, [pc, #112]	; (800cdc8 <RTC_Init+0x74>)
 800cd58:	6a11      	ldr	r1, [r2, #32]
 800cd5a:	2380      	movs	r3, #128	; 0x80
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	430b      	orrs	r3, r1
 800cd60:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800cd62:	481a      	ldr	r0, [pc, #104]	; (800cdcc <RTC_Init+0x78>)
 800cd64:	4b1a      	ldr	r3, [pc, #104]	; (800cdd0 <RTC_Init+0x7c>)
 800cd66:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800cd6c:	227c      	movs	r2, #124	; 0x7c
 800cd6e:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800cd70:	4a18      	ldr	r2, [pc, #96]	; (800cdd4 <RTC_Init+0x80>)
 800cd72:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cd74:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cd76:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cd78:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cd7a:	f004 fe4f 	bl	8011a1c <HAL_RTC_Init>
 800cd7e:	23ff      	movs	r3, #255	; 0xff
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d11e      	bne.n	800cdc2 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cd84:	2101      	movs	r1, #1
 800cd86:	4811      	ldr	r0, [pc, #68]	; (800cdcc <RTC_Init+0x78>)
 800cd88:	f004 fff6 	bl	8011d78 <HAL_RTCEx_BKUPRead>
 800cd8c:	4b12      	ldr	r3, [pc, #72]	; (800cdd8 <RTC_Init+0x84>)
 800cd8e:	4298      	cmp	r0, r3
 800cd90:	d10e      	bne.n	800cdb0 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800cd92:	4b0d      	ldr	r3, [pc, #52]	; (800cdc8 <RTC_Init+0x74>)
 800cd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd96:	011b      	lsls	r3, r3, #4
 800cd98:	d502      	bpl.n	800cda0 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cd9a:	4b10      	ldr	r3, [pc, #64]	; (800cddc <RTC_Init+0x88>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cda0:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <RTC_Init+0x74>)
 800cda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda4:	015b      	lsls	r3, r3, #5
 800cda6:	d505      	bpl.n	800cdb4 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800cda8:	4b0c      	ldr	r3, [pc, #48]	; (800cddc <RTC_Init+0x88>)
 800cdaa:	2201      	movs	r2, #1
 800cdac:	701a      	strb	r2, [r3, #0]
 800cdae:	e001      	b.n	800cdb4 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800cdb0:	f7ff ff56 	bl	800cc60 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cdb4:	4a04      	ldr	r2, [pc, #16]	; (800cdc8 <RTC_Init+0x74>)
 800cdb6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cdb8:	2380      	movs	r3, #128	; 0x80
 800cdba:	045b      	lsls	r3, r3, #17
 800cdbc:	430b      	orrs	r3, r1
 800cdbe:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	0018      	movs	r0, r3
 800cdc4:	bd10      	pop	{r4, pc}
 800cdc6:	46c0      	nop			; (mov r8, r8)
 800cdc8:	40021000 	.word	0x40021000
 800cdcc:	20006da8 	.word	0x20006da8
 800cdd0:	40002800 	.word	0x40002800
 800cdd4:	000007cf 	.word	0x000007cf
 800cdd8:	000032f2 	.word	0x000032f2
 800cddc:	20001ae4 	.word	0x20001ae4

0800cde0 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800cde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde2:	46c6      	mov	lr, r8
 800cde4:	b500      	push	{lr}
 800cde6:	b086      	sub	sp, #24
 800cde8:	ac0c      	add	r4, sp, #48	; 0x30
 800cdea:	7827      	ldrb	r7, [r4, #0]
 800cdec:	ac0d      	add	r4, sp, #52	; 0x34
 800cdee:	7824      	ldrb	r4, [r4, #0]
 800cdf0:	46a0      	mov	r8, r4
 800cdf2:	ac0e      	add	r4, sp, #56	; 0x38
 800cdf4:	7825      	ldrb	r5, [r4, #0]
 800cdf6:	ac0f      	add	r4, sp, #60	; 0x3c
 800cdf8:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800cdfa:	ac05      	add	r4, sp, #20
 800cdfc:	3230      	adds	r2, #48	; 0x30
 800cdfe:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800ce00:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800ce02:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800ce04:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ce06:	2200      	movs	r2, #0
 800ce08:	0021      	movs	r1, r4
 800ce0a:	481f      	ldr	r0, [pc, #124]	; (800ce88 <BOS_CalendarConfig+0xa8>)
 800ce0c:	f004 feea 	bl	8011be4 <HAL_RTC_SetDate>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d136      	bne.n	800ce82 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800ce14:	466b      	mov	r3, sp
 800ce16:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800ce18:	4642      	mov	r2, r8
 800ce1a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800ce1c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800ce1e:	2300      	movs	r3, #0
 800ce20:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800ce22:	2e01      	cmp	r6, #1
 800ce24:	d020      	beq.n	800ce68 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800ce26:	2e02      	cmp	r6, #2
 800ce28:	d024      	beq.n	800ce74 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800ce2a:	4b18      	ldr	r3, [pc, #96]	; (800ce8c <BOS_CalendarConfig+0xac>)
 800ce2c:	2218      	movs	r2, #24
 800ce2e:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce30:	2200      	movs	r2, #0
 800ce32:	4669      	mov	r1, sp
 800ce34:	4814      	ldr	r0, [pc, #80]	; (800ce88 <BOS_CalendarConfig+0xa8>)
 800ce36:	f004 fe4f 	bl	8011ad8 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800ce3a:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d10e      	bne.n	800ce5e <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800ce40:	4a12      	ldr	r2, [pc, #72]	; (800ce8c <BOS_CalendarConfig+0xac>)
 800ce42:	7b53      	ldrb	r3, [r2, #13]
 800ce44:	021b      	lsls	r3, r3, #8
 800ce46:	7911      	ldrb	r1, [r2, #4]
 800ce48:	4319      	orrs	r1, r3
 800ce4a:	308d      	adds	r0, #141	; 0x8d
 800ce4c:	0040      	lsls	r0, r0, #1
 800ce4e:	f7fa fcc7 	bl	80077e0 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ce52:	4a0f      	ldr	r2, [pc, #60]	; (800ce90 <BOS_CalendarConfig+0xb0>)
 800ce54:	2101      	movs	r1, #1
 800ce56:	480c      	ldr	r0, [pc, #48]	; (800ce88 <BOS_CalendarConfig+0xa8>)
 800ce58:	f004 ff88 	bl	8011d6c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	0018      	movs	r0, r3
 800ce60:	b006      	add	sp, #24
 800ce62:	bc04      	pop	{r2}
 800ce64:	4690      	mov	r8, r2
 800ce66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800ce68:	466a      	mov	r2, sp
 800ce6a:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ce6c:	4b07      	ldr	r3, [pc, #28]	; (800ce8c <BOS_CalendarConfig+0xac>)
 800ce6e:	220c      	movs	r2, #12
 800ce70:	735a      	strb	r2, [r3, #13]
 800ce72:	e7dd      	b.n	800ce30 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800ce74:	2340      	movs	r3, #64	; 0x40
 800ce76:	466a      	mov	r2, sp
 800ce78:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ce7a:	4b04      	ldr	r3, [pc, #16]	; (800ce8c <BOS_CalendarConfig+0xac>)
 800ce7c:	220c      	movs	r2, #12
 800ce7e:	735a      	strb	r2, [r3, #13]
 800ce80:	e7d6      	b.n	800ce30 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800ce82:	23ff      	movs	r3, #255	; 0xff
 800ce84:	e7eb      	b.n	800ce5e <BOS_CalendarConfig+0x7e>
 800ce86:	46c0      	nop			; (mov r8, r8)
 800ce88:	20006da8 	.word	0x20006da8
 800ce8c:	200069c4 	.word	0x200069c4
 800ce90:	000032f2 	.word	0x000032f2

0800ce94 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800ce94:	b530      	push	{r4, r5, lr}
 800ce96:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800ce98:	4d16      	ldr	r5, [pc, #88]	; (800cef4 <GetTimeDate+0x60>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	a902      	add	r1, sp, #8
 800ce9e:	0028      	movs	r0, r5
 800cea0:	f004 ff1c 	bl	8011cdc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800cea4:	ac07      	add	r4, sp, #28
 800cea6:	2200      	movs	r2, #0
 800cea8:	0021      	movs	r1, r4
 800ceaa:	0028      	movs	r0, r5
 800ceac:	f004 ff3c 	bl	8011d28 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800ceb0:	4b11      	ldr	r3, [pc, #68]	; (800cef8 <GetTimeDate+0x64>)
 800ceb2:	aa02      	add	r2, sp, #8
 800ceb4:	7a12      	ldrb	r2, [r2, #8]
 800ceb6:	09d2      	lsrs	r2, r2, #7
 800ceb8:	3201      	adds	r2, #1
 800ceba:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800cebc:	9a03      	ldr	r2, [sp, #12]
 800cebe:	9201      	str	r2, [sp, #4]
 800cec0:	0852      	lsrs	r2, r2, #1
 800cec2:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800cec4:	aa02      	add	r2, sp, #8
 800cec6:	7892      	ldrb	r2, [r2, #2]
 800cec8:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800ceca:	aa02      	add	r2, sp, #8
 800cecc:	7852      	ldrb	r2, [r2, #1]
 800cece:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800ced0:	aa02      	add	r2, sp, #8
 800ced2:	7812      	ldrb	r2, [r2, #0]
 800ced4:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800ced6:	78a2      	ldrb	r2, [r4, #2]
 800ced8:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800ceda:	7862      	ldrb	r2, [r4, #1]
 800cedc:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800cede:	7822      	ldrb	r2, [r4, #0]
 800cee0:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800cee2:	78e2      	ldrb	r2, [r4, #3]
 800cee4:	21fa      	movs	r1, #250	; 0xfa
 800cee6:	00c9      	lsls	r1, r1, #3
 800cee8:	468c      	mov	ip, r1
 800ceea:	4462      	add	r2, ip
 800ceec:	831a      	strh	r2, [r3, #24]
}
 800ceee:	b009      	add	sp, #36	; 0x24
 800cef0:	bd30      	pop	{r4, r5, pc}
 800cef2:	46c0      	nop			; (mov r8, r8)
 800cef4:	20006da8 	.word	0x20006da8
 800cef8:	200069c4 	.word	0x200069c4

0800cefc <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800cefc:	b530      	push	{r4, r5, lr}
 800cefe:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800cf00:	4a12      	ldr	r2, [pc, #72]	; (800cf4c <TIM_USEC_Init+0x50>)
 800cf02:	69d1      	ldr	r1, [r2, #28]
 800cf04:	2080      	movs	r0, #128	; 0x80
 800cf06:	0040      	lsls	r0, r0, #1
 800cf08:	4301      	orrs	r1, r0
 800cf0a:	61d1      	str	r1, [r2, #28]
 800cf0c:	69d3      	ldr	r3, [r2, #28]
 800cf0e:	4003      	ands	r3, r0
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800cf14:	4c0e      	ldr	r4, [pc, #56]	; (800cf50 <TIM_USEC_Init+0x54>)
 800cf16:	4b0f      	ldr	r3, [pc, #60]	; (800cf54 <TIM_USEC_Init+0x58>)
 800cf18:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800cf1a:	f004 fc97 	bl	801184c <HAL_RCC_GetPCLK1Freq>
 800cf1e:	490e      	ldr	r1, [pc, #56]	; (800cf58 <TIM_USEC_Init+0x5c>)
 800cf20:	f7f3 f916 	bl	8000150 <__udivsi3>
 800cf24:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf26:	2500      	movs	r5, #0
 800cf28:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800cf2a:	4b0c      	ldr	r3, [pc, #48]	; (800cf5c <TIM_USEC_Init+0x60>)
 800cf2c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800cf2e:	0020      	movs	r0, r4
 800cf30:	f004 ffb2 	bl	8011e98 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf34:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf36:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800cf38:	a902      	add	r1, sp, #8
 800cf3a:	0020      	movs	r0, r4
 800cf3c:	f004 ffc6 	bl	8011ecc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800cf40:	0020      	movs	r0, r4
 800cf42:	f004 ff20 	bl	8011d86 <HAL_TIM_Base_Start>
}
 800cf46:	b005      	add	sp, #20
 800cf48:	bd30      	pop	{r4, r5, pc}
 800cf4a:	46c0      	nop			; (mov r8, r8)
 800cf4c:	40021000 	.word	0x40021000
 800cf50:	20006e04 	.word	0x20006e04
 800cf54:	40002000 	.word	0x40002000
 800cf58:	000f4240 	.word	0x000f4240
 800cf5c:	0000ffff 	.word	0x0000ffff

0800cf60 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800cf60:	b530      	push	{r4, r5, lr}
 800cf62:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800cf64:	4a12      	ldr	r2, [pc, #72]	; (800cfb0 <TIM_MSEC_Init+0x50>)
 800cf66:	6991      	ldr	r1, [r2, #24]
 800cf68:	2080      	movs	r0, #128	; 0x80
 800cf6a:	0240      	lsls	r0, r0, #9
 800cf6c:	4301      	orrs	r1, r0
 800cf6e:	6191      	str	r1, [r2, #24]
 800cf70:	6993      	ldr	r3, [r2, #24]
 800cf72:	4003      	ands	r3, r0
 800cf74:	9301      	str	r3, [sp, #4]
 800cf76:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800cf78:	4c0e      	ldr	r4, [pc, #56]	; (800cfb4 <TIM_MSEC_Init+0x54>)
 800cf7a:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <TIM_MSEC_Init+0x58>)
 800cf7c:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cf7e:	f004 fc65 	bl	801184c <HAL_RCC_GetPCLK1Freq>
 800cf82:	21fa      	movs	r1, #250	; 0xfa
 800cf84:	0089      	lsls	r1, r1, #2
 800cf86:	f7f3 f8e3 	bl	8000150 <__udivsi3>
 800cf8a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf8c:	2500      	movs	r5, #0
 800cf8e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800cf90:	4b0a      	ldr	r3, [pc, #40]	; (800cfbc <TIM_MSEC_Init+0x5c>)
 800cf92:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800cf94:	0020      	movs	r0, r4
 800cf96:	f004 ff7f 	bl	8011e98 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf9a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf9c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800cf9e:	a902      	add	r1, sp, #8
 800cfa0:	0020      	movs	r0, r4
 800cfa2:	f004 ff93 	bl	8011ecc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	f004 feed 	bl	8011d86 <HAL_TIM_Base_Start>
}
 800cfac:	b005      	add	sp, #20
 800cfae:	bd30      	pop	{r4, r5, pc}
 800cfb0:	40021000 	.word	0x40021000
 800cfb4:	20006dc8 	.word	0x20006dc8
 800cfb8:	40014000 	.word	0x40014000
 800cfbc:	0000ffff 	.word	0x0000ffff

0800cfc0 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800cfc4:	f002 f9f0 	bl	800f3a8 <vPortEnterCritical>
	
	if (Delay)
 800cfc8:	2c00      	cmp	r4, #0
 800cfca:	d006      	beq.n	800cfda <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <StartMicroDelay+0x20>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800cfd2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cfd4:	1a5b      	subs	r3, r3, r1
 800cfd6:	42a3      	cmp	r3, r4
 800cfd8:	d9fb      	bls.n	800cfd2 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800cfda:	f002 f9f1 	bl	800f3c0 <vPortExitCritical>
}
 800cfde:	bd10      	pop	{r4, pc}
 800cfe0:	20006e04 	.word	0x20006e04

0800cfe4 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800cfe4:	b510      	push	{r4, lr}
 800cfe6:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800cfe8:	f002 f9de 	bl	800f3a8 <vPortEnterCritical>
	
	if (Delay)
 800cfec:	2c00      	cmp	r4, #0
 800cfee:	d006      	beq.n	800cffe <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800cff0:	4b04      	ldr	r3, [pc, #16]	; (800d004 <StartMilliDelay+0x20>)
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800cff6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cff8:	1a5b      	subs	r3, r3, r1
 800cffa:	42a3      	cmp	r3, r4
 800cffc:	d9fb      	bls.n	800cff6 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800cffe:	f002 f9df 	bl	800f3c0 <vPortExitCritical>
}
 800d002:	bd10      	pop	{r4, pc}
 800d004:	20006dc8 	.word	0x20006dc8

0800d008 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800d008:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d00a:	4809      	ldr	r0, [pc, #36]	; (800d030 <MX_USART1_UART_Init+0x28>)
 800d00c:	4b09      	ldr	r3, [pc, #36]	; (800d034 <MX_USART1_UART_Init+0x2c>)
 800d00e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d010:	23e1      	movs	r3, #225	; 0xe1
 800d012:	031b      	lsls	r3, r3, #12
 800d014:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d016:	2300      	movs	r3, #0
 800d018:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d01a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d01c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d01e:	220c      	movs	r2, #12
 800d020:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d022:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d024:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d026:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d028:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d02a:	f005 fbcf 	bl	80127cc <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d02e:	bd10      	pop	{r4, pc}
 800d030:	20006bc4 	.word	0x20006bc4
 800d034:	40013800 	.word	0x40013800

0800d038 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d038:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d03a:	4809      	ldr	r0, [pc, #36]	; (800d060 <MX_USART2_UART_Init+0x28>)
 800d03c:	4b09      	ldr	r3, [pc, #36]	; (800d064 <MX_USART2_UART_Init+0x2c>)
 800d03e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d040:	23e1      	movs	r3, #225	; 0xe1
 800d042:	031b      	lsls	r3, r3, #12
 800d044:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d046:	2300      	movs	r3, #0
 800d048:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d04a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d04c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d04e:	220c      	movs	r2, #12
 800d050:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d052:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d054:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d056:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d058:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d05a:	f005 fbb7 	bl	80127cc <HAL_UART_Init>
	#if _P1pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800d05e:	bd10      	pop	{r4, pc}
 800d060:	20006d14 	.word	0x20006d14
 800d064:	40004400 	.word	0x40004400

0800d068 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d068:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d06a:	4809      	ldr	r0, [pc, #36]	; (800d090 <MX_USART3_UART_Init+0x28>)
 800d06c:	4b09      	ldr	r3, [pc, #36]	; (800d094 <MX_USART3_UART_Init+0x2c>)
 800d06e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d070:	23e1      	movs	r3, #225	; 0xe1
 800d072:	031b      	lsls	r3, r3, #12
 800d074:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d076:	2300      	movs	r3, #0
 800d078:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d07a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d07c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d07e:	220c      	movs	r2, #12
 800d080:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d082:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d084:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d086:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d088:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d08a:	f005 fb9f 	bl	80127cc <HAL_UART_Init>
	#if _P3pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d08e:	bd10      	pop	{r4, pc}
 800d090:	20006ae4 	.word	0x20006ae4
 800d094:	40004800 	.word	0x40004800

0800d098 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800d098:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d09a:	4809      	ldr	r0, [pc, #36]	; (800d0c0 <MX_USART4_UART_Init+0x28>)
 800d09c:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <MX_USART4_UART_Init+0x2c>)
 800d09e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0a0:	23e1      	movs	r3, #225	; 0xe1
 800d0a2:	031b      	lsls	r3, r3, #12
 800d0a4:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d0aa:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d0ac:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d0ae:	220c      	movs	r2, #12
 800d0b0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0b2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0b4:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0b6:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0b8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d0ba:	f005 fb87 	bl	80127cc <HAL_UART_Init>
	#if _P6pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800d0be:	bd10      	pop	{r4, pc}
 800d0c0:	20006ca4 	.word	0x20006ca4
 800d0c4:	40004c00 	.word	0x40004c00

0800d0c8 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800d0c8:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d0ca:	4809      	ldr	r0, [pc, #36]	; (800d0f0 <MX_USART5_UART_Init+0x28>)
 800d0cc:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <MX_USART5_UART_Init+0x2c>)
 800d0ce:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0d0:	23e1      	movs	r3, #225	; 0xe1
 800d0d2:	031b      	lsls	r3, r3, #12
 800d0d4:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d0da:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d0dc:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d0de:	220c      	movs	r2, #12
 800d0e0:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0e2:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0e4:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0e6:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0e8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d0ea:	f005 fb6f 	bl	80127cc <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d0ee:	bd10      	pop	{r4, pc}
 800d0f0:	20006b54 	.word	0x20006b54
 800d0f4:	40005000 	.word	0x40005000

0800d0f8 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d0f8:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d0fa:	4809      	ldr	r0, [pc, #36]	; (800d120 <MX_USART6_UART_Init+0x28>)
 800d0fc:	4b09      	ldr	r3, [pc, #36]	; (800d124 <MX_USART6_UART_Init+0x2c>)
 800d0fe:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d100:	23e1      	movs	r3, #225	; 0xe1
 800d102:	031b      	lsls	r3, r3, #12
 800d104:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d106:	2300      	movs	r3, #0
 800d108:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d10a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d10c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d10e:	220c      	movs	r2, #12
 800d110:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d112:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d114:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d116:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d118:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d11a:	f005 fb57 	bl	80127cc <HAL_UART_Init>
	#if _P2pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d11e:	bd10      	pop	{r4, pc}
 800d120:	20006c34 	.word	0x20006c34
 800d124:	40011400 	.word	0x40011400

0800d128 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d12a:	46ce      	mov	lr, r9
 800d12c:	b500      	push	{lr}
 800d12e:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d130:	6803      	ldr	r3, [r0, #0]
 800d132:	4a91      	ldr	r2, [pc, #580]	; (800d378 <HAL_UART_MspInit+0x250>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d015      	beq.n	800d164 <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d138:	4a90      	ldr	r2, [pc, #576]	; (800d37c <HAL_UART_MspInit+0x254>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d040      	beq.n	800d1c0 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d13e:	4a90      	ldr	r2, [pc, #576]	; (800d380 <HAL_UART_MspInit+0x258>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d069      	beq.n	800d218 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d144:	4a8f      	ldr	r2, [pc, #572]	; (800d384 <HAL_UART_MspInit+0x25c>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d100      	bne.n	800d14c <HAL_UART_MspInit+0x24>
 800d14a:	e092      	b.n	800d272 <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d14c:	4a8e      	ldr	r2, [pc, #568]	; (800d388 <HAL_UART_MspInit+0x260>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d100      	bne.n	800d154 <HAL_UART_MspInit+0x2c>
 800d152:	e0b9      	b.n	800d2c8 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d154:	4a8d      	ldr	r2, [pc, #564]	; (800d38c <HAL_UART_MspInit+0x264>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d100      	bne.n	800d15c <HAL_UART_MspInit+0x34>
 800d15a:	e0e0      	b.n	800d31e <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d15c:	b00c      	add	sp, #48	; 0x30
 800d15e:	bc04      	pop	{r2}
 800d160:	4691      	mov	r9, r2
 800d162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800d164:	4a8a      	ldr	r2, [pc, #552]	; (800d390 <HAL_UART_MspInit+0x268>)
 800d166:	6991      	ldr	r1, [r2, #24]
 800d168:	2080      	movs	r0, #128	; 0x80
 800d16a:	01c0      	lsls	r0, r0, #7
 800d16c:	4301      	orrs	r1, r0
 800d16e:	6191      	str	r1, [r2, #24]
 800d170:	6993      	ldr	r3, [r2, #24]
 800d172:	4003      	ands	r3, r0
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d178:	2380      	movs	r3, #128	; 0x80
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d17e:	2702      	movs	r7, #2
 800d180:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d182:	2401      	movs	r4, #1
 800d184:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d186:	2603      	movs	r6, #3
 800d188:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d18a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d18c:	2590      	movs	r5, #144	; 0x90
 800d18e:	05ed      	lsls	r5, r5, #23
 800d190:	a907      	add	r1, sp, #28
 800d192:	0028      	movs	r0, r5
 800d194:	f003 fd70 	bl	8010c78 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d198:	2380      	movs	r3, #128	; 0x80
 800d19a:	00db      	lsls	r3, r3, #3
 800d19c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d19e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1a0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1a2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800d1a4:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d1a6:	a907      	add	r1, sp, #28
 800d1a8:	0028      	movs	r0, r5
 800d1aa:	f003 fd65 	bl	8010c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	201b      	movs	r0, #27
 800d1b4:	f002 fd96 	bl	800fce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d1b8:	201b      	movs	r0, #27
 800d1ba:	f002 fdc7 	bl	800fd4c <HAL_NVIC_EnableIRQ>
 800d1be:	e7cd      	b.n	800d15c <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800d1c0:	4a73      	ldr	r2, [pc, #460]	; (800d390 <HAL_UART_MspInit+0x268>)
 800d1c2:	69d1      	ldr	r1, [r2, #28]
 800d1c4:	2080      	movs	r0, #128	; 0x80
 800d1c6:	0280      	lsls	r0, r0, #10
 800d1c8:	4301      	orrs	r1, r0
 800d1ca:	61d1      	str	r1, [r2, #28]
 800d1cc:	69d3      	ldr	r3, [r2, #28]
 800d1ce:	4003      	ands	r3, r0
 800d1d0:	9302      	str	r3, [sp, #8]
 800d1d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1d8:	2702      	movs	r7, #2
 800d1da:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1dc:	2401      	movs	r4, #1
 800d1de:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1e0:	2603      	movs	r6, #3
 800d1e2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d1e4:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d1e6:	2590      	movs	r5, #144	; 0x90
 800d1e8:	05ed      	lsls	r5, r5, #23
 800d1ea:	a907      	add	r1, sp, #28
 800d1ec:	0028      	movs	r0, r5
 800d1ee:	f003 fd43 	bl	8010c78 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d1f2:	2308      	movs	r3, #8
 800d1f4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1f6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1f8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1fa:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800d1fc:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d1fe:	a907      	add	r1, sp, #28
 800d200:	0028      	movs	r0, r5
 800d202:	f003 fd39 	bl	8010c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d206:	2200      	movs	r2, #0
 800d208:	2101      	movs	r1, #1
 800d20a:	201c      	movs	r0, #28
 800d20c:	f002 fd6a 	bl	800fce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d210:	201c      	movs	r0, #28
 800d212:	f002 fd9b 	bl	800fd4c <HAL_NVIC_EnableIRQ>
 800d216:	e7a1      	b.n	800d15c <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800d218:	4a5d      	ldr	r2, [pc, #372]	; (800d390 <HAL_UART_MspInit+0x268>)
 800d21a:	69d1      	ldr	r1, [r2, #28]
 800d21c:	2080      	movs	r0, #128	; 0x80
 800d21e:	02c0      	lsls	r0, r0, #11
 800d220:	4301      	orrs	r1, r0
 800d222:	61d1      	str	r1, [r2, #28]
 800d224:	69d3      	ldr	r3, [r2, #28]
 800d226:	4003      	ands	r3, r0
 800d228:	9303      	str	r3, [sp, #12]
 800d22a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d22c:	2380      	movs	r3, #128	; 0x80
 800d22e:	00db      	lsls	r3, r3, #3
 800d230:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d232:	2402      	movs	r4, #2
 800d234:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d236:	2701      	movs	r7, #1
 800d238:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d23a:	2603      	movs	r6, #3
 800d23c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d23e:	2504      	movs	r5, #4
 800d240:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d242:	a907      	add	r1, sp, #28
 800d244:	4853      	ldr	r0, [pc, #332]	; (800d394 <HAL_UART_MspInit+0x26c>)
 800d246:	f003 fd17 	bl	8010c78 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d24a:	2380      	movs	r3, #128	; 0x80
 800d24c:	011b      	lsls	r3, r3, #4
 800d24e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d250:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d252:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d254:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800d256:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d258:	a907      	add	r1, sp, #28
 800d25a:	484e      	ldr	r0, [pc, #312]	; (800d394 <HAL_UART_MspInit+0x26c>)
 800d25c:	f003 fd0c 	bl	8010c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d260:	2200      	movs	r2, #0
 800d262:	2101      	movs	r1, #1
 800d264:	201d      	movs	r0, #29
 800d266:	f002 fd3d 	bl	800fce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d26a:	201d      	movs	r0, #29
 800d26c:	f002 fd6e 	bl	800fd4c <HAL_NVIC_EnableIRQ>
 800d270:	e774      	b.n	800d15c <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800d272:	4a47      	ldr	r2, [pc, #284]	; (800d390 <HAL_UART_MspInit+0x268>)
 800d274:	69d1      	ldr	r1, [r2, #28]
 800d276:	2080      	movs	r0, #128	; 0x80
 800d278:	0300      	lsls	r0, r0, #12
 800d27a:	4301      	orrs	r1, r0
 800d27c:	61d1      	str	r1, [r2, #28]
 800d27e:	69d3      	ldr	r3, [r2, #28]
 800d280:	4003      	ands	r3, r0
 800d282:	9304      	str	r3, [sp, #16]
 800d284:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800d286:	2401      	movs	r4, #1
 800d288:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d28a:	2502      	movs	r5, #2
 800d28c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d28e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d290:	2603      	movs	r6, #3
 800d292:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800d294:	2704      	movs	r7, #4
 800d296:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d298:	a907      	add	r1, sp, #28
 800d29a:	2090      	movs	r0, #144	; 0x90
 800d29c:	05c0      	lsls	r0, r0, #23
 800d29e:	f003 fceb 	bl	8010c78 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800d2a2:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2a4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2a6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2a8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800d2aa:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800d2ac:	a907      	add	r1, sp, #28
 800d2ae:	2090      	movs	r0, #144	; 0x90
 800d2b0:	05c0      	lsls	r0, r0, #23
 800d2b2:	f003 fce1 	bl	8010c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2101      	movs	r1, #1
 800d2ba:	201d      	movs	r0, #29
 800d2bc:	f002 fd12 	bl	800fce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d2c0:	201d      	movs	r0, #29
 800d2c2:	f002 fd43 	bl	800fd4c <HAL_NVIC_EnableIRQ>
 800d2c6:	e749      	b.n	800d15c <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800d2c8:	4a31      	ldr	r2, [pc, #196]	; (800d390 <HAL_UART_MspInit+0x268>)
 800d2ca:	69d1      	ldr	r1, [r2, #28]
 800d2cc:	2080      	movs	r0, #128	; 0x80
 800d2ce:	0340      	lsls	r0, r0, #13
 800d2d0:	4301      	orrs	r1, r0
 800d2d2:	61d1      	str	r1, [r2, #28]
 800d2d4:	69d3      	ldr	r3, [r2, #28]
 800d2d6:	4003      	ands	r3, r0
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d2dc:	2308      	movs	r3, #8
 800d2de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2e0:	2402      	movs	r4, #2
 800d2e2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2e4:	2701      	movs	r7, #1
 800d2e6:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2e8:	2603      	movs	r6, #3
 800d2ea:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d2ec:	2504      	movs	r5, #4
 800d2ee:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d2f0:	a907      	add	r1, sp, #28
 800d2f2:	4828      	ldr	r0, [pc, #160]	; (800d394 <HAL_UART_MspInit+0x26c>)
 800d2f4:	f003 fcc0 	bl	8010c78 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d2f8:	2310      	movs	r3, #16
 800d2fa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2fc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2fe:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d300:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800d302:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d304:	a907      	add	r1, sp, #28
 800d306:	4823      	ldr	r0, [pc, #140]	; (800d394 <HAL_UART_MspInit+0x26c>)
 800d308:	f003 fcb6 	bl	8010c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d30c:	2200      	movs	r2, #0
 800d30e:	2101      	movs	r1, #1
 800d310:	201d      	movs	r0, #29
 800d312:	f002 fce7 	bl	800fce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d316:	201d      	movs	r0, #29
 800d318:	f002 fd18 	bl	800fd4c <HAL_NVIC_EnableIRQ>
 800d31c:	e71e      	b.n	800d15c <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800d31e:	4b1c      	ldr	r3, [pc, #112]	; (800d390 <HAL_UART_MspInit+0x268>)
 800d320:	699a      	ldr	r2, [r3, #24]
 800d322:	2420      	movs	r4, #32
 800d324:	4322      	orrs	r2, r4
 800d326:	619a      	str	r2, [r3, #24]
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	4023      	ands	r3, r4
 800d32c:	9306      	str	r3, [sp, #24]
 800d32e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d330:	2310      	movs	r3, #16
 800d332:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d334:	3b0e      	subs	r3, #14
 800d336:	4699      	mov	r9, r3
 800d338:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d33a:	2501      	movs	r5, #1
 800d33c:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d33e:	2703      	movs	r7, #3
 800d340:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d342:	2605      	movs	r6, #5
 800d344:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d346:	a907      	add	r1, sp, #28
 800d348:	2090      	movs	r0, #144	; 0x90
 800d34a:	05c0      	lsls	r0, r0, #23
 800d34c:	f003 fc94 	bl	8010c78 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d350:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d352:	464b      	mov	r3, r9
 800d354:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d356:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d358:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800d35a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d35c:	a907      	add	r1, sp, #28
 800d35e:	2090      	movs	r0, #144	; 0x90
 800d360:	05c0      	lsls	r0, r0, #23
 800d362:	f003 fc89 	bl	8010c78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d366:	2200      	movs	r2, #0
 800d368:	2101      	movs	r1, #1
 800d36a:	201d      	movs	r0, #29
 800d36c:	f002 fcba 	bl	800fce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d370:	201d      	movs	r0, #29
 800d372:	f002 fceb 	bl	800fd4c <HAL_NVIC_EnableIRQ>
}
 800d376:	e6f1      	b.n	800d15c <HAL_UART_MspInit+0x34>
 800d378:	40013800 	.word	0x40013800
 800d37c:	40004400 	.word	0x40004400
 800d380:	40004800 	.word	0x40004800
 800d384:	40004c00 	.word	0x40004c00
 800d388:	40005000 	.word	0x40005000
 800d38c:	40011400 	.word	0x40011400
 800d390:	40021000 	.word	0x40021000
 800d394:	48000400 	.word	0x48000400

0800d398 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d398:	2806      	cmp	r0, #6
 800d39a:	d80d      	bhi.n	800d3b8 <GetUart+0x20>
 800d39c:	0080      	lsls	r0, r0, #2
 800d39e:	4b08      	ldr	r3, [pc, #32]	; (800d3c0 <GetUart+0x28>)
 800d3a0:	581b      	ldr	r3, [r3, r0]
 800d3a2:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800d3a4:	4807      	ldr	r0, [pc, #28]	; (800d3c4 <GetUart+0x2c>)
 800d3a6:	e00a      	b.n	800d3be <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800d3a8:	4807      	ldr	r0, [pc, #28]	; (800d3c8 <GetUart+0x30>)
 800d3aa:	e008      	b.n	800d3be <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800d3ac:	4807      	ldr	r0, [pc, #28]	; (800d3cc <GetUart+0x34>)
 800d3ae:	e006      	b.n	800d3be <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800d3b0:	4807      	ldr	r0, [pc, #28]	; (800d3d0 <GetUart+0x38>)
 800d3b2:	e004      	b.n	800d3be <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800d3b4:	4807      	ldr	r0, [pc, #28]	; (800d3d4 <GetUart+0x3c>)
 800d3b6:	e002      	b.n	800d3be <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	e000      	b.n	800d3be <GetUart+0x26>
			return P1uart;	
 800d3bc:	4806      	ldr	r0, [pc, #24]	; (800d3d8 <GetUart+0x40>)
	}		
}
 800d3be:	4770      	bx	lr
 800d3c0:	0801a464 	.word	0x0801a464
 800d3c4:	20006c34 	.word	0x20006c34
 800d3c8:	20006ae4 	.word	0x20006ae4
 800d3cc:	20006bc4 	.word	0x20006bc4
 800d3d0:	20006b54 	.word	0x20006b54
 800d3d4:	20006ca4 	.word	0x20006ca4
 800d3d8:	20006d14 	.word	0x20006d14

0800d3dc <writePxMutex>:
{
 800d3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	0005      	movs	r5, r0
 800d3e2:	9100      	str	r1, [sp, #0]
 800d3e4:	0017      	movs	r7, r2
 800d3e6:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800d3e8:	f7ff ffd6 	bl	800d398 <GetUart>
 800d3ec:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800d3ee:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d016      	beq.n	800d422 <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3f4:	00ab      	lsls	r3, r5, #2
 800d3f6:	4a0c      	ldr	r2, [pc, #48]	; (800d428 <writePxMutex+0x4c>)
 800d3f8:	5898      	ldr	r0, [r3, r2]
 800d3fa:	9901      	ldr	r1, [sp, #4]
 800d3fc:	f000 f93a 	bl	800d674 <osSemaphoreWait>
 800d400:	2800      	cmp	r0, #0
 800d402:	d10e      	bne.n	800d422 <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d404:	9b08      	ldr	r3, [sp, #32]
 800d406:	003a      	movs	r2, r7
 800d408:	9900      	ldr	r1, [sp, #0]
 800d40a:	0020      	movs	r0, r4
 800d40c:	f005 f938 	bl	8012680 <HAL_UART_Transmit>
 800d410:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d412:	d001      	beq.n	800d418 <writePxMutex+0x3c>
 800d414:	2803      	cmp	r0, #3
 800d416:	d1f5      	bne.n	800d404 <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d418:	00ad      	lsls	r5, r5, #2
 800d41a:	4b03      	ldr	r3, [pc, #12]	; (800d428 <writePxMutex+0x4c>)
 800d41c:	58e8      	ldr	r0, [r5, r3]
 800d41e:	f000 f955 	bl	800d6cc <osSemaphoreRelease>
}
 800d422:	0030      	movs	r0, r6
 800d424:	b003      	add	sp, #12
 800d426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d428:	20006a44 	.word	0x20006a44

0800d42c <writePxITMutex>:
{
 800d42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d42e:	b083      	sub	sp, #12
 800d430:	0004      	movs	r4, r0
 800d432:	9101      	str	r1, [sp, #4]
 800d434:	0017      	movs	r7, r2
 800d436:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800d438:	f7ff ffae 	bl	800d398 <GetUart>
 800d43c:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d43e:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800d440:	2800      	cmp	r0, #0
 800d442:	d008      	beq.n	800d456 <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d444:	00a4      	lsls	r4, r4, #2
 800d446:	4b09      	ldr	r3, [pc, #36]	; (800d46c <writePxITMutex+0x40>)
 800d448:	58e0      	ldr	r0, [r4, r3]
 800d44a:	0029      	movs	r1, r5
 800d44c:	f000 f912 	bl	800d674 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d450:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d452:	2800      	cmp	r0, #0
 800d454:	d002      	beq.n	800d45c <writePxITMutex+0x30>
}
 800d456:	0018      	movs	r0, r3
 800d458:	b003      	add	sp, #12
 800d45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d45c:	003a      	movs	r2, r7
 800d45e:	9901      	ldr	r1, [sp, #4]
 800d460:	0030      	movs	r0, r6
 800d462:	f004 fd77 	bl	8011f54 <HAL_UART_Transmit_IT>
 800d466:	0003      	movs	r3, r0
 800d468:	e7f5      	b.n	800d456 <writePxITMutex+0x2a>
 800d46a:	46c0      	nop			; (mov r8, r8)
 800d46c:	20006a44 	.word	0x20006a44

0800d470 <writePxDMAMutex>:
{
 800d470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d472:	b083      	sub	sp, #12
 800d474:	0004      	movs	r4, r0
 800d476:	000f      	movs	r7, r1
 800d478:	9201      	str	r2, [sp, #4]
 800d47a:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800d47c:	f7ff ff8c 	bl	800d398 <GetUart>
 800d480:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d482:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800d484:	2800      	cmp	r0, #0
 800d486:	d008      	beq.n	800d49a <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d488:	00a4      	lsls	r4, r4, #2
 800d48a:	4b0a      	ldr	r3, [pc, #40]	; (800d4b4 <writePxDMAMutex+0x44>)
 800d48c:	58e0      	ldr	r0, [r4, r3]
 800d48e:	0031      	movs	r1, r6
 800d490:	f000 f8f0 	bl	800d674 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d494:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d496:	2800      	cmp	r0, #0
 800d498:	d002      	beq.n	800d4a0 <writePxDMAMutex+0x30>
}
 800d49a:	0018      	movs	r0, r3
 800d49c:	b003      	add	sp, #12
 800d49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800d4a0:	0028      	movs	r0, r5
 800d4a2:	f7ff f94f 	bl	800c744 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d4a6:	9a01      	ldr	r2, [sp, #4]
 800d4a8:	0039      	movs	r1, r7
 800d4aa:	0028      	movs	r0, r5
 800d4ac:	f004 fdfe 	bl	80120ac <HAL_UART_Transmit_DMA>
 800d4b0:	0003      	movs	r3, r0
 800d4b2:	e7f2      	b.n	800d49a <writePxDMAMutex+0x2a>
 800d4b4:	20006a44 	.word	0x20006a44

0800d4b8 <UpdateBaudrate>:
{
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800d4bc:	f7ff ff6c 	bl	800d398 <GetUart>
	huart->Init.BaudRate = baudrate;
 800d4c0:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800d4c2:	f005 f983 	bl	80127cc <HAL_UART_Init>
}
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	bd10      	pop	{r4, pc}
	...

0800d4cc <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800d4d0:	d003      	beq.n	800d4da <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800d4d2:	2901      	cmp	r1, #1
 800d4d4:	d002      	beq.n	800d4dc <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d4d6:	2900      	cmp	r1, #0
 800d4d8:	d016      	beq.n	800d508 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d4da:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d4dc:	f7fe f8d8 	bl	800b690 <GetPort>
 800d4e0:	4b14      	ldr	r3, [pc, #80]	; (800d534 <SwapUartPins+0x68>)
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	4d14      	ldr	r5, [pc, #80]	; (800d538 <SwapUartPins+0x6c>)
 800d4e8:	005b      	lsls	r3, r3, #1
 800d4ea:	3801      	subs	r0, #1
 800d4ec:	2180      	movs	r1, #128	; 0x80
 800d4ee:	0209      	lsls	r1, r1, #8
 800d4f0:	000a      	movs	r2, r1
 800d4f2:	4102      	asrs	r2, r0
 800d4f4:	5b58      	ldrh	r0, [r3, r5]
 800d4f6:	4302      	orrs	r2, r0
 800d4f8:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d4fa:	2308      	movs	r3, #8
 800d4fc:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d4fe:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800d500:	0020      	movs	r0, r4
 800d502:	f005 f963 	bl	80127cc <HAL_UART_Init>
 800d506:	e7e8      	b.n	800d4da <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d508:	f7fe f8c2 	bl	800b690 <GetPort>
 800d50c:	4b09      	ldr	r3, [pc, #36]	; (800d534 <SwapUartPins+0x68>)
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	3b01      	subs	r3, #1
 800d512:	4d09      	ldr	r5, [pc, #36]	; (800d538 <SwapUartPins+0x6c>)
 800d514:	005b      	lsls	r3, r3, #1
 800d516:	3801      	subs	r0, #1
 800d518:	2180      	movs	r1, #128	; 0x80
 800d51a:	0209      	lsls	r1, r1, #8
 800d51c:	4101      	asrs	r1, r0
 800d51e:	5b5a      	ldrh	r2, [r3, r5]
 800d520:	438a      	bics	r2, r1
 800d522:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d524:	2308      	movs	r3, #8
 800d526:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d528:	2300      	movs	r3, #0
 800d52a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800d52c:	0020      	movs	r0, r4
 800d52e:	f005 f94d 	bl	80127cc <HAL_UART_Init>
}
 800d532:	e7d2      	b.n	800d4da <SwapUartPins+0xe>
 800d534:	20001076 	.word	0x20001076
 800d538:	20006e40 	.word	0x20006e40

0800d53c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d53c:	4816      	ldr	r0, [pc, #88]	; (800d598 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d53e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d540:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d542:	e003      	b.n	800d54c <LoopCopyDataInit>

0800d544 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d544:	4b15      	ldr	r3, [pc, #84]	; (800d59c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d546:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d548:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d54a:	3104      	adds	r1, #4

0800d54c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d54c:	4814      	ldr	r0, [pc, #80]	; (800d5a0 <LoopForever+0xc>)
  ldr r3, =_edata
 800d54e:	4b15      	ldr	r3, [pc, #84]	; (800d5a4 <LoopForever+0x10>)
  adds r2, r0, r1
 800d550:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d552:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d554:	d3f6      	bcc.n	800d544 <CopyDataInit>
  ldr r2, =_sbss
 800d556:	4a14      	ldr	r2, [pc, #80]	; (800d5a8 <LoopForever+0x14>)
  b LoopFillZerobss
 800d558:	e002      	b.n	800d560 <LoopFillZerobss>

0800d55a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d55a:	2300      	movs	r3, #0
  str  r3, [r2]
 800d55c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d55e:	3204      	adds	r2, #4

0800d560 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d560:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <LoopForever+0x18>)
  cmp r2, r3
 800d562:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d564:	d3f9      	bcc.n	800d55a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d566:	4812      	ldr	r0, [pc, #72]	; (800d5b0 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d568:	4912      	ldr	r1, [pc, #72]	; (800d5b4 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d56a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d56c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d56e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d570:	d005      	beq.n	800d57e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d572:	f000 f82b 	bl	800d5cc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d576:	f005 fa95 	bl	8012aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d57a:	f005 fa7c 	bl	8012a76 <main>

0800d57e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d57e:	480e      	ldr	r0, [pc, #56]	; (800d5b8 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d580:	490e      	ldr	r1, [pc, #56]	; (800d5bc <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d582:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d584:	480e      	ldr	r0, [pc, #56]	; (800d5c0 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d586:	490d      	ldr	r1, [pc, #52]	; (800d5bc <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d588:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d58a:	480e      	ldr	r0, [pc, #56]	; (800d5c4 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d58c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d58e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d590:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d592:	4700      	bx	r0

0800d594 <LoopForever>:


LoopForever:
    b LoopForever
 800d594:	e7fe      	b.n	800d594 <LoopForever>
 800d596:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d598:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d59c:	0801a920 	.word	0x0801a920
  ldr r0, =_sdata
 800d5a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d5a4:	20000a58 	.word	0x20000a58
  ldr r2, =_sbss
 800d5a8:	20000a58 	.word	0x20000a58
  ldr r3, = _ebss
 800d5ac:	20006ee8 	.word	0x20006ee8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d5b0:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d5b4:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d5b8:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d5bc:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d5c0:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d5c4:	1fffd800 	.word	0x1fffd800

0800d5c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d5c8:	e7fe      	b.n	800d5c8 <ADC1_COMP_IRQHandler>
	...

0800d5cc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d5cc:	4b11      	ldr	r3, [pc, #68]	; (800d614 <SystemInit+0x48>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	430a      	orrs	r2, r1
 800d5d4:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	480f      	ldr	r0, [pc, #60]	; (800d618 <SystemInit+0x4c>)
 800d5da:	4002      	ands	r2, r0
 800d5dc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	480e      	ldr	r0, [pc, #56]	; (800d61c <SystemInit+0x50>)
 800d5e2:	4002      	ands	r2, r0
 800d5e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	480d      	ldr	r0, [pc, #52]	; (800d620 <SystemInit+0x54>)
 800d5ea:	4002      	ands	r2, r0
 800d5ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d5ee:	685a      	ldr	r2, [r3, #4]
 800d5f0:	480c      	ldr	r0, [pc, #48]	; (800d624 <SystemInit+0x58>)
 800d5f2:	4002      	ands	r2, r0
 800d5f4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f8:	200f      	movs	r0, #15
 800d5fa:	4382      	bics	r2, r0
 800d5fc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d5fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d600:	4809      	ldr	r0, [pc, #36]	; (800d628 <SystemInit+0x5c>)
 800d602:	4002      	ands	r2, r0
 800d604:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d608:	438a      	bics	r2, r1
 800d60a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d60c:	2200      	movs	r2, #0
 800d60e:	609a      	str	r2, [r3, #8]

}
 800d610:	4770      	bx	lr
 800d612:	46c0      	nop			; (mov r8, r8)
 800d614:	40021000 	.word	0x40021000
 800d618:	08ffb80c 	.word	0x08ffb80c
 800d61c:	fef6ffff 	.word	0xfef6ffff
 800d620:	fffbffff 	.word	0xfffbffff
 800d624:	ffc0ffff 	.word	0xffc0ffff
 800d628:	fff0feac 	.word	0xfff0feac

0800d62c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d62c:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d62e:	f000 ff55 	bl	800e4dc <vTaskStartScheduler>
  
  return osOK;
}
 800d632:	2000      	movs	r0, #0
 800d634:	bd10      	pop	{r4, pc}

0800d636 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d636:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d638:	2800      	cmp	r0, #0
 800d63a:	d100      	bne.n	800d63e <osDelay+0x8>
 800d63c:	3001      	adds	r0, #1
 800d63e:	f001 f889 	bl	800e754 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d642:	2000      	movs	r0, #0
 800d644:	bd10      	pop	{r4, pc}

0800d646 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d646:	b510      	push	{r4, lr}
 800d648:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d64a:	2901      	cmp	r1, #1
 800d64c:	d005      	beq.n	800d65a <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d64e:	2100      	movs	r1, #0
 800d650:	f000 faf6 	bl	800dc40 <xQueueCreateCountingSemaphore>
 800d654:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d656:	0020      	movs	r0, r4
 800d658:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d65a:	2203      	movs	r2, #3
 800d65c:	2100      	movs	r1, #0
 800d65e:	f000 fac8 	bl	800dbf2 <xQueueGenericCreate>
 800d662:	1e04      	subs	r4, r0, #0
 800d664:	d0f7      	beq.n	800d656 <osSemaphoreCreate+0x10>
 800d666:	2300      	movs	r3, #0
 800d668:	2200      	movs	r2, #0
 800d66a:	2100      	movs	r1, #0
 800d66c:	f000 fafc 	bl	800dc68 <xQueueGenericSend>
 800d670:	e7f1      	b.n	800d656 <osSemaphoreCreate+0x10>
	...

0800d674 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d674:	b500      	push	{lr}
 800d676:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d678:	2300      	movs	r3, #0
 800d67a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d021      	beq.n	800d6c4 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d680:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d684:	2b00      	cmp	r3, #0
 800d686:	d010      	beq.n	800d6aa <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d688:	aa01      	add	r2, sp, #4
 800d68a:	2100      	movs	r1, #0
 800d68c:	f000 fcae 	bl	800dfec <xQueueReceiveFromISR>
 800d690:	0003      	movs	r3, r0
      return osErrorOS;
 800d692:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d694:	2b01      	cmp	r3, #1
 800d696:	d113      	bne.n	800d6c0 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d698:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800d69a:	9b01      	ldr	r3, [sp, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00f      	beq.n	800d6c0 <osSemaphoreWait+0x4c>
 800d6a0:	4b09      	ldr	r3, [pc, #36]	; (800d6c8 <osSemaphoreWait+0x54>)
 800d6a2:	2280      	movs	r2, #128	; 0x80
 800d6a4:	0552      	lsls	r2, r2, #21
 800d6a6:	601a      	str	r2, [r3, #0]
 800d6a8:	e00a      	b.n	800d6c0 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	000a      	movs	r2, r1
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	f000 fbf3 	bl	800de9a <xQueueGenericReceive>
  return osOK;
 800d6b4:	3801      	subs	r0, #1
 800d6b6:	1e43      	subs	r3, r0, #1
 800d6b8:	4198      	sbcs	r0, r3
 800d6ba:	4240      	negs	r0, r0
 800d6bc:	23ff      	movs	r3, #255	; 0xff
 800d6be:	4018      	ands	r0, r3
}
 800d6c0:	b003      	add	sp, #12
 800d6c2:	bd00      	pop	{pc}
    return osErrorParameter;
 800d6c4:	2080      	movs	r0, #128	; 0x80
 800d6c6:	e7fb      	b.n	800d6c0 <osSemaphoreWait+0x4c>
 800d6c8:	e000ed04 	.word	0xe000ed04

0800d6cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d6cc:	b500      	push	{lr}
 800d6ce:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	9301      	str	r3, [sp, #4]
 800d6d4:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00f      	beq.n	800d6fc <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d6dc:	a901      	add	r1, sp, #4
 800d6de:	f000 fba1 	bl	800de24 <xQueueGiveFromISR>
 800d6e2:	0003      	movs	r3, r0
      return osErrorOS;
 800d6e4:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d114      	bne.n	800d714 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800d6ea:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d6ec:	9b01      	ldr	r3, [sp, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d010      	beq.n	800d714 <osSemaphoreRelease+0x48>
 800d6f2:	4b09      	ldr	r3, [pc, #36]	; (800d718 <osSemaphoreRelease+0x4c>)
 800d6f4:	2280      	movs	r2, #128	; 0x80
 800d6f6:	0552      	lsls	r2, r2, #21
 800d6f8:	601a      	str	r2, [r3, #0]
 800d6fa:	e00b      	b.n	800d714 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	2200      	movs	r2, #0
 800d700:	2100      	movs	r1, #0
 800d702:	f000 fab1 	bl	800dc68 <xQueueGenericSend>
      result = osErrorOS;
 800d706:	3801      	subs	r0, #1
 800d708:	4243      	negs	r3, r0
 800d70a:	4158      	adcs	r0, r3
 800d70c:	4240      	negs	r0, r0
 800d70e:	23fe      	movs	r3, #254	; 0xfe
 800d710:	4398      	bics	r0, r3
 800d712:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800d714:	b003      	add	sp, #12
 800d716:	bd00      	pop	{pc}
 800d718:	e000ed04 	.word	0xe000ed04

0800d71c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d71c:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d71e:	f001 fa0f 	bl	800eb40 <xTaskGetSchedulerState>
 800d722:	2801      	cmp	r0, #1
 800d724:	d001      	beq.n	800d72a <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d726:	f001 fe85 	bl	800f434 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d72a:	bd10      	pop	{r4, pc}

0800d72c <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d730:	d101      	bne.n	800d736 <FreeRTOS_CLIRegisterCommand+0xa>
 800d732:	b672      	cpsid	i
 800d734:	e7fe      	b.n	800d734 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d736:	2008      	movs	r0, #8
 800d738:	f001 feb8 	bl	800f4ac <pvPortMalloc>
 800d73c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d73e:	d101      	bne.n	800d744 <FreeRTOS_CLIRegisterCommand+0x18>
 800d740:	b672      	cpsid	i
 800d742:	e7fe      	b.n	800d742 <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d744:	f001 fe30 	bl	800f3a8 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d748:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d74a:	2300      	movs	r3, #0
 800d74c:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d74e:	4b04      	ldr	r3, [pc, #16]	; (800d760 <FreeRTOS_CLIRegisterCommand+0x34>)
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d754:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d756:	f001 fe33 	bl	800f3c0 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d75a:	2001      	movs	r0, #1
 800d75c:	bd70      	pop	{r4, r5, r6, pc}
 800d75e:	46c0      	nop			; (mov r8, r8)
 800d760:	20000094 	.word	0x20000094

0800d764 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d766:	46d6      	mov	lr, sl
 800d768:	b500      	push	{lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	9001      	str	r0, [sp, #4]
 800d76e:	9102      	str	r1, [sp, #8]
 800d770:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d772:	4b37      	ldr	r3, [pc, #220]	; (800d850 <FreeRTOS_CLIProcessCommand+0xec>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00e      	beq.n	800d798 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	9a01      	ldr	r2, [sp, #4]
 800d780:	9903      	ldr	r1, [sp, #12]
 800d782:	9802      	ldr	r0, [sp, #8]
 800d784:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d786:	2800      	cmp	r0, #0
 800d788:	d102      	bne.n	800d790 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d78a:	4b31      	ldr	r3, [pc, #196]	; (800d850 <FreeRTOS_CLIProcessCommand+0xec>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d790:	b004      	add	sp, #16
 800d792:	bc04      	pop	{r2}
 800d794:	4692      	mov	sl, r2
 800d796:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d798:	4d2e      	ldr	r5, [pc, #184]	; (800d854 <FreeRTOS_CLIProcessCommand+0xf0>)
 800d79a:	4a2d      	ldr	r2, [pc, #180]	; (800d850 <FreeRTOS_CLIProcessCommand+0xec>)
 800d79c:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d79e:	3320      	adds	r3, #32
 800d7a0:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d7a2:	0017      	movs	r7, r2
 800d7a4:	e00a      	b.n	800d7bc <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d7a6:	0002      	movs	r2, r0
 800d7a8:	0021      	movs	r1, r4
 800d7aa:	9801      	ldr	r0, [sp, #4]
 800d7ac:	f005 fe44 	bl	8013438 <strncmp>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d00e      	beq.n	800d7d2 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d7b4:	686d      	ldr	r5, [r5, #4]
 800d7b6:	603d      	str	r5, [r7, #0]
 800d7b8:	2d00      	cmp	r5, #0
 800d7ba:	d012      	beq.n	800d7e2 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d7bc:	682e      	ldr	r6, [r5, #0]
 800d7be:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d7c0:	0020      	movs	r0, r4
 800d7c2:	f7f2 fca9 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d7c6:	9b01      	ldr	r3, [sp, #4]
 800d7c8:	5c1b      	ldrb	r3, [r3, r0]
 800d7ca:	4652      	mov	r2, sl
 800d7cc:	4393      	bics	r3, r2
 800d7ce:	d1f1      	bne.n	800d7b4 <FreeRTOS_CLIProcessCommand+0x50>
 800d7d0:	e7e9      	b.n	800d7a6 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d7d2:	200c      	movs	r0, #12
 800d7d4:	5630      	ldrsb	r0, [r6, r0]
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	da0a      	bge.n	800d7f0 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d7da:	4b1d      	ldr	r3, [pc, #116]	; (800d850 <FreeRTOS_CLIProcessCommand+0xec>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1cb      	bne.n	800d77a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d7e2:	9a03      	ldr	r2, [sp, #12]
 800d7e4:	491c      	ldr	r1, [pc, #112]	; (800d858 <FreeRTOS_CLIProcessCommand+0xf4>)
 800d7e6:	9802      	ldr	r0, [sp, #8]
 800d7e8:	f005 fe37 	bl	801345a <strncpy>
		xReturn = pdFALSE;
 800d7ec:	2000      	movs	r0, #0
	return xReturn;
 800d7ee:	e7cf      	b.n	800d790 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d7f0:	9a01      	ldr	r2, [sp, #4]
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	56d3      	ldrsb	r3, [r2, r3]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d027      	beq.n	800d84a <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800d7fa:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800d7fc:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d7fe:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800d800:	2501      	movs	r5, #1
 800d802:	e009      	b.n	800d818 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800d804:	2901      	cmp	r1, #1
 800d806:	d002      	beq.n	800d80e <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800d808:	3401      	adds	r4, #1
 800d80a:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d80c:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800d80e:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800d810:	2300      	movs	r3, #0
 800d812:	56d3      	ldrsb	r3, [r2, r3]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d003      	beq.n	800d820 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800d818:	2b20      	cmp	r3, #32
 800d81a:	d0f3      	beq.n	800d804 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800d81c:	0031      	movs	r1, r6
 800d81e:	e7f6      	b.n	800d80e <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d820:	2901      	cmp	r1, #1
 800d822:	d00f      	beq.n	800d844 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d824:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <FreeRTOS_CLIProcessCommand+0xec>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d0da      	beq.n	800d7e2 <FreeRTOS_CLIProcessCommand+0x7e>
 800d82c:	42a0      	cmp	r0, r4
 800d82e:	d0a4      	beq.n	800d77a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d830:	9a03      	ldr	r2, [sp, #12]
 800d832:	490a      	ldr	r1, [pc, #40]	; (800d85c <FreeRTOS_CLIProcessCommand+0xf8>)
 800d834:	9802      	ldr	r0, [sp, #8]
 800d836:	f005 fe10 	bl	801345a <strncpy>
		pxCommand = NULL;
 800d83a:	4b05      	ldr	r3, [pc, #20]	; (800d850 <FreeRTOS_CLIProcessCommand+0xec>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	601a      	str	r2, [r3, #0]
 800d840:	2000      	movs	r0, #0
 800d842:	e7a5      	b.n	800d790 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d844:	3c01      	subs	r4, #1
 800d846:	b264      	sxtb	r4, r4
 800d848:	e7ec      	b.n	800d824 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800d84a:	2400      	movs	r4, #0
 800d84c:	e7ea      	b.n	800d824 <FreeRTOS_CLIProcessCommand+0xc0>
 800d84e:	46c0      	nop			; (mov r8, r8)
 800d850:	20001d50 	.word	0x20001d50
 800d854:	20000098 	.word	0x20000098
 800d858:	0801a4d8 	.word	0x0801a4d8
 800d85c:	0801a480 	.word	0x0801a480

0800d860 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d860:	4800      	ldr	r0, [pc, #0]	; (800d864 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d862:	4770      	bx	lr
 800d864:	20001ae8 	.word	0x20001ae8

0800d868 <FreeRTOS_CLIGetParameter>:
{
 800d868:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d86e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d870:	2900      	cmp	r1, #0
 800d872:	d10b      	bne.n	800d88c <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800d874:	2000      	movs	r0, #0
 800d876:	e02a      	b.n	800d8ce <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800d878:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d87a:	2300      	movs	r3, #0
 800d87c:	56c3      	ldrsb	r3, [r0, r3]
 800d87e:	2b20      	cmp	r3, #32
 800d880:	d0fa      	beq.n	800d878 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800d882:	2b00      	cmp	r3, #0
 800d884:	d022      	beq.n	800d8cc <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800d886:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d888:	42a1      	cmp	r1, r4
 800d88a:	d00d      	beq.n	800d8a8 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d88c:	2300      	movs	r3, #0
 800d88e:	56c3      	ldrsb	r3, [r0, r3]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d01f      	beq.n	800d8d4 <FreeRTOS_CLIGetParameter+0x6c>
 800d894:	2b20      	cmp	r3, #32
 800d896:	d0ef      	beq.n	800d878 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800d898:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d89a:	2300      	movs	r3, #0
 800d89c:	56c3      	ldrsb	r3, [r0, r3]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d018      	beq.n	800d8d4 <FreeRTOS_CLIGetParameter+0x6c>
 800d8a2:	2b20      	cmp	r3, #32
 800d8a4:	d1f8      	bne.n	800d898 <FreeRTOS_CLIGetParameter+0x30>
 800d8a6:	e7e7      	b.n	800d878 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d8a8:	7803      	ldrb	r3, [r0, #0]
 800d8aa:	2120      	movs	r1, #32
 800d8ac:	438b      	bics	r3, r1
 800d8ae:	d00f      	beq.n	800d8d0 <FreeRTOS_CLIGetParameter+0x68>
 800d8b0:	0004      	movs	r4, r0
 800d8b2:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800d8b4:	6813      	ldr	r3, [r2, #0]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800d8ba:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d8bc:	7821      	ldrb	r1, [r4, #0]
 800d8be:	43a9      	bics	r1, r5
 800d8c0:	d1f8      	bne.n	800d8b4 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800d8c2:	1e5a      	subs	r2, r3, #1
 800d8c4:	4193      	sbcs	r3, r2
 800d8c6:	425b      	negs	r3, r3
 800d8c8:	4018      	ands	r0, r3
 800d8ca:	e000      	b.n	800d8ce <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800d8cc:	2000      	movs	r0, #0
}
 800d8ce:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	e7fc      	b.n	800d8ce <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	56c3      	ldrsb	r3, [r0, r3]
 800d8d8:	e7d3      	b.n	800d882 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800d8dc <prvHelpCommand>:
{
 800d8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	0004      	movs	r4, r0
 800d8e2:	000d      	movs	r5, r1
 800d8e4:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d8ea:	aa01      	add	r2, sp, #4
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	f7ff ffbb 	bl	800d868 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d027      	beq.n	800d946 <prvHelpCommand+0x6a>
 800d8f6:	2206      	movs	r2, #6
 800d8f8:	4930      	ldr	r1, [pc, #192]	; (800d9bc <prvHelpCommand+0xe0>)
 800d8fa:	f005 fd9d 	bl	8013438 <strncmp>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d149      	bne.n	800d996 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800d902:	4b2f      	ldr	r3, [pc, #188]	; (800d9c0 <prvHelpCommand+0xe4>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	2b07      	cmp	r3, #7
 800d908:	d012      	beq.n	800d930 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d90a:	1c5f      	adds	r7, r3, #1
 800d90c:	b2ff      	uxtb	r7, r7
 800d90e:	4a2c      	ldr	r2, [pc, #176]	; (800d9c0 <prvHelpCommand+0xe4>)
 800d910:	7017      	strb	r7, [r2, #0]
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4a2b      	ldr	r2, [pc, #172]	; (800d9c4 <prvHelpCommand+0xe8>)
 800d916:	5899      	ldr	r1, [r3, r2]
 800d918:	002a      	movs	r2, r5
 800d91a:	0020      	movs	r0, r4
 800d91c:	f005 fd9d 	bl	801345a <strncpy>
			xReturn = pdTRUE;
 800d920:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d922:	2f07      	cmp	r7, #7
 800d924:	d137      	bne.n	800d996 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800d926:	4b26      	ldr	r3, [pc, #152]	; (800d9c0 <prvHelpCommand+0xe4>)
 800d928:	2200      	movs	r2, #0
 800d92a:	701a      	strb	r2, [r3, #0]
 800d92c:	2600      	movs	r6, #0
 800d92e:	e032      	b.n	800d996 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d930:	4b23      	ldr	r3, [pc, #140]	; (800d9c0 <prvHelpCommand+0xe4>)
 800d932:	2201      	movs	r2, #1
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	4b23      	ldr	r3, [pc, #140]	; (800d9c4 <prvHelpCommand+0xe8>)
 800d938:	6819      	ldr	r1, [r3, #0]
 800d93a:	002a      	movs	r2, r5
 800d93c:	0020      	movs	r0, r4
 800d93e:	f005 fd8c 	bl	801345a <strncpy>
			xReturn = pdTRUE;
 800d942:	2601      	movs	r6, #1
 800d944:	e027      	b.n	800d996 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800d946:	4b20      	ldr	r3, [pc, #128]	; (800d9c8 <prvHelpCommand+0xec>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d026      	beq.n	800d99c <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800d94e:	4b1f      	ldr	r3, [pc, #124]	; (800d9cc <prvHelpCommand+0xf0>)
 800d950:	781a      	ldrb	r2, [r3, #0]
 800d952:	4b1f      	ldr	r3, [pc, #124]	; (800d9d0 <prvHelpCommand+0xf4>)
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	429a      	cmp	r2, r3
 800d958:	d927      	bls.n	800d9aa <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d95a:	002a      	movs	r2, r5
 800d95c:	3a08      	subs	r2, #8
 800d95e:	4b1a      	ldr	r3, [pc, #104]	; (800d9c8 <prvHelpCommand+0xec>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6859      	ldr	r1, [r3, #4]
 800d966:	0020      	movs	r0, r4
 800d968:	3008      	adds	r0, #8
 800d96a:	f005 fd76 	bl	801345a <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d96e:	1c60      	adds	r0, r4, #1
 800d970:	4918      	ldr	r1, [pc, #96]	; (800d9d4 <prvHelpCommand+0xf8>)
 800d972:	f005 fd59 	bl	8013428 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d976:	2328      	movs	r3, #40	; 0x28
 800d978:	7023      	strb	r3, [r4, #0]
 800d97a:	3301      	adds	r3, #1
 800d97c:	71a3      	strb	r3, [r4, #6]
 800d97e:	3b09      	subs	r3, #9
 800d980:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800d982:	4b11      	ldr	r3, [pc, #68]	; (800d9c8 <prvHelpCommand+0xec>)
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	6856      	ldr	r6, [r2, #4]
 800d988:	601e      	str	r6, [r3, #0]
		counter++;
 800d98a:	4a10      	ldr	r2, [pc, #64]	; (800d9cc <prvHelpCommand+0xf0>)
 800d98c:	7813      	ldrb	r3, [r2, #0]
 800d98e:	3301      	adds	r3, #1
 800d990:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800d992:	1e73      	subs	r3, r6, #1
 800d994:	419e      	sbcs	r6, r3
}
 800d996:	0030      	movs	r0, r6
 800d998:	b003      	add	sp, #12
 800d99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800d99c:	4b0a      	ldr	r3, [pc, #40]	; (800d9c8 <prvHelpCommand+0xec>)
 800d99e:	4a0e      	ldr	r2, [pc, #56]	; (800d9d8 <prvHelpCommand+0xfc>)
 800d9a0:	601a      	str	r2, [r3, #0]
			counter = 1;
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	; (800d9cc <prvHelpCommand+0xf0>)
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	701a      	strb	r2, [r3, #0]
 800d9a8:	e7d1      	b.n	800d94e <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d9aa:	4b07      	ldr	r3, [pc, #28]	; (800d9c8 <prvHelpCommand+0xec>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6859      	ldr	r1, [r3, #4]
 800d9b2:	002a      	movs	r2, r5
 800d9b4:	0020      	movs	r0, r4
 800d9b6:	f005 fd50 	bl	801345a <strncpy>
 800d9ba:	e7e2      	b.n	800d982 <prvHelpCommand+0xa6>
 800d9bc:	080185c0 	.word	0x080185c0
 800d9c0:	20001d58 	.word	0x20001d58
 800d9c4:	20000054 	.word	0x20000054
 800d9c8:	20001d54 	.word	0x20001d54
 800d9cc:	20001d4c 	.word	0x20001d4c
 800d9d0:	20006948 	.word	0x20006948
 800d9d4:	08017b9c 	.word	0x08017b9c
 800d9d8:	20000098 	.word	0x20000098

0800d9dc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9dc:	0003      	movs	r3, r0
 800d9de:	3308      	adds	r3, #8
 800d9e0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	4252      	negs	r2, r2
 800d9e6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9e8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d9f0:	4770      	bx	lr

0800d9f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d9f6:	4770      	bx	lr

0800d9f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d9f8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d9fa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9fc:	689a      	ldr	r2, [r3, #8]
 800d9fe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da00:	689a      	ldr	r2, [r3, #8]
 800da02:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da04:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800da06:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800da08:	6803      	ldr	r3, [r0, #0]
 800da0a:	3301      	adds	r3, #1
 800da0c:	6003      	str	r3, [r0, #0]
}
 800da0e:	4770      	bx	lr

0800da10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da10:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800da12:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da14:	0002      	movs	r2, r0
 800da16:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800da18:	1c63      	adds	r3, r4, #1
 800da1a:	d102      	bne.n	800da22 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800da1c:	6902      	ldr	r2, [r0, #16]
 800da1e:	e004      	b.n	800da2a <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da20:	001a      	movs	r2, r3
 800da22:	6853      	ldr	r3, [r2, #4]
 800da24:	681d      	ldr	r5, [r3, #0]
 800da26:	42a5      	cmp	r5, r4
 800da28:	d9fa      	bls.n	800da20 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da2a:	6853      	ldr	r3, [r2, #4]
 800da2c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da2e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da30:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800da32:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800da34:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800da36:	6803      	ldr	r3, [r0, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	6003      	str	r3, [r0, #0]
}
 800da3c:	bd30      	pop	{r4, r5, pc}

0800da3e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800da3e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da40:	6842      	ldr	r2, [r0, #4]
 800da42:	6881      	ldr	r1, [r0, #8]
 800da44:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da46:	6882      	ldr	r2, [r0, #8]
 800da48:	6841      	ldr	r1, [r0, #4]
 800da4a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	4282      	cmp	r2, r0
 800da50:	d005      	beq.n	800da5e <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800da52:	2200      	movs	r2, #0
 800da54:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	1e50      	subs	r0, r2, #1
 800da5a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800da5c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da5e:	6882      	ldr	r2, [r0, #8]
 800da60:	605a      	str	r2, [r3, #4]
 800da62:	e7f6      	b.n	800da52 <uxListRemove+0x14>

0800da64 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da64:	b570      	push	{r4, r5, r6, lr}
 800da66:	0004      	movs	r4, r0
 800da68:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800da6c:	2a00      	cmp	r2, #0
 800da6e:	d10d      	bne.n	800da8c <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800da70:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d003      	beq.n	800da80 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800da78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da7a:	3301      	adds	r3, #1
 800da7c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800da7e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800da80:	6860      	ldr	r0, [r4, #4]
 800da82:	f001 f8ab 	bl	800ebdc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800da86:	2300      	movs	r3, #0
 800da88:	6063      	str	r3, [r4, #4]
 800da8a:	e7f5      	b.n	800da78 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800da8c:	2d00      	cmp	r5, #0
 800da8e:	d10e      	bne.n	800daae <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800da90:	6880      	ldr	r0, [r0, #8]
 800da92:	f005 fa8a 	bl	8012faa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800da96:	68a3      	ldr	r3, [r4, #8]
 800da98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da9a:	4694      	mov	ip, r2
 800da9c:	4463      	add	r3, ip
 800da9e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800daa0:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800daa2:	6862      	ldr	r2, [r4, #4]
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d3e7      	bcc.n	800da78 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	60a3      	str	r3, [r4, #8]
 800daac:	e7e4      	b.n	800da78 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daae:	68c0      	ldr	r0, [r0, #12]
 800dab0:	f005 fa7b 	bl	8012faa <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dab6:	425a      	negs	r2, r3
 800dab8:	68e3      	ldr	r3, [r4, #12]
 800daba:	189b      	adds	r3, r3, r2
 800dabc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dabe:	6821      	ldr	r1, [r4, #0]
 800dac0:	428b      	cmp	r3, r1
 800dac2:	d203      	bcs.n	800dacc <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dac4:	6863      	ldr	r3, [r4, #4]
 800dac6:	469c      	mov	ip, r3
 800dac8:	4462      	add	r2, ip
 800daca:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800dacc:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800dace:	2d02      	cmp	r5, #2
 800dad0:	d1d2      	bne.n	800da78 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d0cf      	beq.n	800da78 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800dad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dada:	3b01      	subs	r3, #1
 800dadc:	63a3      	str	r3, [r4, #56]	; 0x38
 800dade:	e7cb      	b.n	800da78 <prvCopyDataToQueue+0x14>

0800dae0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dae0:	b510      	push	{r4, lr}
 800dae2:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dae4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800dae6:	2a00      	cmp	r2, #0
 800dae8:	d00b      	beq.n	800db02 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800daea:	68c3      	ldr	r3, [r0, #12]
 800daec:	189b      	adds	r3, r3, r2
 800daee:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800daf0:	6841      	ldr	r1, [r0, #4]
 800daf2:	428b      	cmp	r3, r1
 800daf4:	d301      	bcc.n	800dafa <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800daf6:	6803      	ldr	r3, [r0, #0]
 800daf8:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dafa:	68c1      	ldr	r1, [r0, #12]
 800dafc:	0020      	movs	r0, r4
 800dafe:	f005 fa54 	bl	8012faa <memcpy>
	}
}
 800db02:	bd10      	pop	{r4, pc}

0800db04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db04:	b570      	push	{r4, r5, r6, lr}
 800db06:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db08:	f001 fc4e 	bl	800f3a8 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800db0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db0e:	2b00      	cmp	r3, #0
 800db10:	dd04      	ble.n	800db1c <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db12:	0025      	movs	r5, r4
 800db14:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d11f      	bne.n	800db5c <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800db1c:	2301      	movs	r3, #1
 800db1e:	425b      	negs	r3, r3
 800db20:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800db22:	f001 fc4d 	bl	800f3c0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db26:	f001 fc3f 	bl	800f3a8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	dd04      	ble.n	800db3a <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db30:	0025      	movs	r5, r4
 800db32:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d121      	bne.n	800db7e <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800db3a:	2301      	movs	r3, #1
 800db3c:	425b      	negs	r3, r3
 800db3e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db40:	f001 fc3e 	bl	800f3c0 <vPortExitCritical>
}
 800db44:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800db46:	f000 fff5 	bl	800eb34 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800db4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db4c:	3b01      	subs	r3, #1
 800db4e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800db50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db52:	2b00      	cmp	r3, #0
 800db54:	dde2      	ble.n	800db1c <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d0df      	beq.n	800db1c <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db5c:	0028      	movs	r0, r5
 800db5e:	f000 ff67 	bl	800ea30 <xTaskRemoveFromEventList>
 800db62:	2800      	cmp	r0, #0
 800db64:	d0f1      	beq.n	800db4a <prvUnlockQueue+0x46>
 800db66:	e7ee      	b.n	800db46 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800db68:	f000 ffe4 	bl	800eb34 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800db6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db6e:	3b01      	subs	r3, #1
 800db70:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db74:	2b00      	cmp	r3, #0
 800db76:	dde0      	ble.n	800db3a <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db78:	6923      	ldr	r3, [r4, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d0dd      	beq.n	800db3a <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db7e:	0028      	movs	r0, r5
 800db80:	f000 ff56 	bl	800ea30 <xTaskRemoveFromEventList>
 800db84:	2800      	cmp	r0, #0
 800db86:	d0f1      	beq.n	800db6c <prvUnlockQueue+0x68>
 800db88:	e7ee      	b.n	800db68 <prvUnlockQueue+0x64>

0800db8a <xQueueGenericReset>:
{
 800db8a:	b570      	push	{r4, r5, r6, lr}
 800db8c:	0004      	movs	r4, r0
 800db8e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800db90:	2800      	cmp	r0, #0
 800db92:	d101      	bne.n	800db98 <xQueueGenericReset+0xe>
 800db94:	b672      	cpsid	i
 800db96:	e7fe      	b.n	800db96 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800db98:	f001 fc06 	bl	800f3a8 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800db9c:	6822      	ldr	r2, [r4, #0]
 800db9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dba0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dba2:	434b      	muls	r3, r1
 800dba4:	18d0      	adds	r0, r2, r3
 800dba6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dba8:	2000      	movs	r0, #0
 800dbaa:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dbac:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dbae:	1a5b      	subs	r3, r3, r1
 800dbb0:	18d3      	adds	r3, r2, r3
 800dbb2:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	425b      	negs	r3, r3
 800dbb8:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800dbba:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dbbc:	2d00      	cmp	r5, #0
 800dbbe:	d10f      	bne.n	800dbe0 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d103      	bne.n	800dbce <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800dbc6:	f001 fbfb 	bl	800f3c0 <vPortExitCritical>
}
 800dbca:	2001      	movs	r0, #1
 800dbcc:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dbce:	0020      	movs	r0, r4
 800dbd0:	3010      	adds	r0, #16
 800dbd2:	f000 ff2d 	bl	800ea30 <xTaskRemoveFromEventList>
 800dbd6:	2801      	cmp	r0, #1
 800dbd8:	d1f5      	bne.n	800dbc6 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800dbda:	f001 fbd9 	bl	800f390 <vPortYield>
 800dbde:	e7f2      	b.n	800dbc6 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dbe0:	0020      	movs	r0, r4
 800dbe2:	3010      	adds	r0, #16
 800dbe4:	f7ff fefa 	bl	800d9dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dbe8:	0020      	movs	r0, r4
 800dbea:	3024      	adds	r0, #36	; 0x24
 800dbec:	f7ff fef6 	bl	800d9dc <vListInitialise>
 800dbf0:	e7e9      	b.n	800dbc6 <xQueueGenericReset+0x3c>

0800dbf2 <xQueueGenericCreate>:
{
 800dbf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf4:	0005      	movs	r5, r0
 800dbf6:	000e      	movs	r6, r1
 800dbf8:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d101      	bne.n	800dc02 <xQueueGenericCreate+0x10>
 800dbfe:	b672      	cpsid	i
 800dc00:	e7fe      	b.n	800dc00 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d00c      	beq.n	800dc20 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc06:	0008      	movs	r0, r1
 800dc08:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dc0a:	3055      	adds	r0, #85	; 0x55
 800dc0c:	f001 fc4e 	bl	800f4ac <pvPortMalloc>
 800dc10:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dc12:	d101      	bne.n	800dc18 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800dc14:	b672      	cpsid	i
 800dc16:	e7fe      	b.n	800dc16 <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800dc18:	0003      	movs	r3, r0
 800dc1a:	3354      	adds	r3, #84	; 0x54
 800dc1c:	6003      	str	r3, [r0, #0]
 800dc1e:	e005      	b.n	800dc2c <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dc20:	2054      	movs	r0, #84	; 0x54
 800dc22:	f001 fc43 	bl	800f4ac <pvPortMalloc>
 800dc26:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dc28:	d0f4      	beq.n	800dc14 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc2a:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800dc2c:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dc2e:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc30:	2101      	movs	r1, #1
 800dc32:	0020      	movs	r0, r4
 800dc34:	f7ff ffa9 	bl	800db8a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800dc38:	2350      	movs	r3, #80	; 0x50
 800dc3a:	54e7      	strb	r7, [r4, r3]
}
 800dc3c:	0020      	movs	r0, r4
 800dc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc40 <xQueueCreateCountingSemaphore>:
	{
 800dc40:	b510      	push	{r4, lr}
 800dc42:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dc44:	2800      	cmp	r0, #0
 800dc46:	d101      	bne.n	800dc4c <xQueueCreateCountingSemaphore+0xc>
 800dc48:	b672      	cpsid	i
 800dc4a:	e7fe      	b.n	800dc4a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dc4c:	4288      	cmp	r0, r1
 800dc4e:	d201      	bcs.n	800dc54 <xQueueCreateCountingSemaphore+0x14>
 800dc50:	b672      	cpsid	i
 800dc52:	e7fe      	b.n	800dc52 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dc54:	2202      	movs	r2, #2
 800dc56:	2100      	movs	r1, #0
 800dc58:	f7ff ffcb 	bl	800dbf2 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d001      	beq.n	800dc64 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dc60:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dc62:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800dc64:	b672      	cpsid	i
 800dc66:	e7fe      	b.n	800dc66 <xQueueCreateCountingSemaphore+0x26>

0800dc68 <xQueueGenericSend>:
{
 800dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc6a:	46ce      	mov	lr, r9
 800dc6c:	b500      	push	{lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	0004      	movs	r4, r0
 800dc72:	9100      	str	r1, [sp, #0]
 800dc74:	9201      	str	r2, [sp, #4]
 800dc76:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d007      	beq.n	800dc8c <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc7c:	9b00      	ldr	r3, [sp, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d106      	bne.n	800dc90 <xQueueGenericSend+0x28>
 800dc82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d003      	beq.n	800dc90 <xQueueGenericSend+0x28>
 800dc88:	b672      	cpsid	i
 800dc8a:	e7fe      	b.n	800dc8a <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800dc8c:	b672      	cpsid	i
 800dc8e:	e7fe      	b.n	800dc8e <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc90:	2d02      	cmp	r5, #2
 800dc92:	d104      	bne.n	800dc9e <xQueueGenericSend+0x36>
 800dc94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d001      	beq.n	800dc9e <xQueueGenericSend+0x36>
 800dc9a:	b672      	cpsid	i
 800dc9c:	e7fe      	b.n	800dc9c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc9e:	f000 ff4f 	bl	800eb40 <xTaskGetSchedulerState>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d104      	bne.n	800dcb0 <xQueueGenericSend+0x48>
 800dca6:	9b01      	ldr	r3, [sp, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <xQueueGenericSend+0x4e>
 800dcac:	b672      	cpsid	i
 800dcae:	e7fe      	b.n	800dcae <xQueueGenericSend+0x46>
 800dcb0:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800dcb2:	2700      	movs	r7, #0
 800dcb4:	e02f      	b.n	800dd16 <xQueueGenericSend+0xae>
 800dcb6:	2600      	movs	r6, #0
 800dcb8:	e7fb      	b.n	800dcb2 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcba:	002a      	movs	r2, r5
 800dcbc:	9900      	ldr	r1, [sp, #0]
 800dcbe:	0020      	movs	r0, r4
 800dcc0:	f7ff fed0 	bl	800da64 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d104      	bne.n	800dcd4 <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d00a      	beq.n	800dce4 <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800dcce:	f001 fb5f 	bl	800f390 <vPortYield>
 800dcd2:	e007      	b.n	800dce4 <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800dcd4:	0020      	movs	r0, r4
 800dcd6:	3024      	adds	r0, #36	; 0x24
 800dcd8:	f000 feaa 	bl	800ea30 <xTaskRemoveFromEventList>
 800dcdc:	2801      	cmp	r0, #1
 800dcde:	d101      	bne.n	800dce4 <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800dce0:	f001 fb56 	bl	800f390 <vPortYield>
				taskEXIT_CRITICAL();
 800dce4:	f001 fb6c 	bl	800f3c0 <vPortExitCritical>
				return pdPASS;
 800dce8:	2001      	movs	r0, #1
}
 800dcea:	b004      	add	sp, #16
 800dcec:	bc04      	pop	{r2}
 800dcee:	4691      	mov	r9, r2
 800dcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800dcf2:	f001 fb65 	bl	800f3c0 <vPortExitCritical>
					return errQUEUE_FULL;
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	e7f7      	b.n	800dcea <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800dcfa:	a802      	add	r0, sp, #8
 800dcfc:	f000 fed8 	bl	800eab0 <vTaskSetTimeOutState>
 800dd00:	e016      	b.n	800dd30 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800dd02:	6467      	str	r7, [r4, #68]	; 0x44
 800dd04:	e01d      	b.n	800dd42 <xQueueGenericSend+0xda>
 800dd06:	64a7      	str	r7, [r4, #72]	; 0x48
 800dd08:	e01e      	b.n	800dd48 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800dd0a:	0020      	movs	r0, r4
 800dd0c:	f7ff fefa 	bl	800db04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd10:	f000 fcb0 	bl	800e674 <xTaskResumeAll>
 800dd14:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dd16:	f001 fb47 	bl	800f3a8 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d3cb      	bcc.n	800dcba <xQueueGenericSend+0x52>
 800dd22:	2d02      	cmp	r5, #2
 800dd24:	d0c9      	beq.n	800dcba <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd26:	9b01      	ldr	r3, [sp, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d0e2      	beq.n	800dcf2 <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800dd2c:	2e00      	cmp	r6, #0
 800dd2e:	d0e4      	beq.n	800dcfa <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800dd30:	f001 fb46 	bl	800f3c0 <vPortExitCritical>
		vTaskSuspendAll();
 800dd34:	f000 fbfe 	bl	800e534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd38:	f001 fb36 	bl	800f3a8 <vPortEnterCritical>
 800dd3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dd3e:	3301      	adds	r3, #1
 800dd40:	d0df      	beq.n	800dd02 <xQueueGenericSend+0x9a>
 800dd42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd44:	3301      	adds	r3, #1
 800dd46:	d0de      	beq.n	800dd06 <xQueueGenericSend+0x9e>
 800dd48:	f001 fb3a 	bl	800f3c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd4c:	a901      	add	r1, sp, #4
 800dd4e:	a802      	add	r0, sp, #8
 800dd50:	f000 febe 	bl	800ead0 <xTaskCheckForTimeOut>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d117      	bne.n	800dd88 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd58:	f001 fb26 	bl	800f3a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd5e:	4699      	mov	r9, r3
 800dd60:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dd62:	f001 fb2d 	bl	800f3c0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dd66:	45b1      	cmp	r9, r6
 800dd68:	d1cf      	bne.n	800dd0a <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd6a:	0020      	movs	r0, r4
 800dd6c:	3010      	adds	r0, #16
 800dd6e:	9901      	ldr	r1, [sp, #4]
 800dd70:	f000 fe20 	bl	800e9b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd74:	0020      	movs	r0, r4
 800dd76:	f7ff fec5 	bl	800db04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd7a:	f000 fc7b 	bl	800e674 <xTaskResumeAll>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d1c8      	bne.n	800dd14 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800dd82:	f001 fb05 	bl	800f390 <vPortYield>
 800dd86:	e7c5      	b.n	800dd14 <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800dd88:	0020      	movs	r0, r4
 800dd8a:	f7ff febb 	bl	800db04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd8e:	f000 fc71 	bl	800e674 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dd92:	2000      	movs	r0, #0
 800dd94:	e7a9      	b.n	800dcea <xQueueGenericSend+0x82>

0800dd96 <xQueueGenericSendFromISR>:
{
 800dd96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd98:	b083      	sub	sp, #12
 800dd9a:	0004      	movs	r4, r0
 800dd9c:	000d      	movs	r5, r1
 800dd9e:	0016      	movs	r6, r2
 800dda0:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800dda2:	2800      	cmp	r0, #0
 800dda4:	d006      	beq.n	800ddb4 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dda6:	2900      	cmp	r1, #0
 800dda8:	d106      	bne.n	800ddb8 <xQueueGenericSendFromISR+0x22>
 800ddaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d003      	beq.n	800ddb8 <xQueueGenericSendFromISR+0x22>
 800ddb0:	b672      	cpsid	i
 800ddb2:	e7fe      	b.n	800ddb2 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800ddb4:	b672      	cpsid	i
 800ddb6:	e7fe      	b.n	800ddb6 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ddb8:	2f02      	cmp	r7, #2
 800ddba:	d12a      	bne.n	800de12 <xQueueGenericSendFromISR+0x7c>
 800ddbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d011      	beq.n	800dde6 <xQueueGenericSendFromISR+0x50>
 800ddc2:	b672      	cpsid	i
 800ddc4:	e7fe      	b.n	800ddc4 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800ddc6:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d01b      	beq.n	800de06 <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddce:	0020      	movs	r0, r4
 800ddd0:	3024      	adds	r0, #36	; 0x24
 800ddd2:	f000 fe2d 	bl	800ea30 <xTaskRemoveFromEventList>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d015      	beq.n	800de06 <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800ddda:	2e00      	cmp	r6, #0
 800dddc:	d001      	beq.n	800dde2 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ddde:	6035      	str	r5, [r6, #0]
 800dde0:	e011      	b.n	800de06 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800dde2:	2501      	movs	r5, #1
 800dde4:	e00f      	b.n	800de06 <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dde6:	f001 fafb 	bl	800f3e0 <ulSetInterruptMaskFromISR>
 800ddea:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ddee:	003a      	movs	r2, r7
 800ddf0:	0029      	movs	r1, r5
 800ddf2:	0020      	movs	r0, r4
 800ddf4:	f7ff fe36 	bl	800da64 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ddf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	d0e3      	beq.n	800ddc6 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800ddfe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de00:	3301      	adds	r3, #1
 800de02:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800de04:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800de06:	9801      	ldr	r0, [sp, #4]
 800de08:	f001 faef 	bl	800f3ea <vClearInterruptMaskFromISR>
}
 800de0c:	0028      	movs	r0, r5
 800de0e:	b003      	add	sp, #12
 800de10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de12:	f001 fae5 	bl	800f3e0 <ulSetInterruptMaskFromISR>
 800de16:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d3e6      	bcc.n	800ddee <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800de20:	2500      	movs	r5, #0
 800de22:	e7f0      	b.n	800de06 <xQueueGenericSendFromISR+0x70>

0800de24 <xQueueGiveFromISR>:
{
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	0004      	movs	r4, r0
 800de28:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d004      	beq.n	800de38 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800de2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800de30:	2b00      	cmp	r3, #0
 800de32:	d003      	beq.n	800de3c <xQueueGiveFromISR+0x18>
 800de34:	b672      	cpsid	i
 800de36:	e7fe      	b.n	800de36 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800de38:	b672      	cpsid	i
 800de3a:	e7fe      	b.n	800de3a <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800de3c:	6803      	ldr	r3, [r0, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d01f      	beq.n	800de82 <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de42:	f001 facd 	bl	800f3e0 <ulSetInterruptMaskFromISR>
 800de46:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800de48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800de4a:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800de4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de4e:	4293      	cmp	r3, r2
 800de50:	d212      	bcs.n	800de78 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800de52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de54:	3301      	adds	r3, #1
 800de56:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800de58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de5a:	3301      	adds	r3, #1
 800de5c:	d116      	bne.n	800de8c <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800de5e:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de62:	2b00      	cmp	r3, #0
 800de64:	d008      	beq.n	800de78 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de66:	0020      	movs	r0, r4
 800de68:	3024      	adds	r0, #36	; 0x24
 800de6a:	f000 fde1 	bl	800ea30 <xTaskRemoveFromEventList>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d002      	beq.n	800de78 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800de72:	2f00      	cmp	r7, #0
 800de74:	d00f      	beq.n	800de96 <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de76:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800de78:	0030      	movs	r0, r6
 800de7a:	f001 fab6 	bl	800f3ea <vClearInterruptMaskFromISR>
}
 800de7e:	0028      	movs	r0, r5
 800de80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800de82:	6843      	ldr	r3, [r0, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d0dc      	beq.n	800de42 <xQueueGiveFromISR+0x1e>
 800de88:	b672      	cpsid	i
 800de8a:	e7fe      	b.n	800de8a <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800de8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de8e:	3301      	adds	r3, #1
 800de90:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800de92:	2501      	movs	r5, #1
 800de94:	e7f0      	b.n	800de78 <xQueueGiveFromISR+0x54>
 800de96:	2501      	movs	r5, #1
 800de98:	e7ee      	b.n	800de78 <xQueueGiveFromISR+0x54>

0800de9a <xQueueGenericReceive>:
{
 800de9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de9c:	46c6      	mov	lr, r8
 800de9e:	b500      	push	{lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	0004      	movs	r4, r0
 800dea4:	000e      	movs	r6, r1
 800dea6:	9201      	str	r2, [sp, #4]
 800dea8:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800deaa:	2800      	cmp	r0, #0
 800deac:	d006      	beq.n	800debc <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deae:	2900      	cmp	r1, #0
 800deb0:	d106      	bne.n	800dec0 <xQueueGenericReceive+0x26>
 800deb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d003      	beq.n	800dec0 <xQueueGenericReceive+0x26>
 800deb8:	b672      	cpsid	i
 800deba:	e7fe      	b.n	800deba <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800debc:	b672      	cpsid	i
 800debe:	e7fe      	b.n	800debe <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dec0:	f000 fe3e 	bl	800eb40 <xTaskGetSchedulerState>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d104      	bne.n	800ded2 <xQueueGenericReceive+0x38>
 800dec8:	9b01      	ldr	r3, [sp, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d004      	beq.n	800ded8 <xQueueGenericReceive+0x3e>
 800dece:	b672      	cpsid	i
 800ded0:	e7fe      	b.n	800ded0 <xQueueGenericReceive+0x36>
 800ded2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ded4:	2700      	movs	r7, #0
 800ded6:	e04b      	b.n	800df70 <xQueueGenericReceive+0xd6>
 800ded8:	2500      	movs	r5, #0
 800deda:	e7fb      	b.n	800ded4 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800dedc:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dede:	0031      	movs	r1, r6
 800dee0:	0020      	movs	r0, r4
 800dee2:	f7ff fdfd 	bl	800dae0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800dee6:	4643      	mov	r3, r8
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d11a      	bne.n	800df22 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800deec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800deee:	3b01      	subs	r3, #1
 800def0:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d102      	bne.n	800defe <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800def8:	f000 ff62 	bl	800edc0 <pvTaskIncrementMutexHeldCount>
 800defc:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800defe:	6923      	ldr	r3, [r4, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d007      	beq.n	800df14 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800df04:	0020      	movs	r0, r4
 800df06:	3010      	adds	r0, #16
 800df08:	f000 fd92 	bl	800ea30 <xTaskRemoveFromEventList>
 800df0c:	2801      	cmp	r0, #1
 800df0e:	d101      	bne.n	800df14 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800df10:	f001 fa3e 	bl	800f390 <vPortYield>
				taskEXIT_CRITICAL();
 800df14:	f001 fa54 	bl	800f3c0 <vPortExitCritical>
				return pdPASS;
 800df18:	2001      	movs	r0, #1
}
 800df1a:	b004      	add	sp, #16
 800df1c:	bc04      	pop	{r2}
 800df1e:	4690      	mov	r8, r2
 800df20:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800df22:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0f4      	beq.n	800df14 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df2a:	0020      	movs	r0, r4
 800df2c:	3024      	adds	r0, #36	; 0x24
 800df2e:	f000 fd7f 	bl	800ea30 <xTaskRemoveFromEventList>
 800df32:	2800      	cmp	r0, #0
 800df34:	d0ee      	beq.n	800df14 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800df36:	f001 fa2b 	bl	800f390 <vPortYield>
 800df3a:	e7eb      	b.n	800df14 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800df3c:	f001 fa40 	bl	800f3c0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800df40:	2000      	movs	r0, #0
 800df42:	e7ea      	b.n	800df1a <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800df44:	a802      	add	r0, sp, #8
 800df46:	f000 fdb3 	bl	800eab0 <vTaskSetTimeOutState>
 800df4a:	e01b      	b.n	800df84 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800df4c:	6467      	str	r7, [r4, #68]	; 0x44
 800df4e:	e022      	b.n	800df96 <xQueueGenericReceive+0xfc>
 800df50:	64a7      	str	r7, [r4, #72]	; 0x48
 800df52:	e023      	b.n	800df9c <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800df54:	f001 fa28 	bl	800f3a8 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800df58:	6860      	ldr	r0, [r4, #4]
 800df5a:	f000 fe01 	bl	800eb60 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800df5e:	f001 fa2f 	bl	800f3c0 <vPortExitCritical>
 800df62:	e02d      	b.n	800dfc0 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800df64:	0020      	movs	r0, r4
 800df66:	f7ff fdcd 	bl	800db04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df6a:	f000 fb83 	bl	800e674 <xTaskResumeAll>
 800df6e:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800df70:	f001 fa1a 	bl	800f3a8 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1b0      	bne.n	800dedc <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df7a:	9b01      	ldr	r3, [sp, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d0dd      	beq.n	800df3c <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800df80:	2d00      	cmp	r5, #0
 800df82:	d0df      	beq.n	800df44 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800df84:	f001 fa1c 	bl	800f3c0 <vPortExitCritical>
		vTaskSuspendAll();
 800df88:	f000 fad4 	bl	800e534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df8c:	f001 fa0c 	bl	800f3a8 <vPortEnterCritical>
 800df90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df92:	3301      	adds	r3, #1
 800df94:	d0da      	beq.n	800df4c <xQueueGenericReceive+0xb2>
 800df96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df98:	3301      	adds	r3, #1
 800df9a:	d0d9      	beq.n	800df50 <xQueueGenericReceive+0xb6>
 800df9c:	f001 fa10 	bl	800f3c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfa0:	a901      	add	r1, sp, #4
 800dfa2:	a802      	add	r0, sp, #8
 800dfa4:	f000 fd94 	bl	800ead0 <xTaskCheckForTimeOut>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d118      	bne.n	800dfde <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800dfac:	f001 f9fc 	bl	800f3a8 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dfb0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800dfb2:	f001 fa05 	bl	800f3c0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfb6:	2d00      	cmp	r5, #0
 800dfb8:	d1d4      	bne.n	800df64 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d0c9      	beq.n	800df54 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfc0:	0020      	movs	r0, r4
 800dfc2:	3024      	adds	r0, #36	; 0x24
 800dfc4:	9901      	ldr	r1, [sp, #4]
 800dfc6:	f000 fcf5 	bl	800e9b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfca:	0020      	movs	r0, r4
 800dfcc:	f7ff fd9a 	bl	800db04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfd0:	f000 fb50 	bl	800e674 <xTaskResumeAll>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d1ca      	bne.n	800df6e <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800dfd8:	f001 f9da 	bl	800f390 <vPortYield>
 800dfdc:	e7c7      	b.n	800df6e <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800dfde:	0020      	movs	r0, r4
 800dfe0:	f7ff fd90 	bl	800db04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfe4:	f000 fb46 	bl	800e674 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800dfe8:	2000      	movs	r0, #0
 800dfea:	e796      	b.n	800df1a <xQueueGenericReceive+0x80>

0800dfec <xQueueReceiveFromISR>:
{
 800dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfee:	b083      	sub	sp, #12
 800dff0:	0004      	movs	r4, r0
 800dff2:	000f      	movs	r7, r1
 800dff4:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d006      	beq.n	800e008 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dffa:	2900      	cmp	r1, #0
 800dffc:	d106      	bne.n	800e00c <xQueueReceiveFromISR+0x20>
 800dffe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e000:	2b00      	cmp	r3, #0
 800e002:	d003      	beq.n	800e00c <xQueueReceiveFromISR+0x20>
 800e004:	b672      	cpsid	i
 800e006:	e7fe      	b.n	800e006 <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800e008:	b672      	cpsid	i
 800e00a:	e7fe      	b.n	800e00a <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e00c:	f001 f9e8 	bl	800f3e0 <ulSetInterruptMaskFromISR>
 800e010:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e012:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800e014:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e016:	2b00      	cmp	r3, #0
 800e018:	d01b      	beq.n	800e052 <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e01a:	0039      	movs	r1, r7
 800e01c:	0020      	movs	r0, r4
 800e01e:	f7ff fd5f 	bl	800dae0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e024:	3b01      	subs	r3, #1
 800e026:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e028:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e02a:	3301      	adds	r3, #1
 800e02c:	d004      	beq.n	800e038 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800e02e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e030:	3301      	adds	r3, #1
 800e032:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e034:	2501      	movs	r5, #1
 800e036:	e00c      	b.n	800e052 <xQueueReceiveFromISR+0x66>
 800e038:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d008      	beq.n	800e052 <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e040:	0020      	movs	r0, r4
 800e042:	3010      	adds	r0, #16
 800e044:	f000 fcf4 	bl	800ea30 <xTaskRemoveFromEventList>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d002      	beq.n	800e052 <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800e04c:	2e00      	cmp	r6, #0
 800e04e:	d006      	beq.n	800e05e <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e050:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e052:	9801      	ldr	r0, [sp, #4]
 800e054:	f001 f9c9 	bl	800f3ea <vClearInterruptMaskFromISR>
}
 800e058:	0028      	movs	r0, r5
 800e05a:	b003      	add	sp, #12
 800e05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800e05e:	2501      	movs	r5, #1
 800e060:	e7f7      	b.n	800e052 <xQueueReceiveFromISR+0x66>
	...

0800e064 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e064:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e066:	4b0a      	ldr	r3, [pc, #40]	; (800e090 <vQueueAddToRegistry+0x2c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d009      	beq.n	800e082 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e06e:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e070:	4c07      	ldr	r4, [pc, #28]	; (800e090 <vQueueAddToRegistry+0x2c>)
 800e072:	00da      	lsls	r2, r3, #3
 800e074:	58a2      	ldr	r2, [r4, r2]
 800e076:	2a00      	cmp	r2, #0
 800e078:	d004      	beq.n	800e084 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e07a:	3301      	adds	r3, #1
 800e07c:	2b08      	cmp	r3, #8
 800e07e:	d1f8      	bne.n	800e072 <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e080:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e082:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e084:	4a02      	ldr	r2, [pc, #8]	; (800e090 <vQueueAddToRegistry+0x2c>)
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e08a:	18d3      	adds	r3, r2, r3
 800e08c:	6058      	str	r0, [r3, #4]
				break;
 800e08e:	e7f7      	b.n	800e080 <vQueueAddToRegistry+0x1c>
 800e090:	20006e74 	.word	0x20006e74

0800e094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e094:	b570      	push	{r4, r5, r6, lr}
 800e096:	0004      	movs	r4, r0
 800e098:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e09a:	f001 f985 	bl	800f3a8 <vPortEnterCritical>
 800e09e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	d00b      	beq.n	800e0bc <vQueueWaitForMessageRestricted+0x28>
 800e0a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	d00b      	beq.n	800e0c2 <vQueueWaitForMessageRestricted+0x2e>
 800e0aa:	f001 f989 	bl	800f3c0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e0ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d009      	beq.n	800e0c8 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e0b4:	0020      	movs	r0, r4
 800e0b6:	f7ff fd25 	bl	800db04 <prvUnlockQueue>
	}
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800e0bc:	2300      	movs	r3, #0
 800e0be:	6463      	str	r3, [r4, #68]	; 0x44
 800e0c0:	e7f0      	b.n	800e0a4 <vQueueWaitForMessageRestricted+0x10>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e0c6:	e7f0      	b.n	800e0aa <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0c8:	0020      	movs	r0, r4
 800e0ca:	3024      	adds	r0, #36	; 0x24
 800e0cc:	0029      	movs	r1, r5
 800e0ce:	f000 fc95 	bl	800e9fc <vTaskPlaceOnEventListRestricted>
 800e0d2:	e7ef      	b.n	800e0b4 <vQueueWaitForMessageRestricted+0x20>

0800e0d4 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0d6:	46d6      	mov	lr, sl
 800e0d8:	464f      	mov	r7, r9
 800e0da:	4646      	mov	r6, r8
 800e0dc:	b5c0      	push	{r6, r7, lr}
 800e0de:	0006      	movs	r6, r0
 800e0e0:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e0e2:	6808      	ldr	r0, [r1, #0]
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d044      	beq.n	800e172 <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e0e8:	684b      	ldr	r3, [r1, #4]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	604b      	str	r3, [r1, #4]
 800e0ee:	2208      	movs	r2, #8
 800e0f0:	4690      	mov	r8, r2
 800e0f2:	4488      	add	r8, r1
 800e0f4:	4543      	cmp	r3, r8
 800e0f6:	d006      	beq.n	800e106 <prvListTaskWithinSingleList+0x32>
 800e0f8:	684b      	ldr	r3, [r1, #4]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800e0fe:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e100:	2302      	movs	r3, #2
 800e102:	469a      	mov	sl, r3
 800e104:	e018      	b.n	800e138 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e106:	68cb      	ldr	r3, [r1, #12]
 800e108:	604b      	str	r3, [r1, #4]
 800e10a:	e7f5      	b.n	800e0f8 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e10c:	68cb      	ldr	r3, [r1, #12]
 800e10e:	604b      	str	r3, [r1, #4]
 800e110:	e017      	b.n	800e142 <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e112:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e114:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e116:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e118:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e11a:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e11c:	783b      	ldrb	r3, [r7, #0]
 800e11e:	2ba5      	cmp	r3, #165	; 0xa5
 800e120:	d125      	bne.n	800e16e <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800e122:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e124:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e126:	5cfc      	ldrb	r4, [r7, r3]
 800e128:	2ca5      	cmp	r4, #165	; 0xa5
 800e12a:	d0fb      	beq.n	800e124 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e12c:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e12e:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800e130:	3001      	adds	r0, #1
 800e132:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800e134:	45a9      	cmp	r9, r5
 800e136:	d01c      	beq.n	800e172 <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e138:	684b      	ldr	r3, [r1, #4]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	604b      	str	r3, [r1, #4]
 800e13e:	4598      	cmp	r8, r3
 800e140:	d0e4      	beq.n	800e10c <prvListTaskWithinSingleList+0x38>
 800e142:	684b      	ldr	r3, [r1, #4]
 800e144:	68dd      	ldr	r5, [r3, #12]
 800e146:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e148:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e14a:	002b      	movs	r3, r5
 800e14c:	3334      	adds	r3, #52	; 0x34
 800e14e:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e150:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e152:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e154:	4663      	mov	r3, ip
 800e156:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e158:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e15a:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800e15c:	4663      	mov	r3, ip
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d1d7      	bne.n	800e112 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e162:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e164:	2b00      	cmp	r3, #0
 800e166:	d0d4      	beq.n	800e112 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e168:	4653      	mov	r3, sl
 800e16a:	7333      	strb	r3, [r6, #12]
 800e16c:	e7d1      	b.n	800e112 <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800e16e:	2300      	movs	r3, #0
 800e170:	e7dc      	b.n	800e12c <prvListTaskWithinSingleList+0x58>
	}
 800e172:	bc1c      	pop	{r2, r3, r4}
 800e174:	4690      	mov	r8, r2
 800e176:	4699      	mov	r9, r3
 800e178:	46a2      	mov	sl, r4
 800e17a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e17c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e17c:	4b08      	ldr	r3, [pc, #32]	; (800e1a0 <prvResetNextTaskUnblockTime+0x24>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d007      	beq.n	800e196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e186:	4b06      	ldr	r3, [pc, #24]	; (800e1a0 <prvResetNextTaskUnblockTime+0x24>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	685a      	ldr	r2, [r3, #4]
 800e190:	4b04      	ldr	r3, [pc, #16]	; (800e1a4 <prvResetNextTaskUnblockTime+0x28>)
 800e192:	601a      	str	r2, [r3, #0]
	}
}
 800e194:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e196:	4b03      	ldr	r3, [pc, #12]	; (800e1a4 <prvResetNextTaskUnblockTime+0x28>)
 800e198:	2201      	movs	r2, #1
 800e19a:	4252      	negs	r2, r2
 800e19c:	601a      	str	r2, [r3, #0]
 800e19e:	e7f9      	b.n	800e194 <prvResetNextTaskUnblockTime+0x18>
 800e1a0:	20001d60 	.word	0x20001d60
 800e1a4:	200000a0 	.word	0x200000a0

0800e1a8 <prvAddCurrentTaskToDelayedList>:
{
 800e1a8:	b510      	push	{r4, lr}
 800e1aa:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e1ac:	4b0e      	ldr	r3, [pc, #56]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800e1b2:	4b0e      	ldr	r3, [pc, #56]	; (800e1ec <prvAddCurrentTaskToDelayedList+0x44>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	4283      	cmp	r3, r0
 800e1b8:	d80d      	bhi.n	800e1d6 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e1ba:	4b0d      	ldr	r3, [pc, #52]	; (800e1f0 <prvAddCurrentTaskToDelayedList+0x48>)
 800e1bc:	6818      	ldr	r0, [r3, #0]
 800e1be:	4b0a      	ldr	r3, [pc, #40]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800e1c0:	6819      	ldr	r1, [r3, #0]
 800e1c2:	3104      	adds	r1, #4
 800e1c4:	f7ff fc24 	bl	800da10 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e1c8:	4b0a      	ldr	r3, [pc, #40]	; (800e1f4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	42a3      	cmp	r3, r4
 800e1ce:	d909      	bls.n	800e1e4 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800e1d0:	4b08      	ldr	r3, [pc, #32]	; (800e1f4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e1d2:	601c      	str	r4, [r3, #0]
}
 800e1d4:	e006      	b.n	800e1e4 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e1d6:	4b08      	ldr	r3, [pc, #32]	; (800e1f8 <prvAddCurrentTaskToDelayedList+0x50>)
 800e1d8:	6818      	ldr	r0, [r3, #0]
 800e1da:	4b03      	ldr	r3, [pc, #12]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800e1dc:	6819      	ldr	r1, [r3, #0]
 800e1de:	3104      	adds	r1, #4
 800e1e0:	f7ff fc16 	bl	800da10 <vListInsert>
}
 800e1e4:	bd10      	pop	{r4, pc}
 800e1e6:	46c0      	nop			; (mov r8, r8)
 800e1e8:	20001d5c 	.word	0x20001d5c
 800e1ec:	20001e7c 	.word	0x20001e7c
 800e1f0:	20001d60 	.word	0x20001d60
 800e1f4:	200000a0 	.word	0x200000a0
 800e1f8:	20001d64 	.word	0x20001d64

0800e1fc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e200:	f005 f912 	bl	8013428 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e204:	0020      	movs	r0, r4
 800e206:	f7f1 ff87 	bl	8000118 <strlen>
 800e20a:	0003      	movs	r3, r0
 800e20c:	280b      	cmp	r0, #11
 800e20e:	dc08      	bgt.n	800e222 <prvWriteNameToBuffer+0x26>
 800e210:	1820      	adds	r0, r4, r0
 800e212:	0022      	movs	r2, r4
 800e214:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800e216:	2320      	movs	r3, #32
 800e218:	7003      	strb	r3, [r0, #0]
 800e21a:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e21c:	4290      	cmp	r0, r2
 800e21e:	d1fb      	bne.n	800e218 <prvWriteNameToBuffer+0x1c>
 800e220:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e222:	18e0      	adds	r0, r4, r3
 800e224:	2300      	movs	r3, #0
 800e226:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e228:	bd10      	pop	{r4, pc}
	...

0800e22c <xTaskGenericCreate>:
{
 800e22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e22e:	46d6      	mov	lr, sl
 800e230:	4647      	mov	r7, r8
 800e232:	b580      	push	{r7, lr}
 800e234:	b085      	sub	sp, #20
 800e236:	9002      	str	r0, [sp, #8]
 800e238:	000d      	movs	r5, r1
 800e23a:	0016      	movs	r6, r2
 800e23c:	9303      	str	r3, [sp, #12]
 800e23e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800e240:	2800      	cmp	r0, #0
 800e242:	d101      	bne.n	800e248 <xTaskGenericCreate+0x1c>
 800e244:	b672      	cpsid	i
 800e246:	e7fe      	b.n	800e246 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e248:	2f06      	cmp	r7, #6
 800e24a:	d901      	bls.n	800e250 <xTaskGenericCreate+0x24>
 800e24c:	b672      	cpsid	i
 800e24e:	e7fe      	b.n	800e24e <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e252:	2b00      	cmp	r3, #0
 800e254:	d106      	bne.n	800e264 <xTaskGenericCreate+0x38>
 800e256:	0090      	lsls	r0, r2, #2
 800e258:	f001 f928 	bl	800f4ac <pvPortMalloc>
 800e25c:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800e25e:	2800      	cmp	r0, #0
 800e260:	d100      	bne.n	800e264 <xTaskGenericCreate+0x38>
 800e262:	e0b7      	b.n	800e3d4 <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e264:	2060      	movs	r0, #96	; 0x60
 800e266:	f001 f921 	bl	800f4ac <pvPortMalloc>
 800e26a:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800e26c:	d100      	bne.n	800e270 <xTaskGenericCreate+0x44>
 800e26e:	e08b      	b.n	800e388 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800e270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e272:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e274:	00b2      	lsls	r2, r6, #2
 800e276:	21a5      	movs	r1, #165	; 0xa5
 800e278:	0018      	movs	r0, r3
 800e27a:	f004 fe9f 	bl	8012fbc <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e27e:	4b57      	ldr	r3, [pc, #348]	; (800e3dc <xTaskGenericCreate+0x1b0>)
 800e280:	18f3      	adds	r3, r6, r3
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e286:	4694      	mov	ip, r2
 800e288:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e28a:	2207      	movs	r2, #7
 800e28c:	4393      	bics	r3, r2
 800e28e:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e290:	782a      	ldrb	r2, [r5, #0]
 800e292:	2334      	movs	r3, #52	; 0x34
 800e294:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800e296:	782b      	ldrb	r3, [r5, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d000      	beq.n	800e29e <xTaskGenericCreate+0x72>
 800e29c:	e07e      	b.n	800e39c <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e29e:	2500      	movs	r5, #0
 800e2a0:	2340      	movs	r3, #64	; 0x40
 800e2a2:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800e2a4:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e2a6:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e2a8:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e2aa:	1d23      	adds	r3, r4, #4
 800e2ac:	9301      	str	r3, [sp, #4]
 800e2ae:	0018      	movs	r0, r3
 800e2b0:	f7ff fb9f 	bl	800d9f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e2b4:	0020      	movs	r0, r4
 800e2b6:	3018      	adds	r0, #24
 800e2b8:	f7ff fb9b 	bl	800d9f2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e2bc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2be:	2307      	movs	r3, #7
 800e2c0:	1bdb      	subs	r3, r3, r7
 800e2c2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e2c4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e2c6:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e2c8:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e2ca:	235c      	movs	r3, #92	; 0x5c
 800e2cc:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e2ce:	9a03      	ldr	r2, [sp, #12]
 800e2d0:	9902      	ldr	r1, [sp, #8]
 800e2d2:	4650      	mov	r0, sl
 800e2d4:	f001 f820 	bl	800f318 <pxPortInitialiseStack>
 800e2d8:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2dc:	42ab      	cmp	r3, r5
 800e2de:	d000      	beq.n	800e2e2 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2e0:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e2e2:	f001 f861 	bl	800f3a8 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e2e6:	4a3e      	ldr	r2, [pc, #248]	; (800e3e0 <xTaskGenericCreate+0x1b4>)
 800e2e8:	6813      	ldr	r3, [r2, #0]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800e2ee:	4b3d      	ldr	r3, [pc, #244]	; (800e3e4 <xTaskGenericCreate+0x1b8>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d162      	bne.n	800e3bc <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800e2f6:	4b3b      	ldr	r3, [pc, #236]	; (800e3e4 <xTaskGenericCreate+0x1b8>)
 800e2f8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2fa:	6813      	ldr	r3, [r2, #0]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d120      	bne.n	800e342 <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e300:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e302:	3313      	adds	r3, #19
 800e304:	4698      	mov	r8, r3
 800e306:	4e38      	ldr	r6, [pc, #224]	; (800e3e8 <xTaskGenericCreate+0x1bc>)
 800e308:	4640      	mov	r0, r8
 800e30a:	4368      	muls	r0, r5
 800e30c:	1980      	adds	r0, r0, r6
 800e30e:	f7ff fb65 	bl	800d9dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e312:	3501      	adds	r5, #1
 800e314:	2d07      	cmp	r5, #7
 800e316:	d1f7      	bne.n	800e308 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800e318:	4e34      	ldr	r6, [pc, #208]	; (800e3ec <xTaskGenericCreate+0x1c0>)
 800e31a:	0030      	movs	r0, r6
 800e31c:	f7ff fb5e 	bl	800d9dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e320:	4d33      	ldr	r5, [pc, #204]	; (800e3f0 <xTaskGenericCreate+0x1c4>)
 800e322:	0028      	movs	r0, r5
 800e324:	f7ff fb5a 	bl	800d9dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e328:	4832      	ldr	r0, [pc, #200]	; (800e3f4 <xTaskGenericCreate+0x1c8>)
 800e32a:	f7ff fb57 	bl	800d9dc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e32e:	4832      	ldr	r0, [pc, #200]	; (800e3f8 <xTaskGenericCreate+0x1cc>)
 800e330:	f7ff fb54 	bl	800d9dc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e334:	4831      	ldr	r0, [pc, #196]	; (800e3fc <xTaskGenericCreate+0x1d0>)
 800e336:	f7ff fb51 	bl	800d9dc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e33a:	4b31      	ldr	r3, [pc, #196]	; (800e400 <xTaskGenericCreate+0x1d4>)
 800e33c:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e33e:	4b31      	ldr	r3, [pc, #196]	; (800e404 <xTaskGenericCreate+0x1d8>)
 800e340:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800e342:	4a31      	ldr	r2, [pc, #196]	; (800e408 <xTaskGenericCreate+0x1dc>)
 800e344:	6813      	ldr	r3, [r2, #0]
 800e346:	3301      	adds	r3, #1
 800e348:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e34a:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e34c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e34e:	4a2f      	ldr	r2, [pc, #188]	; (800e40c <xTaskGenericCreate+0x1e0>)
 800e350:	6812      	ldr	r2, [r2, #0]
 800e352:	4293      	cmp	r3, r2
 800e354:	d901      	bls.n	800e35a <xTaskGenericCreate+0x12e>
 800e356:	4a2d      	ldr	r2, [pc, #180]	; (800e40c <xTaskGenericCreate+0x1e0>)
 800e358:	6013      	str	r3, [r2, #0]
 800e35a:	2014      	movs	r0, #20
 800e35c:	4358      	muls	r0, r3
 800e35e:	4b22      	ldr	r3, [pc, #136]	; (800e3e8 <xTaskGenericCreate+0x1bc>)
 800e360:	18c0      	adds	r0, r0, r3
 800e362:	9901      	ldr	r1, [sp, #4]
 800e364:	f7ff fb48 	bl	800d9f8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e368:	f001 f82a 	bl	800f3c0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e36c:	4b28      	ldr	r3, [pc, #160]	; (800e410 <xTaskGenericCreate+0x1e4>)
 800e36e:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800e370:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00d      	beq.n	800e392 <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e376:	4b1b      	ldr	r3, [pc, #108]	; (800e3e4 <xTaskGenericCreate+0x1b8>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37c:	42bb      	cmp	r3, r7
 800e37e:	d208      	bcs.n	800e392 <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800e380:	f001 f806 	bl	800f390 <vPortYield>
			xReturn = pdPASS;
 800e384:	2001      	movs	r0, #1
 800e386:	e004      	b.n	800e392 <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800e388:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e38a:	f001 f925 	bl	800f5d8 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e38e:	2001      	movs	r0, #1
 800e390:	4240      	negs	r0, r0
}
 800e392:	b005      	add	sp, #20
 800e394:	bc0c      	pop	{r2, r3}
 800e396:	4690      	mov	r8, r2
 800e398:	469a      	mov	sl, r3
 800e39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e39c:	1c6b      	adds	r3, r5, #1
 800e39e:	0022      	movs	r2, r4
 800e3a0:	3235      	adds	r2, #53	; 0x35
 800e3a2:	0021      	movs	r1, r4
 800e3a4:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e3a6:	7818      	ldrb	r0, [r3, #0]
 800e3a8:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800e3aa:	7818      	ldrb	r0, [r3, #0]
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d100      	bne.n	800e3b2 <xTaskGenericCreate+0x186>
 800e3b0:	e775      	b.n	800e29e <xTaskGenericCreate+0x72>
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3b6:	4291      	cmp	r1, r2
 800e3b8:	d1f5      	bne.n	800e3a6 <xTaskGenericCreate+0x17a>
 800e3ba:	e770      	b.n	800e29e <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800e3bc:	4b14      	ldr	r3, [pc, #80]	; (800e410 <xTaskGenericCreate+0x1e4>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1be      	bne.n	800e342 <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e3c4:	4b07      	ldr	r3, [pc, #28]	; (800e3e4 <xTaskGenericCreate+0x1b8>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ca:	42bb      	cmp	r3, r7
 800e3cc:	d8b9      	bhi.n	800e342 <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800e3ce:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <xTaskGenericCreate+0x1b8>)
 800e3d0:	601c      	str	r4, [r3, #0]
 800e3d2:	e7b6      	b.n	800e342 <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e3d4:	2001      	movs	r0, #1
 800e3d6:	4240      	negs	r0, r0
 800e3d8:	e7db      	b.n	800e392 <xTaskGenericCreate+0x166>
 800e3da:	46c0      	nop			; (mov r8, r8)
 800e3dc:	3fffffff 	.word	0x3fffffff
 800e3e0:	20001df8 	.word	0x20001df8
 800e3e4:	20001d5c 	.word	0x20001d5c
 800e3e8:	20001d68 	.word	0x20001d68
 800e3ec:	20001e10 	.word	0x20001e10
 800e3f0:	20001e24 	.word	0x20001e24
 800e3f4:	20001e3c 	.word	0x20001e3c
 800e3f8:	20001e68 	.word	0x20001e68
 800e3fc:	20001e54 	.word	0x20001e54
 800e400:	20001d60 	.word	0x20001d60
 800e404:	20001d64 	.word	0x20001d64
 800e408:	20001e04 	.word	0x20001e04
 800e40c:	20001e0c 	.word	0x20001e0c
 800e410:	20001e50 	.word	0x20001e50

0800e414 <uxTaskPriorityGet>:
	{
 800e414:	b510      	push	{r4, lr}
 800e416:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e418:	f000 ffc6 	bl	800f3a8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e41c:	2c00      	cmp	r4, #0
 800e41e:	d004      	beq.n	800e42a <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e420:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e422:	f000 ffcd 	bl	800f3c0 <vPortExitCritical>
	}
 800e426:	0020      	movs	r0, r4
 800e428:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e42a:	4b01      	ldr	r3, [pc, #4]	; (800e430 <uxTaskPriorityGet+0x1c>)
 800e42c:	681c      	ldr	r4, [r3, #0]
 800e42e:	e7f7      	b.n	800e420 <uxTaskPriorityGet+0xc>
 800e430:	20001d5c 	.word	0x20001d5c

0800e434 <vTaskPrioritySet>:
	{
 800e434:	b570      	push	{r4, r5, r6, lr}
 800e436:	0004      	movs	r4, r0
 800e438:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e43a:	2906      	cmp	r1, #6
 800e43c:	d901      	bls.n	800e442 <vTaskPrioritySet+0xe>
 800e43e:	b672      	cpsid	i
 800e440:	e7fe      	b.n	800e440 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e442:	f000 ffb1 	bl	800f3a8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e446:	2c00      	cmp	r4, #0
 800e448:	d101      	bne.n	800e44e <vTaskPrioritySet+0x1a>
 800e44a:	4b21      	ldr	r3, [pc, #132]	; (800e4d0 <vTaskPrioritySet+0x9c>)
 800e44c:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e44e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e450:	4295      	cmp	r5, r2
 800e452:	d032      	beq.n	800e4ba <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800e454:	d934      	bls.n	800e4c0 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800e456:	4b1e      	ldr	r3, [pc, #120]	; (800e4d0 <vTaskPrioritySet+0x9c>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	42a3      	cmp	r3, r4
 800e45c:	d036      	beq.n	800e4cc <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e45e:	4b1c      	ldr	r3, [pc, #112]	; (800e4d0 <vTaskPrioritySet+0x9c>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e464:	2600      	movs	r6, #0
 800e466:	429d      	cmp	r5, r3
 800e468:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e46a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e46c:	428a      	cmp	r2, r1
 800e46e:	d100      	bne.n	800e472 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800e470:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800e472:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e474:	69a3      	ldr	r3, [r4, #24]
 800e476:	2b00      	cmp	r3, #0
 800e478:	db02      	blt.n	800e480 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e47a:	2207      	movs	r2, #7
 800e47c:	1b55      	subs	r5, r2, r5
 800e47e:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e480:	2314      	movs	r3, #20
 800e482:	434b      	muls	r3, r1
 800e484:	4a13      	ldr	r2, [pc, #76]	; (800e4d4 <vTaskPrioritySet+0xa0>)
 800e486:	189b      	adds	r3, r3, r2
 800e488:	6962      	ldr	r2, [r4, #20]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d111      	bne.n	800e4b2 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e48e:	1d25      	adds	r5, r4, #4
 800e490:	0028      	movs	r0, r5
 800e492:	f7ff fad4 	bl	800da3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e498:	4a0f      	ldr	r2, [pc, #60]	; (800e4d8 <vTaskPrioritySet+0xa4>)
 800e49a:	6812      	ldr	r2, [r2, #0]
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d901      	bls.n	800e4a4 <vTaskPrioritySet+0x70>
 800e4a0:	4a0d      	ldr	r2, [pc, #52]	; (800e4d8 <vTaskPrioritySet+0xa4>)
 800e4a2:	6013      	str	r3, [r2, #0]
 800e4a4:	2014      	movs	r0, #20
 800e4a6:	4358      	muls	r0, r3
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <vTaskPrioritySet+0xa0>)
 800e4aa:	18c0      	adds	r0, r0, r3
 800e4ac:	0029      	movs	r1, r5
 800e4ae:	f7ff faa3 	bl	800d9f8 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800e4b2:	2e01      	cmp	r6, #1
 800e4b4:	d101      	bne.n	800e4ba <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800e4b6:	f000 ff6b 	bl	800f390 <vPortYield>
		taskEXIT_CRITICAL();
 800e4ba:	f000 ff81 	bl	800f3c0 <vPortExitCritical>
	}
 800e4be:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800e4c0:	4b03      	ldr	r3, [pc, #12]	; (800e4d0 <vTaskPrioritySet+0x9c>)
 800e4c2:	681e      	ldr	r6, [r3, #0]
 800e4c4:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e4c6:	4273      	negs	r3, r6
 800e4c8:	415e      	adcs	r6, r3
 800e4ca:	e7ce      	b.n	800e46a <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800e4cc:	2600      	movs	r6, #0
 800e4ce:	e7cc      	b.n	800e46a <vTaskPrioritySet+0x36>
 800e4d0:	20001d5c 	.word	0x20001d5c
 800e4d4:	20001d68 	.word	0x20001d68
 800e4d8:	20001e0c 	.word	0x20001e0c

0800e4dc <vTaskStartScheduler>:
{
 800e4dc:	b500      	push	{lr}
 800e4de:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	9303      	str	r3, [sp, #12]
 800e4e4:	9302      	str	r3, [sp, #8]
 800e4e6:	9301      	str	r3, [sp, #4]
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	22a0      	movs	r2, #160	; 0xa0
 800e4ec:	490d      	ldr	r1, [pc, #52]	; (800e524 <vTaskStartScheduler+0x48>)
 800e4ee:	480e      	ldr	r0, [pc, #56]	; (800e528 <vTaskStartScheduler+0x4c>)
 800e4f0:	f7ff fe9c 	bl	800e22c <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e4f4:	2801      	cmp	r0, #1
 800e4f6:	d003      	beq.n	800e500 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d110      	bne.n	800e51e <vTaskStartScheduler+0x42>
 800e4fc:	b672      	cpsid	i
 800e4fe:	e7fe      	b.n	800e4fe <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e500:	f000 fd68 	bl	800efd4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e504:	2801      	cmp	r0, #1
 800e506:	d1f7      	bne.n	800e4f8 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e508:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e50a:	4b08      	ldr	r3, [pc, #32]	; (800e52c <vTaskStartScheduler+0x50>)
 800e50c:	2201      	movs	r2, #1
 800e50e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e510:	4b07      	ldr	r3, [pc, #28]	; (800e530 <vTaskStartScheduler+0x54>)
 800e512:	2200      	movs	r2, #0
 800e514:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e516:	f7f9 fd93 	bl	8008040 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e51a:	f000 ff0f 	bl	800f33c <xPortStartScheduler>
}
 800e51e:	b005      	add	sp, #20
 800e520:	bd00      	pop	{pc}
 800e522:	46c0      	nop			; (mov r8, r8)
 800e524:	0801a5f8 	.word	0x0801a5f8
 800e528:	0800e79d 	.word	0x0800e79d
 800e52c:	20001e50 	.word	0x20001e50
 800e530:	20001e7c 	.word	0x20001e7c

0800e534 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e534:	4a02      	ldr	r2, [pc, #8]	; (800e540 <vTaskSuspendAll+0xc>)
 800e536:	6813      	ldr	r3, [r2, #0]
 800e538:	3301      	adds	r3, #1
 800e53a:	6013      	str	r3, [r2, #0]
}
 800e53c:	4770      	bx	lr
 800e53e:	46c0      	nop			; (mov r8, r8)
 800e540:	20001e00 	.word	0x20001e00

0800e544 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e544:	4b01      	ldr	r3, [pc, #4]	; (800e54c <xTaskGetTickCount+0x8>)
 800e546:	6818      	ldr	r0, [r3, #0]
}
 800e548:	4770      	bx	lr
 800e54a:	46c0      	nop			; (mov r8, r8)
 800e54c:	20001e7c 	.word	0x20001e7c

0800e550 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800e550:	4b01      	ldr	r3, [pc, #4]	; (800e558 <xTaskGetTickCountFromISR+0x8>)
 800e552:	6818      	ldr	r0, [r3, #0]
}
 800e554:	4770      	bx	lr
 800e556:	46c0      	nop			; (mov r8, r8)
 800e558:	20001e7c 	.word	0x20001e7c

0800e55c <xTaskIncrementTick>:
{
 800e55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e55e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e560:	4b39      	ldr	r3, [pc, #228]	; (800e648 <xTaskIncrementTick+0xec>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d161      	bne.n	800e62c <xTaskIncrementTick+0xd0>
		++xTickCount;
 800e568:	4b38      	ldr	r3, [pc, #224]	; (800e64c <xTaskIncrementTick+0xf0>)
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	3201      	adds	r2, #1
 800e56e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800e570:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800e572:	2e00      	cmp	r6, #0
 800e574:	d112      	bne.n	800e59c <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800e576:	4b36      	ldr	r3, [pc, #216]	; (800e650 <xTaskIncrementTick+0xf4>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d001      	beq.n	800e584 <xTaskIncrementTick+0x28>
 800e580:	b672      	cpsid	i
 800e582:	e7fe      	b.n	800e582 <xTaskIncrementTick+0x26>
 800e584:	4a32      	ldr	r2, [pc, #200]	; (800e650 <xTaskIncrementTick+0xf4>)
 800e586:	6811      	ldr	r1, [r2, #0]
 800e588:	4b32      	ldr	r3, [pc, #200]	; (800e654 <xTaskIncrementTick+0xf8>)
 800e58a:	6818      	ldr	r0, [r3, #0]
 800e58c:	6010      	str	r0, [r2, #0]
 800e58e:	6019      	str	r1, [r3, #0]
 800e590:	4a31      	ldr	r2, [pc, #196]	; (800e658 <xTaskIncrementTick+0xfc>)
 800e592:	6813      	ldr	r3, [r2, #0]
 800e594:	3301      	adds	r3, #1
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	f7ff fdf0 	bl	800e17c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e59c:	4b2f      	ldr	r3, [pc, #188]	; (800e65c <xTaskIncrementTick+0x100>)
 800e59e:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e5a0:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e5a2:	42b3      	cmp	r3, r6
 800e5a4:	d833      	bhi.n	800e60e <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800e5a6:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5a8:	4d29      	ldr	r5, [pc, #164]	; (800e650 <xTaskIncrementTick+0xf4>)
 800e5aa:	682b      	ldr	r3, [r5, #0]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d029      	beq.n	800e606 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e5b2:	4b27      	ldr	r3, [pc, #156]	; (800e650 <xTaskIncrementTick+0xf4>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e5ba:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800e5bc:	429e      	cmp	r6, r3
 800e5be:	d332      	bcc.n	800e626 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e5c0:	1d23      	adds	r3, r4, #4
 800e5c2:	9301      	str	r3, [sp, #4]
 800e5c4:	0018      	movs	r0, r3
 800e5c6:	f7ff fa3a 	bl	800da3e <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d003      	beq.n	800e5d8 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5d0:	0020      	movs	r0, r4
 800e5d2:	3018      	adds	r0, #24
 800e5d4:	f7ff fa33 	bl	800da3e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e5d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e5da:	4a21      	ldr	r2, [pc, #132]	; (800e660 <xTaskIncrementTick+0x104>)
 800e5dc:	6812      	ldr	r2, [r2, #0]
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d901      	bls.n	800e5e6 <xTaskIncrementTick+0x8a>
 800e5e2:	4a1f      	ldr	r2, [pc, #124]	; (800e660 <xTaskIncrementTick+0x104>)
 800e5e4:	6013      	str	r3, [r2, #0]
 800e5e6:	0098      	lsls	r0, r3, #2
 800e5e8:	18c0      	adds	r0, r0, r3
 800e5ea:	0080      	lsls	r0, r0, #2
 800e5ec:	4b1d      	ldr	r3, [pc, #116]	; (800e664 <xTaskIncrementTick+0x108>)
 800e5ee:	18c0      	adds	r0, r0, r3
 800e5f0:	9901      	ldr	r1, [sp, #4]
 800e5f2:	f7ff fa01 	bl	800d9f8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5f6:	4b1c      	ldr	r3, [pc, #112]	; (800e668 <xTaskIncrementTick+0x10c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d3d3      	bcc.n	800e5aa <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800e602:	2701      	movs	r7, #1
 800e604:	e7d1      	b.n	800e5aa <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e606:	4b15      	ldr	r3, [pc, #84]	; (800e65c <xTaskIncrementTick+0x100>)
 800e608:	2201      	movs	r2, #1
 800e60a:	4252      	negs	r2, r2
 800e60c:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e60e:	4b16      	ldr	r3, [pc, #88]	; (800e668 <xTaskIncrementTick+0x10c>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e614:	0093      	lsls	r3, r2, #2
 800e616:	189b      	adds	r3, r3, r2
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	4a12      	ldr	r2, [pc, #72]	; (800e664 <xTaskIncrementTick+0x108>)
 800e61c:	589b      	ldr	r3, [r3, r2]
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d909      	bls.n	800e636 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800e622:	2701      	movs	r7, #1
 800e624:	e007      	b.n	800e636 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800e626:	4a0d      	ldr	r2, [pc, #52]	; (800e65c <xTaskIncrementTick+0x100>)
 800e628:	6013      	str	r3, [r2, #0]
							break;
 800e62a:	e7f0      	b.n	800e60e <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800e62c:	4a0f      	ldr	r2, [pc, #60]	; (800e66c <xTaskIncrementTick+0x110>)
 800e62e:	6813      	ldr	r3, [r2, #0]
 800e630:	3301      	adds	r3, #1
 800e632:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e634:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800e636:	4b0e      	ldr	r3, [pc, #56]	; (800e670 <xTaskIncrementTick+0x114>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d000      	beq.n	800e640 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800e63e:	2701      	movs	r7, #1
}
 800e640:	0038      	movs	r0, r7
 800e642:	b003      	add	sp, #12
 800e644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e646:	46c0      	nop			; (mov r8, r8)
 800e648:	20001e00 	.word	0x20001e00
 800e64c:	20001e7c 	.word	0x20001e7c
 800e650:	20001d60 	.word	0x20001d60
 800e654:	20001d64 	.word	0x20001d64
 800e658:	20001e38 	.word	0x20001e38
 800e65c:	200000a0 	.word	0x200000a0
 800e660:	20001e0c 	.word	0x20001e0c
 800e664:	20001d68 	.word	0x20001d68
 800e668:	20001d5c 	.word	0x20001d5c
 800e66c:	20001dfc 	.word	0x20001dfc
 800e670:	20001e80 	.word	0x20001e80

0800e674 <xTaskResumeAll>:
{
 800e674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e676:	4b2f      	ldr	r3, [pc, #188]	; (800e734 <xTaskResumeAll+0xc0>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d101      	bne.n	800e682 <xTaskResumeAll+0xe>
 800e67e:	b672      	cpsid	i
 800e680:	e7fe      	b.n	800e680 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800e682:	f000 fe91 	bl	800f3a8 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e686:	4b2b      	ldr	r3, [pc, #172]	; (800e734 <xTaskResumeAll+0xc0>)
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	3a01      	subs	r2, #1
 800e68c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e68e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e690:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e692:	42a3      	cmp	r3, r4
 800e694:	d105      	bne.n	800e6a2 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e696:	4b28      	ldr	r3, [pc, #160]	; (800e738 <xTaskResumeAll+0xc4>)
 800e698:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e69a:	4d28      	ldr	r5, [pc, #160]	; (800e73c <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e69c:	42a3      	cmp	r3, r4
 800e69e:	d12a      	bne.n	800e6f6 <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800e6a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e6a2:	f000 fe8d 	bl	800f3c0 <vPortExitCritical>
}
 800e6a6:	0020      	movs	r0, r4
 800e6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800e6aa:	0098      	lsls	r0, r3, #2
 800e6ac:	18c0      	adds	r0, r0, r3
 800e6ae:	0080      	lsls	r0, r0, #2
 800e6b0:	4b23      	ldr	r3, [pc, #140]	; (800e740 <xTaskResumeAll+0xcc>)
 800e6b2:	18c0      	adds	r0, r0, r3
 800e6b4:	0021      	movs	r1, r4
 800e6b6:	f7ff f99f 	bl	800d9f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6ba:	4b22      	ldr	r3, [pc, #136]	; (800e744 <xTaskResumeAll+0xd0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d214      	bcs.n	800e6f0 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6c6:	6833      	ldr	r3, [r6, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d016      	beq.n	800e6fa <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e6cc:	68eb      	ldr	r3, [r5, #12]
 800e6ce:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6d0:	0038      	movs	r0, r7
 800e6d2:	3018      	adds	r0, #24
 800e6d4:	f7ff f9b3 	bl	800da3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e6d8:	1d3c      	adds	r4, r7, #4
 800e6da:	0020      	movs	r0, r4
 800e6dc:	f7ff f9af 	bl	800da3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	4a19      	ldr	r2, [pc, #100]	; (800e748 <xTaskResumeAll+0xd4>)
 800e6e4:	6812      	ldr	r2, [r2, #0]
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d9df      	bls.n	800e6aa <xTaskResumeAll+0x36>
 800e6ea:	4a17      	ldr	r2, [pc, #92]	; (800e748 <xTaskResumeAll+0xd4>)
 800e6ec:	6013      	str	r3, [r2, #0]
 800e6ee:	e7dc      	b.n	800e6aa <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800e6f0:	4b16      	ldr	r3, [pc, #88]	; (800e74c <xTaskResumeAll+0xd8>)
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6f6:	4e11      	ldr	r6, [pc, #68]	; (800e73c <xTaskResumeAll+0xc8>)
 800e6f8:	e7e5      	b.n	800e6c6 <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e6fa:	4b15      	ldr	r3, [pc, #84]	; (800e750 <xTaskResumeAll+0xdc>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d005      	beq.n	800e70e <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e702:	4e13      	ldr	r6, [pc, #76]	; (800e750 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800e704:	4c11      	ldr	r4, [pc, #68]	; (800e74c <xTaskResumeAll+0xd8>)
 800e706:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e708:	6833      	ldr	r3, [r6, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d108      	bne.n	800e720 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <xTaskResumeAll+0xd8>)
 800e710:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e712:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800e714:	2b01      	cmp	r3, #1
 800e716:	d1c4      	bne.n	800e6a2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e718:	f000 fe3a 	bl	800f390 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e71c:	3401      	adds	r4, #1
 800e71e:	e7c0      	b.n	800e6a2 <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800e720:	f7ff ff1c 	bl	800e55c <xTaskIncrementTick>
 800e724:	2800      	cmp	r0, #0
 800e726:	d000      	beq.n	800e72a <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800e728:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800e72a:	4a09      	ldr	r2, [pc, #36]	; (800e750 <xTaskResumeAll+0xdc>)
 800e72c:	6813      	ldr	r3, [r2, #0]
 800e72e:	3b01      	subs	r3, #1
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	e7e9      	b.n	800e708 <xTaskResumeAll+0x94>
 800e734:	20001e00 	.word	0x20001e00
 800e738:	20001df8 	.word	0x20001df8
 800e73c:	20001e3c 	.word	0x20001e3c
 800e740:	20001d68 	.word	0x20001d68
 800e744:	20001d5c 	.word	0x20001d5c
 800e748:	20001e0c 	.word	0x20001e0c
 800e74c:	20001e80 	.word	0x20001e80
 800e750:	20001dfc 	.word	0x20001dfc

0800e754 <vTaskDelay>:
	{
 800e754:	b570      	push	{r4, r5, r6, lr}
 800e756:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e758:	d016      	beq.n	800e788 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e75a:	4b0d      	ldr	r3, [pc, #52]	; (800e790 <vTaskDelay+0x3c>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <vTaskDelay+0x12>
 800e762:	b672      	cpsid	i
 800e764:	e7fe      	b.n	800e764 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800e766:	f7ff fee5 	bl	800e534 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800e76a:	4b0a      	ldr	r3, [pc, #40]	; (800e794 <vTaskDelay+0x40>)
 800e76c:	681c      	ldr	r4, [r3, #0]
 800e76e:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e770:	4b09      	ldr	r3, [pc, #36]	; (800e798 <vTaskDelay+0x44>)
 800e772:	6818      	ldr	r0, [r3, #0]
 800e774:	3004      	adds	r0, #4
 800e776:	f7ff f962 	bl	800da3e <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e77a:	0020      	movs	r0, r4
 800e77c:	f7ff fd14 	bl	800e1a8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e780:	f7ff ff78 	bl	800e674 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e784:	2800      	cmp	r0, #0
 800e786:	d101      	bne.n	800e78c <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e788:	f000 fe02 	bl	800f390 <vPortYield>
	}
 800e78c:	bd70      	pop	{r4, r5, r6, pc}
 800e78e:	46c0      	nop			; (mov r8, r8)
 800e790:	20001e00 	.word	0x20001e00
 800e794:	20001e7c 	.word	0x20001e7c
 800e798:	20001d5c 	.word	0x20001d5c

0800e79c <prvIdleTask>:
{
 800e79c:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e79e:	4d16      	ldr	r5, [pc, #88]	; (800e7f8 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e7a0:	4e16      	ldr	r6, [pc, #88]	; (800e7fc <prvIdleTask+0x60>)
 800e7a2:	e003      	b.n	800e7ac <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e7a4:	4b16      	ldr	r3, [pc, #88]	; (800e800 <prvIdleTask+0x64>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d822      	bhi.n	800e7f2 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e7ac:	682b      	ldr	r3, [r5, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d0f8      	beq.n	800e7a4 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800e7b2:	f7ff febf 	bl	800e534 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e7b6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800e7b8:	f7ff ff5c 	bl	800e674 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e7bc:	2c00      	cmp	r4, #0
 800e7be:	d0f5      	beq.n	800e7ac <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800e7c0:	f000 fdf2 	bl	800f3a8 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e7c4:	4b0d      	ldr	r3, [pc, #52]	; (800e7fc <prvIdleTask+0x60>)
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e7ca:	1d20      	adds	r0, r4, #4
 800e7cc:	f7ff f937 	bl	800da3e <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e7d0:	4a0c      	ldr	r2, [pc, #48]	; (800e804 <prvIdleTask+0x68>)
 800e7d2:	6813      	ldr	r3, [r2, #0]
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800e7d8:	4a07      	ldr	r2, [pc, #28]	; (800e7f8 <prvIdleTask+0x5c>)
 800e7da:	6813      	ldr	r3, [r2, #0]
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800e7e0:	f000 fdee 	bl	800f3c0 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e7e4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e7e6:	f000 fef7 	bl	800f5d8 <vPortFree>
		vPortFree( pxTCB );
 800e7ea:	0020      	movs	r0, r4
 800e7ec:	f000 fef4 	bl	800f5d8 <vPortFree>
 800e7f0:	e7dc      	b.n	800e7ac <prvIdleTask+0x10>
				taskYIELD();
 800e7f2:	f000 fdcd 	bl	800f390 <vPortYield>
 800e7f6:	e7d9      	b.n	800e7ac <prvIdleTask+0x10>
 800e7f8:	20001e08 	.word	0x20001e08
 800e7fc:	20001e68 	.word	0x20001e68
 800e800:	20001d68 	.word	0x20001d68
 800e804:	20001df8 	.word	0x20001df8

0800e808 <uxTaskGetSystemState>:
	{
 800e808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e80a:	46c6      	mov	lr, r8
 800e80c:	b500      	push	{lr}
 800e80e:	0006      	movs	r6, r0
 800e810:	000d      	movs	r5, r1
 800e812:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800e814:	f7ff fe8e 	bl	800e534 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e818:	4b1e      	ldr	r3, [pc, #120]	; (800e894 <uxTaskGetSystemState+0x8c>)
 800e81a:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e81c:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e81e:	42ab      	cmp	r3, r5
 800e820:	d831      	bhi.n	800e886 <uxTaskGetSystemState+0x7e>
 800e822:	4d1d      	ldr	r5, [pc, #116]	; (800e898 <uxTaskGetSystemState+0x90>)
 800e824:	002f      	movs	r7, r5
 800e826:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e828:	0160      	lsls	r0, r4, #5
 800e82a:	1830      	adds	r0, r6, r0
 800e82c:	2201      	movs	r2, #1
 800e82e:	0029      	movs	r1, r5
 800e830:	f7ff fc50 	bl	800e0d4 <prvListTaskWithinSingleList>
 800e834:	1824      	adds	r4, r4, r0
 800e836:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e838:	42bd      	cmp	r5, r7
 800e83a:	d1f5      	bne.n	800e828 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e83c:	4b17      	ldr	r3, [pc, #92]	; (800e89c <uxTaskGetSystemState+0x94>)
 800e83e:	6819      	ldr	r1, [r3, #0]
 800e840:	0160      	lsls	r0, r4, #5
 800e842:	1830      	adds	r0, r6, r0
 800e844:	2202      	movs	r2, #2
 800e846:	f7ff fc45 	bl	800e0d4 <prvListTaskWithinSingleList>
 800e84a:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e84c:	4b14      	ldr	r3, [pc, #80]	; (800e8a0 <uxTaskGetSystemState+0x98>)
 800e84e:	6819      	ldr	r1, [r3, #0]
 800e850:	0160      	lsls	r0, r4, #5
 800e852:	1830      	adds	r0, r6, r0
 800e854:	2202      	movs	r2, #2
 800e856:	f7ff fc3d 	bl	800e0d4 <prvListTaskWithinSingleList>
 800e85a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e85c:	0160      	lsls	r0, r4, #5
 800e85e:	1830      	adds	r0, r6, r0
 800e860:	2204      	movs	r2, #4
 800e862:	4910      	ldr	r1, [pc, #64]	; (800e8a4 <uxTaskGetSystemState+0x9c>)
 800e864:	f7ff fc36 	bl	800e0d4 <prvListTaskWithinSingleList>
 800e868:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e86a:	0160      	lsls	r0, r4, #5
 800e86c:	1830      	adds	r0, r6, r0
 800e86e:	2203      	movs	r2, #3
 800e870:	490d      	ldr	r1, [pc, #52]	; (800e8a8 <uxTaskGetSystemState+0xa0>)
 800e872:	f7ff fc2f 	bl	800e0d4 <prvListTaskWithinSingleList>
 800e876:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800e878:	4643      	mov	r3, r8
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e87e:	f7f9 fbef 	bl	8008060 <ulMainGetRunTimeCounterValue>
 800e882:	4643      	mov	r3, r8
 800e884:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e886:	f7ff fef5 	bl	800e674 <xTaskResumeAll>
	}
 800e88a:	0020      	movs	r0, r4
 800e88c:	bc04      	pop	{r2}
 800e88e:	4690      	mov	r8, r2
 800e890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e892:	46c0      	nop			; (mov r8, r8)
 800e894:	20001df8 	.word	0x20001df8
 800e898:	20001de0 	.word	0x20001de0
 800e89c:	20001d60 	.word	0x20001d60
 800e8a0:	20001d64 	.word	0x20001d64
 800e8a4:	20001e68 	.word	0x20001e68
 800e8a8:	20001e54 	.word	0x20001e54

0800e8ac <vTaskSwitchContext>:
{
 800e8ac:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8ae:	4b3a      	ldr	r3, [pc, #232]	; (800e998 <vTaskSwitchContext+0xec>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d003      	beq.n	800e8be <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e8b6:	4b39      	ldr	r3, [pc, #228]	; (800e99c <vTaskSwitchContext+0xf0>)
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	601a      	str	r2, [r3, #0]
}
 800e8bc:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800e8be:	4b37      	ldr	r3, [pc, #220]	; (800e99c <vTaskSwitchContext+0xf0>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e8c4:	f7f9 fbcc 	bl	8008060 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e8c8:	4b35      	ldr	r3, [pc, #212]	; (800e9a0 <vTaskSwitchContext+0xf4>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4298      	cmp	r0, r3
 800e8ce:	d905      	bls.n	800e8dc <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e8d0:	4a34      	ldr	r2, [pc, #208]	; (800e9a4 <vTaskSwitchContext+0xf8>)
 800e8d2:	6812      	ldr	r2, [r2, #0]
 800e8d4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e8d6:	1acb      	subs	r3, r1, r3
 800e8d8:	181b      	adds	r3, r3, r0
 800e8da:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e8dc:	4b30      	ldr	r3, [pc, #192]	; (800e9a0 <vTaskSwitchContext+0xf4>)
 800e8de:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e8e0:	4b30      	ldr	r3, [pc, #192]	; (800e9a4 <vTaskSwitchContext+0xf8>)
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	6812      	ldr	r2, [r2, #0]
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d805      	bhi.n	800e8fa <vTaskSwitchContext+0x4e>
 800e8ee:	4b2d      	ldr	r3, [pc, #180]	; (800e9a4 <vTaskSwitchContext+0xf8>)
 800e8f0:	6818      	ldr	r0, [r3, #0]
 800e8f2:	6819      	ldr	r1, [r3, #0]
 800e8f4:	3134      	adds	r1, #52	; 0x34
 800e8f6:	f7fe f9af 	bl	800cc58 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e8fa:	4b2a      	ldr	r3, [pc, #168]	; (800e9a4 <vTaskSwitchContext+0xf8>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e900:	2214      	movs	r2, #20
 800e902:	4929      	ldr	r1, [pc, #164]	; (800e9a8 <vTaskSwitchContext+0xfc>)
 800e904:	f004 fb42 	bl	8012f8c <memcmp>
 800e908:	2800      	cmp	r0, #0
 800e90a:	d005      	beq.n	800e918 <vTaskSwitchContext+0x6c>
 800e90c:	4b25      	ldr	r3, [pc, #148]	; (800e9a4 <vTaskSwitchContext+0xf8>)
 800e90e:	6818      	ldr	r0, [r3, #0]
 800e910:	6819      	ldr	r1, [r3, #0]
 800e912:	3134      	adds	r1, #52	; 0x34
 800e914:	f7fe f9a0 	bl	800cc58 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e918:	4b24      	ldr	r3, [pc, #144]	; (800e9ac <vTaskSwitchContext+0x100>)
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	0093      	lsls	r3, r2, #2
 800e91e:	189b      	adds	r3, r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	4a23      	ldr	r2, [pc, #140]	; (800e9b0 <vTaskSwitchContext+0x104>)
 800e924:	589b      	ldr	r3, [r3, r2]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d115      	bne.n	800e956 <vTaskSwitchContext+0xaa>
 800e92a:	4b20      	ldr	r3, [pc, #128]	; (800e9ac <vTaskSwitchContext+0x100>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00f      	beq.n	800e952 <vTaskSwitchContext+0xa6>
 800e932:	4a1e      	ldr	r2, [pc, #120]	; (800e9ac <vTaskSwitchContext+0x100>)
 800e934:	4c1e      	ldr	r4, [pc, #120]	; (800e9b0 <vTaskSwitchContext+0x104>)
 800e936:	0010      	movs	r0, r2
 800e938:	6813      	ldr	r3, [r2, #0]
 800e93a:	3b01      	subs	r3, #1
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	6811      	ldr	r1, [r2, #0]
 800e940:	008b      	lsls	r3, r1, #2
 800e942:	185b      	adds	r3, r3, r1
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	591b      	ldr	r3, [r3, r4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d104      	bne.n	800e956 <vTaskSwitchContext+0xaa>
 800e94c:	6803      	ldr	r3, [r0, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1f2      	bne.n	800e938 <vTaskSwitchContext+0x8c>
 800e952:	b672      	cpsid	i
 800e954:	e7fe      	b.n	800e954 <vTaskSwitchContext+0xa8>
 800e956:	4b15      	ldr	r3, [pc, #84]	; (800e9ac <vTaskSwitchContext+0x100>)
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	4c15      	ldr	r4, [pc, #84]	; (800e9b0 <vTaskSwitchContext+0x104>)
 800e95c:	0093      	lsls	r3, r2, #2
 800e95e:	1899      	adds	r1, r3, r2
 800e960:	0089      	lsls	r1, r1, #2
 800e962:	1861      	adds	r1, r4, r1
 800e964:	6848      	ldr	r0, [r1, #4]
 800e966:	6840      	ldr	r0, [r0, #4]
 800e968:	6048      	str	r0, [r1, #4]
 800e96a:	189b      	adds	r3, r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	3308      	adds	r3, #8
 800e970:	191b      	adds	r3, r3, r4
 800e972:	4298      	cmp	r0, r3
 800e974:	d009      	beq.n	800e98a <vTaskSwitchContext+0xde>
 800e976:	0093      	lsls	r3, r2, #2
 800e978:	189a      	adds	r2, r3, r2
 800e97a:	0092      	lsls	r2, r2, #2
 800e97c:	4b0c      	ldr	r3, [pc, #48]	; (800e9b0 <vTaskSwitchContext+0x104>)
 800e97e:	189a      	adds	r2, r3, r2
 800e980:	6853      	ldr	r3, [r2, #4]
 800e982:	68da      	ldr	r2, [r3, #12]
 800e984:	4b07      	ldr	r3, [pc, #28]	; (800e9a4 <vTaskSwitchContext+0xf8>)
 800e986:	601a      	str	r2, [r3, #0]
}
 800e988:	e798      	b.n	800e8bc <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e98a:	6840      	ldr	r0, [r0, #4]
 800e98c:	2114      	movs	r1, #20
 800e98e:	4351      	muls	r1, r2
 800e990:	1863      	adds	r3, r4, r1
 800e992:	6058      	str	r0, [r3, #4]
 800e994:	e7ef      	b.n	800e976 <vTaskSwitchContext+0xca>
 800e996:	46c0      	nop			; (mov r8, r8)
 800e998:	20001e00 	.word	0x20001e00
 800e99c:	20001e80 	.word	0x20001e80
 800e9a0:	20001df4 	.word	0x20001df4
 800e9a4:	20001d5c 	.word	0x20001d5c
 800e9a8:	0801a5bc 	.word	0x0801a5bc
 800e9ac:	20001e0c 	.word	0x20001e0c
 800e9b0:	20001d68 	.word	0x20001d68

0800e9b4 <vTaskPlaceOnEventList>:
{
 800e9b4:	b570      	push	{r4, r5, r6, lr}
 800e9b6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d101      	bne.n	800e9c0 <vTaskPlaceOnEventList+0xc>
 800e9bc:	b672      	cpsid	i
 800e9be:	e7fe      	b.n	800e9be <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9c0:	4d0b      	ldr	r5, [pc, #44]	; (800e9f0 <vTaskPlaceOnEventList+0x3c>)
 800e9c2:	6829      	ldr	r1, [r5, #0]
 800e9c4:	3118      	adds	r1, #24
 800e9c6:	f7ff f823 	bl	800da10 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e9ca:	6828      	ldr	r0, [r5, #0]
 800e9cc:	3004      	adds	r0, #4
 800e9ce:	f7ff f836 	bl	800da3e <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e9d2:	1c63      	adds	r3, r4, #1
 800e9d4:	d005      	beq.n	800e9e2 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800e9d6:	4b07      	ldr	r3, [pc, #28]	; (800e9f4 <vTaskPlaceOnEventList+0x40>)
 800e9d8:	6818      	ldr	r0, [r3, #0]
 800e9da:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e9dc:	f7ff fbe4 	bl	800e1a8 <prvAddCurrentTaskToDelayedList>
}
 800e9e0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e9e2:	4b03      	ldr	r3, [pc, #12]	; (800e9f0 <vTaskPlaceOnEventList+0x3c>)
 800e9e4:	6819      	ldr	r1, [r3, #0]
 800e9e6:	3104      	adds	r1, #4
 800e9e8:	4803      	ldr	r0, [pc, #12]	; (800e9f8 <vTaskPlaceOnEventList+0x44>)
 800e9ea:	f7ff f805 	bl	800d9f8 <vListInsertEnd>
 800e9ee:	e7f7      	b.n	800e9e0 <vTaskPlaceOnEventList+0x2c>
 800e9f0:	20001d5c 	.word	0x20001d5c
 800e9f4:	20001e7c 	.word	0x20001e7c
 800e9f8:	20001e54 	.word	0x20001e54

0800e9fc <vTaskPlaceOnEventListRestricted>:
	{
 800e9fc:	b570      	push	{r4, r5, r6, lr}
 800e9fe:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d101      	bne.n	800ea08 <vTaskPlaceOnEventListRestricted+0xc>
 800ea04:	b672      	cpsid	i
 800ea06:	e7fe      	b.n	800ea06 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea08:	4c07      	ldr	r4, [pc, #28]	; (800ea28 <vTaskPlaceOnEventListRestricted+0x2c>)
 800ea0a:	6821      	ldr	r1, [r4, #0]
 800ea0c:	3118      	adds	r1, #24
 800ea0e:	f7fe fff3 	bl	800d9f8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ea12:	6820      	ldr	r0, [r4, #0]
 800ea14:	3004      	adds	r0, #4
 800ea16:	f7ff f812 	bl	800da3e <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800ea1a:	4b04      	ldr	r3, [pc, #16]	; (800ea2c <vTaskPlaceOnEventListRestricted+0x30>)
 800ea1c:	6818      	ldr	r0, [r3, #0]
 800ea1e:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ea20:	f7ff fbc2 	bl	800e1a8 <prvAddCurrentTaskToDelayedList>
	}
 800ea24:	bd70      	pop	{r4, r5, r6, pc}
 800ea26:	46c0      	nop			; (mov r8, r8)
 800ea28:	20001d5c 	.word	0x20001d5c
 800ea2c:	20001e7c 	.word	0x20001e7c

0800ea30 <xTaskRemoveFromEventList>:
{
 800ea30:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ea32:	68c3      	ldr	r3, [r0, #12]
 800ea34:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ea36:	2d00      	cmp	r5, #0
 800ea38:	d101      	bne.n	800ea3e <xTaskRemoveFromEventList+0xe>
 800ea3a:	b672      	cpsid	i
 800ea3c:	e7fe      	b.n	800ea3c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea3e:	002c      	movs	r4, r5
 800ea40:	3418      	adds	r4, #24
 800ea42:	0020      	movs	r0, r4
 800ea44:	f7fe fffb 	bl	800da3e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea48:	4b13      	ldr	r3, [pc, #76]	; (800ea98 <xTaskRemoveFromEventList+0x68>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d11e      	bne.n	800ea8e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ea50:	1d2c      	adds	r4, r5, #4
 800ea52:	0020      	movs	r0, r4
 800ea54:	f7fe fff3 	bl	800da3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ea5a:	4a10      	ldr	r2, [pc, #64]	; (800ea9c <xTaskRemoveFromEventList+0x6c>)
 800ea5c:	6812      	ldr	r2, [r2, #0]
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d901      	bls.n	800ea66 <xTaskRemoveFromEventList+0x36>
 800ea62:	4a0e      	ldr	r2, [pc, #56]	; (800ea9c <xTaskRemoveFromEventList+0x6c>)
 800ea64:	6013      	str	r3, [r2, #0]
 800ea66:	0098      	lsls	r0, r3, #2
 800ea68:	18c0      	adds	r0, r0, r3
 800ea6a:	0080      	lsls	r0, r0, #2
 800ea6c:	4b0c      	ldr	r3, [pc, #48]	; (800eaa0 <xTaskRemoveFromEventList+0x70>)
 800ea6e:	18c0      	adds	r0, r0, r3
 800ea70:	0021      	movs	r1, r4
 800ea72:	f7fe ffc1 	bl	800d9f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea76:	4b0b      	ldr	r3, [pc, #44]	; (800eaa4 <xTaskRemoveFromEventList+0x74>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ea7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ea7e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d903      	bls.n	800ea8c <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800ea84:	4b08      	ldr	r3, [pc, #32]	; (800eaa8 <xTaskRemoveFromEventList+0x78>)
 800ea86:	2201      	movs	r2, #1
 800ea88:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ea8a:	3001      	adds	r0, #1
}
 800ea8c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea8e:	0021      	movs	r1, r4
 800ea90:	4806      	ldr	r0, [pc, #24]	; (800eaac <xTaskRemoveFromEventList+0x7c>)
 800ea92:	f7fe ffb1 	bl	800d9f8 <vListInsertEnd>
 800ea96:	e7ee      	b.n	800ea76 <xTaskRemoveFromEventList+0x46>
 800ea98:	20001e00 	.word	0x20001e00
 800ea9c:	20001e0c 	.word	0x20001e0c
 800eaa0:	20001d68 	.word	0x20001d68
 800eaa4:	20001d5c 	.word	0x20001d5c
 800eaa8:	20001e80 	.word	0x20001e80
 800eaac:	20001e3c 	.word	0x20001e3c

0800eab0 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d006      	beq.n	800eac2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eab4:	4b04      	ldr	r3, [pc, #16]	; (800eac8 <vTaskSetTimeOutState+0x18>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eaba:	4b04      	ldr	r3, [pc, #16]	; (800eacc <vTaskSetTimeOutState+0x1c>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	6043      	str	r3, [r0, #4]
}
 800eac0:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800eac2:	b672      	cpsid	i
 800eac4:	e7fe      	b.n	800eac4 <vTaskSetTimeOutState+0x14>
 800eac6:	46c0      	nop			; (mov r8, r8)
 800eac8:	20001e38 	.word	0x20001e38
 800eacc:	20001e7c 	.word	0x20001e7c

0800ead0 <xTaskCheckForTimeOut>:
{
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	0004      	movs	r4, r0
 800ead4:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d003      	beq.n	800eae2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800eada:	2900      	cmp	r1, #0
 800eadc:	d103      	bne.n	800eae6 <xTaskCheckForTimeOut+0x16>
 800eade:	b672      	cpsid	i
 800eae0:	e7fe      	b.n	800eae0 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800eae2:	b672      	cpsid	i
 800eae4:	e7fe      	b.n	800eae4 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800eae6:	f000 fc5f 	bl	800f3a8 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800eaea:	4b10      	ldr	r3, [pc, #64]	; (800eb2c <xTaskCheckForTimeOut+0x5c>)
 800eaec:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800eaee:	6833      	ldr	r3, [r6, #0]
 800eaf0:	1c59      	adds	r1, r3, #1
 800eaf2:	d019      	beq.n	800eb28 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eaf4:	490e      	ldr	r1, [pc, #56]	; (800eb30 <xTaskCheckForTimeOut+0x60>)
 800eaf6:	6809      	ldr	r1, [r1, #0]
 800eaf8:	6820      	ldr	r0, [r4, #0]
 800eafa:	4288      	cmp	r0, r1
 800eafc:	d003      	beq.n	800eb06 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800eafe:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb00:	6861      	ldr	r1, [r4, #4]
 800eb02:	4291      	cmp	r1, r2
 800eb04:	d904      	bls.n	800eb10 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800eb06:	6861      	ldr	r1, [r4, #4]
 800eb08:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800eb0a:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800eb0c:	4283      	cmp	r3, r0
 800eb0e:	d803      	bhi.n	800eb18 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800eb10:	f000 fc56 	bl	800f3c0 <vPortExitCritical>
}
 800eb14:	0028      	movs	r0, r5
 800eb16:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800eb18:	1a9b      	subs	r3, r3, r2
 800eb1a:	185b      	adds	r3, r3, r1
 800eb1c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800eb1e:	0020      	movs	r0, r4
 800eb20:	f7ff ffc6 	bl	800eab0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800eb24:	2500      	movs	r5, #0
 800eb26:	e7f3      	b.n	800eb10 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800eb28:	2500      	movs	r5, #0
 800eb2a:	e7f1      	b.n	800eb10 <xTaskCheckForTimeOut+0x40>
 800eb2c:	20001e7c 	.word	0x20001e7c
 800eb30:	20001e38 	.word	0x20001e38

0800eb34 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800eb34:	4b01      	ldr	r3, [pc, #4]	; (800eb3c <vTaskMissedYield+0x8>)
 800eb36:	2201      	movs	r2, #1
 800eb38:	601a      	str	r2, [r3, #0]
}
 800eb3a:	4770      	bx	lr
 800eb3c:	20001e80 	.word	0x20001e80

0800eb40 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800eb40:	4b05      	ldr	r3, [pc, #20]	; (800eb58 <xTaskGetSchedulerState+0x18>)
 800eb42:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb44:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d004      	beq.n	800eb54 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb4a:	4b04      	ldr	r3, [pc, #16]	; (800eb5c <xTaskGetSchedulerState+0x1c>)
 800eb4c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb4e:	4243      	negs	r3, r0
 800eb50:	4158      	adcs	r0, r3
 800eb52:	0040      	lsls	r0, r0, #1
	}
 800eb54:	4770      	bx	lr
 800eb56:	46c0      	nop			; (mov r8, r8)
 800eb58:	20001e50 	.word	0x20001e50
 800eb5c:	20001e00 	.word	0x20001e00

0800eb60 <vTaskPriorityInherit>:
	{
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eb64:	d01a      	beq.n	800eb9c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800eb68:	4b19      	ldr	r3, [pc, #100]	; (800ebd0 <vTaskPriorityInherit+0x70>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d214      	bcs.n	800eb9c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb72:	6983      	ldr	r3, [r0, #24]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	db05      	blt.n	800eb84 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb78:	4b15      	ldr	r3, [pc, #84]	; (800ebd0 <vTaskPriorityInherit+0x70>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eb7e:	2307      	movs	r3, #7
 800eb80:	1a5b      	subs	r3, r3, r1
 800eb82:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800eb84:	0093      	lsls	r3, r2, #2
 800eb86:	189b      	adds	r3, r3, r2
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	4a12      	ldr	r2, [pc, #72]	; (800ebd4 <vTaskPriorityInherit+0x74>)
 800eb8c:	189b      	adds	r3, r3, r2
 800eb8e:	6962      	ldr	r2, [r4, #20]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d004      	beq.n	800eb9e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <vTaskPriorityInherit+0x70>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800eb9c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb9e:	1d25      	adds	r5, r4, #4
 800eba0:	0028      	movs	r0, r5
 800eba2:	f7fe ff4c 	bl	800da3e <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eba6:	4b0a      	ldr	r3, [pc, #40]	; (800ebd0 <vTaskPriorityInherit+0x70>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebac:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ebae:	4a0a      	ldr	r2, [pc, #40]	; (800ebd8 <vTaskPriorityInherit+0x78>)
 800ebb0:	6812      	ldr	r2, [r2, #0]
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d808      	bhi.n	800ebc8 <vTaskPriorityInherit+0x68>
 800ebb6:	0098      	lsls	r0, r3, #2
 800ebb8:	18c0      	adds	r0, r0, r3
 800ebba:	0080      	lsls	r0, r0, #2
 800ebbc:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <vTaskPriorityInherit+0x74>)
 800ebbe:	18c0      	adds	r0, r0, r3
 800ebc0:	0029      	movs	r1, r5
 800ebc2:	f7fe ff19 	bl	800d9f8 <vListInsertEnd>
	}
 800ebc6:	e7e9      	b.n	800eb9c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800ebc8:	4a03      	ldr	r2, [pc, #12]	; (800ebd8 <vTaskPriorityInherit+0x78>)
 800ebca:	6013      	str	r3, [r2, #0]
 800ebcc:	e7f3      	b.n	800ebb6 <vTaskPriorityInherit+0x56>
 800ebce:	46c0      	nop			; (mov r8, r8)
 800ebd0:	20001d5c 	.word	0x20001d5c
 800ebd4:	20001d68 	.word	0x20001d68
 800ebd8:	20001e0c 	.word	0x20001e0c

0800ebdc <xTaskPriorityDisinherit>:
	{
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ebe0:	d02b      	beq.n	800ec3a <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800ebe2:	4b18      	ldr	r3, [pc, #96]	; (800ec44 <xTaskPriorityDisinherit+0x68>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4283      	cmp	r3, r0
 800ebe8:	d001      	beq.n	800ebee <xTaskPriorityDisinherit+0x12>
 800ebea:	b672      	cpsid	i
 800ebec:	e7fe      	b.n	800ebec <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d101      	bne.n	800ebf8 <xTaskPriorityDisinherit+0x1c>
 800ebf4:	b672      	cpsid	i
 800ebf6:	e7fe      	b.n	800ebf6 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebfc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ebfe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ec00:	428a      	cmp	r2, r1
 800ec02:	d01c      	beq.n	800ec3e <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800ec04:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec06:	4283      	cmp	r3, r0
 800ec08:	d118      	bne.n	800ec3c <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ec0a:	1d25      	adds	r5, r4, #4
 800ec0c:	0028      	movs	r0, r5
 800ec0e:	f7fe ff16 	bl	800da3e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ec14:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec16:	2207      	movs	r2, #7
 800ec18:	1ad2      	subs	r2, r2, r3
 800ec1a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec1c:	4a0a      	ldr	r2, [pc, #40]	; (800ec48 <xTaskPriorityDisinherit+0x6c>)
 800ec1e:	6812      	ldr	r2, [r2, #0]
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d901      	bls.n	800ec28 <xTaskPriorityDisinherit+0x4c>
 800ec24:	4a08      	ldr	r2, [pc, #32]	; (800ec48 <xTaskPriorityDisinherit+0x6c>)
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	2014      	movs	r0, #20
 800ec2a:	4358      	muls	r0, r3
 800ec2c:	4b07      	ldr	r3, [pc, #28]	; (800ec4c <xTaskPriorityDisinherit+0x70>)
 800ec2e:	18c0      	adds	r0, r0, r3
 800ec30:	0029      	movs	r1, r5
 800ec32:	f7fe fee1 	bl	800d9f8 <vListInsertEnd>
					xReturn = pdTRUE;
 800ec36:	2001      	movs	r0, #1
 800ec38:	e000      	b.n	800ec3c <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800ec3a:	2000      	movs	r0, #0
	}
 800ec3c:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800ec3e:	2000      	movs	r0, #0
 800ec40:	e7fc      	b.n	800ec3c <xTaskPriorityDisinherit+0x60>
 800ec42:	46c0      	nop			; (mov r8, r8)
 800ec44:	20001d5c 	.word	0x20001d5c
 800ec48:	20001e0c 	.word	0x20001e0c
 800ec4c:	20001d68 	.word	0x20001d68

0800ec50 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ec50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec52:	b085      	sub	sp, #20
 800ec54:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ec56:	2300      	movs	r3, #0
 800ec58:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ec5a:	4b2b      	ldr	r3, [pc, #172]	; (800ed08 <vTaskList+0xb8>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ec60:	6818      	ldr	r0, [r3, #0]
 800ec62:	0140      	lsls	r0, r0, #5
 800ec64:	f000 fc22 	bl	800f4ac <pvPortMalloc>
 800ec68:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800ec6a:	d04a      	beq.n	800ed02 <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ec6c:	9903      	ldr	r1, [sp, #12]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f7ff fdca 	bl	800e808 <uxTaskGetSystemState>
 800ec74:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ec76:	2300      	movs	r3, #0
 800ec78:	9302      	str	r3, [sp, #8]
 800ec7a:	9a02      	ldr	r2, [sp, #8]
 800ec7c:	9b03      	ldr	r3, [sp, #12]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d23c      	bcs.n	800ecfc <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ec82:	4e22      	ldr	r6, [pc, #136]	; (800ed0c <vTaskList+0xbc>)
 800ec84:	e027      	b.n	800ecd6 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800ec86:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d133      	bne.n	800ecf4 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ec8c:	9b02      	ldr	r3, [sp, #8]
 800ec8e:	015b      	lsls	r3, r3, #5
 800ec90:	18fb      	adds	r3, r7, r3
 800ec92:	6859      	ldr	r1, [r3, #4]
 800ec94:	0020      	movs	r0, r4
 800ec96:	f7ff fab1 	bl	800e1fc <prvWriteNameToBuffer>
 800ec9a:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ec9c:	9b02      	ldr	r3, [sp, #8]
 800ec9e:	9a02      	ldr	r2, [sp, #8]
 800eca0:	9902      	ldr	r1, [sp, #8]
 800eca2:	015b      	lsls	r3, r3, #5
 800eca4:	18fb      	adds	r3, r7, r3
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	0149      	lsls	r1, r1, #5
 800ecaa:	1879      	adds	r1, r7, r1
 800ecac:	6889      	ldr	r1, [r1, #8]
 800ecae:	9101      	str	r1, [sp, #4]
 800ecb0:	0152      	lsls	r2, r2, #5
 800ecb2:	18ba      	adds	r2, r7, r2
 800ecb4:	8b92      	ldrh	r2, [r2, #28]
 800ecb6:	9200      	str	r2, [sp, #0]
 800ecb8:	002a      	movs	r2, r5
 800ecba:	0031      	movs	r1, r6
 800ecbc:	f004 fb78 	bl	80133b0 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ecc0:	0020      	movs	r0, r4
 800ecc2:	f7f1 fa29 	bl	8000118 <strlen>
 800ecc6:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ecc8:	9b02      	ldr	r3, [sp, #8]
 800ecca:	3301      	adds	r3, #1
 800eccc:	9302      	str	r3, [sp, #8]
 800ecce:	9a02      	ldr	r2, [sp, #8]
 800ecd0:	9b03      	ldr	r3, [sp, #12]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d212      	bcs.n	800ecfc <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ecd6:	9b02      	ldr	r3, [sp, #8]
 800ecd8:	015b      	lsls	r3, r3, #5
 800ecda:	18fb      	adds	r3, r7, r3
 800ecdc:	7b1b      	ldrb	r3, [r3, #12]
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d00a      	beq.n	800ecf8 <vTaskList+0xa8>
 800ece2:	b2da      	uxtb	r2, r3
 800ece4:	2a02      	cmp	r2, #2
 800ece6:	d9ce      	bls.n	800ec86 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ece8:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d0ce      	beq.n	800ec8c <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ecee:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ecf0:	2b04      	cmp	r3, #4
 800ecf2:	d0cb      	beq.n	800ec8c <vTaskList+0x3c>
										cStatus = 0x00;
 800ecf4:	2500      	movs	r5, #0
										break;
 800ecf6:	e7c9      	b.n	800ec8c <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ecf8:	2542      	movs	r5, #66	; 0x42
 800ecfa:	e7c7      	b.n	800ec8c <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ecfc:	0038      	movs	r0, r7
 800ecfe:	f000 fc6b 	bl	800f5d8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed02:	b005      	add	sp, #20
 800ed04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed06:	46c0      	nop			; (mov r8, r8)
 800ed08:	20001df8 	.word	0x20001df8
 800ed0c:	0801a5e8 	.word	0x0801a5e8

0800ed10 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ed16:	2300      	movs	r3, #0
 800ed18:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ed1a:	4b26      	ldr	r3, [pc, #152]	; (800edb4 <vTaskGetRunTimeStats+0xa4>)
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	0140      	lsls	r0, r0, #5
 800ed24:	f000 fbc2 	bl	800f4ac <pvPortMalloc>
 800ed28:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800ed2a:	d014      	beq.n	800ed56 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ed2c:	9903      	ldr	r1, [sp, #12]
 800ed2e:	aa01      	add	r2, sp, #4
 800ed30:	f7ff fd6a 	bl	800e808 <uxTaskGetSystemState>
 800ed34:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ed36:	2164      	movs	r1, #100	; 0x64
 800ed38:	9801      	ldr	r0, [sp, #4]
 800ed3a:	f7f1 fa09 	bl	8000150 <__udivsi3>
 800ed3e:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d005      	beq.n	800ed50 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ed44:	2300      	movs	r3, #0
 800ed46:	9302      	str	r3, [sp, #8]
 800ed48:	9a02      	ldr	r2, [sp, #8]
 800ed4a:	9b03      	ldr	r3, [sp, #12]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d316      	bcc.n	800ed7e <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ed50:	0030      	movs	r0, r6
 800ed52:	f000 fc41 	bl	800f5d8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed56:	b004      	add	sp, #16
 800ed58:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ed5a:	9b02      	ldr	r3, [sp, #8]
 800ed5c:	015b      	lsls	r3, r3, #5
 800ed5e:	18f3      	adds	r3, r6, r3
 800ed60:	699a      	ldr	r2, [r3, #24]
 800ed62:	4915      	ldr	r1, [pc, #84]	; (800edb8 <vTaskGetRunTimeStats+0xa8>)
 800ed64:	f004 fb24 	bl	80133b0 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ed68:	0020      	movs	r0, r4
 800ed6a:	f7f1 f9d5 	bl	8000118 <strlen>
 800ed6e:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ed70:	9b02      	ldr	r3, [sp, #8]
 800ed72:	3301      	adds	r3, #1
 800ed74:	9302      	str	r3, [sp, #8]
 800ed76:	9a02      	ldr	r2, [sp, #8]
 800ed78:	9b03      	ldr	r3, [sp, #12]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d2e8      	bcs.n	800ed50 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ed7e:	9b02      	ldr	r3, [sp, #8]
 800ed80:	015b      	lsls	r3, r3, #5
 800ed82:	18f3      	adds	r3, r6, r3
 800ed84:	9901      	ldr	r1, [sp, #4]
 800ed86:	6998      	ldr	r0, [r3, #24]
 800ed88:	f7f1 f9e2 	bl	8000150 <__udivsi3>
 800ed8c:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ed8e:	9b02      	ldr	r3, [sp, #8]
 800ed90:	015b      	lsls	r3, r3, #5
 800ed92:	18f3      	adds	r3, r6, r3
 800ed94:	6859      	ldr	r1, [r3, #4]
 800ed96:	0020      	movs	r0, r4
 800ed98:	f7ff fa30 	bl	800e1fc <prvWriteNameToBuffer>
 800ed9c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800ed9e:	2d00      	cmp	r5, #0
 800eda0:	d0db      	beq.n	800ed5a <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800eda2:	9b02      	ldr	r3, [sp, #8]
 800eda4:	015b      	lsls	r3, r3, #5
 800eda6:	18f3      	adds	r3, r6, r3
 800eda8:	699a      	ldr	r2, [r3, #24]
 800edaa:	002b      	movs	r3, r5
 800edac:	4903      	ldr	r1, [pc, #12]	; (800edbc <vTaskGetRunTimeStats+0xac>)
 800edae:	f004 faff 	bl	80133b0 <sprintf>
 800edb2:	e7d9      	b.n	800ed68 <vTaskGetRunTimeStats+0x58>
 800edb4:	20001df8 	.word	0x20001df8
 800edb8:	0801a5dc 	.word	0x0801a5dc
 800edbc:	0801a5d0 	.word	0x0801a5d0

0800edc0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800edc0:	4b05      	ldr	r3, [pc, #20]	; (800edd8 <pvTaskIncrementMutexHeldCount+0x18>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d004      	beq.n	800edd2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800edc8:	4b03      	ldr	r3, [pc, #12]	; (800edd8 <pvTaskIncrementMutexHeldCount+0x18>)
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800edce:	3301      	adds	r3, #1
 800edd0:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800edd2:	4b01      	ldr	r3, [pc, #4]	; (800edd8 <pvTaskIncrementMutexHeldCount+0x18>)
 800edd4:	6818      	ldr	r0, [r3, #0]
	}
 800edd6:	4770      	bx	lr
 800edd8:	20001d5c 	.word	0x20001d5c

0800eddc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	0005      	movs	r5, r0
 800ede0:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ede2:	f000 fae1 	bl	800f3a8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ede6:	4b20      	ldr	r3, [pc, #128]	; (800ee68 <ulTaskNotifyTake+0x8c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edec:	2b00      	cmp	r3, #0
 800edee:	d106      	bne.n	800edfe <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800edf0:	4b1d      	ldr	r3, [pc, #116]	; (800ee68 <ulTaskNotifyTake+0x8c>)
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	235c      	movs	r3, #92	; 0x5c
 800edf6:	2101      	movs	r1, #1
 800edf8:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800edfa:	2c00      	cmp	r4, #0
 800edfc:	d118      	bne.n	800ee30 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edfe:	f000 fadf 	bl	800f3c0 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee02:	f000 fad1 	bl	800f3a8 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ee06:	4b18      	ldr	r3, [pc, #96]	; (800ee68 <ulTaskNotifyTake+0x8c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ee0c:	2c00      	cmp	r4, #0
 800ee0e:	d006      	beq.n	800ee1e <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800ee10:	2d00      	cmp	r5, #0
 800ee12:	d123      	bne.n	800ee5c <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ee14:	4b14      	ldr	r3, [pc, #80]	; (800ee68 <ulTaskNotifyTake+0x8c>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ee1e:	4b12      	ldr	r3, [pc, #72]	; (800ee68 <ulTaskNotifyTake+0x8c>)
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	235c      	movs	r3, #92	; 0x5c
 800ee24:	2100      	movs	r1, #0
 800ee26:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ee28:	f000 faca 	bl	800f3c0 <vPortExitCritical>

		return ulReturn;
	}
 800ee2c:	0020      	movs	r0, r4
 800ee2e:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ee30:	4b0d      	ldr	r3, [pc, #52]	; (800ee68 <ulTaskNotifyTake+0x8c>)
 800ee32:	6818      	ldr	r0, [r3, #0]
 800ee34:	3004      	adds	r0, #4
 800ee36:	f7fe fe02 	bl	800da3e <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ee3a:	1c63      	adds	r3, r4, #1
 800ee3c:	d007      	beq.n	800ee4e <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800ee3e:	4b0b      	ldr	r3, [pc, #44]	; (800ee6c <ulTaskNotifyTake+0x90>)
 800ee40:	6818      	ldr	r0, [r3, #0]
 800ee42:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ee44:	f7ff f9b0 	bl	800e1a8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ee48:	f000 faa2 	bl	800f390 <vPortYield>
 800ee4c:	e7d7      	b.n	800edfe <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ee4e:	4b06      	ldr	r3, [pc, #24]	; (800ee68 <ulTaskNotifyTake+0x8c>)
 800ee50:	6819      	ldr	r1, [r3, #0]
 800ee52:	3104      	adds	r1, #4
 800ee54:	4806      	ldr	r0, [pc, #24]	; (800ee70 <ulTaskNotifyTake+0x94>)
 800ee56:	f7fe fdcf 	bl	800d9f8 <vListInsertEnd>
 800ee5a:	e7f5      	b.n	800ee48 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ee5c:	4b02      	ldr	r3, [pc, #8]	; (800ee68 <ulTaskNotifyTake+0x8c>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2200      	movs	r2, #0
 800ee62:	659a      	str	r2, [r3, #88]	; 0x58
 800ee64:	e7db      	b.n	800ee1e <ulTaskNotifyTake+0x42>
 800ee66:	46c0      	nop			; (mov r8, r8)
 800ee68:	20001d5c 	.word	0x20001d5c
 800ee6c:	20001e7c 	.word	0x20001e7c
 800ee70:	20001e54 	.word	0x20001e54

0800ee74 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ee74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee76:	0004      	movs	r4, r0
 800ee78:	000e      	movs	r6, r1
 800ee7a:	0015      	movs	r5, r2
 800ee7c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d101      	bne.n	800ee86 <xTaskGenericNotify+0x12>
 800ee82:	b672      	cpsid	i
 800ee84:	e7fe      	b.n	800ee84 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800ee86:	f000 fa8f 	bl	800f3a8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ee8a:	2f00      	cmp	r7, #0
 800ee8c:	d001      	beq.n	800ee92 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee90:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800ee92:	225c      	movs	r2, #92	; 0x5c
 800ee94:	5ca3      	ldrb	r3, [r4, r2]
 800ee96:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800ee98:	2102      	movs	r1, #2
 800ee9a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800ee9c:	2d02      	cmp	r5, #2
 800ee9e:	d015      	beq.n	800eecc <xTaskGenericNotify+0x58>
 800eea0:	d907      	bls.n	800eeb2 <xTaskGenericNotify+0x3e>
 800eea2:	2d03      	cmp	r5, #3
 800eea4:	d016      	beq.n	800eed4 <xTaskGenericNotify+0x60>
 800eea6:	2d04      	cmp	r5, #4
 800eea8:	d105      	bne.n	800eeb6 <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800eeaa:	2b02      	cmp	r3, #2
 800eeac:	d035      	beq.n	800ef1a <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eeae:	65a6      	str	r6, [r4, #88]	; 0x58
 800eeb0:	e001      	b.n	800eeb6 <xTaskGenericNotify+0x42>
			switch( eAction )
 800eeb2:	2d01      	cmp	r5, #1
 800eeb4:	d006      	beq.n	800eec4 <xTaskGenericNotify+0x50>
 800eeb6:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d00d      	beq.n	800eed8 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eebc:	f000 fa80 	bl	800f3c0 <vPortExitCritical>

		return xReturn;
	}
 800eec0:	0028      	movs	r0, r5
 800eec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800eec4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800eec6:	4316      	orrs	r6, r2
 800eec8:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800eeca:	e7f4      	b.n	800eeb6 <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800eecc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800eece:	3201      	adds	r2, #1
 800eed0:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800eed2:	e7f0      	b.n	800eeb6 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800eed4:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800eed6:	e7ee      	b.n	800eeb6 <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eed8:	1d25      	adds	r5, r4, #4
 800eeda:	0028      	movs	r0, r5
 800eedc:	f7fe fdaf 	bl	800da3e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800eee0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eee2:	4a0f      	ldr	r2, [pc, #60]	; (800ef20 <xTaskGenericNotify+0xac>)
 800eee4:	6812      	ldr	r2, [r2, #0]
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d901      	bls.n	800eeee <xTaskGenericNotify+0x7a>
 800eeea:	4a0d      	ldr	r2, [pc, #52]	; (800ef20 <xTaskGenericNotify+0xac>)
 800eeec:	6013      	str	r3, [r2, #0]
 800eeee:	2014      	movs	r0, #20
 800eef0:	4358      	muls	r0, r3
 800eef2:	4b0c      	ldr	r3, [pc, #48]	; (800ef24 <xTaskGenericNotify+0xb0>)
 800eef4:	18c0      	adds	r0, r0, r3
 800eef6:	0029      	movs	r1, r5
 800eef8:	f7fe fd7e 	bl	800d9f8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eefc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d001      	beq.n	800ef06 <xTaskGenericNotify+0x92>
 800ef02:	b672      	cpsid	i
 800ef04:	e7fe      	b.n	800ef04 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef06:	4b08      	ldr	r3, [pc, #32]	; (800ef28 <xTaskGenericNotify+0xb4>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ef0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0e:	2501      	movs	r5, #1
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d9d3      	bls.n	800eebc <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800ef14:	f000 fa3c 	bl	800f390 <vPortYield>
 800ef18:	e7d0      	b.n	800eebc <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800ef1a:	2500      	movs	r5, #0
 800ef1c:	e7ce      	b.n	800eebc <xTaskGenericNotify+0x48>
 800ef1e:	46c0      	nop			; (mov r8, r8)
 800ef20:	20001e0c 	.word	0x20001e0c
 800ef24:	20001d68 	.word	0x20001d68
 800ef28:	20001d5c 	.word	0x20001d5c

0800ef2c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef2c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef2e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef30:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ef32:	4291      	cmp	r1, r2
 800ef34:	d80b      	bhi.n	800ef4e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ef36:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ef38:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ef3a:	6983      	ldr	r3, [r0, #24]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d211      	bcs.n	800ef64 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef40:	1d01      	adds	r1, r0, #4
 800ef42:	4b09      	ldr	r3, [pc, #36]	; (800ef68 <prvInsertTimerInActiveList+0x3c>)
 800ef44:	6818      	ldr	r0, [r3, #0]
 800ef46:	f7fe fd63 	bl	800da10 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ef4a:	2400      	movs	r4, #0
 800ef4c:	e00a      	b.n	800ef64 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d202      	bcs.n	800ef58 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ef52:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef54:	4299      	cmp	r1, r3
 800ef56:	d205      	bcs.n	800ef64 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef58:	1d01      	adds	r1, r0, #4
 800ef5a:	4b04      	ldr	r3, [pc, #16]	; (800ef6c <prvInsertTimerInActiveList+0x40>)
 800ef5c:	6818      	ldr	r0, [r3, #0]
 800ef5e:	f7fe fd57 	bl	800da10 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ef62:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800ef64:	0020      	movs	r0, r4
 800ef66:	bd10      	pop	{r4, pc}
 800ef68:	20001e88 	.word	0x20001e88
 800ef6c:	20001e84 	.word	0x20001e84

0800ef70 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef70:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef72:	f000 fa19 	bl	800f3a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef76:	4b11      	ldr	r3, [pc, #68]	; (800efbc <prvCheckForValidListAndQueue+0x4c>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d002      	beq.n	800ef84 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef7e:	f000 fa1f 	bl	800f3c0 <vPortExitCritical>
}
 800ef82:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800ef84:	4d0e      	ldr	r5, [pc, #56]	; (800efc0 <prvCheckForValidListAndQueue+0x50>)
 800ef86:	0028      	movs	r0, r5
 800ef88:	f7fe fd28 	bl	800d9dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef8c:	4c0d      	ldr	r4, [pc, #52]	; (800efc4 <prvCheckForValidListAndQueue+0x54>)
 800ef8e:	0020      	movs	r0, r4
 800ef90:	f7fe fd24 	bl	800d9dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef94:	4b0c      	ldr	r3, [pc, #48]	; (800efc8 <prvCheckForValidListAndQueue+0x58>)
 800ef96:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef98:	4b0c      	ldr	r3, [pc, #48]	; (800efcc <prvCheckForValidListAndQueue+0x5c>)
 800ef9a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	2110      	movs	r1, #16
 800efa0:	2004      	movs	r0, #4
 800efa2:	f7fe fe26 	bl	800dbf2 <xQueueGenericCreate>
 800efa6:	4b05      	ldr	r3, [pc, #20]	; (800efbc <prvCheckForValidListAndQueue+0x4c>)
 800efa8:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800efaa:	2800      	cmp	r0, #0
 800efac:	d101      	bne.n	800efb2 <prvCheckForValidListAndQueue+0x42>
 800efae:	b672      	cpsid	i
 800efb0:	e7fe      	b.n	800efb0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efb2:	4907      	ldr	r1, [pc, #28]	; (800efd0 <prvCheckForValidListAndQueue+0x60>)
 800efb4:	f7ff f856 	bl	800e064 <vQueueAddToRegistry>
 800efb8:	e7e1      	b.n	800ef7e <prvCheckForValidListAndQueue+0xe>
 800efba:	46c0      	nop			; (mov r8, r8)
 800efbc:	20001eb8 	.word	0x20001eb8
 800efc0:	20001e8c 	.word	0x20001e8c
 800efc4:	20001ea0 	.word	0x20001ea0
 800efc8:	20001e84 	.word	0x20001e84
 800efcc:	20001e88 	.word	0x20001e88
 800efd0:	0801a628 	.word	0x0801a628

0800efd4 <xTimerCreateTimerTask>:
{
 800efd4:	b500      	push	{lr}
 800efd6:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800efd8:	f7ff ffca 	bl	800ef70 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800efdc:	4b0a      	ldr	r3, [pc, #40]	; (800f008 <xTimerCreateTimerTask+0x34>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00d      	beq.n	800f000 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800efe4:	2300      	movs	r3, #0
 800efe6:	9303      	str	r3, [sp, #12]
 800efe8:	9302      	str	r3, [sp, #8]
 800efea:	9301      	str	r3, [sp, #4]
 800efec:	3303      	adds	r3, #3
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	2300      	movs	r3, #0
 800eff2:	22a0      	movs	r2, #160	; 0xa0
 800eff4:	4905      	ldr	r1, [pc, #20]	; (800f00c <xTimerCreateTimerTask+0x38>)
 800eff6:	4806      	ldr	r0, [pc, #24]	; (800f010 <xTimerCreateTimerTask+0x3c>)
 800eff8:	f7ff f918 	bl	800e22c <xTaskGenericCreate>
	configASSERT( xReturn );
 800effc:	2800      	cmp	r0, #0
 800effe:	d101      	bne.n	800f004 <xTimerCreateTimerTask+0x30>
 800f000:	b672      	cpsid	i
 800f002:	e7fe      	b.n	800f002 <xTimerCreateTimerTask+0x2e>
}
 800f004:	b005      	add	sp, #20
 800f006:	bd00      	pop	{pc}
 800f008:	20001eb8 	.word	0x20001eb8
 800f00c:	0801a630 	.word	0x0801a630
 800f010:	0800f15d 	.word	0x0800f15d

0800f014 <xTimerCreate>:
{
 800f014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f016:	46c6      	mov	lr, r8
 800f018:	b500      	push	{lr}
 800f01a:	4680      	mov	r8, r0
 800f01c:	000d      	movs	r5, r1
 800f01e:	0017      	movs	r7, r2
 800f020:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f022:	2900      	cmp	r1, #0
 800f024:	d014      	beq.n	800f050 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f026:	202c      	movs	r0, #44	; 0x2c
 800f028:	f000 fa40 	bl	800f4ac <pvPortMalloc>
 800f02c:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f02e:	d00b      	beq.n	800f048 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f030:	f7ff ff9e 	bl	800ef70 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f034:	4643      	mov	r3, r8
 800f036:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f038:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f03a:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f03c:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f03e:	9b06      	ldr	r3, [sp, #24]
 800f040:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f042:	1d20      	adds	r0, r4, #4
 800f044:	f7fe fcd5 	bl	800d9f2 <vListInitialiseItem>
}
 800f048:	0020      	movs	r0, r4
 800f04a:	bc04      	pop	{r2}
 800f04c:	4690      	mov	r8, r2
 800f04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f050:	b672      	cpsid	i
 800f052:	e7fe      	b.n	800f052 <xTimerCreate+0x3e>

0800f054 <xTimerGenericCommand>:
{
 800f054:	b530      	push	{r4, r5, lr}
 800f056:	b085      	sub	sp, #20
 800f058:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f05a:	4b13      	ldr	r3, [pc, #76]	; (800f0a8 <xTimerGenericCommand+0x54>)
 800f05c:	681c      	ldr	r4, [r3, #0]
 800f05e:	2c00      	cmp	r4, #0
 800f060:	d020      	beq.n	800f0a4 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f062:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f064:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f066:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f068:	2905      	cmp	r1, #5
 800f06a:	dc13      	bgt.n	800f094 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f06c:	f7ff fd68 	bl	800eb40 <xTaskGetSchedulerState>
 800f070:	2802      	cmp	r0, #2
 800f072:	d007      	beq.n	800f084 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f074:	4b0c      	ldr	r3, [pc, #48]	; (800f0a8 <xTimerGenericCommand+0x54>)
 800f076:	6818      	ldr	r0, [r3, #0]
 800f078:	2300      	movs	r3, #0
 800f07a:	2200      	movs	r2, #0
 800f07c:	4669      	mov	r1, sp
 800f07e:	f7fe fdf3 	bl	800dc68 <xQueueGenericSend>
 800f082:	e00d      	b.n	800f0a0 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f084:	4b08      	ldr	r3, [pc, #32]	; (800f0a8 <xTimerGenericCommand+0x54>)
 800f086:	6818      	ldr	r0, [r3, #0]
 800f088:	2300      	movs	r3, #0
 800f08a:	9a08      	ldr	r2, [sp, #32]
 800f08c:	4669      	mov	r1, sp
 800f08e:	f7fe fdeb 	bl	800dc68 <xQueueGenericSend>
 800f092:	e005      	b.n	800f0a0 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f094:	2300      	movs	r3, #0
 800f096:	002a      	movs	r2, r5
 800f098:	4669      	mov	r1, sp
 800f09a:	0020      	movs	r0, r4
 800f09c:	f7fe fe7b 	bl	800dd96 <xQueueGenericSendFromISR>
}
 800f0a0:	b005      	add	sp, #20
 800f0a2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f0a4:	2000      	movs	r0, #0
	return xReturn;
 800f0a6:	e7fb      	b.n	800f0a0 <xTimerGenericCommand+0x4c>
 800f0a8:	20001eb8 	.word	0x20001eb8

0800f0ac <prvSampleTimeNow>:
{
 800f0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ae:	46d6      	mov	lr, sl
 800f0b0:	464f      	mov	r7, r9
 800f0b2:	4646      	mov	r6, r8
 800f0b4:	b5c0      	push	{r6, r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800f0ba:	f7ff fa43 	bl	800e544 <xTaskGetTickCount>
 800f0be:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800f0c0:	4b23      	ldr	r3, [pc, #140]	; (800f150 <prvSampleTimeNow+0xa4>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4283      	cmp	r3, r0
 800f0c6:	d80b      	bhi.n	800f0e0 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	4642      	mov	r2, r8
 800f0cc:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800f0ce:	4b20      	ldr	r3, [pc, #128]	; (800f150 <prvSampleTimeNow+0xa4>)
 800f0d0:	601f      	str	r7, [r3, #0]
}
 800f0d2:	0038      	movs	r0, r7
 800f0d4:	b004      	add	sp, #16
 800f0d6:	bc1c      	pop	{r2, r3, r4}
 800f0d8:	4690      	mov	r8, r2
 800f0da:	4699      	mov	r9, r3
 800f0dc:	46a2      	mov	sl, r4
 800f0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0e0:	4e1c      	ldr	r6, [pc, #112]	; (800f154 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0e6:	6833      	ldr	r3, [r6, #0]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	d026      	beq.n	800f13c <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0f4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0f6:	1d25      	adds	r5, r4, #4
 800f0f8:	0028      	movs	r0, r5
 800f0fa:	f7fe fca0 	bl	800da3e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0fe:	0020      	movs	r0, r4
 800f100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f102:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f104:	69e3      	ldr	r3, [r4, #28]
 800f106:	2b01      	cmp	r3, #1
 800f108:	d1ed      	bne.n	800f0e6 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f10a:	69a3      	ldr	r3, [r4, #24]
 800f10c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f10e:	459a      	cmp	sl, r3
 800f110:	d209      	bcs.n	800f126 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f112:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f114:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f116:	4b0f      	ldr	r3, [pc, #60]	; (800f154 <prvSampleTimeNow+0xa8>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	9303      	str	r3, [sp, #12]
 800f11c:	0029      	movs	r1, r5
 800f11e:	0018      	movs	r0, r3
 800f120:	f7fe fc76 	bl	800da10 <vListInsert>
 800f124:	e7df      	b.n	800f0e6 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f126:	464b      	mov	r3, r9
 800f128:	9300      	str	r3, [sp, #0]
 800f12a:	4652      	mov	r2, sl
 800f12c:	4649      	mov	r1, r9
 800f12e:	0020      	movs	r0, r4
 800f130:	f7ff ff90 	bl	800f054 <xTimerGenericCommand>
				configASSERT( xResult );
 800f134:	2800      	cmp	r0, #0
 800f136:	d1d6      	bne.n	800f0e6 <prvSampleTimeNow+0x3a>
 800f138:	b672      	cpsid	i
 800f13a:	e7fe      	b.n	800f13a <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800f13c:	4a06      	ldr	r2, [pc, #24]	; (800f158 <prvSampleTimeNow+0xac>)
 800f13e:	4905      	ldr	r1, [pc, #20]	; (800f154 <prvSampleTimeNow+0xa8>)
 800f140:	6810      	ldr	r0, [r2, #0]
 800f142:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f144:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f146:	2301      	movs	r3, #1
 800f148:	4642      	mov	r2, r8
 800f14a:	6013      	str	r3, [r2, #0]
 800f14c:	e7bf      	b.n	800f0ce <prvSampleTimeNow+0x22>
 800f14e:	46c0      	nop			; (mov r8, r8)
 800f150:	20001eb4 	.word	0x20001eb4
 800f154:	20001e84 	.word	0x20001e84
 800f158:	20001e88 	.word	0x20001e88

0800f15c <prvTimerTask>:
{
 800f15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f15e:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800f160:	4e57      	ldr	r6, [pc, #348]	; (800f2c0 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f162:	4b58      	ldr	r3, [pc, #352]	; (800f2c4 <prvTimerTask+0x168>)
 800f164:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	2a00      	cmp	r2, #0
 800f16a:	d100      	bne.n	800f16e <prvTimerTask+0x12>
 800f16c:	e09c      	b.n	800f2a8 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800f172:	f7ff f9df 	bl	800e534 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f176:	a808      	add	r0, sp, #32
 800f178:	f7ff ff98 	bl	800f0ac <prvSampleTimeNow>
 800f17c:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f17e:	9b08      	ldr	r3, [sp, #32]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d000      	beq.n	800f186 <prvTimerTask+0x2a>
 800f184:	e099      	b.n	800f2ba <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f186:	42a0      	cmp	r0, r4
 800f188:	d233      	bcs.n	800f1f2 <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f18a:	1b61      	subs	r1, r4, r5
 800f18c:	4b4e      	ldr	r3, [pc, #312]	; (800f2c8 <prvTimerTask+0x16c>)
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	f7fe ff80 	bl	800e094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f194:	f7ff fa6e 	bl	800e674 <xTaskResumeAll>
 800f198:	2800      	cmp	r0, #0
 800f19a:	d050      	beq.n	800f23e <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f19c:	4c4a      	ldr	r4, [pc, #296]	; (800f2c8 <prvTimerTask+0x16c>)
 800f19e:	2300      	movs	r3, #0
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	a908      	add	r1, sp, #32
 800f1a4:	6820      	ldr	r0, [r4, #0]
 800f1a6:	f7fe fe78 	bl	800de9a <xQueueGenericReceive>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d0d9      	beq.n	800f162 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f1ae:	9b08      	ldr	r3, [sp, #32]
 800f1b0:	9303      	str	r3, [sp, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	da0c      	bge.n	800f1d0 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1b8:	9303      	str	r3, [sp, #12]
 800f1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1bc:	9304      	str	r3, [sp, #16]
 800f1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1c0:	9305      	str	r3, [sp, #20]
 800f1c2:	9903      	ldr	r1, [sp, #12]
 800f1c4:	9804      	ldr	r0, [sp, #16]
 800f1c6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f1c8:	9b08      	ldr	r3, [sp, #32]
 800f1ca:	9303      	str	r3, [sp, #12]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	dbe6      	blt.n	800f19e <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f1d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f1d2:	696b      	ldr	r3, [r5, #20]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1d8:	1d28      	adds	r0, r5, #4
 800f1da:	f7fe fc30 	bl	800da3e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1de:	a807      	add	r0, sp, #28
 800f1e0:	f7ff ff64 	bl	800f0ac <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f1e4:	9b08      	ldr	r3, [sp, #32]
 800f1e6:	9303      	str	r3, [sp, #12]
 800f1e8:	2b09      	cmp	r3, #9
 800f1ea:	d8d8      	bhi.n	800f19e <prvTimerTask+0x42>
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	58f3      	ldr	r3, [r6, r3]
 800f1f0:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800f1f2:	f7ff fa3f 	bl	800e674 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1f6:	4b33      	ldr	r3, [pc, #204]	; (800f2c4 <prvTimerTask+0x168>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1fe:	1d38      	adds	r0, r7, #4
 800f200:	f7fe fc1d 	bl	800da3e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d003      	beq.n	800f212 <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20c:	0038      	movs	r0, r7
 800f20e:	4798      	blx	r3
 800f210:	e7c4      	b.n	800f19c <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	18e1      	adds	r1, r4, r3
 800f216:	0023      	movs	r3, r4
 800f218:	002a      	movs	r2, r5
 800f21a:	0038      	movs	r0, r7
 800f21c:	f7ff fe86 	bl	800ef2c <prvInsertTimerInActiveList>
 800f220:	2801      	cmp	r0, #1
 800f222:	d1f2      	bne.n	800f20a <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f224:	2100      	movs	r1, #0
 800f226:	9100      	str	r1, [sp, #0]
 800f228:	000b      	movs	r3, r1
 800f22a:	0022      	movs	r2, r4
 800f22c:	0038      	movs	r0, r7
 800f22e:	f7ff ff11 	bl	800f054 <xTimerGenericCommand>
			configASSERT( xResult );
 800f232:	2800      	cmp	r0, #0
 800f234:	d1e9      	bne.n	800f20a <prvTimerTask+0xae>
 800f236:	b672      	cpsid	i
 800f238:	e7fe      	b.n	800f238 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800f23a:	2400      	movs	r4, #0
 800f23c:	e7a5      	b.n	800f18a <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800f23e:	f000 f8a7 	bl	800f390 <vPortYield>
 800f242:	e7ab      	b.n	800f19c <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f246:	69aa      	ldr	r2, [r5, #24]
 800f248:	4694      	mov	ip, r2
 800f24a:	4463      	add	r3, ip
 800f24c:	0019      	movs	r1, r3
 800f24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f250:	0002      	movs	r2, r0
 800f252:	0028      	movs	r0, r5
 800f254:	f7ff fe6a 	bl	800ef2c <prvInsertTimerInActiveList>
 800f258:	2801      	cmp	r0, #1
 800f25a:	d1a0      	bne.n	800f19e <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f25c:	0028      	movs	r0, r5
 800f25e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f260:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f262:	69eb      	ldr	r3, [r5, #28]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d19a      	bne.n	800f19e <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f26a:	69a9      	ldr	r1, [r5, #24]
 800f26c:	468c      	mov	ip, r1
 800f26e:	4463      	add	r3, ip
 800f270:	001a      	movs	r2, r3
 800f272:	2300      	movs	r3, #0
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	2100      	movs	r1, #0
 800f278:	0028      	movs	r0, r5
 800f27a:	f7ff feeb 	bl	800f054 <xTimerGenericCommand>
							configASSERT( xResult );
 800f27e:	2800      	cmp	r0, #0
 800f280:	d18d      	bne.n	800f19e <prvTimerTask+0x42>
 800f282:	b672      	cpsid	i
 800f284:	e7fe      	b.n	800f284 <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f286:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f288:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f28a:	2900      	cmp	r1, #0
 800f28c:	d006      	beq.n	800f29c <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f28e:	1841      	adds	r1, r0, r1
 800f290:	0003      	movs	r3, r0
 800f292:	0002      	movs	r2, r0
 800f294:	0028      	movs	r0, r5
 800f296:	f7ff fe49 	bl	800ef2c <prvInsertTimerInActiveList>
 800f29a:	e780      	b.n	800f19e <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f29c:	b672      	cpsid	i
 800f29e:	e7fe      	b.n	800f29e <prvTimerTask+0x142>
					vPortFree( pxTimer );
 800f2a0:	0028      	movs	r0, r5
 800f2a2:	f000 f999 	bl	800f5d8 <vPortFree>
 800f2a6:	e77a      	b.n	800f19e <prvTimerTask+0x42>
	vTaskSuspendAll();
 800f2a8:	f7ff f944 	bl	800e534 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2ac:	a808      	add	r0, sp, #32
 800f2ae:	f7ff fefd 	bl	800f0ac <prvSampleTimeNow>
 800f2b2:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f2b4:	9b08      	ldr	r3, [sp, #32]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d0bf      	beq.n	800f23a <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 800f2ba:	f7ff f9db 	bl	800e674 <xTaskResumeAll>
 800f2be:	e76d      	b.n	800f19c <prvTimerTask+0x40>
 800f2c0:	0801a600 	.word	0x0801a600
 800f2c4:	20001e84 	.word	0x20001e84
 800f2c8:	20001eb8 	.word	0x20001eb8

0800f2cc <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f2cc:	b510      	push	{r4, lr}
 800f2ce:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f2d0:	d101      	bne.n	800f2d6 <pvTimerGetTimerID+0xa>
 800f2d2:	b672      	cpsid	i
 800f2d4:	e7fe      	b.n	800f2d4 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f2d6:	f000 f867 	bl	800f3a8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f2da:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f2dc:	f000 f870 	bl	800f3c0 <vPortExitCritical>

	return pvReturn;
}
 800f2e0:	0020      	movs	r0, r4
 800f2e2:	bd10      	pop	{r4, pc}

0800f2e4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f2e4:	4b03      	ldr	r3, [pc, #12]	; (800f2f4 <prvTaskExitError+0x10>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	d001      	beq.n	800f2f0 <prvTaskExitError+0xc>
 800f2ec:	b672      	cpsid	i
 800f2ee:	e7fe      	b.n	800f2ee <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f2f0:	b672      	cpsid	i
 800f2f2:	e7fe      	b.n	800f2f2 <prvTaskExitError+0xe>
 800f2f4:	200000a4 	.word	0x200000a4

0800f2f8 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f2f8:	4a06      	ldr	r2, [pc, #24]	; (800f314 <pxCurrentTCBConst2>)
 800f2fa:	6813      	ldr	r3, [r2, #0]
 800f2fc:	6818      	ldr	r0, [r3, #0]
 800f2fe:	3020      	adds	r0, #32
 800f300:	f380 8809 	msr	PSP, r0
 800f304:	2002      	movs	r0, #2
 800f306:	f380 8814 	msr	CONTROL, r0
 800f30a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f30c:	46ae      	mov	lr, r5
 800f30e:	b662      	cpsie	i
 800f310:	bd00      	pop	{pc}
 800f312:	46c0      	nop			; (mov r8, r8)

0800f314 <pxCurrentTCBConst2>:
 800f314:	20001d5c 	.word	0x20001d5c

0800f318 <pxPortInitialiseStack>:
{
 800f318:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f31a:	1f03      	subs	r3, r0, #4
 800f31c:	2480      	movs	r4, #128	; 0x80
 800f31e:	0464      	lsls	r4, r4, #17
 800f320:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f322:	3b04      	subs	r3, #4
 800f324:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f326:	3b04      	subs	r3, #4
 800f328:	4902      	ldr	r1, [pc, #8]	; (800f334 <pxPortInitialiseStack+0x1c>)
 800f32a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f32c:	3b14      	subs	r3, #20
 800f32e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f330:	3840      	subs	r0, #64	; 0x40
}
 800f332:	bd10      	pop	{r4, pc}
 800f334:	0800f2e5 	.word	0x0800f2e5

0800f338 <SVC_Handler>:
}
 800f338:	4770      	bx	lr
	...

0800f33c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f33c:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f33e:	4b0f      	ldr	r3, [pc, #60]	; (800f37c <xPortStartScheduler+0x40>)
 800f340:	6819      	ldr	r1, [r3, #0]
 800f342:	22ff      	movs	r2, #255	; 0xff
 800f344:	0412      	lsls	r2, r2, #16
 800f346:	430a      	orrs	r2, r1
 800f348:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f34a:	6819      	ldr	r1, [r3, #0]
 800f34c:	22ff      	movs	r2, #255	; 0xff
 800f34e:	0612      	lsls	r2, r2, #24
 800f350:	430a      	orrs	r2, r1
 800f352:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f354:	4b0a      	ldr	r3, [pc, #40]	; (800f380 <xPortStartScheduler+0x44>)
 800f356:	6818      	ldr	r0, [r3, #0]
 800f358:	21fa      	movs	r1, #250	; 0xfa
 800f35a:	0089      	lsls	r1, r1, #2
 800f35c:	f7f0 fef8 	bl	8000150 <__udivsi3>
 800f360:	3801      	subs	r0, #1
 800f362:	4b08      	ldr	r3, [pc, #32]	; (800f384 <xPortStartScheduler+0x48>)
 800f364:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f366:	4b08      	ldr	r3, [pc, #32]	; (800f388 <xPortStartScheduler+0x4c>)
 800f368:	2207      	movs	r2, #7
 800f36a:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f36c:	4b07      	ldr	r3, [pc, #28]	; (800f38c <xPortStartScheduler+0x50>)
 800f36e:	2200      	movs	r2, #0
 800f370:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f372:	f7ff ffc1 	bl	800f2f8 <vPortStartFirstTask>
	prvTaskExitError();
 800f376:	f7ff ffb5 	bl	800f2e4 <prvTaskExitError>
 800f37a:	46c0      	nop			; (mov r8, r8)
 800f37c:	e000ed20 	.word	0xe000ed20
 800f380:	20000090 	.word	0x20000090
 800f384:	e000e014 	.word	0xe000e014
 800f388:	e000e010 	.word	0xe000e010
 800f38c:	200000a4 	.word	0x200000a4

0800f390 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f390:	4b04      	ldr	r3, [pc, #16]	; (800f3a4 <vPortYield+0x14>)
 800f392:	2280      	movs	r2, #128	; 0x80
 800f394:	0552      	lsls	r2, r2, #21
 800f396:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f398:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f39c:	f3bf 8f6f 	isb	sy
}
 800f3a0:	4770      	bx	lr
 800f3a2:	46c0      	nop			; (mov r8, r8)
 800f3a4:	e000ed04 	.word	0xe000ed04

0800f3a8 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f3a8:	b672      	cpsid	i
    uxCriticalNesting++;
 800f3aa:	4a04      	ldr	r2, [pc, #16]	; (800f3bc <vPortEnterCritical+0x14>)
 800f3ac:	6813      	ldr	r3, [r2, #0]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f3b2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f3b6:	f3bf 8f6f 	isb	sy
}
 800f3ba:	4770      	bx	lr
 800f3bc:	200000a4 	.word	0x200000a4

0800f3c0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f3c0:	4b06      	ldr	r3, [pc, #24]	; (800f3dc <vPortExitCritical+0x1c>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d101      	bne.n	800f3cc <vPortExitCritical+0xc>
 800f3c8:	b672      	cpsid	i
 800f3ca:	e7fe      	b.n	800f3ca <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	4a03      	ldr	r2, [pc, #12]	; (800f3dc <vPortExitCritical+0x1c>)
 800f3d0:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d100      	bne.n	800f3d8 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800f3d6:	b662      	cpsie	i
}
 800f3d8:	4770      	bx	lr
 800f3da:	46c0      	nop			; (mov r8, r8)
 800f3dc:	200000a4 	.word	0x200000a4

0800f3e0 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f3e0:	f3ef 8010 	mrs	r0, PRIMASK
 800f3e4:	b672      	cpsid	i
 800f3e6:	4770      	bx	lr
}
 800f3e8:	2000      	movs	r0, #0

0800f3ea <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f3ea:	f380 8810 	msr	PRIMASK, r0
 800f3ee:	4770      	bx	lr

0800f3f0 <PendSV_Handler>:
	__asm volatile
 800f3f0:	f3ef 8009 	mrs	r0, PSP
 800f3f4:	4b0e      	ldr	r3, [pc, #56]	; (800f430 <pxCurrentTCBConst>)
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	3820      	subs	r0, #32
 800f3fa:	6010      	str	r0, [r2, #0]
 800f3fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f3fe:	4644      	mov	r4, r8
 800f400:	464d      	mov	r5, r9
 800f402:	4656      	mov	r6, sl
 800f404:	465f      	mov	r7, fp
 800f406:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f408:	b508      	push	{r3, lr}
 800f40a:	b672      	cpsid	i
 800f40c:	f7ff fa4e 	bl	800e8ac <vTaskSwitchContext>
 800f410:	b662      	cpsie	i
 800f412:	bc0c      	pop	{r2, r3}
 800f414:	6811      	ldr	r1, [r2, #0]
 800f416:	6808      	ldr	r0, [r1, #0]
 800f418:	3010      	adds	r0, #16
 800f41a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f41c:	46a0      	mov	r8, r4
 800f41e:	46a9      	mov	r9, r5
 800f420:	46b2      	mov	sl, r6
 800f422:	46bb      	mov	fp, r7
 800f424:	f380 8809 	msr	PSP, r0
 800f428:	3820      	subs	r0, #32
 800f42a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f42c:	4718      	bx	r3
 800f42e:	46c0      	nop			; (mov r8, r8)

0800f430 <pxCurrentTCBConst>:
 800f430:	20001d5c 	.word	0x20001d5c

0800f434 <xPortSysTickHandler>:
{
 800f434:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f436:	f7ff ffd3 	bl	800f3e0 <ulSetInterruptMaskFromISR>
 800f43a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f43c:	f7ff f88e 	bl	800e55c <xTaskIncrementTick>
 800f440:	2800      	cmp	r0, #0
 800f442:	d003      	beq.n	800f44c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f444:	4b03      	ldr	r3, [pc, #12]	; (800f454 <xPortSysTickHandler+0x20>)
 800f446:	2280      	movs	r2, #128	; 0x80
 800f448:	0552      	lsls	r2, r2, #21
 800f44a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f44c:	0020      	movs	r0, r4
 800f44e:	f7ff ffcc 	bl	800f3ea <vClearInterruptMaskFromISR>
}
 800f452:	bd10      	pop	{r4, pc}
 800f454:	e000ed04 	.word	0xe000ed04

0800f458 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f458:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f45a:	4b12      	ldr	r3, [pc, #72]	; (800f4a4 <prvInsertBlockIntoFreeList+0x4c>)
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	4282      	cmp	r2, r0
 800f460:	d319      	bcc.n	800f496 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f462:	685c      	ldr	r4, [r3, #4]
 800f464:	1919      	adds	r1, r3, r4
 800f466:	4288      	cmp	r0, r1
 800f468:	d103      	bne.n	800f472 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f46a:	6841      	ldr	r1, [r0, #4]
 800f46c:	1909      	adds	r1, r1, r4
 800f46e:	6059      	str	r1, [r3, #4]
 800f470:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f472:	6841      	ldr	r1, [r0, #4]
 800f474:	1844      	adds	r4, r0, r1
 800f476:	42a2      	cmp	r2, r4
 800f478:	d111      	bne.n	800f49e <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f47a:	4c0b      	ldr	r4, [pc, #44]	; (800f4a8 <prvInsertBlockIntoFreeList+0x50>)
 800f47c:	6824      	ldr	r4, [r4, #0]
 800f47e:	42a2      	cmp	r2, r4
 800f480:	d00b      	beq.n	800f49a <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f482:	6852      	ldr	r2, [r2, #4]
 800f484:	1852      	adds	r2, r2, r1
 800f486:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	6812      	ldr	r2, [r2, #0]
 800f48c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f48e:	4298      	cmp	r0, r3
 800f490:	d000      	beq.n	800f494 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f492:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f494:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f496:	0013      	movs	r3, r2
 800f498:	e7e0      	b.n	800f45c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f49a:	6002      	str	r2, [r0, #0]
 800f49c:	e7f7      	b.n	800f48e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f49e:	6002      	str	r2, [r0, #0]
 800f4a0:	e7f5      	b.n	800f48e <prvInsertBlockIntoFreeList+0x36>
 800f4a2:	46c0      	nop			; (mov r8, r8)
 800f4a4:	20006904 	.word	0x20006904
 800f4a8:	20001ebc 	.word	0x20001ebc

0800f4ac <pvPortMalloc>:
{
 800f4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ae:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f4b0:	f7ff f840 	bl	800e534 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f4b4:	4b41      	ldr	r3, [pc, #260]	; (800f5bc <pvPortMalloc+0x110>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00a      	beq.n	800f4d2 <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f4bc:	4b40      	ldr	r3, [pc, #256]	; (800f5c0 <pvPortMalloc+0x114>)
 800f4be:	681f      	ldr	r7, [r3, #0]
 800f4c0:	423c      	tst	r4, r7
 800f4c2:	d02a      	beq.n	800f51a <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 800f4c4:	f7ff f8d6 	bl	800e674 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f4c8:	f7fd fbc8 	bl	800cc5c <vApplicationMallocFailedHook>
 800f4cc:	2500      	movs	r5, #0
}
 800f4ce:	0028      	movs	r0, r5
 800f4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 800f4d2:	4a3c      	ldr	r2, [pc, #240]	; (800f5c4 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f4d4:	0753      	lsls	r3, r2, #29
 800f4d6:	d01e      	beq.n	800f516 <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4d8:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f4da:	2307      	movs	r3, #7
 800f4dc:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f4de:	4b3a      	ldr	r3, [pc, #232]	; (800f5c8 <pvPortMalloc+0x11c>)
 800f4e0:	18d3      	adds	r3, r2, r3
 800f4e2:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f4e4:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f4e6:	4839      	ldr	r0, [pc, #228]	; (800f5cc <pvPortMalloc+0x120>)
 800f4e8:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f4ee:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800f4f0:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f4f2:	2007      	movs	r0, #7
 800f4f4:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800f4f6:	4831      	ldr	r0, [pc, #196]	; (800f5bc <pvPortMalloc+0x110>)
 800f4f8:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f4fa:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f4fc:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f4fe:	1a99      	subs	r1, r3, r2
 800f500:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f502:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f504:	4b32      	ldr	r3, [pc, #200]	; (800f5d0 <pvPortMalloc+0x124>)
 800f506:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f508:	4b32      	ldr	r3, [pc, #200]	; (800f5d4 <pvPortMalloc+0x128>)
 800f50a:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f50c:	4b2c      	ldr	r3, [pc, #176]	; (800f5c0 <pvPortMalloc+0x114>)
 800f50e:	2280      	movs	r2, #128	; 0x80
 800f510:	0612      	lsls	r2, r2, #24
 800f512:	601a      	str	r2, [r3, #0]
 800f514:	e7d2      	b.n	800f4bc <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f516:	4b2c      	ldr	r3, [pc, #176]	; (800f5c8 <pvPortMalloc+0x11c>)
 800f518:	e7e5      	b.n	800f4e6 <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 800f51a:	2c00      	cmp	r4, #0
 800f51c:	d008      	beq.n	800f530 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 800f51e:	0023      	movs	r3, r4
 800f520:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f522:	075a      	lsls	r2, r3, #29
 800f524:	d002      	beq.n	800f52c <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f526:	2207      	movs	r2, #7
 800f528:	4393      	bics	r3, r2
 800f52a:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d102      	bne.n	800f536 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800f530:	f7ff f8a0 	bl	800e674 <xTaskResumeAll>
 800f534:	e7c8      	b.n	800f4c8 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f536:	4a27      	ldr	r2, [pc, #156]	; (800f5d4 <pvPortMalloc+0x128>)
 800f538:	6816      	ldr	r6, [r2, #0]
 800f53a:	429e      	cmp	r6, r3
 800f53c:	d302      	bcc.n	800f544 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800f53e:	4a23      	ldr	r2, [pc, #140]	; (800f5cc <pvPortMalloc+0x120>)
 800f540:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f542:	e004      	b.n	800f54e <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 800f544:	f7ff f896 	bl	800e674 <xTaskResumeAll>
 800f548:	e7be      	b.n	800f4c8 <pvPortMalloc+0x1c>
 800f54a:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f54c:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f54e:	6861      	ldr	r1, [r4, #4]
 800f550:	4299      	cmp	r1, r3
 800f552:	d202      	bcs.n	800f55a <pvPortMalloc+0xae>
 800f554:	6821      	ldr	r1, [r4, #0]
 800f556:	2900      	cmp	r1, #0
 800f558:	d1f7      	bne.n	800f54a <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800f55a:	4918      	ldr	r1, [pc, #96]	; (800f5bc <pvPortMalloc+0x110>)
 800f55c:	6809      	ldr	r1, [r1, #0]
 800f55e:	42a1      	cmp	r1, r4
 800f560:	d00b      	beq.n	800f57a <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f562:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f564:	6821      	ldr	r1, [r4, #0]
 800f566:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f568:	6862      	ldr	r2, [r4, #4]
 800f56a:	1ad2      	subs	r2, r2, r3
 800f56c:	2a10      	cmp	r2, #16
 800f56e:	d90b      	bls.n	800f588 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f570:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f572:	0741      	lsls	r1, r0, #29
 800f574:	d004      	beq.n	800f580 <pvPortMalloc+0xd4>
 800f576:	b672      	cpsid	i
 800f578:	e7fe      	b.n	800f578 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 800f57a:	f7ff f87b 	bl	800e674 <xTaskResumeAll>
 800f57e:	e7a3      	b.n	800f4c8 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f580:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f582:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f584:	f7ff ff68 	bl	800f458 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f588:	6862      	ldr	r2, [r4, #4]
 800f58a:	1ab6      	subs	r6, r6, r2
 800f58c:	4911      	ldr	r1, [pc, #68]	; (800f5d4 <pvPortMalloc+0x128>)
 800f58e:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f590:	490f      	ldr	r1, [pc, #60]	; (800f5d0 <pvPortMalloc+0x124>)
 800f592:	6809      	ldr	r1, [r1, #0]
 800f594:	428e      	cmp	r6, r1
 800f596:	d201      	bcs.n	800f59c <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f598:	490d      	ldr	r1, [pc, #52]	; (800f5d0 <pvPortMalloc+0x124>)
 800f59a:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f59c:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f59e:	4317      	orrs	r7, r2
 800f5a0:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f5a6:	f7ff f865 	bl	800e674 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f5aa:	2d00      	cmp	r5, #0
 800f5ac:	d100      	bne.n	800f5b0 <pvPortMalloc+0x104>
 800f5ae:	e78b      	b.n	800f4c8 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5b0:	076b      	lsls	r3, r5, #29
 800f5b2:	d100      	bne.n	800f5b6 <pvPortMalloc+0x10a>
 800f5b4:	e78b      	b.n	800f4ce <pvPortMalloc+0x22>
 800f5b6:	b672      	cpsid	i
 800f5b8:	e7fe      	b.n	800f5b8 <pvPortMalloc+0x10c>
 800f5ba:	46c0      	nop			; (mov r8, r8)
 800f5bc:	20001ebc 	.word	0x20001ebc
 800f5c0:	200068f8 	.word	0x200068f8
 800f5c4:	20001ec0 	.word	0x20001ec0
 800f5c8:	00004a38 	.word	0x00004a38
 800f5cc:	20006904 	.word	0x20006904
 800f5d0:	20006900 	.word	0x20006900
 800f5d4:	200068fc 	.word	0x200068fc

0800f5d8 <vPortFree>:
{
 800f5d8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	d020      	beq.n	800f620 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5de:	0003      	movs	r3, r0
 800f5e0:	3b08      	subs	r3, #8
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	4a0f      	ldr	r2, [pc, #60]	; (800f624 <vPortFree+0x4c>)
 800f5e6:	6812      	ldr	r2, [r2, #0]
 800f5e8:	421a      	tst	r2, r3
 800f5ea:	d101      	bne.n	800f5f0 <vPortFree+0x18>
 800f5ec:	b672      	cpsid	i
 800f5ee:	e7fe      	b.n	800f5ee <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5f0:	0001      	movs	r1, r0
 800f5f2:	3908      	subs	r1, #8
 800f5f4:	6809      	ldr	r1, [r1, #0]
 800f5f6:	2900      	cmp	r1, #0
 800f5f8:	d001      	beq.n	800f5fe <vPortFree+0x26>
 800f5fa:	b672      	cpsid	i
 800f5fc:	e7fe      	b.n	800f5fc <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5fe:	3808      	subs	r0, #8
 800f600:	0004      	movs	r4, r0
 800f602:	4393      	bics	r3, r2
 800f604:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f606:	f7fe ff95 	bl	800e534 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f60a:	4a07      	ldr	r2, [pc, #28]	; (800f628 <vPortFree+0x50>)
 800f60c:	6863      	ldr	r3, [r4, #4]
 800f60e:	6811      	ldr	r1, [r2, #0]
 800f610:	468c      	mov	ip, r1
 800f612:	4463      	add	r3, ip
 800f614:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f616:	0020      	movs	r0, r4
 800f618:	f7ff ff1e 	bl	800f458 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f61c:	f7ff f82a 	bl	800e674 <xTaskResumeAll>
}
 800f620:	bd10      	pop	{r4, pc}
 800f622:	46c0      	nop			; (mov r8, r8)
 800f624:	200068f8 	.word	0x200068f8
 800f628:	200068fc 	.word	0x200068fc

0800f62c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f62c:	b510      	push	{r4, lr}
 800f62e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f630:	f002 f8f8 	bl	8011824 <HAL_RCC_GetHCLKFreq>
 800f634:	21fa      	movs	r1, #250	; 0xfa
 800f636:	0089      	lsls	r1, r1, #2
 800f638:	f7f0 fd8a 	bl	8000150 <__udivsi3>
 800f63c:	f000 fb9a 	bl	800fd74 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f640:	2001      	movs	r0, #1
 800f642:	2200      	movs	r2, #0
 800f644:	0021      	movs	r1, r4
 800f646:	4240      	negs	r0, r0
 800f648:	f000 fb4c 	bl	800fce4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f64c:	2000      	movs	r0, #0
 800f64e:	bd10      	pop	{r4, pc}

0800f650 <HAL_Init>:
{
 800f650:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f652:	4a06      	ldr	r2, [pc, #24]	; (800f66c <HAL_Init+0x1c>)
 800f654:	6813      	ldr	r3, [r2, #0]
 800f656:	2110      	movs	r1, #16
 800f658:	430b      	orrs	r3, r1
 800f65a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f65c:	2000      	movs	r0, #0
 800f65e:	f7ff ffe5 	bl	800f62c <HAL_InitTick>
  HAL_MspInit();
 800f662:	f001 fc87 	bl	8010f74 <HAL_MspInit>
}
 800f666:	2000      	movs	r0, #0
 800f668:	bd10      	pop	{r4, pc}
 800f66a:	46c0      	nop			; (mov r8, r8)
 800f66c:	40022000 	.word	0x40022000

0800f670 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f670:	4a02      	ldr	r2, [pc, #8]	; (800f67c <HAL_IncTick+0xc>)
 800f672:	6813      	ldr	r3, [r2, #0]
 800f674:	3301      	adds	r3, #1
 800f676:	6013      	str	r3, [r2, #0]
}
 800f678:	4770      	bx	lr
 800f67a:	46c0      	nop			; (mov r8, r8)
 800f67c:	2000690c 	.word	0x2000690c

0800f680 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f680:	4b01      	ldr	r3, [pc, #4]	; (800f688 <HAL_GetTick+0x8>)
 800f682:	6818      	ldr	r0, [r3, #0]
}
 800f684:	4770      	bx	lr
 800f686:	46c0      	nop			; (mov r8, r8)
 800f688:	2000690c 	.word	0x2000690c

0800f68c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f68c:	b510      	push	{r4, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f692:	f7ff fff5 	bl	800f680 <HAL_GetTick>
 800f696:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f698:	f7ff fff2 	bl	800f680 <HAL_GetTick>
 800f69c:	9b01      	ldr	r3, [sp, #4]
 800f69e:	1b00      	subs	r0, r0, r4
 800f6a0:	4298      	cmp	r0, r3
 800f6a2:	d3f9      	bcc.n	800f698 <HAL_Delay+0xc>
  {
  }
}
 800f6a4:	b002      	add	sp, #8
 800f6a6:	bd10      	pop	{r4, pc}

0800f6a8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f6a8:	4b01      	ldr	r3, [pc, #4]	; (800f6b0 <HAL_GetREVID+0x8>)
 800f6aa:	6818      	ldr	r0, [r3, #0]
 800f6ac:	0c00      	lsrs	r0, r0, #16
}
 800f6ae:	4770      	bx	lr
 800f6b0:	40015800 	.word	0x40015800

0800f6b4 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f6b4:	4b02      	ldr	r3, [pc, #8]	; (800f6c0 <HAL_GetDEVID+0xc>)
 800f6b6:	6818      	ldr	r0, [r3, #0]
 800f6b8:	0500      	lsls	r0, r0, #20
 800f6ba:	0d00      	lsrs	r0, r0, #20
}
 800f6bc:	4770      	bx	lr
 800f6be:	46c0      	nop			; (mov r8, r8)
 800f6c0:	40015800 	.word	0x40015800

0800f6c4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800f6c4:	b570      	push	{r4, r5, r6, lr}
 800f6c6:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f6c8:	6803      	ldr	r3, [r0, #0]
 800f6ca:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f6cc:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f6ce:	0752      	lsls	r2, r2, #29
 800f6d0:	d521      	bpl.n	800f716 <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f6d2:	689a      	ldr	r2, [r3, #8]
 800f6d4:	0752      	lsls	r2, r2, #29
 800f6d6:	d506      	bpl.n	800f6e6 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f6d8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f6da:	0792      	lsls	r2, r2, #30
 800f6dc:	d403      	bmi.n	800f6e6 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f6de:	689a      	ldr	r2, [r3, #8]
 800f6e0:	2110      	movs	r1, #16
 800f6e2:	430a      	orrs	r2, r1
 800f6e4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f6e6:	f7ff ffcb 	bl	800f680 <HAL_GetTick>
 800f6ea:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f6ec:	2504      	movs	r5, #4
 800f6ee:	6823      	ldr	r3, [r4, #0]
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	421d      	tst	r5, r3
 800f6f4:	d00e      	beq.n	800f714 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f6f6:	f7ff ffc3 	bl	800f680 <HAL_GetTick>
 800f6fa:	1b80      	subs	r0, r0, r6
 800f6fc:	2802      	cmp	r0, #2
 800f6fe:	d9f6      	bls.n	800f6ee <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f700:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f702:	2210      	movs	r2, #16
 800f704:	4313      	orrs	r3, r2
 800f706:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f708:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f70a:	3a0f      	subs	r2, #15
 800f70c:	4313      	orrs	r3, r2
 800f70e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f710:	2001      	movs	r0, #1
 800f712:	e000      	b.n	800f716 <ADC_ConversionStop+0x52>
  return HAL_OK;
 800f714:	2000      	movs	r0, #0
}
 800f716:	bd70      	pop	{r4, r5, r6, pc}

0800f718 <ADC_Disable>:
{
 800f718:	b570      	push	{r4, r5, r6, lr}
 800f71a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f71c:	6802      	ldr	r2, [r0, #0]
 800f71e:	6891      	ldr	r1, [r2, #8]
 800f720:	2303      	movs	r3, #3
 800f722:	400b      	ands	r3, r1
  return HAL_OK;
 800f724:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f726:	2b01      	cmp	r3, #1
 800f728:	d000      	beq.n	800f72c <ADC_Disable+0x14>
}
 800f72a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f72c:	6813      	ldr	r3, [r2, #0]
 800f72e:	07db      	lsls	r3, r3, #31
 800f730:	d402      	bmi.n	800f738 <ADC_Disable+0x20>
 800f732:	68d3      	ldr	r3, [r2, #12]
 800f734:	041b      	lsls	r3, r3, #16
 800f736:	d5f8      	bpl.n	800f72a <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f738:	6891      	ldr	r1, [r2, #8]
 800f73a:	2305      	movs	r3, #5
 800f73c:	400b      	ands	r3, r1
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d009      	beq.n	800f756 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f742:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f744:	2210      	movs	r2, #16
 800f746:	4313      	orrs	r3, r2
 800f748:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f74a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f74c:	3a0f      	subs	r2, #15
 800f74e:	4313      	orrs	r3, r2
 800f750:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f752:	2001      	movs	r0, #1
 800f754:	e7e9      	b.n	800f72a <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800f756:	6893      	ldr	r3, [r2, #8]
 800f758:	2102      	movs	r1, #2
 800f75a:	430b      	orrs	r3, r1
 800f75c:	6093      	str	r3, [r2, #8]
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	2203      	movs	r2, #3
 800f762:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f764:	f7ff ff8c 	bl	800f680 <HAL_GetTick>
 800f768:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f76a:	2501      	movs	r5, #1
 800f76c:	6823      	ldr	r3, [r4, #0]
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	421d      	tst	r5, r3
 800f772:	d00e      	beq.n	800f792 <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f774:	f7ff ff84 	bl	800f680 <HAL_GetTick>
 800f778:	1b80      	subs	r0, r0, r6
 800f77a:	2802      	cmp	r0, #2
 800f77c:	d9f6      	bls.n	800f76c <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f77e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f780:	2210      	movs	r2, #16
 800f782:	4313      	orrs	r3, r2
 800f784:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f786:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f788:	3a0f      	subs	r2, #15
 800f78a:	4313      	orrs	r3, r2
 800f78c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f78e:	2001      	movs	r0, #1
 800f790:	e7cb      	b.n	800f72a <ADC_Disable+0x12>
  return HAL_OK;
 800f792:	2000      	movs	r0, #0
 800f794:	e7c9      	b.n	800f72a <ADC_Disable+0x12>
	...

0800f798 <ADC_Enable>:
{
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f7a2:	6803      	ldr	r3, [r0, #0]
 800f7a4:	6899      	ldr	r1, [r3, #8]
 800f7a6:	2203      	movs	r2, #3
 800f7a8:	400a      	ands	r2, r1
 800f7aa:	2a01      	cmp	r2, #1
 800f7ac:	d02d      	beq.n	800f80a <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f7ae:	6899      	ldr	r1, [r3, #8]
 800f7b0:	4a20      	ldr	r2, [pc, #128]	; (800f834 <ADC_Enable+0x9c>)
 800f7b2:	4211      	tst	r1, r2
 800f7b4:	d131      	bne.n	800f81a <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 800f7b6:	689a      	ldr	r2, [r3, #8]
 800f7b8:	2101      	movs	r1, #1
 800f7ba:	430a      	orrs	r2, r1
 800f7bc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f7be:	4b1e      	ldr	r3, [pc, #120]	; (800f838 <ADC_Enable+0xa0>)
 800f7c0:	6818      	ldr	r0, [r3, #0]
 800f7c2:	491e      	ldr	r1, [pc, #120]	; (800f83c <ADC_Enable+0xa4>)
 800f7c4:	f7f0 fcc4 	bl	8000150 <__udivsi3>
 800f7c8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f7ca:	9b01      	ldr	r3, [sp, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d005      	beq.n	800f7dc <ADC_Enable+0x44>
      wait_loop_index--;
 800f7d0:	9b01      	ldr	r3, [sp, #4]
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f7d6:	9b01      	ldr	r3, [sp, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1f9      	bne.n	800f7d0 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f7dc:	f7ff ff50 	bl	800f680 <HAL_GetTick>
 800f7e0:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f7e2:	2501      	movs	r5, #1
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	421d      	tst	r5, r3
 800f7ea:	d121      	bne.n	800f830 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f7ec:	f7ff ff48 	bl	800f680 <HAL_GetTick>
 800f7f0:	1b80      	subs	r0, r0, r6
 800f7f2:	2802      	cmp	r0, #2
 800f7f4:	d9f6      	bls.n	800f7e4 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f7f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f7f8:	2210      	movs	r2, #16
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f7fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f800:	3a0f      	subs	r2, #15
 800f802:	4313      	orrs	r3, r2
 800f804:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f806:	2001      	movs	r0, #1
 800f808:	e010      	b.n	800f82c <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f80a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800f80c:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f80e:	07d2      	lsls	r2, r2, #31
 800f810:	d40c      	bmi.n	800f82c <ADC_Enable+0x94>
 800f812:	68da      	ldr	r2, [r3, #12]
 800f814:	0412      	lsls	r2, r2, #16
 800f816:	d5ca      	bpl.n	800f7ae <ADC_Enable+0x16>
 800f818:	e008      	b.n	800f82c <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f81a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f81c:	2210      	movs	r2, #16
 800f81e:	4313      	orrs	r3, r2
 800f820:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f822:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f824:	3a0f      	subs	r2, #15
 800f826:	4313      	orrs	r3, r2
 800f828:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f82a:	2001      	movs	r0, #1
}
 800f82c:	b002      	add	sp, #8
 800f82e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800f830:	2000      	movs	r0, #0
 800f832:	e7fb      	b.n	800f82c <ADC_Enable+0x94>
 800f834:	80000017 	.word	0x80000017
 800f838:	20000090 	.word	0x20000090
 800f83c:	000f4240 	.word	0x000f4240

0800f840 <HAL_ADC_Init>:
{
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f844:	d100      	bne.n	800f848 <HAL_ADC_Init+0x8>
 800f846:	e09b      	b.n	800f980 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f848:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d073      	beq.n	800f936 <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f84e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f850:	06db      	lsls	r3, r3, #27
 800f852:	d500      	bpl.n	800f856 <HAL_ADC_Init+0x16>
 800f854:	e08e      	b.n	800f974 <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f856:	6822      	ldr	r2, [r4, #0]
 800f858:	6893      	ldr	r3, [r2, #8]
 800f85a:	2104      	movs	r1, #4
 800f85c:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 800f85e:	d000      	beq.n	800f862 <HAL_ADC_Init+0x22>
 800f860:	e088      	b.n	800f974 <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 800f862:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f864:	4847      	ldr	r0, [pc, #284]	; (800f984 <HAL_ADC_Init+0x144>)
 800f866:	4003      	ands	r3, r0
 800f868:	3006      	adds	r0, #6
 800f86a:	30ff      	adds	r0, #255	; 0xff
 800f86c:	4303      	orrs	r3, r0
 800f86e:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f870:	6890      	ldr	r0, [r2, #8]
 800f872:	2303      	movs	r3, #3
 800f874:	4003      	ands	r3, r0
 800f876:	2b01      	cmp	r3, #1
 800f878:	d063      	beq.n	800f942 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f87a:	68d3      	ldr	r3, [r2, #12]
 800f87c:	2018      	movs	r0, #24
 800f87e:	4383      	bics	r3, r0
 800f880:	68a0      	ldr	r0, [r4, #8]
 800f882:	4303      	orrs	r3, r0
 800f884:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f886:	6822      	ldr	r2, [r4, #0]
 800f888:	6913      	ldr	r3, [r2, #16]
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	089b      	lsrs	r3, r3, #2
 800f88e:	6860      	ldr	r0, [r4, #4]
 800f890:	4303      	orrs	r3, r0
 800f892:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f894:	6822      	ldr	r2, [r4, #0]
 800f896:	68d3      	ldr	r3, [r2, #12]
 800f898:	483b      	ldr	r0, [pc, #236]	; (800f988 <HAL_ADC_Init+0x148>)
 800f89a:	4003      	ands	r3, r0
 800f89c:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f89e:	69a3      	ldr	r3, [r4, #24]
 800f8a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f8a2:	69e3      	ldr	r3, [r4, #28]
 800f8a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f8a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f8a8:	6a20      	ldr	r0, [r4, #32]
 800f8aa:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f8ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8ae:	000e      	movs	r6, r1
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d001      	beq.n	800f8b8 <HAL_ADC_Init+0x78>
 800f8b4:	2680      	movs	r6, #128	; 0x80
 800f8b6:	0176      	lsls	r6, r6, #5
 800f8b8:	68e3      	ldr	r3, [r4, #12]
 800f8ba:	431a      	orrs	r2, r3
 800f8bc:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	2b02      	cmp	r3, #2
 800f8c2:	d045      	beq.n	800f950 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f8c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8c6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	4333      	orrs	r3, r6
 800f8cc:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f8ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f8d0:	2a01      	cmp	r2, #1
 800f8d2:	d03f      	beq.n	800f954 <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f8d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f8d6:	21c2      	movs	r1, #194	; 0xc2
 800f8d8:	31ff      	adds	r1, #255	; 0xff
 800f8da:	428a      	cmp	r2, r1
 800f8dc:	d002      	beq.n	800f8e4 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f8de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f8e0:	430a      	orrs	r2, r1
 800f8e2:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f8e4:	6821      	ldr	r1, [r4, #0]
 800f8e6:	68ca      	ldr	r2, [r1, #12]
 800f8e8:	431a      	orrs	r2, r3
 800f8ea:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f8ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f8ee:	2180      	movs	r1, #128	; 0x80
 800f8f0:	0549      	lsls	r1, r1, #21
 800f8f2:	428a      	cmp	r2, r1
 800f8f4:	d002      	beq.n	800f8fc <HAL_ADC_Init+0xbc>
 800f8f6:	3a01      	subs	r2, #1
 800f8f8:	2a06      	cmp	r2, #6
 800f8fa:	d80a      	bhi.n	800f912 <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f8fc:	6820      	ldr	r0, [r4, #0]
 800f8fe:	6941      	ldr	r1, [r0, #20]
 800f900:	2207      	movs	r2, #7
 800f902:	4391      	bics	r1, r2
 800f904:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f906:	6821      	ldr	r1, [r4, #0]
 800f908:	6948      	ldr	r0, [r1, #20]
 800f90a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800f90c:	402a      	ands	r2, r5
 800f90e:	4302      	orrs	r2, r0
 800f910:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f912:	6822      	ldr	r2, [r4, #0]
 800f914:	68d2      	ldr	r2, [r2, #12]
 800f916:	491d      	ldr	r1, [pc, #116]	; (800f98c <HAL_ADC_Init+0x14c>)
 800f918:	400a      	ands	r2, r1
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d020      	beq.n	800f960 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 800f91e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f920:	2212      	movs	r2, #18
 800f922:	4393      	bics	r3, r2
 800f924:	3a02      	subs	r2, #2
 800f926:	4313      	orrs	r3, r2
 800f928:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f92a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f92c:	3a0f      	subs	r2, #15
 800f92e:	4313      	orrs	r3, r2
 800f930:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800f932:	2001      	movs	r0, #1
 800f934:	e023      	b.n	800f97e <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 800f936:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f938:	2240      	movs	r2, #64	; 0x40
 800f93a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f93c:	f7f8 feaa 	bl	8008694 <HAL_ADC_MspInit>
 800f940:	e785      	b.n	800f84e <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f942:	6813      	ldr	r3, [r2, #0]
 800f944:	07db      	lsls	r3, r3, #31
 800f946:	d4a5      	bmi.n	800f894 <HAL_ADC_Init+0x54>
 800f948:	68d3      	ldr	r3, [r2, #12]
 800f94a:	041b      	lsls	r3, r3, #16
 800f94c:	d4a2      	bmi.n	800f894 <HAL_ADC_Init+0x54>
 800f94e:	e794      	b.n	800f87a <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f950:	2104      	movs	r1, #4
 800f952:	e7b7      	b.n	800f8c4 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f954:	2800      	cmp	r0, #0
 800f956:	d1bd      	bne.n	800f8d4 <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f958:	2280      	movs	r2, #128	; 0x80
 800f95a:	0252      	lsls	r2, r2, #9
 800f95c:	4313      	orrs	r3, r2
 800f95e:	e7b9      	b.n	800f8d4 <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 800f960:	2300      	movs	r3, #0
 800f962:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f964:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f966:	2203      	movs	r2, #3
 800f968:	4393      	bics	r3, r2
 800f96a:	3a02      	subs	r2, #2
 800f96c:	4313      	orrs	r3, r2
 800f96e:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f970:	2000      	movs	r0, #0
 800f972:	e004      	b.n	800f97e <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f974:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f976:	2210      	movs	r2, #16
 800f978:	4313      	orrs	r3, r2
 800f97a:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800f97c:	2001      	movs	r0, #1
}
 800f97e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800f980:	2001      	movs	r0, #1
 800f982:	e7fc      	b.n	800f97e <HAL_ADC_Init+0x13e>
 800f984:	fffffefd 	.word	0xfffffefd
 800f988:	fffe0219 	.word	0xfffe0219
 800f98c:	833fffe7 	.word	0x833fffe7

0800f990 <HAL_ADC_Start>:
{
 800f990:	b510      	push	{r4, lr}
 800f992:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f994:	6803      	ldr	r3, [r0, #0]
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	075b      	lsls	r3, r3, #29
 800f99a:	d423      	bmi.n	800f9e4 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 800f99c:	2340      	movs	r3, #64	; 0x40
 800f99e:	5cc3      	ldrb	r3, [r0, r3]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d021      	beq.n	800f9e8 <HAL_ADC_Start+0x58>
 800f9a4:	2340      	movs	r3, #64	; 0x40
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f9aa:	69c3      	ldr	r3, [r0, #28]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d114      	bne.n	800f9da <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 800f9b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9b2:	4a0e      	ldr	r2, [pc, #56]	; (800f9ec <HAL_ADC_Start+0x5c>)
 800f9b4:	401a      	ands	r2, r3
 800f9b6:	2380      	movs	r3, #128	; 0x80
 800f9b8:	005b      	lsls	r3, r3, #1
 800f9ba:	4313      	orrs	r3, r2
 800f9bc:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800f9be:	2300      	movs	r3, #0
 800f9c0:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f9c2:	2240      	movs	r2, #64	; 0x40
 800f9c4:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f9c6:	6823      	ldr	r3, [r4, #0]
 800f9c8:	3a24      	subs	r2, #36	; 0x24
 800f9ca:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f9cc:	6822      	ldr	r2, [r4, #0]
 800f9ce:	6893      	ldr	r3, [r2, #8]
 800f9d0:	2104      	movs	r1, #4
 800f9d2:	430b      	orrs	r3, r1
 800f9d4:	6093      	str	r3, [r2, #8]
 800f9d6:	2000      	movs	r0, #0
}
 800f9d8:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f9da:	f7ff fedd 	bl	800f798 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	d0e6      	beq.n	800f9b0 <HAL_ADC_Start+0x20>
 800f9e2:	e7f9      	b.n	800f9d8 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 800f9e4:	2002      	movs	r0, #2
 800f9e6:	e7f7      	b.n	800f9d8 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 800f9e8:	2002      	movs	r0, #2
 800f9ea:	e7f5      	b.n	800f9d8 <HAL_ADC_Start+0x48>
 800f9ec:	fffff0fe 	.word	0xfffff0fe

0800f9f0 <HAL_ADC_Stop>:
{ 
 800f9f0:	b510      	push	{r4, lr}
 800f9f2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f9f4:	2340      	movs	r3, #64	; 0x40
 800f9f6:	5cc3      	ldrb	r3, [r0, r3]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d017      	beq.n	800fa2c <HAL_ADC_Stop+0x3c>
 800f9fc:	2340      	movs	r3, #64	; 0x40
 800f9fe:	2201      	movs	r2, #1
 800fa00:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800fa02:	f7ff fe5f 	bl	800f6c4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d003      	beq.n	800fa12 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800fa0a:	2340      	movs	r3, #64	; 0x40
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	54e2      	strb	r2, [r4, r3]
}
 800fa10:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800fa12:	0020      	movs	r0, r4
 800fa14:	f7ff fe80 	bl	800f718 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d1f6      	bne.n	800fa0a <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800fa1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa1e:	4a04      	ldr	r2, [pc, #16]	; (800fa30 <HAL_ADC_Stop+0x40>)
 800fa20:	4013      	ands	r3, r2
 800fa22:	3204      	adds	r2, #4
 800fa24:	32ff      	adds	r2, #255	; 0xff
 800fa26:	4313      	orrs	r3, r2
 800fa28:	6463      	str	r3, [r4, #68]	; 0x44
 800fa2a:	e7ee      	b.n	800fa0a <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800fa2c:	2002      	movs	r0, #2
 800fa2e:	e7ef      	b.n	800fa10 <HAL_ADC_Stop+0x20>
 800fa30:	fffffefe 	.word	0xfffffefe

0800fa34 <HAL_ADC_PollForConversion>:
{
 800fa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa36:	0006      	movs	r6, r0
 800fa38:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fa3a:	6943      	ldr	r3, [r0, #20]
 800fa3c:	2b08      	cmp	r3, #8
 800fa3e:	d026      	beq.n	800fa8e <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fa40:	6803      	ldr	r3, [r0, #0]
 800fa42:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fa44:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fa46:	07db      	lsls	r3, r3, #31
 800fa48:	d418      	bmi.n	800fa7c <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 800fa4a:	f7ff fe19 	bl	800f680 <HAL_GetTick>
 800fa4e:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fa50:	6832      	ldr	r2, [r6, #0]
 800fa52:	6813      	ldr	r3, [r2, #0]
 800fa54:	421d      	tst	r5, r3
 800fa56:	d11c      	bne.n	800fa92 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800fa58:	1c63      	adds	r3, r4, #1
 800fa5a:	d0fa      	beq.n	800fa52 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fa5c:	2c00      	cmp	r4, #0
 800fa5e:	d004      	beq.n	800fa6a <HAL_ADC_PollForConversion+0x36>
 800fa60:	f7ff fe0e 	bl	800f680 <HAL_GetTick>
 800fa64:	1bc0      	subs	r0, r0, r7
 800fa66:	42a0      	cmp	r0, r4
 800fa68:	d9f2      	bls.n	800fa50 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fa6a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fa6c:	2204      	movs	r2, #4
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fa72:	2340      	movs	r3, #64	; 0x40
 800fa74:	2200      	movs	r2, #0
 800fa76:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800fa78:	2003      	movs	r0, #3
 800fa7a:	e007      	b.n	800fa8c <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fa7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fa7e:	2220      	movs	r2, #32
 800fa80:	4313      	orrs	r3, r2
 800fa82:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fa84:	2340      	movs	r3, #64	; 0x40
 800fa86:	2200      	movs	r2, #0
 800fa88:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800fa8a:	2001      	movs	r0, #1
}
 800fa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fa8e:	2508      	movs	r5, #8
 800fa90:	e7db      	b.n	800fa4a <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fa92:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800fa94:	2380      	movs	r3, #128	; 0x80
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	430b      	orrs	r3, r1
 800fa9a:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fa9c:	68d1      	ldr	r1, [r2, #12]
 800fa9e:	23c0      	movs	r3, #192	; 0xc0
 800faa0:	011b      	lsls	r3, r3, #4
 800faa2:	4219      	tst	r1, r3
 800faa4:	d113      	bne.n	800face <HAL_ADC_PollForConversion+0x9a>
 800faa6:	6a33      	ldr	r3, [r6, #32]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d110      	bne.n	800face <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800faac:	6813      	ldr	r3, [r2, #0]
 800faae:	071b      	lsls	r3, r3, #28
 800fab0:	d50d      	bpl.n	800face <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fab2:	6893      	ldr	r3, [r2, #8]
 800fab4:	075b      	lsls	r3, r3, #29
 800fab6:	d412      	bmi.n	800fade <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fab8:	6853      	ldr	r3, [r2, #4]
 800faba:	210c      	movs	r1, #12
 800fabc:	438b      	bics	r3, r1
 800fabe:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800fac0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fac2:	4a0b      	ldr	r2, [pc, #44]	; (800faf0 <HAL_ADC_PollForConversion+0xbc>)
 800fac4:	4013      	ands	r3, r2
 800fac6:	3204      	adds	r2, #4
 800fac8:	32ff      	adds	r2, #255	; 0xff
 800faca:	4313      	orrs	r3, r2
 800facc:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 800face:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fad0:	69b3      	ldr	r3, [r6, #24]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d1da      	bne.n	800fa8c <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fad6:	6833      	ldr	r3, [r6, #0]
 800fad8:	220c      	movs	r2, #12
 800fada:	601a      	str	r2, [r3, #0]
 800fadc:	e7d6      	b.n	800fa8c <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fade:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fae0:	2220      	movs	r2, #32
 800fae2:	4313      	orrs	r3, r2
 800fae4:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fae6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fae8:	3a1f      	subs	r2, #31
 800faea:	4313      	orrs	r3, r2
 800faec:	64b3      	str	r3, [r6, #72]	; 0x48
 800faee:	e7ee      	b.n	800face <HAL_ADC_PollForConversion+0x9a>
 800faf0:	fffffefe 	.word	0xfffffefe

0800faf4 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800faf4:	6803      	ldr	r3, [r0, #0]
 800faf6:	2208      	movs	r2, #8
 800faf8:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800fafa:	6803      	ldr	r3, [r0, #0]
 800fafc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800fafe:	4770      	bx	lr

0800fb00 <HAL_ADC_ConfigChannel>:
{
 800fb00:	b530      	push	{r4, r5, lr}
 800fb02:	b083      	sub	sp, #12
 800fb04:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800fb06:	2300      	movs	r3, #0
 800fb08:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fb0a:	3340      	adds	r3, #64	; 0x40
 800fb0c:	5cc3      	ldrb	r3, [r0, r3]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d100      	bne.n	800fb14 <HAL_ADC_ConfigChannel+0x14>
 800fb12:	e088      	b.n	800fc26 <HAL_ADC_ConfigChannel+0x126>
 800fb14:	2340      	movs	r3, #64	; 0x40
 800fb16:	2201      	movs	r2, #1
 800fb18:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fb1a:	6803      	ldr	r3, [r0, #0]
 800fb1c:	689a      	ldr	r2, [r3, #8]
 800fb1e:	0752      	lsls	r2, r2, #29
 800fb20:	d475      	bmi.n	800fc0e <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 800fb22:	4a42      	ldr	r2, [pc, #264]	; (800fc2c <HAL_ADC_ConfigChannel+0x12c>)
 800fb24:	6848      	ldr	r0, [r1, #4]
 800fb26:	4290      	cmp	r0, r2
 800fb28:	d050      	beq.n	800fbcc <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fb2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	680d      	ldr	r5, [r1, #0]
 800fb30:	40aa      	lsls	r2, r5
 800fb32:	4302      	orrs	r2, r0
 800fb34:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fb36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb38:	2280      	movs	r2, #128	; 0x80
 800fb3a:	0552      	lsls	r2, r2, #21
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d013      	beq.n	800fb68 <HAL_ADC_ConfigChannel+0x68>
 800fb40:	3b01      	subs	r3, #1
 800fb42:	2b06      	cmp	r3, #6
 800fb44:	d910      	bls.n	800fb68 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fb46:	6822      	ldr	r2, [r4, #0]
 800fb48:	6950      	ldr	r0, [r2, #20]
 800fb4a:	2307      	movs	r3, #7
 800fb4c:	4003      	ands	r3, r0
 800fb4e:	6888      	ldr	r0, [r1, #8]
 800fb50:	4298      	cmp	r0, r3
 800fb52:	d009      	beq.n	800fb68 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fb54:	6950      	ldr	r0, [r2, #20]
 800fb56:	2307      	movs	r3, #7
 800fb58:	4398      	bics	r0, r3
 800fb5a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fb5c:	6822      	ldr	r2, [r4, #0]
 800fb5e:	6950      	ldr	r0, [r2, #20]
 800fb60:	688d      	ldr	r5, [r1, #8]
 800fb62:	402b      	ands	r3, r5
 800fb64:	4303      	orrs	r3, r0
 800fb66:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fb68:	680b      	ldr	r3, [r1, #0]
 800fb6a:	001a      	movs	r2, r3
 800fb6c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb6e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fb70:	2a02      	cmp	r2, #2
 800fb72:	d851      	bhi.n	800fc18 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb74:	4a2e      	ldr	r2, [pc, #184]	; (800fc30 <HAL_ADC_ConfigChannel+0x130>)
 800fb76:	6810      	ldr	r0, [r2, #0]
 800fb78:	2b10      	cmp	r3, #16
 800fb7a:	d024      	beq.n	800fbc6 <HAL_ADC_ConfigChannel+0xc6>
 800fb7c:	3b11      	subs	r3, #17
 800fb7e:	425a      	negs	r2, r3
 800fb80:	415a      	adcs	r2, r3
 800fb82:	4253      	negs	r3, r2
 800fb84:	4a2b      	ldr	r2, [pc, #172]	; (800fc34 <HAL_ADC_ConfigChannel+0x134>)
 800fb86:	4013      	ands	r3, r2
 800fb88:	2280      	movs	r2, #128	; 0x80
 800fb8a:	0452      	lsls	r2, r2, #17
 800fb8c:	4694      	mov	ip, r2
 800fb8e:	4463      	add	r3, ip
 800fb90:	4303      	orrs	r3, r0
 800fb92:	4a27      	ldr	r2, [pc, #156]	; (800fc30 <HAL_ADC_ConfigChannel+0x130>)
 800fb94:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fb96:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb98:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fb9a:	2b10      	cmp	r3, #16
 800fb9c:	d13c      	bne.n	800fc18 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fb9e:	4b26      	ldr	r3, [pc, #152]	; (800fc38 <HAL_ADC_ConfigChannel+0x138>)
 800fba0:	6818      	ldr	r0, [r3, #0]
 800fba2:	4926      	ldr	r1, [pc, #152]	; (800fc3c <HAL_ADC_ConfigChannel+0x13c>)
 800fba4:	f7f0 fad4 	bl	8000150 <__udivsi3>
 800fba8:	0083      	lsls	r3, r0, #2
 800fbaa:	1818      	adds	r0, r3, r0
 800fbac:	0040      	lsls	r0, r0, #1
 800fbae:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800fbb0:	9b01      	ldr	r3, [sp, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d035      	beq.n	800fc22 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 800fbb6:	9b01      	ldr	r3, [sp, #4]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fbbc:	9b01      	ldr	r3, [sp, #4]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d1f9      	bne.n	800fbb6 <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fbc2:	2000      	movs	r0, #0
 800fbc4:	e028      	b.n	800fc18 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fbc6:	2380      	movs	r3, #128	; 0x80
 800fbc8:	041b      	lsls	r3, r3, #16
 800fbca:	e7e1      	b.n	800fb90 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fbcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbce:	2001      	movs	r0, #1
 800fbd0:	680d      	ldr	r5, [r1, #0]
 800fbd2:	40a8      	lsls	r0, r5
 800fbd4:	4382      	bics	r2, r0
 800fbd6:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fbd8:	680b      	ldr	r3, [r1, #0]
 800fbda:	001a      	movs	r2, r3
 800fbdc:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fbde:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fbe0:	2a02      	cmp	r2, #2
 800fbe2:	d819      	bhi.n	800fc18 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fbe4:	4a12      	ldr	r2, [pc, #72]	; (800fc30 <HAL_ADC_ConfigChannel+0x130>)
 800fbe6:	6811      	ldr	r1, [r2, #0]
 800fbe8:	2b10      	cmp	r3, #16
 800fbea:	d00e      	beq.n	800fc0a <HAL_ADC_ConfigChannel+0x10a>
 800fbec:	3b11      	subs	r3, #17
 800fbee:	425a      	negs	r2, r3
 800fbf0:	415a      	adcs	r2, r3
 800fbf2:	4252      	negs	r2, r2
 800fbf4:	23c0      	movs	r3, #192	; 0xc0
 800fbf6:	041b      	lsls	r3, r3, #16
 800fbf8:	4013      	ands	r3, r2
 800fbfa:	4a11      	ldr	r2, [pc, #68]	; (800fc40 <HAL_ADC_ConfigChannel+0x140>)
 800fbfc:	4694      	mov	ip, r2
 800fbfe:	4463      	add	r3, ip
 800fc00:	400b      	ands	r3, r1
 800fc02:	4a0b      	ldr	r2, [pc, #44]	; (800fc30 <HAL_ADC_ConfigChannel+0x130>)
 800fc04:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc06:	2000      	movs	r0, #0
 800fc08:	e006      	b.n	800fc18 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fc0a:	4b0e      	ldr	r3, [pc, #56]	; (800fc44 <HAL_ADC_ConfigChannel+0x144>)
 800fc0c:	e7f8      	b.n	800fc00 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fc10:	2220      	movs	r2, #32
 800fc12:	4313      	orrs	r3, r2
 800fc14:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800fc16:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800fc18:	2340      	movs	r3, #64	; 0x40
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	54e2      	strb	r2, [r4, r3]
}
 800fc1e:	b003      	add	sp, #12
 800fc20:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc22:	2000      	movs	r0, #0
 800fc24:	e7f8      	b.n	800fc18 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 800fc26:	2002      	movs	r0, #2
 800fc28:	e7f9      	b.n	800fc1e <HAL_ADC_ConfigChannel+0x11e>
 800fc2a:	46c0      	nop			; (mov r8, r8)
 800fc2c:	00001001 	.word	0x00001001
 800fc30:	40012708 	.word	0x40012708
 800fc34:	ff400000 	.word	0xff400000
 800fc38:	20000090 	.word	0x20000090
 800fc3c:	000f4240 	.word	0x000f4240
 800fc40:	feffffff 	.word	0xfeffffff
 800fc44:	ff7fffff 	.word	0xff7fffff

0800fc48 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800fc48:	b570      	push	{r4, r5, r6, lr}
 800fc4a:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fc4c:	2340      	movs	r3, #64	; 0x40
 800fc4e:	5cc3      	ldrb	r3, [r0, r3]
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d042      	beq.n	800fcda <HAL_ADCEx_Calibration_Start+0x92>
 800fc54:	2340      	movs	r3, #64	; 0x40
 800fc56:	2201      	movs	r2, #1
 800fc58:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fc5a:	6802      	ldr	r2, [r0, #0]
 800fc5c:	6891      	ldr	r1, [r2, #8]
 800fc5e:	3b3d      	subs	r3, #61	; 0x3d
 800fc60:	400b      	ands	r3, r1
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d105      	bne.n	800fc72 <HAL_ADCEx_Calibration_Start+0x2a>
 800fc66:	6813      	ldr	r3, [r2, #0]
 800fc68:	07db      	lsls	r3, r3, #31
 800fc6a:	d42d      	bmi.n	800fcc8 <HAL_ADCEx_Calibration_Start+0x80>
 800fc6c:	68d3      	ldr	r3, [r2, #12]
 800fc6e:	041b      	lsls	r3, r3, #16
 800fc70:	d42a      	bmi.n	800fcc8 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800fc72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc74:	491a      	ldr	r1, [pc, #104]	; (800fce0 <HAL_ADCEx_Calibration_Start+0x98>)
 800fc76:	400b      	ands	r3, r1
 800fc78:	3106      	adds	r1, #6
 800fc7a:	31ff      	adds	r1, #255	; 0xff
 800fc7c:	430b      	orrs	r3, r1
 800fc7e:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800fc80:	6891      	ldr	r1, [r2, #8]
 800fc82:	2380      	movs	r3, #128	; 0x80
 800fc84:	061b      	lsls	r3, r3, #24
 800fc86:	430b      	orrs	r3, r1
 800fc88:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 800fc8a:	f7ff fcf9 	bl	800f680 <HAL_GetTick>
 800fc8e:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	da0f      	bge.n	800fcb8 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800fc98:	f7ff fcf2 	bl	800f680 <HAL_GetTick>
 800fc9c:	1b40      	subs	r0, r0, r5
 800fc9e:	2802      	cmp	r0, #2
 800fca0:	d9f6      	bls.n	800fc90 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800fca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fca4:	2212      	movs	r2, #18
 800fca6:	4393      	bics	r3, r2
 800fca8:	3a02      	subs	r2, #2
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800fcae:	2340      	movs	r3, #64	; 0x40
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 800fcb4:	2001      	movs	r0, #1
 800fcb6:	e00f      	b.n	800fcd8 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fcb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcba:	2203      	movs	r2, #3
 800fcbc:	4393      	bics	r3, r2
 800fcbe:	3a02      	subs	r2, #2
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	e004      	b.n	800fcd2 <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fcc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcca:	2220      	movs	r2, #32
 800fccc:	4313      	orrs	r3, r2
 800fcce:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800fcd0:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fcd2:	2340      	movs	r3, #64	; 0x40
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800fcd8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 800fcda:	2002      	movs	r0, #2
 800fcdc:	e7fc      	b.n	800fcd8 <HAL_ADCEx_Calibration_Start+0x90>
 800fcde:	46c0      	nop			; (mov r8, r8)
 800fce0:	fffffefd 	.word	0xfffffefd

0800fce4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fce4:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800fce6:	2800      	cmp	r0, #0
 800fce8:	db14      	blt.n	800fd14 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fcea:	0883      	lsrs	r3, r0, #2
 800fcec:	009b      	lsls	r3, r3, #2
 800fcee:	4a15      	ldr	r2, [pc, #84]	; (800fd44 <HAL_NVIC_SetPriority+0x60>)
 800fcf0:	4694      	mov	ip, r2
 800fcf2:	4463      	add	r3, ip
 800fcf4:	26c0      	movs	r6, #192	; 0xc0
 800fcf6:	00b6      	lsls	r6, r6, #2
 800fcf8:	599d      	ldr	r5, [r3, r6]
 800fcfa:	2403      	movs	r4, #3
 800fcfc:	4020      	ands	r0, r4
 800fcfe:	00c0      	lsls	r0, r0, #3
 800fd00:	22ff      	movs	r2, #255	; 0xff
 800fd02:	0014      	movs	r4, r2
 800fd04:	4084      	lsls	r4, r0
 800fd06:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fd08:	0189      	lsls	r1, r1, #6
 800fd0a:	400a      	ands	r2, r1
 800fd0c:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd0e:	432a      	orrs	r2, r5
 800fd10:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fd12:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd14:	b2c0      	uxtb	r0, r0
 800fd16:	230f      	movs	r3, #15
 800fd18:	4003      	ands	r3, r0
 800fd1a:	3b08      	subs	r3, #8
 800fd1c:	089b      	lsrs	r3, r3, #2
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	4a09      	ldr	r2, [pc, #36]	; (800fd48 <HAL_NVIC_SetPriority+0x64>)
 800fd22:	4694      	mov	ip, r2
 800fd24:	4463      	add	r3, ip
 800fd26:	69dd      	ldr	r5, [r3, #28]
 800fd28:	2203      	movs	r2, #3
 800fd2a:	4010      	ands	r0, r2
 800fd2c:	00c0      	lsls	r0, r0, #3
 800fd2e:	24ff      	movs	r4, #255	; 0xff
 800fd30:	0022      	movs	r2, r4
 800fd32:	4082      	lsls	r2, r0
 800fd34:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fd36:	0189      	lsls	r1, r1, #6
 800fd38:	400c      	ands	r4, r1
 800fd3a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd3c:	432c      	orrs	r4, r5
 800fd3e:	61dc      	str	r4, [r3, #28]
 800fd40:	e7e7      	b.n	800fd12 <HAL_NVIC_SetPriority+0x2e>
 800fd42:	46c0      	nop			; (mov r8, r8)
 800fd44:	e000e100 	.word	0xe000e100
 800fd48:	e000ed00 	.word	0xe000ed00

0800fd4c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fd4c:	231f      	movs	r3, #31
 800fd4e:	4018      	ands	r0, r3
 800fd50:	3b1e      	subs	r3, #30
 800fd52:	4083      	lsls	r3, r0
 800fd54:	4a01      	ldr	r2, [pc, #4]	; (800fd5c <HAL_NVIC_EnableIRQ+0x10>)
 800fd56:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fd58:	4770      	bx	lr
 800fd5a:	46c0      	nop			; (mov r8, r8)
 800fd5c:	e000e100 	.word	0xe000e100

0800fd60 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fd60:	231f      	movs	r3, #31
 800fd62:	4018      	ands	r0, r3
 800fd64:	3b1e      	subs	r3, #30
 800fd66:	4083      	lsls	r3, r0
 800fd68:	4901      	ldr	r1, [pc, #4]	; (800fd70 <HAL_NVIC_DisableIRQ+0x10>)
 800fd6a:	2280      	movs	r2, #128	; 0x80
 800fd6c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fd6e:	4770      	bx	lr
 800fd70:	e000e100 	.word	0xe000e100

0800fd74 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fd74:	1e43      	subs	r3, r0, #1
 800fd76:	4a0a      	ldr	r2, [pc, #40]	; (800fda0 <HAL_SYSTICK_Config+0x2c>)
 800fd78:	2001      	movs	r0, #1
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d80e      	bhi.n	800fd9c <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fd7e:	4a09      	ldr	r2, [pc, #36]	; (800fda4 <HAL_SYSTICK_Config+0x30>)
 800fd80:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd82:	4809      	ldr	r0, [pc, #36]	; (800fda8 <HAL_SYSTICK_Config+0x34>)
 800fd84:	6a03      	ldr	r3, [r0, #32]
 800fd86:	021b      	lsls	r3, r3, #8
 800fd88:	0a1b      	lsrs	r3, r3, #8
 800fd8a:	21c0      	movs	r1, #192	; 0xc0
 800fd8c:	0609      	lsls	r1, r1, #24
 800fd8e:	430b      	orrs	r3, r1
 800fd90:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fd92:	2300      	movs	r3, #0
 800fd94:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fd96:	3307      	adds	r3, #7
 800fd98:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fd9a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fd9c:	4770      	bx	lr
 800fd9e:	46c0      	nop			; (mov r8, r8)
 800fda0:	00ffffff 	.word	0x00ffffff
 800fda4:	e000e010 	.word	0xe000e010
 800fda8:	e000ed00 	.word	0xe000ed00

0800fdac <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fdac:	2804      	cmp	r0, #4
 800fdae:	d005      	beq.n	800fdbc <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fdb0:	4a05      	ldr	r2, [pc, #20]	; (800fdc8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800fdb2:	6813      	ldr	r3, [r2, #0]
 800fdb4:	2104      	movs	r1, #4
 800fdb6:	438b      	bics	r3, r1
 800fdb8:	6013      	str	r3, [r2, #0]
  }
}
 800fdba:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fdbc:	4a02      	ldr	r2, [pc, #8]	; (800fdc8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800fdbe:	6813      	ldr	r3, [r2, #0]
 800fdc0:	2104      	movs	r1, #4
 800fdc2:	430b      	orrs	r3, r1
 800fdc4:	6013      	str	r3, [r2, #0]
 800fdc6:	e7f8      	b.n	800fdba <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fdc8:	e000e010 	.word	0xe000e010

0800fdcc <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdce:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fdd0:	0891      	lsrs	r1, r2, #2
 800fdd2:	d013      	beq.n	800fdfc <CRC_Handle_8+0x30>
 800fdd4:	0034      	movs	r4, r6
 800fdd6:	2303      	movs	r3, #3
 800fdd8:	0017      	movs	r7, r2
 800fdda:	439f      	bics	r7, r3
 800fddc:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fdde:	7823      	ldrb	r3, [r4, #0]
 800fde0:	061b      	lsls	r3, r3, #24
 800fde2:	7865      	ldrb	r5, [r4, #1]
 800fde4:	042d      	lsls	r5, r5, #16
 800fde6:	432b      	orrs	r3, r5
 800fde8:	78e5      	ldrb	r5, [r4, #3]
 800fdea:	432b      	orrs	r3, r5
 800fdec:	78a5      	ldrb	r5, [r4, #2]
 800fdee:	022d      	lsls	r5, r5, #8
 800fdf0:	432b      	orrs	r3, r5
 800fdf2:	6805      	ldr	r5, [r0, #0]
 800fdf4:	602b      	str	r3, [r5, #0]
 800fdf6:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 800fdf8:	42bc      	cmp	r4, r7
 800fdfa:	d1f0      	bne.n	800fdde <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	401a      	ands	r2, r3
 800fe00:	d01e      	beq.n	800fe40 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 800fe02:	2a01      	cmp	r2, #1
 800fe04:	d00a      	beq.n	800fe1c <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800fe06:	2a02      	cmp	r2, #2
 800fe08:	d10d      	bne.n	800fe26 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fe0a:	0089      	lsls	r1, r1, #2
 800fe0c:	5c72      	ldrb	r2, [r6, r1]
 800fe0e:	0212      	lsls	r2, r2, #8
 800fe10:	1871      	adds	r1, r6, r1
 800fe12:	784b      	ldrb	r3, [r1, #1]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	6802      	ldr	r2, [r0, #0]
 800fe18:	8013      	strh	r3, [r2, #0]
 800fe1a:	e011      	b.n	800fe40 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fe1c:	0089      	lsls	r1, r1, #2
 800fe1e:	5d8b      	ldrb	r3, [r1, r6]
 800fe20:	6802      	ldr	r2, [r0, #0]
 800fe22:	7013      	strb	r3, [r2, #0]
 800fe24:	e00c      	b.n	800fe40 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 800fe26:	2a03      	cmp	r2, #3
 800fe28:	d10a      	bne.n	800fe40 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fe2a:	0089      	lsls	r1, r1, #2
 800fe2c:	5c72      	ldrb	r2, [r6, r1]
 800fe2e:	0212      	lsls	r2, r2, #8
 800fe30:	1871      	adds	r1, r6, r1
 800fe32:	784b      	ldrb	r3, [r1, #1]
 800fe34:	4313      	orrs	r3, r2
 800fe36:	6802      	ldr	r2, [r0, #0]
 800fe38:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800fe3a:	788b      	ldrb	r3, [r1, #2]
 800fe3c:	6802      	ldr	r2, [r0, #0]
 800fe3e:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fe40:	6803      	ldr	r3, [r0, #0]
 800fe42:	6818      	ldr	r0, [r3, #0]
}
 800fe44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe46 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800fe46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe48:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800fe4a:	0852      	lsrs	r2, r2, #1
 800fe4c:	d00b      	beq.n	800fe66 <CRC_Handle_16+0x20>
 800fe4e:	000c      	movs	r4, r1
 800fe50:	0097      	lsls	r7, r2, #2
 800fe52:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fe54:	8823      	ldrh	r3, [r4, #0]
 800fe56:	041b      	lsls	r3, r3, #16
 800fe58:	8866      	ldrh	r6, [r4, #2]
 800fe5a:	4333      	orrs	r3, r6
 800fe5c:	6806      	ldr	r6, [r0, #0]
 800fe5e:	6033      	str	r3, [r6, #0]
 800fe60:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 800fe62:	42bc      	cmp	r4, r7
 800fe64:	d1f6      	bne.n	800fe54 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800fe66:	07eb      	lsls	r3, r5, #31
 800fe68:	d503      	bpl.n	800fe72 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800fe6a:	0092      	lsls	r2, r2, #2
 800fe6c:	5a53      	ldrh	r3, [r2, r1]
 800fe6e:	6802      	ldr	r2, [r0, #0]
 800fe70:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fe72:	6803      	ldr	r3, [r0, #0]
 800fe74:	6818      	ldr	r0, [r3, #0]
}
 800fe76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe78 <HAL_CRC_Init>:
{
 800fe78:	b510      	push	{r4, lr}
 800fe7a:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fe7c:	d029      	beq.n	800fed2 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800fe7e:	7f43      	ldrb	r3, [r0, #29]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d01e      	beq.n	800fec2 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fe84:	2302      	movs	r3, #2
 800fe86:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fe88:	0020      	movs	r0, r4
 800fe8a:	f000 f8b1 	bl	800fff0 <HAL_CRCEx_Init>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d121      	bne.n	800fed6 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800fe92:	7963      	ldrb	r3, [r4, #5]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d118      	bne.n	800feca <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	4252      	negs	r2, r2
 800fe9e:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fea0:	6822      	ldr	r2, [r4, #0]
 800fea2:	6893      	ldr	r3, [r2, #8]
 800fea4:	2160      	movs	r1, #96	; 0x60
 800fea6:	438b      	bics	r3, r1
 800fea8:	6961      	ldr	r1, [r4, #20]
 800feaa:	430b      	orrs	r3, r1
 800feac:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800feae:	6822      	ldr	r2, [r4, #0]
 800feb0:	6893      	ldr	r3, [r2, #8]
 800feb2:	2180      	movs	r1, #128	; 0x80
 800feb4:	438b      	bics	r3, r1
 800feb6:	69a1      	ldr	r1, [r4, #24]
 800feb8:	430b      	orrs	r3, r1
 800feba:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800febc:	2301      	movs	r3, #1
 800febe:	7763      	strb	r3, [r4, #29]
}
 800fec0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800fec2:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800fec4:	f7fc fc74 	bl	800c7b0 <HAL_CRC_MspInit>
 800fec8:	e7dc      	b.n	800fe84 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800feca:	6823      	ldr	r3, [r4, #0]
 800fecc:	6922      	ldr	r2, [r4, #16]
 800fece:	611a      	str	r2, [r3, #16]
 800fed0:	e7e6      	b.n	800fea0 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800fed2:	2001      	movs	r0, #1
 800fed4:	e7f4      	b.n	800fec0 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800fed6:	2001      	movs	r0, #1
 800fed8:	e7f2      	b.n	800fec0 <HAL_CRC_Init+0x48>

0800feda <HAL_CRC_Accumulate>:
{
 800feda:	b510      	push	{r4, lr}
 800fedc:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fede:	7f03      	ldrb	r3, [r0, #28]
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d024      	beq.n	800ff2e <HAL_CRC_Accumulate+0x54>
 800fee4:	2301      	movs	r3, #1
 800fee6:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fee8:	3301      	adds	r3, #1
 800feea:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800feec:	6a03      	ldr	r3, [r0, #32]
 800feee:	2b02      	cmp	r3, #2
 800fef0:	d01a      	beq.n	800ff28 <HAL_CRC_Accumulate+0x4e>
 800fef2:	2b03      	cmp	r3, #3
 800fef4:	d007      	beq.n	800ff06 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800fef6:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d011      	beq.n	800ff20 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 800fefc:	2301      	movs	r3, #1
 800fefe:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ff00:	2300      	movs	r3, #0
 800ff02:	7723      	strb	r3, [r4, #28]
}
 800ff04:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 800ff06:	2a00      	cmp	r2, #0
 800ff08:	d007      	beq.n	800ff1a <HAL_CRC_Accumulate+0x40>
 800ff0a:	000b      	movs	r3, r1
 800ff0c:	0092      	lsls	r2, r2, #2
 800ff0e:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ff10:	6822      	ldr	r2, [r4, #0]
 800ff12:	cb01      	ldmia	r3!, {r0}
 800ff14:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800ff16:	428b      	cmp	r3, r1
 800ff18:	d1fa      	bne.n	800ff10 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	6818      	ldr	r0, [r3, #0]
      break;
 800ff1e:	e7ed      	b.n	800fefc <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ff20:	0020      	movs	r0, r4
 800ff22:	f7ff ff53 	bl	800fdcc <CRC_Handle_8>
      break;
 800ff26:	e7e9      	b.n	800fefc <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ff28:	f7ff ff8d 	bl	800fe46 <CRC_Handle_16>
      break;
 800ff2c:	e7e6      	b.n	800fefc <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 800ff2e:	2002      	movs	r0, #2
 800ff30:	e7e8      	b.n	800ff04 <HAL_CRC_Accumulate+0x2a>

0800ff32 <HAL_CRC_Calculate>:
{
 800ff32:	b570      	push	{r4, r5, r6, lr}
 800ff34:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ff36:	7f03      	ldrb	r3, [r0, #28]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d029      	beq.n	800ff90 <HAL_CRC_Calculate+0x5e>
 800ff3c:	2501      	movs	r5, #1
 800ff3e:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ff40:	2302      	movs	r3, #2
 800ff42:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800ff44:	6800      	ldr	r0, [r0, #0]
 800ff46:	6883      	ldr	r3, [r0, #8]
 800ff48:	432b      	orrs	r3, r5
 800ff4a:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800ff4c:	6a23      	ldr	r3, [r4, #32]
 800ff4e:	2b02      	cmp	r3, #2
 800ff50:	d01a      	beq.n	800ff88 <HAL_CRC_Calculate+0x56>
 800ff52:	2b03      	cmp	r3, #3
 800ff54:	d007      	beq.n	800ff66 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800ff56:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d011      	beq.n	800ff80 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ff60:	2300      	movs	r3, #0
 800ff62:	7723      	strb	r3, [r4, #28]
}
 800ff64:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800ff66:	2a00      	cmp	r2, #0
 800ff68:	d007      	beq.n	800ff7a <HAL_CRC_Calculate+0x48>
 800ff6a:	000b      	movs	r3, r1
 800ff6c:	0092      	lsls	r2, r2, #2
 800ff6e:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ff70:	6820      	ldr	r0, [r4, #0]
 800ff72:	cb20      	ldmia	r3!, {r5}
 800ff74:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800ff76:	428b      	cmp	r3, r1
 800ff78:	d1fa      	bne.n	800ff70 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800ff7a:	6823      	ldr	r3, [r4, #0]
 800ff7c:	6818      	ldr	r0, [r3, #0]
      break;
 800ff7e:	e7ed      	b.n	800ff5c <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ff80:	0020      	movs	r0, r4
 800ff82:	f7ff ff23 	bl	800fdcc <CRC_Handle_8>
      break;
 800ff86:	e7e9      	b.n	800ff5c <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ff88:	0020      	movs	r0, r4
 800ff8a:	f7ff ff5c 	bl	800fe46 <CRC_Handle_16>
      break;
 800ff8e:	e7e5      	b.n	800ff5c <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800ff90:	2002      	movs	r0, #2
 800ff92:	e7e7      	b.n	800ff64 <HAL_CRC_Calculate+0x32>

0800ff94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ff94:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ff96:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800ff98:	2501      	movs	r5, #1
 800ff9a:	002c      	movs	r4, r5
 800ff9c:	409c      	lsls	r4, r3
 800ff9e:	4221      	tst	r1, r4
 800ffa0:	d10b      	bne.n	800ffba <HAL_CRCEx_Polynomial_Set+0x26>
 800ffa2:	3b01      	subs	r3, #1
 800ffa4:	d2f9      	bcs.n	800ff9a <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 800ffa6:	2a10      	cmp	r2, #16
 800ffa8:	d01c      	beq.n	800ffe4 <HAL_CRCEx_Polynomial_Set+0x50>
 800ffaa:	2a18      	cmp	r2, #24
 800ffac:	d01e      	beq.n	800ffec <HAL_CRCEx_Polynomial_Set+0x58>
 800ffae:	2a08      	cmp	r2, #8
 800ffb0:	d109      	bne.n	800ffc6 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 800ffb2:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 800ffb4:	2b0f      	cmp	r3, #15
 800ffb6:	d906      	bls.n	800ffc6 <HAL_CRCEx_Polynomial_Set+0x32>
 800ffb8:	e00e      	b.n	800ffd8 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 800ffba:	2a10      	cmp	r2, #16
 800ffbc:	d012      	beq.n	800ffe4 <HAL_CRCEx_Polynomial_Set+0x50>
 800ffbe:	2a18      	cmp	r2, #24
 800ffc0:	d00c      	beq.n	800ffdc <HAL_CRCEx_Polynomial_Set+0x48>
 800ffc2:	2a08      	cmp	r2, #8
 800ffc4:	d0f5      	beq.n	800ffb2 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800ffc6:	6803      	ldr	r3, [r0, #0]
 800ffc8:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800ffca:	6801      	ldr	r1, [r0, #0]
 800ffcc:	688b      	ldr	r3, [r1, #8]
 800ffce:	2018      	movs	r0, #24
 800ffd0:	4383      	bics	r3, r0
 800ffd2:	431a      	orrs	r2, r3
 800ffd4:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 800ffd6:	2400      	movs	r4, #0
}
 800ffd8:	0020      	movs	r0, r4
 800ffda:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800ffdc:	2b06      	cmp	r3, #6
 800ffde:	d9f2      	bls.n	800ffc6 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 800ffe0:	2401      	movs	r4, #1
 800ffe2:	e7f9      	b.n	800ffd8 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800ffe4:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 800ffe6:	2b07      	cmp	r3, #7
 800ffe8:	d9ed      	bls.n	800ffc6 <HAL_CRCEx_Polynomial_Set+0x32>
 800ffea:	e7f5      	b.n	800ffd8 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800ffec:	2401      	movs	r4, #1
 800ffee:	e7f3      	b.n	800ffd8 <HAL_CRCEx_Polynomial_Set+0x44>

0800fff0 <HAL_CRCEx_Init>:
{
 800fff0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800fff2:	7903      	ldrb	r3, [r0, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d109      	bne.n	801000c <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800fff8:	6803      	ldr	r3, [r0, #0]
 800fffa:	4a08      	ldr	r2, [pc, #32]	; (801001c <HAL_CRCEx_Init+0x2c>)
 800fffc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fffe:	6802      	ldr	r2, [r0, #0]
 8010000:	6893      	ldr	r3, [r2, #8]
 8010002:	2118      	movs	r1, #24
 8010004:	438b      	bics	r3, r1
 8010006:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010008:	2000      	movs	r0, #0
}
 801000a:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801000c:	68c2      	ldr	r2, [r0, #12]
 801000e:	6881      	ldr	r1, [r0, #8]
 8010010:	f7ff ffc0 	bl	800ff94 <HAL_CRCEx_Polynomial_Set>
 8010014:	1e43      	subs	r3, r0, #1
 8010016:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010018:	b2c0      	uxtb	r0, r0
 801001a:	e7f6      	b.n	801000a <HAL_CRCEx_Init+0x1a>
 801001c:	04c11db7 	.word	0x04c11db7

08010020 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010020:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010022:	2800      	cmp	r0, #0
 8010024:	d022      	beq.n	801006c <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010026:	2321      	movs	r3, #33	; 0x21
 8010028:	5cc3      	ldrb	r3, [r0, r3]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d102      	bne.n	8010034 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 801002e:	3320      	adds	r3, #32
 8010030:	2200      	movs	r2, #0
 8010032:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010034:	2121      	movs	r1, #33	; 0x21
 8010036:	2302      	movs	r3, #2
 8010038:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801003a:	6804      	ldr	r4, [r0, #0]
 801003c:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 801003e:	4a0c      	ldr	r2, [pc, #48]	; (8010070 <HAL_DMA_Init+0x50>)
 8010040:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010042:	6843      	ldr	r3, [r0, #4]
 8010044:	6885      	ldr	r5, [r0, #8]
 8010046:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010048:	68c5      	ldr	r5, [r0, #12]
 801004a:	432b      	orrs	r3, r5
 801004c:	6905      	ldr	r5, [r0, #16]
 801004e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010050:	6945      	ldr	r5, [r0, #20]
 8010052:	432b      	orrs	r3, r5
 8010054:	6985      	ldr	r5, [r0, #24]
 8010056:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010058:	69c5      	ldr	r5, [r0, #28]
 801005a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 801005c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 801005e:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010060:	2300      	movs	r3, #0
 8010062:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010064:	3301      	adds	r3, #1
 8010066:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010068:	2000      	movs	r0, #0
}  
 801006a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 801006c:	2001      	movs	r0, #1
 801006e:	e7fc      	b.n	801006a <HAL_DMA_Init+0x4a>
 8010070:	ffffc00f 	.word	0xffffc00f

08010074 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010074:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010076:	2420      	movs	r4, #32
 8010078:	5d04      	ldrb	r4, [r0, r4]
 801007a:	2c01      	cmp	r4, #1
 801007c:	d02d      	beq.n	80100da <HAL_DMA_Start_IT+0x66>
 801007e:	2601      	movs	r6, #1
 8010080:	2420      	movs	r4, #32
 8010082:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010084:	3401      	adds	r4, #1
 8010086:	2502      	movs	r5, #2
 8010088:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801008a:	6805      	ldr	r5, [r0, #0]
 801008c:	682c      	ldr	r4, [r5, #0]
 801008e:	43b4      	bics	r4, r6
 8010090:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010092:	6804      	ldr	r4, [r0, #0]
 8010094:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010096:	6843      	ldr	r3, [r0, #4]
 8010098:	2b10      	cmp	r3, #16
 801009a:	d019      	beq.n	80100d0 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801009c:	6803      	ldr	r3, [r0, #0]
 801009e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80100a0:	6803      	ldr	r3, [r0, #0]
 80100a2:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80100a4:	6802      	ldr	r2, [r0, #0]
 80100a6:	6813      	ldr	r3, [r2, #0]
 80100a8:	2102      	movs	r1, #2
 80100aa:	430b      	orrs	r3, r1
 80100ac:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80100ae:	6802      	ldr	r2, [r0, #0]
 80100b0:	6813      	ldr	r3, [r2, #0]
 80100b2:	3102      	adds	r1, #2
 80100b4:	430b      	orrs	r3, r1
 80100b6:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80100b8:	6802      	ldr	r2, [r0, #0]
 80100ba:	6813      	ldr	r3, [r2, #0]
 80100bc:	3104      	adds	r1, #4
 80100be:	430b      	orrs	r3, r1
 80100c0:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80100c2:	6802      	ldr	r2, [r0, #0]
 80100c4:	6813      	ldr	r3, [r2, #0]
 80100c6:	3907      	subs	r1, #7
 80100c8:	430b      	orrs	r3, r1
 80100ca:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 80100cc:	2000      	movs	r0, #0
} 
 80100ce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80100d0:	6803      	ldr	r3, [r0, #0]
 80100d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80100d4:	6803      	ldr	r3, [r0, #0]
 80100d6:	60d9      	str	r1, [r3, #12]
 80100d8:	e7e4      	b.n	80100a4 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 80100da:	2002      	movs	r0, #2
 80100dc:	e7f7      	b.n	80100ce <HAL_DMA_Start_IT+0x5a>

080100de <HAL_DMA_Abort>:
{
 80100de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e0:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80100e2:	6802      	ldr	r2, [r0, #0]
 80100e4:	6813      	ldr	r3, [r2, #0]
 80100e6:	2101      	movs	r1, #1
 80100e8:	438b      	bics	r3, r1
 80100ea:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80100ec:	f7ff fac8 	bl	800f680 <HAL_GetTick>
 80100f0:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80100f2:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80100f4:	26fa      	movs	r6, #250	; 0xfa
 80100f6:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80100f8:	6823      	ldr	r3, [r4, #0]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	421d      	tst	r5, r3
 80100fe:	d00f      	beq.n	8010120 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010100:	f7ff fabe 	bl	800f680 <HAL_GetTick>
 8010104:	1bc0      	subs	r0, r0, r7
 8010106:	42b0      	cmp	r0, r6
 8010108:	d9f6      	bls.n	80100f8 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 801010a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801010c:	2220      	movs	r2, #32
 801010e:	4313      	orrs	r3, r2
 8010110:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010112:	2321      	movs	r3, #33	; 0x21
 8010114:	2103      	movs	r1, #3
 8010116:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010118:	2300      	movs	r3, #0
 801011a:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 801011c:	2003      	movs	r0, #3
 801011e:	e006      	b.n	801012e <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010120:	2321      	movs	r3, #33	; 0x21
 8010122:	2201      	movs	r2, #1
 8010124:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010126:	3b01      	subs	r3, #1
 8010128:	2200      	movs	r2, #0
 801012a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 801012c:	2000      	movs	r0, #0
}
 801012e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010130 <HAL_DMA_IRQHandler>:
{        
 8010130:	b510      	push	{r4, lr}
 8010132:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010134:	6803      	ldr	r3, [r0, #0]
 8010136:	4ab4      	ldr	r2, [pc, #720]	; (8010408 <HAL_DMA_IRQHandler+0x2d8>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d94d      	bls.n	80101d8 <HAL_DMA_IRQHandler+0xa8>
 801013c:	4ab3      	ldr	r2, [pc, #716]	; (801040c <HAL_DMA_IRQHandler+0x2dc>)
 801013e:	6811      	ldr	r1, [r2, #0]
 8010140:	4ab3      	ldr	r2, [pc, #716]	; (8010410 <HAL_DMA_IRQHandler+0x2e0>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d026      	beq.n	8010194 <HAL_DMA_IRQHandler+0x64>
 8010146:	4ab3      	ldr	r2, [pc, #716]	; (8010414 <HAL_DMA_IRQHandler+0x2e4>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d02d      	beq.n	80101a8 <HAL_DMA_IRQHandler+0x78>
 801014c:	4ab2      	ldr	r2, [pc, #712]	; (8010418 <HAL_DMA_IRQHandler+0x2e8>)
 801014e:	4293      	cmp	r3, r2
 8010150:	d02c      	beq.n	80101ac <HAL_DMA_IRQHandler+0x7c>
 8010152:	4ab2      	ldr	r2, [pc, #712]	; (801041c <HAL_DMA_IRQHandler+0x2ec>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d02c      	beq.n	80101b2 <HAL_DMA_IRQHandler+0x82>
 8010158:	4ab1      	ldr	r2, [pc, #708]	; (8010420 <HAL_DMA_IRQHandler+0x2f0>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d02c      	beq.n	80101b8 <HAL_DMA_IRQHandler+0x88>
 801015e:	4ab1      	ldr	r2, [pc, #708]	; (8010424 <HAL_DMA_IRQHandler+0x2f4>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d02c      	beq.n	80101be <HAL_DMA_IRQHandler+0x8e>
 8010164:	4aa8      	ldr	r2, [pc, #672]	; (8010408 <HAL_DMA_IRQHandler+0x2d8>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d02c      	beq.n	80101c4 <HAL_DMA_IRQHandler+0x94>
 801016a:	4aaf      	ldr	r2, [pc, #700]	; (8010428 <HAL_DMA_IRQHandler+0x2f8>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d02c      	beq.n	80101ca <HAL_DMA_IRQHandler+0x9a>
 8010170:	4aae      	ldr	r2, [pc, #696]	; (801042c <HAL_DMA_IRQHandler+0x2fc>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d02b      	beq.n	80101ce <HAL_DMA_IRQHandler+0x9e>
 8010176:	4aae      	ldr	r2, [pc, #696]	; (8010430 <HAL_DMA_IRQHandler+0x300>)
 8010178:	4293      	cmp	r3, r2
 801017a:	d02a      	beq.n	80101d2 <HAL_DMA_IRQHandler+0xa2>
 801017c:	4aad      	ldr	r2, [pc, #692]	; (8010434 <HAL_DMA_IRQHandler+0x304>)
 801017e:	189a      	adds	r2, r3, r2
 8010180:	4250      	negs	r0, r2
 8010182:	4142      	adcs	r2, r0
 8010184:	4252      	negs	r2, r2
 8010186:	48ac      	ldr	r0, [pc, #688]	; (8010438 <HAL_DMA_IRQHandler+0x308>)
 8010188:	4002      	ands	r2, r0
 801018a:	2080      	movs	r0, #128	; 0x80
 801018c:	0300      	lsls	r0, r0, #12
 801018e:	4684      	mov	ip, r0
 8010190:	4462      	add	r2, ip
 8010192:	e000      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 8010194:	2208      	movs	r2, #8
 8010196:	420a      	tst	r2, r1
 8010198:	d100      	bne.n	801019c <HAL_DMA_IRQHandler+0x6c>
 801019a:	e0e6      	b.n	801036a <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	0712      	lsls	r2, r2, #28
 80101a0:	d500      	bpl.n	80101a4 <HAL_DMA_IRQHandler+0x74>
 80101a2:	e097      	b.n	80102d4 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80101a4:	6823      	ldr	r3, [r4, #0]
 80101a6:	e0e0      	b.n	801036a <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80101a8:	2280      	movs	r2, #128	; 0x80
 80101aa:	e7f4      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101ac:	2280      	movs	r2, #128	; 0x80
 80101ae:	0112      	lsls	r2, r2, #4
 80101b0:	e7f1      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101b2:	2280      	movs	r2, #128	; 0x80
 80101b4:	0212      	lsls	r2, r2, #8
 80101b6:	e7ee      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101b8:	2280      	movs	r2, #128	; 0x80
 80101ba:	0312      	lsls	r2, r2, #12
 80101bc:	e7eb      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101be:	2280      	movs	r2, #128	; 0x80
 80101c0:	0412      	lsls	r2, r2, #16
 80101c2:	e7e8      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101c4:	2280      	movs	r2, #128	; 0x80
 80101c6:	0512      	lsls	r2, r2, #20
 80101c8:	e7e5      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101ca:	2208      	movs	r2, #8
 80101cc:	e7e3      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101ce:	2280      	movs	r2, #128	; 0x80
 80101d0:	e7e1      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101d2:	2280      	movs	r2, #128	; 0x80
 80101d4:	0112      	lsls	r2, r2, #4
 80101d6:	e7de      	b.n	8010196 <HAL_DMA_IRQHandler+0x66>
 80101d8:	4a98      	ldr	r2, [pc, #608]	; (801043c <HAL_DMA_IRQHandler+0x30c>)
 80101da:	6811      	ldr	r1, [r2, #0]
 80101dc:	4a8c      	ldr	r2, [pc, #560]	; (8010410 <HAL_DMA_IRQHandler+0x2e0>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	d026      	beq.n	8010230 <HAL_DMA_IRQHandler+0x100>
 80101e2:	4a8c      	ldr	r2, [pc, #560]	; (8010414 <HAL_DMA_IRQHandler+0x2e4>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d05d      	beq.n	80102a4 <HAL_DMA_IRQHandler+0x174>
 80101e8:	4a8b      	ldr	r2, [pc, #556]	; (8010418 <HAL_DMA_IRQHandler+0x2e8>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d05c      	beq.n	80102a8 <HAL_DMA_IRQHandler+0x178>
 80101ee:	4a8b      	ldr	r2, [pc, #556]	; (801041c <HAL_DMA_IRQHandler+0x2ec>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d05c      	beq.n	80102ae <HAL_DMA_IRQHandler+0x17e>
 80101f4:	4a8a      	ldr	r2, [pc, #552]	; (8010420 <HAL_DMA_IRQHandler+0x2f0>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d05c      	beq.n	80102b4 <HAL_DMA_IRQHandler+0x184>
 80101fa:	4a8a      	ldr	r2, [pc, #552]	; (8010424 <HAL_DMA_IRQHandler+0x2f4>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d05c      	beq.n	80102ba <HAL_DMA_IRQHandler+0x18a>
 8010200:	4a81      	ldr	r2, [pc, #516]	; (8010408 <HAL_DMA_IRQHandler+0x2d8>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d05c      	beq.n	80102c0 <HAL_DMA_IRQHandler+0x190>
 8010206:	4a88      	ldr	r2, [pc, #544]	; (8010428 <HAL_DMA_IRQHandler+0x2f8>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d05c      	beq.n	80102c6 <HAL_DMA_IRQHandler+0x196>
 801020c:	4a87      	ldr	r2, [pc, #540]	; (801042c <HAL_DMA_IRQHandler+0x2fc>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d05b      	beq.n	80102ca <HAL_DMA_IRQHandler+0x19a>
 8010212:	4a87      	ldr	r2, [pc, #540]	; (8010430 <HAL_DMA_IRQHandler+0x300>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d05a      	beq.n	80102ce <HAL_DMA_IRQHandler+0x19e>
 8010218:	4a86      	ldr	r2, [pc, #536]	; (8010434 <HAL_DMA_IRQHandler+0x304>)
 801021a:	189a      	adds	r2, r3, r2
 801021c:	4250      	negs	r0, r2
 801021e:	4142      	adcs	r2, r0
 8010220:	4252      	negs	r2, r2
 8010222:	4885      	ldr	r0, [pc, #532]	; (8010438 <HAL_DMA_IRQHandler+0x308>)
 8010224:	4002      	ands	r2, r0
 8010226:	2080      	movs	r0, #128	; 0x80
 8010228:	0300      	lsls	r0, r0, #12
 801022a:	4684      	mov	ip, r0
 801022c:	4462      	add	r2, ip
 801022e:	e000      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 8010230:	2208      	movs	r2, #8
 8010232:	420a      	tst	r2, r1
 8010234:	d000      	beq.n	8010238 <HAL_DMA_IRQHandler+0x108>
 8010236:	e3ad      	b.n	8010994 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010238:	4a80      	ldr	r2, [pc, #512]	; (801043c <HAL_DMA_IRQHandler+0x30c>)
 801023a:	6811      	ldr	r1, [r2, #0]
 801023c:	4a74      	ldr	r2, [pc, #464]	; (8010410 <HAL_DMA_IRQHandler+0x2e0>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d100      	bne.n	8010244 <HAL_DMA_IRQHandler+0x114>
 8010242:	e198      	b.n	8010576 <HAL_DMA_IRQHandler+0x446>
 8010244:	4a73      	ldr	r2, [pc, #460]	; (8010414 <HAL_DMA_IRQHandler+0x2e4>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d100      	bne.n	801024c <HAL_DMA_IRQHandler+0x11c>
 801024a:	e1da      	b.n	8010602 <HAL_DMA_IRQHandler+0x4d2>
 801024c:	4a72      	ldr	r2, [pc, #456]	; (8010418 <HAL_DMA_IRQHandler+0x2e8>)
 801024e:	4293      	cmp	r3, r2
 8010250:	d100      	bne.n	8010254 <HAL_DMA_IRQHandler+0x124>
 8010252:	e1d8      	b.n	8010606 <HAL_DMA_IRQHandler+0x4d6>
 8010254:	4a71      	ldr	r2, [pc, #452]	; (801041c <HAL_DMA_IRQHandler+0x2ec>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d100      	bne.n	801025c <HAL_DMA_IRQHandler+0x12c>
 801025a:	e1d7      	b.n	801060c <HAL_DMA_IRQHandler+0x4dc>
 801025c:	4a70      	ldr	r2, [pc, #448]	; (8010420 <HAL_DMA_IRQHandler+0x2f0>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d100      	bne.n	8010264 <HAL_DMA_IRQHandler+0x134>
 8010262:	e1d6      	b.n	8010612 <HAL_DMA_IRQHandler+0x4e2>
 8010264:	4a6f      	ldr	r2, [pc, #444]	; (8010424 <HAL_DMA_IRQHandler+0x2f4>)
 8010266:	4293      	cmp	r3, r2
 8010268:	d100      	bne.n	801026c <HAL_DMA_IRQHandler+0x13c>
 801026a:	e1d5      	b.n	8010618 <HAL_DMA_IRQHandler+0x4e8>
 801026c:	4a66      	ldr	r2, [pc, #408]	; (8010408 <HAL_DMA_IRQHandler+0x2d8>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d100      	bne.n	8010274 <HAL_DMA_IRQHandler+0x144>
 8010272:	e1d4      	b.n	801061e <HAL_DMA_IRQHandler+0x4ee>
 8010274:	4a6c      	ldr	r2, [pc, #432]	; (8010428 <HAL_DMA_IRQHandler+0x2f8>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d100      	bne.n	801027c <HAL_DMA_IRQHandler+0x14c>
 801027a:	e1d3      	b.n	8010624 <HAL_DMA_IRQHandler+0x4f4>
 801027c:	4a6b      	ldr	r2, [pc, #428]	; (801042c <HAL_DMA_IRQHandler+0x2fc>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d100      	bne.n	8010284 <HAL_DMA_IRQHandler+0x154>
 8010282:	e1d1      	b.n	8010628 <HAL_DMA_IRQHandler+0x4f8>
 8010284:	4a6a      	ldr	r2, [pc, #424]	; (8010430 <HAL_DMA_IRQHandler+0x300>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d100      	bne.n	801028c <HAL_DMA_IRQHandler+0x15c>
 801028a:	e1cf      	b.n	801062c <HAL_DMA_IRQHandler+0x4fc>
 801028c:	4a69      	ldr	r2, [pc, #420]	; (8010434 <HAL_DMA_IRQHandler+0x304>)
 801028e:	189a      	adds	r2, r3, r2
 8010290:	4250      	negs	r0, r2
 8010292:	4142      	adcs	r2, r0
 8010294:	4252      	negs	r2, r2
 8010296:	486a      	ldr	r0, [pc, #424]	; (8010440 <HAL_DMA_IRQHandler+0x310>)
 8010298:	4002      	ands	r2, r0
 801029a:	2080      	movs	r0, #128	; 0x80
 801029c:	02c0      	lsls	r0, r0, #11
 801029e:	4684      	mov	ip, r0
 80102a0:	4462      	add	r2, ip
 80102a2:	e169      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80102a4:	2280      	movs	r2, #128	; 0x80
 80102a6:	e7c4      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 80102a8:	2280      	movs	r2, #128	; 0x80
 80102aa:	0112      	lsls	r2, r2, #4
 80102ac:	e7c1      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 80102ae:	2280      	movs	r2, #128	; 0x80
 80102b0:	0212      	lsls	r2, r2, #8
 80102b2:	e7be      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 80102b4:	2280      	movs	r2, #128	; 0x80
 80102b6:	0312      	lsls	r2, r2, #12
 80102b8:	e7bb      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 80102ba:	2280      	movs	r2, #128	; 0x80
 80102bc:	0412      	lsls	r2, r2, #16
 80102be:	e7b8      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 80102c0:	2280      	movs	r2, #128	; 0x80
 80102c2:	0512      	lsls	r2, r2, #20
 80102c4:	e7b5      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 80102c6:	2208      	movs	r2, #8
 80102c8:	e7b3      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 80102ca:	2280      	movs	r2, #128	; 0x80
 80102cc:	e7b1      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
 80102ce:	2280      	movs	r2, #128	; 0x80
 80102d0:	0112      	lsls	r2, r2, #4
 80102d2:	e7ae      	b.n	8010232 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	2108      	movs	r1, #8
 80102d8:	438a      	bics	r2, r1
 80102da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80102dc:	6823      	ldr	r3, [r4, #0]
 80102de:	4a4a      	ldr	r2, [pc, #296]	; (8010408 <HAL_DMA_IRQHandler+0x2d8>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d800      	bhi.n	80102e6 <HAL_DMA_IRQHandler+0x1b6>
 80102e4:	e0ae      	b.n	8010444 <HAL_DMA_IRQHandler+0x314>
 80102e6:	4a4a      	ldr	r2, [pc, #296]	; (8010410 <HAL_DMA_IRQHandler+0x2e0>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d027      	beq.n	801033c <HAL_DMA_IRQHandler+0x20c>
 80102ec:	4a49      	ldr	r2, [pc, #292]	; (8010414 <HAL_DMA_IRQHandler+0x2e4>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d071      	beq.n	80103d6 <HAL_DMA_IRQHandler+0x2a6>
 80102f2:	4a49      	ldr	r2, [pc, #292]	; (8010418 <HAL_DMA_IRQHandler+0x2e8>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d070      	beq.n	80103da <HAL_DMA_IRQHandler+0x2aa>
 80102f8:	4a48      	ldr	r2, [pc, #288]	; (801041c <HAL_DMA_IRQHandler+0x2ec>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d070      	beq.n	80103e0 <HAL_DMA_IRQHandler+0x2b0>
 80102fe:	4a48      	ldr	r2, [pc, #288]	; (8010420 <HAL_DMA_IRQHandler+0x2f0>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d070      	beq.n	80103e6 <HAL_DMA_IRQHandler+0x2b6>
 8010304:	4a47      	ldr	r2, [pc, #284]	; (8010424 <HAL_DMA_IRQHandler+0x2f4>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d070      	beq.n	80103ec <HAL_DMA_IRQHandler+0x2bc>
 801030a:	4a3f      	ldr	r2, [pc, #252]	; (8010408 <HAL_DMA_IRQHandler+0x2d8>)
 801030c:	4293      	cmp	r3, r2
 801030e:	d070      	beq.n	80103f2 <HAL_DMA_IRQHandler+0x2c2>
 8010310:	4a45      	ldr	r2, [pc, #276]	; (8010428 <HAL_DMA_IRQHandler+0x2f8>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d070      	beq.n	80103f8 <HAL_DMA_IRQHandler+0x2c8>
 8010316:	4a45      	ldr	r2, [pc, #276]	; (801042c <HAL_DMA_IRQHandler+0x2fc>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d06f      	beq.n	80103fc <HAL_DMA_IRQHandler+0x2cc>
 801031c:	4a44      	ldr	r2, [pc, #272]	; (8010430 <HAL_DMA_IRQHandler+0x300>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d06e      	beq.n	8010400 <HAL_DMA_IRQHandler+0x2d0>
 8010322:	4a44      	ldr	r2, [pc, #272]	; (8010434 <HAL_DMA_IRQHandler+0x304>)
 8010324:	4694      	mov	ip, r2
 8010326:	4463      	add	r3, ip
 8010328:	425a      	negs	r2, r3
 801032a:	4153      	adcs	r3, r2
 801032c:	425b      	negs	r3, r3
 801032e:	4a42      	ldr	r2, [pc, #264]	; (8010438 <HAL_DMA_IRQHandler+0x308>)
 8010330:	4013      	ands	r3, r2
 8010332:	2280      	movs	r2, #128	; 0x80
 8010334:	0312      	lsls	r2, r2, #12
 8010336:	4694      	mov	ip, r2
 8010338:	4463      	add	r3, ip
 801033a:	e000      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 801033c:	2308      	movs	r3, #8
 801033e:	4a33      	ldr	r2, [pc, #204]	; (801040c <HAL_DMA_IRQHandler+0x2dc>)
 8010340:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010344:	2201      	movs	r2, #1
 8010346:	4313      	orrs	r3, r2
 8010348:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801034a:	2321      	movs	r3, #33	; 0x21
 801034c:	3203      	adds	r2, #3
 801034e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010350:	3b01      	subs	r3, #1
 8010352:	2200      	movs	r2, #0
 8010354:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010356:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010358:	2b00      	cmp	r3, #0
 801035a:	d001      	beq.n	8010360 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 801035c:	0020      	movs	r0, r4
 801035e:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	4a29      	ldr	r2, [pc, #164]	; (8010408 <HAL_DMA_IRQHandler+0x2d8>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d800      	bhi.n	801036a <HAL_DMA_IRQHandler+0x23a>
 8010368:	e766      	b.n	8010238 <HAL_DMA_IRQHandler+0x108>
 801036a:	4a28      	ldr	r2, [pc, #160]	; (801040c <HAL_DMA_IRQHandler+0x2dc>)
 801036c:	6811      	ldr	r1, [r2, #0]
 801036e:	4a28      	ldr	r2, [pc, #160]	; (8010410 <HAL_DMA_IRQHandler+0x2e0>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d100      	bne.n	8010376 <HAL_DMA_IRQHandler+0x246>
 8010374:	e0ad      	b.n	80104d2 <HAL_DMA_IRQHandler+0x3a2>
 8010376:	4a27      	ldr	r2, [pc, #156]	; (8010414 <HAL_DMA_IRQHandler+0x2e4>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d100      	bne.n	801037e <HAL_DMA_IRQHandler+0x24e>
 801037c:	e0e3      	b.n	8010546 <HAL_DMA_IRQHandler+0x416>
 801037e:	4a26      	ldr	r2, [pc, #152]	; (8010418 <HAL_DMA_IRQHandler+0x2e8>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d100      	bne.n	8010386 <HAL_DMA_IRQHandler+0x256>
 8010384:	e0e1      	b.n	801054a <HAL_DMA_IRQHandler+0x41a>
 8010386:	4a25      	ldr	r2, [pc, #148]	; (801041c <HAL_DMA_IRQHandler+0x2ec>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d100      	bne.n	801038e <HAL_DMA_IRQHandler+0x25e>
 801038c:	e0e0      	b.n	8010550 <HAL_DMA_IRQHandler+0x420>
 801038e:	4a24      	ldr	r2, [pc, #144]	; (8010420 <HAL_DMA_IRQHandler+0x2f0>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d100      	bne.n	8010396 <HAL_DMA_IRQHandler+0x266>
 8010394:	e0df      	b.n	8010556 <HAL_DMA_IRQHandler+0x426>
 8010396:	4a23      	ldr	r2, [pc, #140]	; (8010424 <HAL_DMA_IRQHandler+0x2f4>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d100      	bne.n	801039e <HAL_DMA_IRQHandler+0x26e>
 801039c:	e0de      	b.n	801055c <HAL_DMA_IRQHandler+0x42c>
 801039e:	4a1a      	ldr	r2, [pc, #104]	; (8010408 <HAL_DMA_IRQHandler+0x2d8>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d100      	bne.n	80103a6 <HAL_DMA_IRQHandler+0x276>
 80103a4:	e0dd      	b.n	8010562 <HAL_DMA_IRQHandler+0x432>
 80103a6:	4a20      	ldr	r2, [pc, #128]	; (8010428 <HAL_DMA_IRQHandler+0x2f8>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d100      	bne.n	80103ae <HAL_DMA_IRQHandler+0x27e>
 80103ac:	e0dc      	b.n	8010568 <HAL_DMA_IRQHandler+0x438>
 80103ae:	4a1f      	ldr	r2, [pc, #124]	; (801042c <HAL_DMA_IRQHandler+0x2fc>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d100      	bne.n	80103b6 <HAL_DMA_IRQHandler+0x286>
 80103b4:	e0da      	b.n	801056c <HAL_DMA_IRQHandler+0x43c>
 80103b6:	4a1e      	ldr	r2, [pc, #120]	; (8010430 <HAL_DMA_IRQHandler+0x300>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d100      	bne.n	80103be <HAL_DMA_IRQHandler+0x28e>
 80103bc:	e0d8      	b.n	8010570 <HAL_DMA_IRQHandler+0x440>
 80103be:	4a1d      	ldr	r2, [pc, #116]	; (8010434 <HAL_DMA_IRQHandler+0x304>)
 80103c0:	189a      	adds	r2, r3, r2
 80103c2:	4250      	negs	r0, r2
 80103c4:	4142      	adcs	r2, r0
 80103c6:	4252      	negs	r2, r2
 80103c8:	481d      	ldr	r0, [pc, #116]	; (8010440 <HAL_DMA_IRQHandler+0x310>)
 80103ca:	4002      	ands	r2, r0
 80103cc:	2080      	movs	r0, #128	; 0x80
 80103ce:	02c0      	lsls	r0, r0, #11
 80103d0:	4684      	mov	ip, r0
 80103d2:	4462      	add	r2, ip
 80103d4:	e07e      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80103d6:	2380      	movs	r3, #128	; 0x80
 80103d8:	e7b1      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 80103da:	2380      	movs	r3, #128	; 0x80
 80103dc:	011b      	lsls	r3, r3, #4
 80103de:	e7ae      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 80103e0:	2380      	movs	r3, #128	; 0x80
 80103e2:	021b      	lsls	r3, r3, #8
 80103e4:	e7ab      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 80103e6:	2380      	movs	r3, #128	; 0x80
 80103e8:	031b      	lsls	r3, r3, #12
 80103ea:	e7a8      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 80103ec:	2380      	movs	r3, #128	; 0x80
 80103ee:	041b      	lsls	r3, r3, #16
 80103f0:	e7a5      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 80103f2:	2380      	movs	r3, #128	; 0x80
 80103f4:	051b      	lsls	r3, r3, #20
 80103f6:	e7a2      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 80103f8:	2308      	movs	r3, #8
 80103fa:	e7a0      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 80103fc:	2380      	movs	r3, #128	; 0x80
 80103fe:	e79e      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 8010400:	2380      	movs	r3, #128	; 0x80
 8010402:	011b      	lsls	r3, r3, #4
 8010404:	e79b      	b.n	801033e <HAL_DMA_IRQHandler+0x20e>
 8010406:	46c0      	nop			; (mov r8, r8)
 8010408:	40020080 	.word	0x40020080
 801040c:	40020400 	.word	0x40020400
 8010410:	40020008 	.word	0x40020008
 8010414:	4002001c 	.word	0x4002001c
 8010418:	40020030 	.word	0x40020030
 801041c:	40020044 	.word	0x40020044
 8010420:	40020058 	.word	0x40020058
 8010424:	4002006c 	.word	0x4002006c
 8010428:	40020408 	.word	0x40020408
 801042c:	4002041c 	.word	0x4002041c
 8010430:	40020430 	.word	0x40020430
 8010434:	bffdfbbc 	.word	0xbffdfbbc
 8010438:	fff88000 	.word	0xfff88000
 801043c:	40020000 	.word	0x40020000
 8010440:	fffc4000 	.word	0xfffc4000
 8010444:	4aaa      	ldr	r2, [pc, #680]	; (80106f0 <HAL_DMA_IRQHandler+0x5c0>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d027      	beq.n	801049a <HAL_DMA_IRQHandler+0x36a>
 801044a:	4aaa      	ldr	r2, [pc, #680]	; (80106f4 <HAL_DMA_IRQHandler+0x5c4>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d028      	beq.n	80104a2 <HAL_DMA_IRQHandler+0x372>
 8010450:	4aa9      	ldr	r2, [pc, #676]	; (80106f8 <HAL_DMA_IRQHandler+0x5c8>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d027      	beq.n	80104a6 <HAL_DMA_IRQHandler+0x376>
 8010456:	4aa9      	ldr	r2, [pc, #676]	; (80106fc <HAL_DMA_IRQHandler+0x5cc>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d027      	beq.n	80104ac <HAL_DMA_IRQHandler+0x37c>
 801045c:	4aa8      	ldr	r2, [pc, #672]	; (8010700 <HAL_DMA_IRQHandler+0x5d0>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d027      	beq.n	80104b2 <HAL_DMA_IRQHandler+0x382>
 8010462:	4aa8      	ldr	r2, [pc, #672]	; (8010704 <HAL_DMA_IRQHandler+0x5d4>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d027      	beq.n	80104b8 <HAL_DMA_IRQHandler+0x388>
 8010468:	4aa7      	ldr	r2, [pc, #668]	; (8010708 <HAL_DMA_IRQHandler+0x5d8>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d027      	beq.n	80104be <HAL_DMA_IRQHandler+0x38e>
 801046e:	4aa7      	ldr	r2, [pc, #668]	; (801070c <HAL_DMA_IRQHandler+0x5dc>)
 8010470:	4293      	cmp	r3, r2
 8010472:	d027      	beq.n	80104c4 <HAL_DMA_IRQHandler+0x394>
 8010474:	4aa6      	ldr	r2, [pc, #664]	; (8010710 <HAL_DMA_IRQHandler+0x5e0>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d026      	beq.n	80104c8 <HAL_DMA_IRQHandler+0x398>
 801047a:	4aa6      	ldr	r2, [pc, #664]	; (8010714 <HAL_DMA_IRQHandler+0x5e4>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d025      	beq.n	80104cc <HAL_DMA_IRQHandler+0x39c>
 8010480:	4aa5      	ldr	r2, [pc, #660]	; (8010718 <HAL_DMA_IRQHandler+0x5e8>)
 8010482:	4694      	mov	ip, r2
 8010484:	4463      	add	r3, ip
 8010486:	425a      	negs	r2, r3
 8010488:	4153      	adcs	r3, r2
 801048a:	425b      	negs	r3, r3
 801048c:	4aa3      	ldr	r2, [pc, #652]	; (801071c <HAL_DMA_IRQHandler+0x5ec>)
 801048e:	4013      	ands	r3, r2
 8010490:	2280      	movs	r2, #128	; 0x80
 8010492:	0312      	lsls	r2, r2, #12
 8010494:	4694      	mov	ip, r2
 8010496:	4463      	add	r3, ip
 8010498:	e000      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 801049a:	2308      	movs	r3, #8
 801049c:	4aa0      	ldr	r2, [pc, #640]	; (8010720 <HAL_DMA_IRQHandler+0x5f0>)
 801049e:	6053      	str	r3, [r2, #4]
 80104a0:	e74f      	b.n	8010342 <HAL_DMA_IRQHandler+0x212>
 80104a2:	2380      	movs	r3, #128	; 0x80
 80104a4:	e7fa      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 80104a6:	2380      	movs	r3, #128	; 0x80
 80104a8:	011b      	lsls	r3, r3, #4
 80104aa:	e7f7      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 80104ac:	2380      	movs	r3, #128	; 0x80
 80104ae:	021b      	lsls	r3, r3, #8
 80104b0:	e7f4      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 80104b2:	2380      	movs	r3, #128	; 0x80
 80104b4:	031b      	lsls	r3, r3, #12
 80104b6:	e7f1      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 80104b8:	2380      	movs	r3, #128	; 0x80
 80104ba:	041b      	lsls	r3, r3, #16
 80104bc:	e7ee      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 80104be:	2380      	movs	r3, #128	; 0x80
 80104c0:	051b      	lsls	r3, r3, #20
 80104c2:	e7eb      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 80104c4:	2308      	movs	r3, #8
 80104c6:	e7e9      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 80104c8:	2380      	movs	r3, #128	; 0x80
 80104ca:	e7e7      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
 80104cc:	2380      	movs	r3, #128	; 0x80
 80104ce:	011b      	lsls	r3, r3, #4
 80104d0:	e7e4      	b.n	801049c <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80104d2:	2204      	movs	r2, #4
 80104d4:	420a      	tst	r2, r1
 80104d6:	d152      	bne.n	801057e <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80104d8:	6821      	ldr	r1, [r4, #0]
 80104da:	4b92      	ldr	r3, [pc, #584]	; (8010724 <HAL_DMA_IRQHandler+0x5f4>)
 80104dc:	6818      	ldr	r0, [r3, #0]
 80104de:	4a84      	ldr	r2, [pc, #528]	; (80106f0 <HAL_DMA_IRQHandler+0x5c0>)
 80104e0:	4291      	cmp	r1, r2
 80104e2:	d100      	bne.n	80104e6 <HAL_DMA_IRQHandler+0x3b6>
 80104e4:	e16b      	b.n	80107be <HAL_DMA_IRQHandler+0x68e>
 80104e6:	4a83      	ldr	r2, [pc, #524]	; (80106f4 <HAL_DMA_IRQHandler+0x5c4>)
 80104e8:	4291      	cmp	r1, r2
 80104ea:	d100      	bne.n	80104ee <HAL_DMA_IRQHandler+0x3be>
 80104ec:	e1aa      	b.n	8010844 <HAL_DMA_IRQHandler+0x714>
 80104ee:	4a82      	ldr	r2, [pc, #520]	; (80106f8 <HAL_DMA_IRQHandler+0x5c8>)
 80104f0:	4291      	cmp	r1, r2
 80104f2:	d100      	bne.n	80104f6 <HAL_DMA_IRQHandler+0x3c6>
 80104f4:	e1a8      	b.n	8010848 <HAL_DMA_IRQHandler+0x718>
 80104f6:	4a81      	ldr	r2, [pc, #516]	; (80106fc <HAL_DMA_IRQHandler+0x5cc>)
 80104f8:	4291      	cmp	r1, r2
 80104fa:	d100      	bne.n	80104fe <HAL_DMA_IRQHandler+0x3ce>
 80104fc:	e1a7      	b.n	801084e <HAL_DMA_IRQHandler+0x71e>
 80104fe:	4b80      	ldr	r3, [pc, #512]	; (8010700 <HAL_DMA_IRQHandler+0x5d0>)
 8010500:	4299      	cmp	r1, r3
 8010502:	d100      	bne.n	8010506 <HAL_DMA_IRQHandler+0x3d6>
 8010504:	e1a6      	b.n	8010854 <HAL_DMA_IRQHandler+0x724>
 8010506:	4b7f      	ldr	r3, [pc, #508]	; (8010704 <HAL_DMA_IRQHandler+0x5d4>)
 8010508:	4299      	cmp	r1, r3
 801050a:	d100      	bne.n	801050e <HAL_DMA_IRQHandler+0x3de>
 801050c:	e1a5      	b.n	801085a <HAL_DMA_IRQHandler+0x72a>
 801050e:	4b7e      	ldr	r3, [pc, #504]	; (8010708 <HAL_DMA_IRQHandler+0x5d8>)
 8010510:	4299      	cmp	r1, r3
 8010512:	d100      	bne.n	8010516 <HAL_DMA_IRQHandler+0x3e6>
 8010514:	e1a4      	b.n	8010860 <HAL_DMA_IRQHandler+0x730>
 8010516:	4b7d      	ldr	r3, [pc, #500]	; (801070c <HAL_DMA_IRQHandler+0x5dc>)
 8010518:	4299      	cmp	r1, r3
 801051a:	d100      	bne.n	801051e <HAL_DMA_IRQHandler+0x3ee>
 801051c:	e1a3      	b.n	8010866 <HAL_DMA_IRQHandler+0x736>
 801051e:	4b7c      	ldr	r3, [pc, #496]	; (8010710 <HAL_DMA_IRQHandler+0x5e0>)
 8010520:	4299      	cmp	r1, r3
 8010522:	d100      	bne.n	8010526 <HAL_DMA_IRQHandler+0x3f6>
 8010524:	e1a1      	b.n	801086a <HAL_DMA_IRQHandler+0x73a>
 8010526:	4b7b      	ldr	r3, [pc, #492]	; (8010714 <HAL_DMA_IRQHandler+0x5e4>)
 8010528:	4299      	cmp	r1, r3
 801052a:	d100      	bne.n	801052e <HAL_DMA_IRQHandler+0x3fe>
 801052c:	e19f      	b.n	801086e <HAL_DMA_IRQHandler+0x73e>
 801052e:	4b7a      	ldr	r3, [pc, #488]	; (8010718 <HAL_DMA_IRQHandler+0x5e8>)
 8010530:	18ca      	adds	r2, r1, r3
 8010532:	4253      	negs	r3, r2
 8010534:	415a      	adcs	r2, r3
 8010536:	4252      	negs	r2, r2
 8010538:	4b7b      	ldr	r3, [pc, #492]	; (8010728 <HAL_DMA_IRQHandler+0x5f8>)
 801053a:	4013      	ands	r3, r2
 801053c:	2280      	movs	r2, #128	; 0x80
 801053e:	0292      	lsls	r2, r2, #10
 8010540:	4694      	mov	ip, r2
 8010542:	4463      	add	r3, ip
 8010544:	e13c      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010546:	2240      	movs	r2, #64	; 0x40
 8010548:	e7c4      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 801054a:	2280      	movs	r2, #128	; 0x80
 801054c:	00d2      	lsls	r2, r2, #3
 801054e:	e7c1      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 8010550:	2280      	movs	r2, #128	; 0x80
 8010552:	01d2      	lsls	r2, r2, #7
 8010554:	e7be      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 8010556:	2280      	movs	r2, #128	; 0x80
 8010558:	02d2      	lsls	r2, r2, #11
 801055a:	e7bb      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 801055c:	2280      	movs	r2, #128	; 0x80
 801055e:	03d2      	lsls	r2, r2, #15
 8010560:	e7b8      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 8010562:	2280      	movs	r2, #128	; 0x80
 8010564:	04d2      	lsls	r2, r2, #19
 8010566:	e7b5      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 8010568:	2204      	movs	r2, #4
 801056a:	e7b3      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 801056c:	2240      	movs	r2, #64	; 0x40
 801056e:	e7b1      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 8010570:	2280      	movs	r2, #128	; 0x80
 8010572:	00d2      	lsls	r2, r2, #3
 8010574:	e7ae      	b.n	80104d4 <HAL_DMA_IRQHandler+0x3a4>
 8010576:	2204      	movs	r2, #4
 8010578:	420a      	tst	r2, r1
 801057a:	d100      	bne.n	801057e <HAL_DMA_IRQHandler+0x44e>
 801057c:	e208      	b.n	8010990 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	0752      	lsls	r2, r2, #29
 8010582:	d561      	bpl.n	8010648 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	0692      	lsls	r2, r2, #26
 8010588:	d403      	bmi.n	8010592 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	2104      	movs	r1, #4
 801058e:	438a      	bics	r2, r1
 8010590:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	4a5c      	ldr	r2, [pc, #368]	; (8010708 <HAL_DMA_IRQHandler+0x5d8>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d800      	bhi.n	801059c <HAL_DMA_IRQHandler+0x46c>
 801059a:	e0c9      	b.n	8010730 <HAL_DMA_IRQHandler+0x600>
 801059c:	4a54      	ldr	r2, [pc, #336]	; (80106f0 <HAL_DMA_IRQHandler+0x5c0>)
 801059e:	4293      	cmp	r3, r2
 80105a0:	d047      	beq.n	8010632 <HAL_DMA_IRQHandler+0x502>
 80105a2:	4a54      	ldr	r2, [pc, #336]	; (80106f4 <HAL_DMA_IRQHandler+0x5c4>)
 80105a4:	4293      	cmp	r3, r2
 80105a6:	d100      	bne.n	80105aa <HAL_DMA_IRQHandler+0x47a>
 80105a8:	e089      	b.n	80106be <HAL_DMA_IRQHandler+0x58e>
 80105aa:	4a53      	ldr	r2, [pc, #332]	; (80106f8 <HAL_DMA_IRQHandler+0x5c8>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d100      	bne.n	80105b2 <HAL_DMA_IRQHandler+0x482>
 80105b0:	e087      	b.n	80106c2 <HAL_DMA_IRQHandler+0x592>
 80105b2:	4a52      	ldr	r2, [pc, #328]	; (80106fc <HAL_DMA_IRQHandler+0x5cc>)
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d100      	bne.n	80105ba <HAL_DMA_IRQHandler+0x48a>
 80105b8:	e086      	b.n	80106c8 <HAL_DMA_IRQHandler+0x598>
 80105ba:	4a51      	ldr	r2, [pc, #324]	; (8010700 <HAL_DMA_IRQHandler+0x5d0>)
 80105bc:	4293      	cmp	r3, r2
 80105be:	d100      	bne.n	80105c2 <HAL_DMA_IRQHandler+0x492>
 80105c0:	e085      	b.n	80106ce <HAL_DMA_IRQHandler+0x59e>
 80105c2:	4a50      	ldr	r2, [pc, #320]	; (8010704 <HAL_DMA_IRQHandler+0x5d4>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d100      	bne.n	80105ca <HAL_DMA_IRQHandler+0x49a>
 80105c8:	e084      	b.n	80106d4 <HAL_DMA_IRQHandler+0x5a4>
 80105ca:	4a4f      	ldr	r2, [pc, #316]	; (8010708 <HAL_DMA_IRQHandler+0x5d8>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d100      	bne.n	80105d2 <HAL_DMA_IRQHandler+0x4a2>
 80105d0:	e083      	b.n	80106da <HAL_DMA_IRQHandler+0x5aa>
 80105d2:	4a4e      	ldr	r2, [pc, #312]	; (801070c <HAL_DMA_IRQHandler+0x5dc>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d100      	bne.n	80105da <HAL_DMA_IRQHandler+0x4aa>
 80105d8:	e082      	b.n	80106e0 <HAL_DMA_IRQHandler+0x5b0>
 80105da:	4a4d      	ldr	r2, [pc, #308]	; (8010710 <HAL_DMA_IRQHandler+0x5e0>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d100      	bne.n	80105e2 <HAL_DMA_IRQHandler+0x4b2>
 80105e0:	e080      	b.n	80106e4 <HAL_DMA_IRQHandler+0x5b4>
 80105e2:	4a4c      	ldr	r2, [pc, #304]	; (8010714 <HAL_DMA_IRQHandler+0x5e4>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d07f      	beq.n	80106e8 <HAL_DMA_IRQHandler+0x5b8>
 80105e8:	4a4b      	ldr	r2, [pc, #300]	; (8010718 <HAL_DMA_IRQHandler+0x5e8>)
 80105ea:	4694      	mov	ip, r2
 80105ec:	4463      	add	r3, ip
 80105ee:	425a      	negs	r2, r3
 80105f0:	4153      	adcs	r3, r2
 80105f2:	425b      	negs	r3, r3
 80105f4:	4a4d      	ldr	r2, [pc, #308]	; (801072c <HAL_DMA_IRQHandler+0x5fc>)
 80105f6:	4013      	ands	r3, r2
 80105f8:	2280      	movs	r2, #128	; 0x80
 80105fa:	02d2      	lsls	r2, r2, #11
 80105fc:	4694      	mov	ip, r2
 80105fe:	4463      	add	r3, ip
 8010600:	e018      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010602:	2240      	movs	r2, #64	; 0x40
 8010604:	e7b8      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
 8010606:	2280      	movs	r2, #128	; 0x80
 8010608:	00d2      	lsls	r2, r2, #3
 801060a:	e7b5      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
 801060c:	2280      	movs	r2, #128	; 0x80
 801060e:	01d2      	lsls	r2, r2, #7
 8010610:	e7b2      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
 8010612:	2280      	movs	r2, #128	; 0x80
 8010614:	02d2      	lsls	r2, r2, #11
 8010616:	e7af      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
 8010618:	2280      	movs	r2, #128	; 0x80
 801061a:	03d2      	lsls	r2, r2, #15
 801061c:	e7ac      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
 801061e:	2280      	movs	r2, #128	; 0x80
 8010620:	04d2      	lsls	r2, r2, #19
 8010622:	e7a9      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
 8010624:	2204      	movs	r2, #4
 8010626:	e7a7      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
 8010628:	2240      	movs	r2, #64	; 0x40
 801062a:	e7a5      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
 801062c:	2280      	movs	r2, #128	; 0x80
 801062e:	00d2      	lsls	r2, r2, #3
 8010630:	e7a2      	b.n	8010578 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010632:	2304      	movs	r3, #4
 8010634:	4a3b      	ldr	r2, [pc, #236]	; (8010724 <HAL_DMA_IRQHandler+0x5f4>)
 8010636:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010638:	2321      	movs	r3, #33	; 0x21
 801063a:	2211      	movs	r2, #17
 801063c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801063e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010640:	2b00      	cmp	r3, #0
 8010642:	d001      	beq.n	8010648 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8010644:	0020      	movs	r0, r4
 8010646:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010648:	6821      	ldr	r1, [r4, #0]
 801064a:	4b2f      	ldr	r3, [pc, #188]	; (8010708 <HAL_DMA_IRQHandler+0x5d8>)
 801064c:	4299      	cmp	r1, r3
 801064e:	d900      	bls.n	8010652 <HAL_DMA_IRQHandler+0x522>
 8010650:	e743      	b.n	80104da <HAL_DMA_IRQHandler+0x3aa>
 8010652:	4b33      	ldr	r3, [pc, #204]	; (8010720 <HAL_DMA_IRQHandler+0x5f0>)
 8010654:	6818      	ldr	r0, [r3, #0]
 8010656:	4a26      	ldr	r2, [pc, #152]	; (80106f0 <HAL_DMA_IRQHandler+0x5c0>)
 8010658:	4291      	cmp	r1, r2
 801065a:	d100      	bne.n	801065e <HAL_DMA_IRQHandler+0x52e>
 801065c:	e10a      	b.n	8010874 <HAL_DMA_IRQHandler+0x744>
 801065e:	4a25      	ldr	r2, [pc, #148]	; (80106f4 <HAL_DMA_IRQHandler+0x5c4>)
 8010660:	4291      	cmp	r1, r2
 8010662:	d100      	bne.n	8010666 <HAL_DMA_IRQHandler+0x536>
 8010664:	e10c      	b.n	8010880 <HAL_DMA_IRQHandler+0x750>
 8010666:	4a24      	ldr	r2, [pc, #144]	; (80106f8 <HAL_DMA_IRQHandler+0x5c8>)
 8010668:	4291      	cmp	r1, r2
 801066a:	d100      	bne.n	801066e <HAL_DMA_IRQHandler+0x53e>
 801066c:	e10a      	b.n	8010884 <HAL_DMA_IRQHandler+0x754>
 801066e:	4a23      	ldr	r2, [pc, #140]	; (80106fc <HAL_DMA_IRQHandler+0x5cc>)
 8010670:	4291      	cmp	r1, r2
 8010672:	d100      	bne.n	8010676 <HAL_DMA_IRQHandler+0x546>
 8010674:	e109      	b.n	801088a <HAL_DMA_IRQHandler+0x75a>
 8010676:	4b22      	ldr	r3, [pc, #136]	; (8010700 <HAL_DMA_IRQHandler+0x5d0>)
 8010678:	4299      	cmp	r1, r3
 801067a:	d100      	bne.n	801067e <HAL_DMA_IRQHandler+0x54e>
 801067c:	e108      	b.n	8010890 <HAL_DMA_IRQHandler+0x760>
 801067e:	4b21      	ldr	r3, [pc, #132]	; (8010704 <HAL_DMA_IRQHandler+0x5d4>)
 8010680:	4299      	cmp	r1, r3
 8010682:	d100      	bne.n	8010686 <HAL_DMA_IRQHandler+0x556>
 8010684:	e107      	b.n	8010896 <HAL_DMA_IRQHandler+0x766>
 8010686:	4b20      	ldr	r3, [pc, #128]	; (8010708 <HAL_DMA_IRQHandler+0x5d8>)
 8010688:	4299      	cmp	r1, r3
 801068a:	d100      	bne.n	801068e <HAL_DMA_IRQHandler+0x55e>
 801068c:	e106      	b.n	801089c <HAL_DMA_IRQHandler+0x76c>
 801068e:	4b1f      	ldr	r3, [pc, #124]	; (801070c <HAL_DMA_IRQHandler+0x5dc>)
 8010690:	4299      	cmp	r1, r3
 8010692:	d100      	bne.n	8010696 <HAL_DMA_IRQHandler+0x566>
 8010694:	e105      	b.n	80108a2 <HAL_DMA_IRQHandler+0x772>
 8010696:	4b1e      	ldr	r3, [pc, #120]	; (8010710 <HAL_DMA_IRQHandler+0x5e0>)
 8010698:	4299      	cmp	r1, r3
 801069a:	d100      	bne.n	801069e <HAL_DMA_IRQHandler+0x56e>
 801069c:	e103      	b.n	80108a6 <HAL_DMA_IRQHandler+0x776>
 801069e:	4b1d      	ldr	r3, [pc, #116]	; (8010714 <HAL_DMA_IRQHandler+0x5e4>)
 80106a0:	4299      	cmp	r1, r3
 80106a2:	d100      	bne.n	80106a6 <HAL_DMA_IRQHandler+0x576>
 80106a4:	e101      	b.n	80108aa <HAL_DMA_IRQHandler+0x77a>
 80106a6:	4b1c      	ldr	r3, [pc, #112]	; (8010718 <HAL_DMA_IRQHandler+0x5e8>)
 80106a8:	18ca      	adds	r2, r1, r3
 80106aa:	4253      	negs	r3, r2
 80106ac:	415a      	adcs	r2, r3
 80106ae:	4252      	negs	r2, r2
 80106b0:	4b1d      	ldr	r3, [pc, #116]	; (8010728 <HAL_DMA_IRQHandler+0x5f8>)
 80106b2:	4013      	ands	r3, r2
 80106b4:	2280      	movs	r2, #128	; 0x80
 80106b6:	0292      	lsls	r2, r2, #10
 80106b8:	4694      	mov	ip, r2
 80106ba:	4463      	add	r3, ip
 80106bc:	e0db      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80106be:	2340      	movs	r3, #64	; 0x40
 80106c0:	e7b8      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106c2:	2380      	movs	r3, #128	; 0x80
 80106c4:	00db      	lsls	r3, r3, #3
 80106c6:	e7b5      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106c8:	2380      	movs	r3, #128	; 0x80
 80106ca:	01db      	lsls	r3, r3, #7
 80106cc:	e7b2      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106ce:	2380      	movs	r3, #128	; 0x80
 80106d0:	02db      	lsls	r3, r3, #11
 80106d2:	e7af      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106d4:	2380      	movs	r3, #128	; 0x80
 80106d6:	03db      	lsls	r3, r3, #15
 80106d8:	e7ac      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106da:	2380      	movs	r3, #128	; 0x80
 80106dc:	04db      	lsls	r3, r3, #19
 80106de:	e7a9      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106e0:	2304      	movs	r3, #4
 80106e2:	e7a7      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106e4:	2340      	movs	r3, #64	; 0x40
 80106e6:	e7a5      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106e8:	2380      	movs	r3, #128	; 0x80
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	e7a2      	b.n	8010634 <HAL_DMA_IRQHandler+0x504>
 80106ee:	46c0      	nop			; (mov r8, r8)
 80106f0:	40020008 	.word	0x40020008
 80106f4:	4002001c 	.word	0x4002001c
 80106f8:	40020030 	.word	0x40020030
 80106fc:	40020044 	.word	0x40020044
 8010700:	40020058 	.word	0x40020058
 8010704:	4002006c 	.word	0x4002006c
 8010708:	40020080 	.word	0x40020080
 801070c:	40020408 	.word	0x40020408
 8010710:	4002041c 	.word	0x4002041c
 8010714:	40020430 	.word	0x40020430
 8010718:	bffdfbbc 	.word	0xbffdfbbc
 801071c:	fff88000 	.word	0xfff88000
 8010720:	40020000 	.word	0x40020000
 8010724:	40020400 	.word	0x40020400
 8010728:	fffe2000 	.word	0xfffe2000
 801072c:	fffc4000 	.word	0xfffc4000
 8010730:	4a9b      	ldr	r2, [pc, #620]	; (80109a0 <HAL_DMA_IRQHandler+0x870>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d027      	beq.n	8010786 <HAL_DMA_IRQHandler+0x656>
 8010736:	4a9b      	ldr	r2, [pc, #620]	; (80109a4 <HAL_DMA_IRQHandler+0x874>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d028      	beq.n	801078e <HAL_DMA_IRQHandler+0x65e>
 801073c:	4a9a      	ldr	r2, [pc, #616]	; (80109a8 <HAL_DMA_IRQHandler+0x878>)
 801073e:	4293      	cmp	r3, r2
 8010740:	d027      	beq.n	8010792 <HAL_DMA_IRQHandler+0x662>
 8010742:	4a9a      	ldr	r2, [pc, #616]	; (80109ac <HAL_DMA_IRQHandler+0x87c>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d027      	beq.n	8010798 <HAL_DMA_IRQHandler+0x668>
 8010748:	4a99      	ldr	r2, [pc, #612]	; (80109b0 <HAL_DMA_IRQHandler+0x880>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d027      	beq.n	801079e <HAL_DMA_IRQHandler+0x66e>
 801074e:	4a99      	ldr	r2, [pc, #612]	; (80109b4 <HAL_DMA_IRQHandler+0x884>)
 8010750:	4293      	cmp	r3, r2
 8010752:	d027      	beq.n	80107a4 <HAL_DMA_IRQHandler+0x674>
 8010754:	4a98      	ldr	r2, [pc, #608]	; (80109b8 <HAL_DMA_IRQHandler+0x888>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d027      	beq.n	80107aa <HAL_DMA_IRQHandler+0x67a>
 801075a:	4a98      	ldr	r2, [pc, #608]	; (80109bc <HAL_DMA_IRQHandler+0x88c>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d027      	beq.n	80107b0 <HAL_DMA_IRQHandler+0x680>
 8010760:	4a97      	ldr	r2, [pc, #604]	; (80109c0 <HAL_DMA_IRQHandler+0x890>)
 8010762:	4293      	cmp	r3, r2
 8010764:	d026      	beq.n	80107b4 <HAL_DMA_IRQHandler+0x684>
 8010766:	4a97      	ldr	r2, [pc, #604]	; (80109c4 <HAL_DMA_IRQHandler+0x894>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d025      	beq.n	80107b8 <HAL_DMA_IRQHandler+0x688>
 801076c:	4a96      	ldr	r2, [pc, #600]	; (80109c8 <HAL_DMA_IRQHandler+0x898>)
 801076e:	4694      	mov	ip, r2
 8010770:	4463      	add	r3, ip
 8010772:	425a      	negs	r2, r3
 8010774:	4153      	adcs	r3, r2
 8010776:	425b      	negs	r3, r3
 8010778:	4a94      	ldr	r2, [pc, #592]	; (80109cc <HAL_DMA_IRQHandler+0x89c>)
 801077a:	4013      	ands	r3, r2
 801077c:	2280      	movs	r2, #128	; 0x80
 801077e:	02d2      	lsls	r2, r2, #11
 8010780:	4694      	mov	ip, r2
 8010782:	4463      	add	r3, ip
 8010784:	e000      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 8010786:	2304      	movs	r3, #4
 8010788:	4a91      	ldr	r2, [pc, #580]	; (80109d0 <HAL_DMA_IRQHandler+0x8a0>)
 801078a:	6053      	str	r3, [r2, #4]
 801078c:	e754      	b.n	8010638 <HAL_DMA_IRQHandler+0x508>
 801078e:	2340      	movs	r3, #64	; 0x40
 8010790:	e7fa      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 8010792:	2380      	movs	r3, #128	; 0x80
 8010794:	00db      	lsls	r3, r3, #3
 8010796:	e7f7      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 8010798:	2380      	movs	r3, #128	; 0x80
 801079a:	01db      	lsls	r3, r3, #7
 801079c:	e7f4      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 801079e:	2380      	movs	r3, #128	; 0x80
 80107a0:	02db      	lsls	r3, r3, #11
 80107a2:	e7f1      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 80107a4:	2380      	movs	r3, #128	; 0x80
 80107a6:	03db      	lsls	r3, r3, #15
 80107a8:	e7ee      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 80107aa:	2380      	movs	r3, #128	; 0x80
 80107ac:	04db      	lsls	r3, r3, #19
 80107ae:	e7eb      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 80107b0:	2304      	movs	r3, #4
 80107b2:	e7e9      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 80107b4:	2340      	movs	r3, #64	; 0x40
 80107b6:	e7e7      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
 80107b8:	2380      	movs	r3, #128	; 0x80
 80107ba:	00db      	lsls	r3, r3, #3
 80107bc:	e7e4      	b.n	8010788 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80107be:	2302      	movs	r3, #2
 80107c0:	4003      	ands	r3, r0
 80107c2:	1e5a      	subs	r2, r3, #1
 80107c4:	4193      	sbcs	r3, r2
 80107c6:	b2db      	uxtb	r3, r3
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d100      	bne.n	80107ce <HAL_DMA_IRQHandler+0x69e>
 80107cc:	e080      	b.n	80108d0 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80107ce:	680b      	ldr	r3, [r1, #0]
 80107d0:	079b      	lsls	r3, r3, #30
 80107d2:	d57d      	bpl.n	80108d0 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80107d4:	680b      	ldr	r3, [r1, #0]
 80107d6:	069b      	lsls	r3, r3, #26
 80107d8:	d403      	bmi.n	80107e2 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80107da:	680b      	ldr	r3, [r1, #0]
 80107dc:	2202      	movs	r2, #2
 80107de:	4393      	bics	r3, r2
 80107e0:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107e2:	6823      	ldr	r3, [r4, #0]
 80107e4:	4a74      	ldr	r2, [pc, #464]	; (80109b8 <HAL_DMA_IRQHandler+0x888>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d800      	bhi.n	80107ec <HAL_DMA_IRQHandler+0x6bc>
 80107ea:	e08a      	b.n	8010902 <HAL_DMA_IRQHandler+0x7d2>
 80107ec:	4a6c      	ldr	r2, [pc, #432]	; (80109a0 <HAL_DMA_IRQHandler+0x870>)
 80107ee:	4293      	cmp	r3, r2
 80107f0:	d05e      	beq.n	80108b0 <HAL_DMA_IRQHandler+0x780>
 80107f2:	4a6c      	ldr	r2, [pc, #432]	; (80109a4 <HAL_DMA_IRQHandler+0x874>)
 80107f4:	4293      	cmp	r3, r2
 80107f6:	d100      	bne.n	80107fa <HAL_DMA_IRQHandler+0x6ca>
 80107f8:	e06b      	b.n	80108d2 <HAL_DMA_IRQHandler+0x7a2>
 80107fa:	4a6b      	ldr	r2, [pc, #428]	; (80109a8 <HAL_DMA_IRQHandler+0x878>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d06a      	beq.n	80108d6 <HAL_DMA_IRQHandler+0x7a6>
 8010800:	4a6a      	ldr	r2, [pc, #424]	; (80109ac <HAL_DMA_IRQHandler+0x87c>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d06a      	beq.n	80108dc <HAL_DMA_IRQHandler+0x7ac>
 8010806:	4a6a      	ldr	r2, [pc, #424]	; (80109b0 <HAL_DMA_IRQHandler+0x880>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d06a      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x7b2>
 801080c:	4a69      	ldr	r2, [pc, #420]	; (80109b4 <HAL_DMA_IRQHandler+0x884>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d06a      	beq.n	80108e8 <HAL_DMA_IRQHandler+0x7b8>
 8010812:	4a69      	ldr	r2, [pc, #420]	; (80109b8 <HAL_DMA_IRQHandler+0x888>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d06a      	beq.n	80108ee <HAL_DMA_IRQHandler+0x7be>
 8010818:	4a68      	ldr	r2, [pc, #416]	; (80109bc <HAL_DMA_IRQHandler+0x88c>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d06a      	beq.n	80108f4 <HAL_DMA_IRQHandler+0x7c4>
 801081e:	4a68      	ldr	r2, [pc, #416]	; (80109c0 <HAL_DMA_IRQHandler+0x890>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d069      	beq.n	80108f8 <HAL_DMA_IRQHandler+0x7c8>
 8010824:	4a67      	ldr	r2, [pc, #412]	; (80109c4 <HAL_DMA_IRQHandler+0x894>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d068      	beq.n	80108fc <HAL_DMA_IRQHandler+0x7cc>
 801082a:	4a67      	ldr	r2, [pc, #412]	; (80109c8 <HAL_DMA_IRQHandler+0x898>)
 801082c:	4694      	mov	ip, r2
 801082e:	4463      	add	r3, ip
 8010830:	425a      	negs	r2, r3
 8010832:	4153      	adcs	r3, r2
 8010834:	425b      	negs	r3, r3
 8010836:	4a67      	ldr	r2, [pc, #412]	; (80109d4 <HAL_DMA_IRQHandler+0x8a4>)
 8010838:	4013      	ands	r3, r2
 801083a:	2280      	movs	r2, #128	; 0x80
 801083c:	0292      	lsls	r2, r2, #10
 801083e:	4694      	mov	ip, r2
 8010840:	4463      	add	r3, ip
 8010842:	e036      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010844:	2320      	movs	r3, #32
 8010846:	e7bb      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 8010848:	2380      	movs	r3, #128	; 0x80
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	e7b8      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 801084e:	2380      	movs	r3, #128	; 0x80
 8010850:	019b      	lsls	r3, r3, #6
 8010852:	e7b5      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 8010854:	2380      	movs	r3, #128	; 0x80
 8010856:	029b      	lsls	r3, r3, #10
 8010858:	e7b2      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 801085a:	2380      	movs	r3, #128	; 0x80
 801085c:	039b      	lsls	r3, r3, #14
 801085e:	e7af      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 8010860:	2380      	movs	r3, #128	; 0x80
 8010862:	049b      	lsls	r3, r3, #18
 8010864:	e7ac      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 8010866:	2302      	movs	r3, #2
 8010868:	e7aa      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 801086a:	2320      	movs	r3, #32
 801086c:	e7a8      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 801086e:	2380      	movs	r3, #128	; 0x80
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	e7a5      	b.n	80107c0 <HAL_DMA_IRQHandler+0x690>
 8010874:	2302      	movs	r3, #2
 8010876:	4003      	ands	r3, r0
 8010878:	1e5a      	subs	r2, r3, #1
 801087a:	4193      	sbcs	r3, r2
 801087c:	b2db      	uxtb	r3, r3
 801087e:	e7a3      	b.n	80107c8 <HAL_DMA_IRQHandler+0x698>
 8010880:	2320      	movs	r3, #32
 8010882:	e7f8      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
 8010884:	2380      	movs	r3, #128	; 0x80
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	e7f5      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
 801088a:	2380      	movs	r3, #128	; 0x80
 801088c:	019b      	lsls	r3, r3, #6
 801088e:	e7f2      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
 8010890:	2380      	movs	r3, #128	; 0x80
 8010892:	029b      	lsls	r3, r3, #10
 8010894:	e7ef      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
 8010896:	2380      	movs	r3, #128	; 0x80
 8010898:	039b      	lsls	r3, r3, #14
 801089a:	e7ec      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
 801089c:	2380      	movs	r3, #128	; 0x80
 801089e:	049b      	lsls	r3, r3, #18
 80108a0:	e7e9      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
 80108a2:	2302      	movs	r3, #2
 80108a4:	e7e7      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
 80108a6:	2320      	movs	r3, #32
 80108a8:	e7e5      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
 80108aa:	2380      	movs	r3, #128	; 0x80
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	e7e2      	b.n	8010876 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80108b0:	2302      	movs	r3, #2
 80108b2:	4a49      	ldr	r2, [pc, #292]	; (80109d8 <HAL_DMA_IRQHandler+0x8a8>)
 80108b4:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80108b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108b8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80108ba:	2321      	movs	r3, #33	; 0x21
 80108bc:	2201      	movs	r2, #1
 80108be:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80108c0:	3b01      	subs	r3, #1
 80108c2:	2200      	movs	r2, #0
 80108c4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80108c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d001      	beq.n	80108d0 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 80108cc:	0020      	movs	r0, r4
 80108ce:	4798      	blx	r3
}  
 80108d0:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80108d2:	2320      	movs	r3, #32
 80108d4:	e7ed      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 80108d6:	2380      	movs	r3, #128	; 0x80
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	e7ea      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 80108dc:	2380      	movs	r3, #128	; 0x80
 80108de:	019b      	lsls	r3, r3, #6
 80108e0:	e7e7      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 80108e2:	2380      	movs	r3, #128	; 0x80
 80108e4:	029b      	lsls	r3, r3, #10
 80108e6:	e7e4      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 80108e8:	2380      	movs	r3, #128	; 0x80
 80108ea:	039b      	lsls	r3, r3, #14
 80108ec:	e7e1      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 80108ee:	2380      	movs	r3, #128	; 0x80
 80108f0:	049b      	lsls	r3, r3, #18
 80108f2:	e7de      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 80108f4:	2302      	movs	r3, #2
 80108f6:	e7dc      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 80108f8:	2320      	movs	r3, #32
 80108fa:	e7da      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 80108fc:	2380      	movs	r3, #128	; 0x80
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	e7d7      	b.n	80108b2 <HAL_DMA_IRQHandler+0x782>
 8010902:	4a27      	ldr	r2, [pc, #156]	; (80109a0 <HAL_DMA_IRQHandler+0x870>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d027      	beq.n	8010958 <HAL_DMA_IRQHandler+0x828>
 8010908:	4a26      	ldr	r2, [pc, #152]	; (80109a4 <HAL_DMA_IRQHandler+0x874>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d028      	beq.n	8010960 <HAL_DMA_IRQHandler+0x830>
 801090e:	4a26      	ldr	r2, [pc, #152]	; (80109a8 <HAL_DMA_IRQHandler+0x878>)
 8010910:	4293      	cmp	r3, r2
 8010912:	d027      	beq.n	8010964 <HAL_DMA_IRQHandler+0x834>
 8010914:	4a25      	ldr	r2, [pc, #148]	; (80109ac <HAL_DMA_IRQHandler+0x87c>)
 8010916:	4293      	cmp	r3, r2
 8010918:	d027      	beq.n	801096a <HAL_DMA_IRQHandler+0x83a>
 801091a:	4a25      	ldr	r2, [pc, #148]	; (80109b0 <HAL_DMA_IRQHandler+0x880>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d027      	beq.n	8010970 <HAL_DMA_IRQHandler+0x840>
 8010920:	4a24      	ldr	r2, [pc, #144]	; (80109b4 <HAL_DMA_IRQHandler+0x884>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d027      	beq.n	8010976 <HAL_DMA_IRQHandler+0x846>
 8010926:	4a24      	ldr	r2, [pc, #144]	; (80109b8 <HAL_DMA_IRQHandler+0x888>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d027      	beq.n	801097c <HAL_DMA_IRQHandler+0x84c>
 801092c:	4a23      	ldr	r2, [pc, #140]	; (80109bc <HAL_DMA_IRQHandler+0x88c>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d027      	beq.n	8010982 <HAL_DMA_IRQHandler+0x852>
 8010932:	4a23      	ldr	r2, [pc, #140]	; (80109c0 <HAL_DMA_IRQHandler+0x890>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d026      	beq.n	8010986 <HAL_DMA_IRQHandler+0x856>
 8010938:	4a22      	ldr	r2, [pc, #136]	; (80109c4 <HAL_DMA_IRQHandler+0x894>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d025      	beq.n	801098a <HAL_DMA_IRQHandler+0x85a>
 801093e:	4a22      	ldr	r2, [pc, #136]	; (80109c8 <HAL_DMA_IRQHandler+0x898>)
 8010940:	4694      	mov	ip, r2
 8010942:	4463      	add	r3, ip
 8010944:	425a      	negs	r2, r3
 8010946:	4153      	adcs	r3, r2
 8010948:	425b      	negs	r3, r3
 801094a:	4a22      	ldr	r2, [pc, #136]	; (80109d4 <HAL_DMA_IRQHandler+0x8a4>)
 801094c:	4013      	ands	r3, r2
 801094e:	2280      	movs	r2, #128	; 0x80
 8010950:	0292      	lsls	r2, r2, #10
 8010952:	4694      	mov	ip, r2
 8010954:	4463      	add	r3, ip
 8010956:	e000      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 8010958:	2302      	movs	r3, #2
 801095a:	4a1d      	ldr	r2, [pc, #116]	; (80109d0 <HAL_DMA_IRQHandler+0x8a0>)
 801095c:	6053      	str	r3, [r2, #4]
 801095e:	e7aa      	b.n	80108b6 <HAL_DMA_IRQHandler+0x786>
 8010960:	2320      	movs	r3, #32
 8010962:	e7fa      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 8010964:	2380      	movs	r3, #128	; 0x80
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	e7f7      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 801096a:	2380      	movs	r3, #128	; 0x80
 801096c:	019b      	lsls	r3, r3, #6
 801096e:	e7f4      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 8010970:	2380      	movs	r3, #128	; 0x80
 8010972:	029b      	lsls	r3, r3, #10
 8010974:	e7f1      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 8010976:	2380      	movs	r3, #128	; 0x80
 8010978:	039b      	lsls	r3, r3, #14
 801097a:	e7ee      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 801097c:	2380      	movs	r3, #128	; 0x80
 801097e:	049b      	lsls	r3, r3, #18
 8010980:	e7eb      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 8010982:	2302      	movs	r3, #2
 8010984:	e7e9      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 8010986:	2320      	movs	r3, #32
 8010988:	e7e7      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
 801098a:	2380      	movs	r3, #128	; 0x80
 801098c:	009b      	lsls	r3, r3, #2
 801098e:	e7e4      	b.n	801095a <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010990:	6821      	ldr	r1, [r4, #0]
 8010992:	e65e      	b.n	8010652 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	0712      	lsls	r2, r2, #28
 8010998:	d500      	bpl.n	801099c <HAL_DMA_IRQHandler+0x86c>
 801099a:	e49b      	b.n	80102d4 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801099c:	6823      	ldr	r3, [r4, #0]
 801099e:	e44b      	b.n	8010238 <HAL_DMA_IRQHandler+0x108>
 80109a0:	40020008 	.word	0x40020008
 80109a4:	4002001c 	.word	0x4002001c
 80109a8:	40020030 	.word	0x40020030
 80109ac:	40020044 	.word	0x40020044
 80109b0:	40020058 	.word	0x40020058
 80109b4:	4002006c 	.word	0x4002006c
 80109b8:	40020080 	.word	0x40020080
 80109bc:	40020408 	.word	0x40020408
 80109c0:	4002041c 	.word	0x4002041c
 80109c4:	40020430 	.word	0x40020430
 80109c8:	bffdfbbc 	.word	0xbffdfbbc
 80109cc:	fffc4000 	.word	0xfffc4000
 80109d0:	40020000 	.word	0x40020000
 80109d4:	fffe2000 	.word	0xfffe2000
 80109d8:	40020400 	.word	0x40020400

080109dc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80109dc:	4b0a      	ldr	r3, [pc, #40]	; (8010a08 <FLASH_SetErrorCode+0x2c>)
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	06db      	lsls	r3, r3, #27
 80109e2:	d504      	bpl.n	80109ee <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80109e4:	4a09      	ldr	r2, [pc, #36]	; (8010a0c <FLASH_SetErrorCode+0x30>)
 80109e6:	69d3      	ldr	r3, [r2, #28]
 80109e8:	2102      	movs	r1, #2
 80109ea:	430b      	orrs	r3, r1
 80109ec:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80109ee:	4b06      	ldr	r3, [pc, #24]	; (8010a08 <FLASH_SetErrorCode+0x2c>)
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	075b      	lsls	r3, r3, #29
 80109f4:	d504      	bpl.n	8010a00 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80109f6:	4a05      	ldr	r2, [pc, #20]	; (8010a0c <FLASH_SetErrorCode+0x30>)
 80109f8:	69d3      	ldr	r3, [r2, #28]
 80109fa:	2101      	movs	r1, #1
 80109fc:	430b      	orrs	r3, r1
 80109fe:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010a00:	4b01      	ldr	r3, [pc, #4]	; (8010a08 <FLASH_SetErrorCode+0x2c>)
 8010a02:	2214      	movs	r2, #20
 8010a04:	60da      	str	r2, [r3, #12]
}  
 8010a06:	4770      	bx	lr
 8010a08:	40022000 	.word	0x40022000
 8010a0c:	20006eb8 	.word	0x20006eb8

08010a10 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010a10:	4b05      	ldr	r3, [pc, #20]	; (8010a28 <HAL_FLASH_Unlock+0x18>)
 8010a12:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8010a14:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010a16:	061b      	lsls	r3, r3, #24
 8010a18:	d505      	bpl.n	8010a26 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010a1a:	4b03      	ldr	r3, [pc, #12]	; (8010a28 <HAL_FLASH_Unlock+0x18>)
 8010a1c:	4a03      	ldr	r2, [pc, #12]	; (8010a2c <HAL_FLASH_Unlock+0x1c>)
 8010a1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010a20:	4a03      	ldr	r2, [pc, #12]	; (8010a30 <HAL_FLASH_Unlock+0x20>)
 8010a22:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8010a24:	2000      	movs	r0, #0
}
 8010a26:	4770      	bx	lr
 8010a28:	40022000 	.word	0x40022000
 8010a2c:	45670123 	.word	0x45670123
 8010a30:	cdef89ab 	.word	0xcdef89ab

08010a34 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010a34:	4a03      	ldr	r2, [pc, #12]	; (8010a44 <HAL_FLASH_Lock+0x10>)
 8010a36:	6913      	ldr	r3, [r2, #16]
 8010a38:	2180      	movs	r1, #128	; 0x80
 8010a3a:	430b      	orrs	r3, r1
 8010a3c:	6113      	str	r3, [r2, #16]
}
 8010a3e:	2000      	movs	r0, #0
 8010a40:	4770      	bx	lr
 8010a42:	46c0      	nop			; (mov r8, r8)
 8010a44:	40022000 	.word	0x40022000

08010a48 <FLASH_WaitForLastOperation>:
{
 8010a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010a4c:	f7fe fe18 	bl	800f680 <HAL_GetTick>
 8010a50:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010a52:	4e13      	ldr	r6, [pc, #76]	; (8010aa0 <FLASH_WaitForLastOperation+0x58>)
 8010a54:	2501      	movs	r5, #1
 8010a56:	68f3      	ldr	r3, [r6, #12]
 8010a58:	421d      	tst	r5, r3
 8010a5a:	d00a      	beq.n	8010a72 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8010a5c:	1c63      	adds	r3, r4, #1
 8010a5e:	d0fa      	beq.n	8010a56 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010a60:	2c00      	cmp	r4, #0
 8010a62:	d01a      	beq.n	8010a9a <FLASH_WaitForLastOperation+0x52>
 8010a64:	f7fe fe0c 	bl	800f680 <HAL_GetTick>
 8010a68:	1bc0      	subs	r0, r0, r7
 8010a6a:	42a0      	cmp	r0, r4
 8010a6c:	d9f3      	bls.n	8010a56 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8010a6e:	2003      	movs	r0, #3
 8010a70:	e012      	b.n	8010a98 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010a72:	4b0b      	ldr	r3, [pc, #44]	; (8010aa0 <FLASH_WaitForLastOperation+0x58>)
 8010a74:	68db      	ldr	r3, [r3, #12]
 8010a76:	069b      	lsls	r3, r3, #26
 8010a78:	d502      	bpl.n	8010a80 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010a7a:	4b09      	ldr	r3, [pc, #36]	; (8010aa0 <FLASH_WaitForLastOperation+0x58>)
 8010a7c:	2220      	movs	r2, #32
 8010a7e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a80:	4b07      	ldr	r3, [pc, #28]	; (8010aa0 <FLASH_WaitForLastOperation+0x58>)
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	06db      	lsls	r3, r3, #27
 8010a86:	d404      	bmi.n	8010a92 <FLASH_WaitForLastOperation+0x4a>
 8010a88:	4b05      	ldr	r3, [pc, #20]	; (8010aa0 <FLASH_WaitForLastOperation+0x58>)
 8010a8a:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010a8c:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a8e:	075b      	lsls	r3, r3, #29
 8010a90:	d502      	bpl.n	8010a98 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8010a92:	f7ff ffa3 	bl	80109dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010a96:	2001      	movs	r0, #1
}
 8010a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8010a9a:	2003      	movs	r0, #3
 8010a9c:	e7fc      	b.n	8010a98 <FLASH_WaitForLastOperation+0x50>
 8010a9e:	46c0      	nop			; (mov r8, r8)
 8010aa0:	40022000 	.word	0x40022000

08010aa4 <HAL_FLASH_Program>:
{
 8010aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aa6:	46de      	mov	lr, fp
 8010aa8:	4657      	mov	r7, sl
 8010aaa:	464e      	mov	r6, r9
 8010aac:	4645      	mov	r5, r8
 8010aae:	b5e0      	push	{r5, r6, r7, lr}
 8010ab0:	b083      	sub	sp, #12
 8010ab2:	0004      	movs	r4, r0
 8010ab4:	000e      	movs	r6, r1
 8010ab6:	9201      	str	r2, [sp, #4]
 8010ab8:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8010aba:	4b2a      	ldr	r3, [pc, #168]	; (8010b64 <HAL_FLASH_Program+0xc0>)
 8010abc:	7e1b      	ldrb	r3, [r3, #24]
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d04b      	beq.n	8010b5a <HAL_FLASH_Program+0xb6>
 8010ac2:	4b28      	ldr	r3, [pc, #160]	; (8010b64 <HAL_FLASH_Program+0xc0>)
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ac8:	4827      	ldr	r0, [pc, #156]	; (8010b68 <HAL_FLASH_Program+0xc4>)
 8010aca:	f7ff ffbd 	bl	8010a48 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d139      	bne.n	8010b46 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010ad2:	2c01      	cmp	r4, #1
 8010ad4:	d043      	beq.n	8010b5e <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8010ad6:	3c02      	subs	r4, #2
 8010ad8:	4263      	negs	r3, r4
 8010ada:	415c      	adcs	r4, r3
 8010adc:	4264      	negs	r4, r4
 8010ade:	2301      	movs	r3, #1
 8010ae0:	439c      	bics	r4, r3
 8010ae2:	46a0      	mov	r8, r4
 8010ae4:	3303      	adds	r3, #3
 8010ae6:	469c      	mov	ip, r3
 8010ae8:	44e0      	add	r8, ip
{
 8010aea:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010aec:	4b1d      	ldr	r3, [pc, #116]	; (8010b64 <HAL_FLASH_Program+0xc0>)
 8010aee:	469b      	mov	fp, r3
 8010af0:	2300      	movs	r3, #0
 8010af2:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010af4:	4c1d      	ldr	r4, [pc, #116]	; (8010b6c <HAL_FLASH_Program+0xc8>)
 8010af6:	e01e      	b.n	8010b36 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010af8:	2220      	movs	r2, #32
 8010afa:	1ad2      	subs	r2, r2, r3
 8010afc:	4649      	mov	r1, r9
 8010afe:	4091      	lsls	r1, r2
 8010b00:	000a      	movs	r2, r1
 8010b02:	9901      	ldr	r1, [sp, #4]
 8010b04:	40d9      	lsrs	r1, r3
 8010b06:	000b      	movs	r3, r1
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b0c:	465a      	mov	r2, fp
 8010b0e:	4651      	mov	r1, sl
 8010b10:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010b12:	6922      	ldr	r2, [r4, #16]
 8010b14:	2701      	movs	r7, #1
 8010b16:	433a      	orrs	r2, r7
 8010b18:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8010b1a:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010b1c:	4812      	ldr	r0, [pc, #72]	; (8010b68 <HAL_FLASH_Program+0xc4>)
 8010b1e:	f7ff ff93 	bl	8010a48 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010b22:	6923      	ldr	r3, [r4, #16]
 8010b24:	43bb      	bics	r3, r7
 8010b26:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d10c      	bne.n	8010b46 <HAL_FLASH_Program+0xa2>
 8010b2c:	3501      	adds	r5, #1
 8010b2e:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8010b30:	b2eb      	uxtb	r3, r5
 8010b32:	4598      	cmp	r8, r3
 8010b34:	d907      	bls.n	8010b46 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010b36:	012b      	lsls	r3, r5, #4
 8010b38:	2220      	movs	r2, #32
 8010b3a:	4252      	negs	r2, r2
 8010b3c:	189a      	adds	r2, r3, r2
 8010b3e:	d4db      	bmi.n	8010af8 <HAL_FLASH_Program+0x54>
 8010b40:	464b      	mov	r3, r9
 8010b42:	40d3      	lsrs	r3, r2
 8010b44:	e7e1      	b.n	8010b0a <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8010b46:	4b07      	ldr	r3, [pc, #28]	; (8010b64 <HAL_FLASH_Program+0xc0>)
 8010b48:	2200      	movs	r2, #0
 8010b4a:	761a      	strb	r2, [r3, #24]
}
 8010b4c:	b003      	add	sp, #12
 8010b4e:	bc3c      	pop	{r2, r3, r4, r5}
 8010b50:	4690      	mov	r8, r2
 8010b52:	4699      	mov	r9, r3
 8010b54:	46a2      	mov	sl, r4
 8010b56:	46ab      	mov	fp, r5
 8010b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010b5a:	2002      	movs	r0, #2
 8010b5c:	e7f6      	b.n	8010b4c <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	4698      	mov	r8, r3
 8010b62:	e7c2      	b.n	8010aea <HAL_FLASH_Program+0x46>
 8010b64:	20006eb8 	.word	0x20006eb8
 8010b68:	0000c350 	.word	0x0000c350
 8010b6c:	40022000 	.word	0x40022000

08010b70 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b70:	4b06      	ldr	r3, [pc, #24]	; (8010b8c <FLASH_MassErase+0x1c>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010b76:	4b06      	ldr	r3, [pc, #24]	; (8010b90 <FLASH_MassErase+0x20>)
 8010b78:	691a      	ldr	r2, [r3, #16]
 8010b7a:	2104      	movs	r1, #4
 8010b7c:	430a      	orrs	r2, r1
 8010b7e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010b80:	691a      	ldr	r2, [r3, #16]
 8010b82:	313c      	adds	r1, #60	; 0x3c
 8010b84:	430a      	orrs	r2, r1
 8010b86:	611a      	str	r2, [r3, #16]
}
 8010b88:	4770      	bx	lr
 8010b8a:	46c0      	nop			; (mov r8, r8)
 8010b8c:	20006eb8 	.word	0x20006eb8
 8010b90:	40022000 	.word	0x40022000

08010b94 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b94:	4b06      	ldr	r3, [pc, #24]	; (8010bb0 <FLASH_PageErase+0x1c>)
 8010b96:	2200      	movs	r2, #0
 8010b98:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010b9a:	4b06      	ldr	r3, [pc, #24]	; (8010bb4 <FLASH_PageErase+0x20>)
 8010b9c:	691a      	ldr	r2, [r3, #16]
 8010b9e:	2102      	movs	r1, #2
 8010ba0:	430a      	orrs	r2, r1
 8010ba2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010ba4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010ba6:	691a      	ldr	r2, [r3, #16]
 8010ba8:	313e      	adds	r1, #62	; 0x3e
 8010baa:	430a      	orrs	r2, r1
 8010bac:	611a      	str	r2, [r3, #16]
}
 8010bae:	4770      	bx	lr
 8010bb0:	20006eb8 	.word	0x20006eb8
 8010bb4:	40022000 	.word	0x40022000

08010bb8 <HAL_FLASHEx_Erase>:
{
 8010bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bba:	46c6      	mov	lr, r8
 8010bbc:	b500      	push	{lr}
 8010bbe:	0006      	movs	r6, r0
 8010bc0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8010bc2:	4b2a      	ldr	r3, [pc, #168]	; (8010c6c <HAL_FLASHEx_Erase+0xb4>)
 8010bc4:	7e1b      	ldrb	r3, [r3, #24]
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d04d      	beq.n	8010c66 <HAL_FLASHEx_Erase+0xae>
 8010bca:	4b28      	ldr	r3, [pc, #160]	; (8010c6c <HAL_FLASHEx_Erase+0xb4>)
 8010bcc:	2201      	movs	r2, #1
 8010bce:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010bd0:	6803      	ldr	r3, [r0, #0]
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d029      	beq.n	8010c2a <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010bd6:	4826      	ldr	r0, [pc, #152]	; (8010c70 <HAL_FLASHEx_Erase+0xb8>)
 8010bd8:	f7ff ff36 	bl	8010a48 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010bdc:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d129      	bne.n	8010c36 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 8010be2:	2301      	movs	r3, #1
 8010be4:	425b      	negs	r3, r3
 8010be6:	4642      	mov	r2, r8
 8010be8:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8010bea:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010bec:	68b3      	ldr	r3, [r6, #8]
 8010bee:	02db      	lsls	r3, r3, #11
 8010bf0:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8010bf2:	429c      	cmp	r4, r3
 8010bf4:	d235      	bcs.n	8010c62 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010bf6:	4f1f      	ldr	r7, [pc, #124]	; (8010c74 <HAL_FLASHEx_Erase+0xbc>)
 8010bf8:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8010bfa:	0020      	movs	r0, r4
 8010bfc:	f7ff ffca 	bl	8010b94 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c00:	481b      	ldr	r0, [pc, #108]	; (8010c70 <HAL_FLASHEx_Erase+0xb8>)
 8010c02:	f7ff ff21 	bl	8010a48 <FLASH_WaitForLastOperation>
 8010c06:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	43ab      	bics	r3, r5
 8010c0c:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	d124      	bne.n	8010c5c <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8010c12:	2380      	movs	r3, #128	; 0x80
 8010c14:	011b      	lsls	r3, r3, #4
 8010c16:	469c      	mov	ip, r3
 8010c18:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010c1a:	68b3      	ldr	r3, [r6, #8]
 8010c1c:	02db      	lsls	r3, r3, #11
 8010c1e:	6871      	ldr	r1, [r6, #4]
 8010c20:	468c      	mov	ip, r1
 8010c22:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010c24:	42a3      	cmp	r3, r4
 8010c26:	d8e8      	bhi.n	8010bfa <HAL_FLASHEx_Erase+0x42>
 8010c28:	e005      	b.n	8010c36 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010c2a:	4811      	ldr	r0, [pc, #68]	; (8010c70 <HAL_FLASHEx_Erase+0xb8>)
 8010c2c:	f7ff ff0c 	bl	8010a48 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010c30:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010c32:	2800      	cmp	r0, #0
 8010c34:	d006      	beq.n	8010c44 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8010c36:	4b0d      	ldr	r3, [pc, #52]	; (8010c6c <HAL_FLASHEx_Erase+0xb4>)
 8010c38:	2100      	movs	r1, #0
 8010c3a:	7619      	strb	r1, [r3, #24]
}
 8010c3c:	0010      	movs	r0, r2
 8010c3e:	bc04      	pop	{r2}
 8010c40:	4690      	mov	r8, r2
 8010c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8010c44:	f7ff ff94 	bl	8010b70 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c48:	4809      	ldr	r0, [pc, #36]	; (8010c70 <HAL_FLASHEx_Erase+0xb8>)
 8010c4a:	f7ff fefd 	bl	8010a48 <FLASH_WaitForLastOperation>
 8010c4e:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010c50:	4908      	ldr	r1, [pc, #32]	; (8010c74 <HAL_FLASHEx_Erase+0xbc>)
 8010c52:	690b      	ldr	r3, [r1, #16]
 8010c54:	2004      	movs	r0, #4
 8010c56:	4383      	bics	r3, r0
 8010c58:	610b      	str	r3, [r1, #16]
 8010c5a:	e7ec      	b.n	8010c36 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8010c5c:	4643      	mov	r3, r8
 8010c5e:	601c      	str	r4, [r3, #0]
            break;
 8010c60:	e7e9      	b.n	8010c36 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010c62:	2201      	movs	r2, #1
 8010c64:	e7e7      	b.n	8010c36 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8010c66:	2202      	movs	r2, #2
 8010c68:	e7e8      	b.n	8010c3c <HAL_FLASHEx_Erase+0x84>
 8010c6a:	46c0      	nop			; (mov r8, r8)
 8010c6c:	20006eb8 	.word	0x20006eb8
 8010c70:	0000c350 	.word	0x0000c350
 8010c74:	40022000 	.word	0x40022000

08010c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c7a:	46de      	mov	lr, fp
 8010c7c:	4657      	mov	r7, sl
 8010c7e:	464e      	mov	r6, r9
 8010c80:	4645      	mov	r5, r8
 8010c82:	b5e0      	push	{r5, r6, r7, lr}
 8010c84:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010c86:	680a      	ldr	r2, [r1, #0]
 8010c88:	2a00      	cmp	r2, #0
 8010c8a:	d100      	bne.n	8010c8e <HAL_GPIO_Init+0x16>
 8010c8c:	e0bf      	b.n	8010e0e <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8010c8e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010c90:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010c92:	2410      	movs	r4, #16
 8010c94:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010c96:	3c0d      	subs	r4, #13
 8010c98:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010c9a:	2480      	movs	r4, #128	; 0x80
 8010c9c:	0564      	lsls	r4, r4, #21
 8010c9e:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010ca0:	4c5e      	ldr	r4, [pc, #376]	; (8010e1c <HAL_GPIO_Init+0x1a4>)
 8010ca2:	1904      	adds	r4, r0, r4
 8010ca4:	1e65      	subs	r5, r4, #1
 8010ca6:	41ac      	sbcs	r4, r5
 8010ca8:	3404      	adds	r4, #4
 8010caa:	46a1      	mov	r9, r4
 8010cac:	e03b      	b.n	8010d26 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8010cae:	08dc      	lsrs	r4, r3, #3
 8010cb0:	00a4      	lsls	r4, r4, #2
 8010cb2:	1904      	adds	r4, r0, r4
 8010cb4:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010cb6:	2507      	movs	r5, #7
 8010cb8:	401d      	ands	r5, r3
 8010cba:	00ad      	lsls	r5, r5, #2
 8010cbc:	220f      	movs	r2, #15
 8010cbe:	40aa      	lsls	r2, r5
 8010cc0:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010cc2:	690a      	ldr	r2, [r1, #16]
 8010cc4:	40aa      	lsls	r2, r5
 8010cc6:	0015      	movs	r5, r2
 8010cc8:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010cca:	6225      	str	r5, [r4, #32]
 8010ccc:	e035      	b.n	8010d3a <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010cce:	2500      	movs	r5, #0
 8010cd0:	465a      	mov	r2, fp
 8010cd2:	4095      	lsls	r5, r2
 8010cd4:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8010cd6:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010cd8:	4c51      	ldr	r4, [pc, #324]	; (8010e20 <HAL_GPIO_Init+0x1a8>)
 8010cda:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010cdc:	9a01      	ldr	r2, [sp, #4]
 8010cde:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010ce0:	684a      	ldr	r2, [r1, #4]
 8010ce2:	03d2      	lsls	r2, r2, #15
 8010ce4:	d500      	bpl.n	8010ce8 <HAL_GPIO_Init+0x70>
 8010ce6:	e086      	b.n	8010df6 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010ce8:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010cea:	4f4d      	ldr	r7, [pc, #308]	; (8010e20 <HAL_GPIO_Init+0x1a8>)
 8010cec:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8010cee:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010cf0:	684a      	ldr	r2, [r1, #4]
 8010cf2:	0392      	lsls	r2, r2, #14
 8010cf4:	d500      	bpl.n	8010cf8 <HAL_GPIO_Init+0x80>
 8010cf6:	e081      	b.n	8010dfc <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010cf8:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010cfa:	4f49      	ldr	r7, [pc, #292]	; (8010e20 <HAL_GPIO_Init+0x1a8>)
 8010cfc:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010cfe:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010d00:	684a      	ldr	r2, [r1, #4]
 8010d02:	02d2      	lsls	r2, r2, #11
 8010d04:	d47d      	bmi.n	8010e02 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010d06:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010d08:	4f45      	ldr	r7, [pc, #276]	; (8010e20 <HAL_GPIO_Init+0x1a8>)
 8010d0a:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8010d0c:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010d0e:	684a      	ldr	r2, [r1, #4]
 8010d10:	0292      	lsls	r2, r2, #10
 8010d12:	d479      	bmi.n	8010e08 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010d14:	0022      	movs	r2, r4
 8010d16:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010d18:	4c41      	ldr	r4, [pc, #260]	; (8010e20 <HAL_GPIO_Init+0x1a8>)
 8010d1a:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8010d1c:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8010d1e:	680a      	ldr	r2, [r1, #0]
 8010d20:	0014      	movs	r4, r2
 8010d22:	40dc      	lsrs	r4, r3
 8010d24:	d073      	beq.n	8010e0e <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010d26:	0034      	movs	r4, r6
 8010d28:	409c      	lsls	r4, r3
 8010d2a:	4022      	ands	r2, r4
 8010d2c:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8010d2e:	d0f5      	beq.n	8010d1c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010d30:	684c      	ldr	r4, [r1, #4]
 8010d32:	4642      	mov	r2, r8
 8010d34:	4394      	bics	r4, r2
 8010d36:	2c02      	cmp	r4, #2
 8010d38:	d0b9      	beq.n	8010cae <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8010d3a:	6804      	ldr	r4, [r0, #0]
 8010d3c:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010d3e:	4665      	mov	r5, ip
 8010d40:	40bd      	lsls	r5, r7
 8010d42:	43ed      	mvns	r5, r5
 8010d44:	402c      	ands	r4, r5
 8010d46:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010d48:	684c      	ldr	r4, [r1, #4]
 8010d4a:	4662      	mov	r2, ip
 8010d4c:	4014      	ands	r4, r2
 8010d4e:	40bc      	lsls	r4, r7
 8010d50:	465a      	mov	r2, fp
 8010d52:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8010d54:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010d56:	684c      	ldr	r4, [r1, #4]
 8010d58:	4642      	mov	r2, r8
 8010d5a:	4394      	bics	r4, r2
 8010d5c:	3c01      	subs	r4, #1
 8010d5e:	2c01      	cmp	r4, #1
 8010d60:	d813      	bhi.n	8010d8a <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8010d62:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010d64:	402c      	ands	r4, r5
 8010d66:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010d68:	68cc      	ldr	r4, [r1, #12]
 8010d6a:	40bc      	lsls	r4, r7
 8010d6c:	465a      	mov	r2, fp
 8010d6e:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8010d70:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8010d72:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010d74:	0032      	movs	r2, r6
 8010d76:	409a      	lsls	r2, r3
 8010d78:	4394      	bics	r4, r2
 8010d7a:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010d7c:	684a      	ldr	r2, [r1, #4]
 8010d7e:	0914      	lsrs	r4, r2, #4
 8010d80:	4034      	ands	r4, r6
 8010d82:	409c      	lsls	r4, r3
 8010d84:	465a      	mov	r2, fp
 8010d86:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8010d88:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8010d8a:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010d8c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010d8e:	688d      	ldr	r5, [r1, #8]
 8010d90:	40bd      	lsls	r5, r7
 8010d92:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8010d94:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010d96:	684a      	ldr	r2, [r1, #4]
 8010d98:	4654      	mov	r4, sl
 8010d9a:	4222      	tst	r2, r4
 8010d9c:	d0be      	beq.n	8010d1c <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d9e:	4c21      	ldr	r4, [pc, #132]	; (8010e24 <HAL_GPIO_Init+0x1ac>)
 8010da0:	69a5      	ldr	r5, [r4, #24]
 8010da2:	4335      	orrs	r5, r6
 8010da4:	61a5      	str	r5, [r4, #24]
 8010da6:	69a4      	ldr	r4, [r4, #24]
 8010da8:	4034      	ands	r4, r6
 8010daa:	9403      	str	r4, [sp, #12]
 8010dac:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010dae:	089c      	lsrs	r4, r3, #2
 8010db0:	00a4      	lsls	r4, r4, #2
 8010db2:	4a1d      	ldr	r2, [pc, #116]	; (8010e28 <HAL_GPIO_Init+0x1b0>)
 8010db4:	4693      	mov	fp, r2
 8010db6:	445c      	add	r4, fp
 8010db8:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010dba:	4667      	mov	r7, ip
 8010dbc:	401f      	ands	r7, r3
 8010dbe:	00ba      	lsls	r2, r7, #2
 8010dc0:	4693      	mov	fp, r2
 8010dc2:	270f      	movs	r7, #15
 8010dc4:	4097      	lsls	r7, r2
 8010dc6:	43bd      	bics	r5, r7
 8010dc8:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010dca:	2590      	movs	r5, #144	; 0x90
 8010dcc:	05ed      	lsls	r5, r5, #23
 8010dce:	42a8      	cmp	r0, r5
 8010dd0:	d100      	bne.n	8010dd4 <HAL_GPIO_Init+0x15c>
 8010dd2:	e77c      	b.n	8010cce <HAL_GPIO_Init+0x56>
 8010dd4:	4d15      	ldr	r5, [pc, #84]	; (8010e2c <HAL_GPIO_Init+0x1b4>)
 8010dd6:	42a8      	cmp	r0, r5
 8010dd8:	d007      	beq.n	8010dea <HAL_GPIO_Init+0x172>
 8010dda:	4d15      	ldr	r5, [pc, #84]	; (8010e30 <HAL_GPIO_Init+0x1b8>)
 8010ddc:	42a8      	cmp	r0, r5
 8010dde:	d006      	beq.n	8010dee <HAL_GPIO_Init+0x176>
 8010de0:	4d14      	ldr	r5, [pc, #80]	; (8010e34 <HAL_GPIO_Init+0x1bc>)
 8010de2:	42a8      	cmp	r0, r5
 8010de4:	d005      	beq.n	8010df2 <HAL_GPIO_Init+0x17a>
 8010de6:	464d      	mov	r5, r9
 8010de8:	e772      	b.n	8010cd0 <HAL_GPIO_Init+0x58>
 8010dea:	0035      	movs	r5, r6
 8010dec:	e770      	b.n	8010cd0 <HAL_GPIO_Init+0x58>
 8010dee:	2502      	movs	r5, #2
 8010df0:	e76e      	b.n	8010cd0 <HAL_GPIO_Init+0x58>
 8010df2:	4665      	mov	r5, ip
 8010df4:	e76c      	b.n	8010cd0 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8010df6:	9a01      	ldr	r2, [sp, #4]
 8010df8:	4314      	orrs	r4, r2
 8010dfa:	e776      	b.n	8010cea <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8010dfc:	9a01      	ldr	r2, [sp, #4]
 8010dfe:	4314      	orrs	r4, r2
 8010e00:	e77b      	b.n	8010cfa <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8010e02:	9a01      	ldr	r2, [sp, #4]
 8010e04:	4314      	orrs	r4, r2
 8010e06:	e77f      	b.n	8010d08 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8010e08:	9a01      	ldr	r2, [sp, #4]
 8010e0a:	4322      	orrs	r2, r4
 8010e0c:	e784      	b.n	8010d18 <HAL_GPIO_Init+0xa0>
  } 
}
 8010e0e:	b005      	add	sp, #20
 8010e10:	bc3c      	pop	{r2, r3, r4, r5}
 8010e12:	4690      	mov	r8, r2
 8010e14:	4699      	mov	r9, r3
 8010e16:	46a2      	mov	sl, r4
 8010e18:	46ab      	mov	fp, r5
 8010e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e1c:	b7fff000 	.word	0xb7fff000
 8010e20:	40010400 	.word	0x40010400
 8010e24:	40021000 	.word	0x40021000
 8010e28:	40010000 	.word	0x40010000
 8010e2c:	48000400 	.word	0x48000400
 8010e30:	48000800 	.word	0x48000800
 8010e34:	48000c00 	.word	0x48000c00

08010e38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e3a:	46de      	mov	lr, fp
 8010e3c:	4657      	mov	r7, sl
 8010e3e:	464e      	mov	r6, r9
 8010e40:	4645      	mov	r5, r8
 8010e42:	b5e0      	push	{r5, r6, r7, lr}
 8010e44:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010e46:	2900      	cmp	r1, #0
 8010e48:	d071      	beq.n	8010f2e <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8010e4a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010e50:	3202      	adds	r2, #2
 8010e52:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010e54:	3204      	adds	r2, #4
 8010e56:	4693      	mov	fp, r2
 8010e58:	3208      	adds	r2, #8
 8010e5a:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010e5c:	4a37      	ldr	r2, [pc, #220]	; (8010f3c <HAL_GPIO_DeInit+0x104>)
 8010e5e:	1882      	adds	r2, r0, r2
 8010e60:	1e54      	subs	r4, r2, #1
 8010e62:	41a2      	sbcs	r2, r4
 8010e64:	3204      	adds	r2, #4
 8010e66:	9201      	str	r2, [sp, #4]
 8010e68:	9100      	str	r1, [sp, #0]
 8010e6a:	e009      	b.n	8010e80 <HAL_GPIO_DeInit+0x48>
 8010e6c:	2100      	movs	r1, #0
 8010e6e:	4689      	mov	r9, r1
 8010e70:	4649      	mov	r1, r9
 8010e72:	40a9      	lsls	r1, r5
 8010e74:	42b1      	cmp	r1, r6
 8010e76:	d048      	beq.n	8010f0a <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010e78:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010e7a:	9a00      	ldr	r2, [sp, #0]
 8010e7c:	40da      	lsrs	r2, r3
 8010e7e:	d056      	beq.n	8010f2e <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8010e80:	4662      	mov	r2, ip
 8010e82:	409a      	lsls	r2, r3
 8010e84:	9900      	ldr	r1, [sp, #0]
 8010e86:	400a      	ands	r2, r1
    if (iocurrent)
 8010e88:	d0f6      	beq.n	8010e78 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010e8a:	6804      	ldr	r4, [r0, #0]
 8010e8c:	005d      	lsls	r5, r3, #1
 8010e8e:	4646      	mov	r6, r8
 8010e90:	40ae      	lsls	r6, r5
 8010e92:	43f5      	mvns	r5, r6
 8010e94:	402c      	ands	r4, r5
 8010e96:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010e98:	08dc      	lsrs	r4, r3, #3
 8010e9a:	00a4      	lsls	r4, r4, #2
 8010e9c:	1904      	adds	r4, r0, r4
 8010e9e:	6a26      	ldr	r6, [r4, #32]
 8010ea0:	465f      	mov	r7, fp
 8010ea2:	401f      	ands	r7, r3
 8010ea4:	00bf      	lsls	r7, r7, #2
 8010ea6:	4651      	mov	r1, sl
 8010ea8:	40b9      	lsls	r1, r7
 8010eaa:	438e      	bics	r6, r1
 8010eac:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010eae:	6884      	ldr	r4, [r0, #8]
 8010eb0:	402c      	ands	r4, r5
 8010eb2:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010eb4:	6844      	ldr	r4, [r0, #4]
 8010eb6:	4666      	mov	r6, ip
 8010eb8:	409e      	lsls	r6, r3
 8010eba:	43b4      	bics	r4, r6
 8010ebc:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010ebe:	68c4      	ldr	r4, [r0, #12]
 8010ec0:	4025      	ands	r5, r4
 8010ec2:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8010ec4:	089c      	lsrs	r4, r3, #2
 8010ec6:	00a4      	lsls	r4, r4, #2
 8010ec8:	491d      	ldr	r1, [pc, #116]	; (8010f40 <HAL_GPIO_DeInit+0x108>)
 8010eca:	4689      	mov	r9, r1
 8010ecc:	444c      	add	r4, r9
 8010ece:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010ed0:	4645      	mov	r5, r8
 8010ed2:	401d      	ands	r5, r3
 8010ed4:	00ad      	lsls	r5, r5, #2
 8010ed6:	4657      	mov	r7, sl
 8010ed8:	40af      	lsls	r7, r5
 8010eda:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010edc:	2190      	movs	r1, #144	; 0x90
 8010ede:	05c9      	lsls	r1, r1, #23
 8010ee0:	4288      	cmp	r0, r1
 8010ee2:	d0c3      	beq.n	8010e6c <HAL_GPIO_DeInit+0x34>
 8010ee4:	4917      	ldr	r1, [pc, #92]	; (8010f44 <HAL_GPIO_DeInit+0x10c>)
 8010ee6:	4288      	cmp	r0, r1
 8010ee8:	d008      	beq.n	8010efc <HAL_GPIO_DeInit+0xc4>
 8010eea:	4917      	ldr	r1, [pc, #92]	; (8010f48 <HAL_GPIO_DeInit+0x110>)
 8010eec:	4288      	cmp	r0, r1
 8010eee:	d007      	beq.n	8010f00 <HAL_GPIO_DeInit+0xc8>
 8010ef0:	4916      	ldr	r1, [pc, #88]	; (8010f4c <HAL_GPIO_DeInit+0x114>)
 8010ef2:	4288      	cmp	r0, r1
 8010ef4:	d007      	beq.n	8010f06 <HAL_GPIO_DeInit+0xce>
 8010ef6:	9901      	ldr	r1, [sp, #4]
 8010ef8:	4689      	mov	r9, r1
 8010efa:	e7b9      	b.n	8010e70 <HAL_GPIO_DeInit+0x38>
 8010efc:	46e1      	mov	r9, ip
 8010efe:	e7b7      	b.n	8010e70 <HAL_GPIO_DeInit+0x38>
 8010f00:	2102      	movs	r1, #2
 8010f02:	4689      	mov	r9, r1
 8010f04:	e7b4      	b.n	8010e70 <HAL_GPIO_DeInit+0x38>
 8010f06:	46c1      	mov	r9, r8
 8010f08:	e7b2      	b.n	8010e70 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010f0a:	68a5      	ldr	r5, [r4, #8]
 8010f0c:	43bd      	bics	r5, r7
 8010f0e:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010f10:	4c0f      	ldr	r4, [pc, #60]	; (8010f50 <HAL_GPIO_DeInit+0x118>)
 8010f12:	6825      	ldr	r5, [r4, #0]
 8010f14:	43d2      	mvns	r2, r2
 8010f16:	4015      	ands	r5, r2
 8010f18:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010f1a:	6865      	ldr	r5, [r4, #4]
 8010f1c:	4015      	ands	r5, r2
 8010f1e:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010f20:	68a5      	ldr	r5, [r4, #8]
 8010f22:	4015      	ands	r5, r2
 8010f24:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010f26:	68e5      	ldr	r5, [r4, #12]
 8010f28:	402a      	ands	r2, r5
 8010f2a:	60e2      	str	r2, [r4, #12]
 8010f2c:	e7a4      	b.n	8010e78 <HAL_GPIO_DeInit+0x40>
  }
}
 8010f2e:	b003      	add	sp, #12
 8010f30:	bc3c      	pop	{r2, r3, r4, r5}
 8010f32:	4690      	mov	r8, r2
 8010f34:	4699      	mov	r9, r3
 8010f36:	46a2      	mov	sl, r4
 8010f38:	46ab      	mov	fp, r5
 8010f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f3c:	b7fff000 	.word	0xb7fff000
 8010f40:	40010000 	.word	0x40010000
 8010f44:	48000400 	.word	0x48000400
 8010f48:	48000800 	.word	0x48000800
 8010f4c:	48000c00 	.word	0x48000c00
 8010f50:	40010400 	.word	0x40010400

08010f54 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010f54:	6900      	ldr	r0, [r0, #16]
 8010f56:	4008      	ands	r0, r1
 8010f58:	1e41      	subs	r1, r0, #1
 8010f5a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010f5c:	b2c0      	uxtb	r0, r0
  }
 8010f5e:	4770      	bx	lr

08010f60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010f60:	2a00      	cmp	r2, #0
 8010f62:	d101      	bne.n	8010f68 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010f64:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010f66:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010f68:	6181      	str	r1, [r0, #24]
 8010f6a:	e7fc      	b.n	8010f66 <HAL_GPIO_WritePin+0x6>

08010f6c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010f6c:	6943      	ldr	r3, [r0, #20]
 8010f6e:	4059      	eors	r1, r3
 8010f70:	6141      	str	r1, [r0, #20]
}
 8010f72:	4770      	bx	lr

08010f74 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010f74:	4770      	bx	lr
	...

08010f78 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010f78:	4a03      	ldr	r2, [pc, #12]	; (8010f88 <HAL_PWR_EnableBkUpAccess+0x10>)
 8010f7a:	6811      	ldr	r1, [r2, #0]
 8010f7c:	2380      	movs	r3, #128	; 0x80
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	430b      	orrs	r3, r1
 8010f82:	6013      	str	r3, [r2, #0]
}
 8010f84:	4770      	bx	lr
 8010f86:	46c0      	nop			; (mov r8, r8)
 8010f88:	40007000 	.word	0x40007000

08010f8c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f8e:	46c6      	mov	lr, r8
 8010f90:	b500      	push	{lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010f96:	6803      	ldr	r3, [r0, #0]
 8010f98:	07db      	lsls	r3, r3, #31
 8010f9a:	d538      	bpl.n	801100e <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010f9c:	4bbd      	ldr	r3, [pc, #756]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8010f9e:	685a      	ldr	r2, [r3, #4]
 8010fa0:	230c      	movs	r3, #12
 8010fa2:	4013      	ands	r3, r2
 8010fa4:	2b04      	cmp	r3, #4
 8010fa6:	d02a      	beq.n	8010ffe <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010fa8:	4bba      	ldr	r3, [pc, #744]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8010faa:	685a      	ldr	r2, [r3, #4]
 8010fac:	230c      	movs	r3, #12
 8010fae:	4013      	ands	r3, r2
 8010fb0:	2b08      	cmp	r3, #8
 8010fb2:	d108      	bne.n	8010fc6 <HAL_RCC_OscConfig+0x3a>
 8010fb4:	4bb7      	ldr	r3, [pc, #732]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	22c0      	movs	r2, #192	; 0xc0
 8010fba:	0252      	lsls	r2, r2, #9
 8010fbc:	4013      	ands	r3, r2
 8010fbe:	2280      	movs	r2, #128	; 0x80
 8010fc0:	0252      	lsls	r2, r2, #9
 8010fc2:	4293      	cmp	r3, r2
 8010fc4:	d01b      	beq.n	8010ffe <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010fc6:	4bb3      	ldr	r3, [pc, #716]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	49b3      	ldr	r1, [pc, #716]	; (8011298 <HAL_RCC_OscConfig+0x30c>)
 8010fcc:	400a      	ands	r2, r1
 8010fce:	601a      	str	r2, [r3, #0]
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	49b2      	ldr	r1, [pc, #712]	; (801129c <HAL_RCC_OscConfig+0x310>)
 8010fd4:	400a      	ands	r2, r1
 8010fd6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fd8:	f7fe fb52 	bl	800f680 <HAL_GetTick>
 8010fdc:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010fde:	4ead      	ldr	r6, [pc, #692]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8010fe0:	2580      	movs	r5, #128	; 0x80
 8010fe2:	02ad      	lsls	r5, r5, #10
 8010fe4:	6833      	ldr	r3, [r6, #0]
 8010fe6:	422b      	tst	r3, r5
 8010fe8:	d039      	beq.n	801105e <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010fea:	f7fe fb49 	bl	800f680 <HAL_GetTick>
 8010fee:	1bc0      	subs	r0, r0, r7
 8010ff0:	2864      	cmp	r0, #100	; 0x64
 8010ff2:	d9f7      	bls.n	8010fe4 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8010ff4:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8010ff6:	b002      	add	sp, #8
 8010ff8:	bc04      	pop	{r2}
 8010ffa:	4690      	mov	r8, r2
 8010ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010ffe:	4ba5      	ldr	r3, [pc, #660]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	039b      	lsls	r3, r3, #14
 8011004:	d503      	bpl.n	801100e <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 8011006:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011008:	6863      	ldr	r3, [r4, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d0f3      	beq.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801100e:	6823      	ldr	r3, [r4, #0]
 8011010:	079b      	lsls	r3, r3, #30
 8011012:	d400      	bmi.n	8011016 <HAL_RCC_OscConfig+0x8a>
 8011014:	e08d      	b.n	8011132 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011016:	4b9f      	ldr	r3, [pc, #636]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	220c      	movs	r2, #12
 801101c:	421a      	tst	r2, r3
 801101e:	d077      	beq.n	8011110 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011020:	4b9c      	ldr	r3, [pc, #624]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011022:	685a      	ldr	r2, [r3, #4]
 8011024:	230c      	movs	r3, #12
 8011026:	4013      	ands	r3, r2
 8011028:	2b08      	cmp	r3, #8
 801102a:	d068      	beq.n	80110fe <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801102c:	68e3      	ldr	r3, [r4, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d100      	bne.n	8011034 <HAL_RCC_OscConfig+0xa8>
 8011032:	e0a1      	b.n	8011178 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011034:	4a97      	ldr	r2, [pc, #604]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011036:	6813      	ldr	r3, [r2, #0]
 8011038:	2101      	movs	r1, #1
 801103a:	430b      	orrs	r3, r1
 801103c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801103e:	f7fe fb1f 	bl	800f680 <HAL_GetTick>
 8011042:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011044:	4e93      	ldr	r6, [pc, #588]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011046:	2502      	movs	r5, #2
 8011048:	6833      	ldr	r3, [r6, #0]
 801104a:	421d      	tst	r5, r3
 801104c:	d000      	beq.n	8011050 <HAL_RCC_OscConfig+0xc4>
 801104e:	e08a      	b.n	8011166 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011050:	f7fe fb16 	bl	800f680 <HAL_GetTick>
 8011054:	1bc0      	subs	r0, r0, r7
 8011056:	2864      	cmp	r0, #100	; 0x64
 8011058:	d9f6      	bls.n	8011048 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801105a:	2003      	movs	r0, #3
 801105c:	e7cb      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801105e:	6863      	ldr	r3, [r4, #4]
 8011060:	2b01      	cmp	r3, #1
 8011062:	d00b      	beq.n	801107c <HAL_RCC_OscConfig+0xf0>
 8011064:	2b00      	cmp	r3, #0
 8011066:	d122      	bne.n	80110ae <HAL_RCC_OscConfig+0x122>
 8011068:	4b8a      	ldr	r3, [pc, #552]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	498a      	ldr	r1, [pc, #552]	; (8011298 <HAL_RCC_OscConfig+0x30c>)
 801106e:	400a      	ands	r2, r1
 8011070:	601a      	str	r2, [r3, #0]
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	4989      	ldr	r1, [pc, #548]	; (801129c <HAL_RCC_OscConfig+0x310>)
 8011076:	400a      	ands	r2, r1
 8011078:	601a      	str	r2, [r3, #0]
 801107a:	e005      	b.n	8011088 <HAL_RCC_OscConfig+0xfc>
 801107c:	4a85      	ldr	r2, [pc, #532]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 801107e:	6811      	ldr	r1, [r2, #0]
 8011080:	2380      	movs	r3, #128	; 0x80
 8011082:	025b      	lsls	r3, r3, #9
 8011084:	430b      	orrs	r3, r1
 8011086:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011088:	6863      	ldr	r3, [r4, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d027      	beq.n	80110de <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 801108e:	f7fe faf7 	bl	800f680 <HAL_GetTick>
 8011092:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011094:	4e7f      	ldr	r6, [pc, #508]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011096:	2580      	movs	r5, #128	; 0x80
 8011098:	02ad      	lsls	r5, r5, #10
 801109a:	6833      	ldr	r3, [r6, #0]
 801109c:	422b      	tst	r3, r5
 801109e:	d1b6      	bne.n	801100e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80110a0:	f7fe faee 	bl	800f680 <HAL_GetTick>
 80110a4:	1bc0      	subs	r0, r0, r7
 80110a6:	2864      	cmp	r0, #100	; 0x64
 80110a8:	d9f7      	bls.n	801109a <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80110aa:	2003      	movs	r0, #3
 80110ac:	e7a3      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80110ae:	2b05      	cmp	r3, #5
 80110b0:	d009      	beq.n	80110c6 <HAL_RCC_OscConfig+0x13a>
 80110b2:	4b78      	ldr	r3, [pc, #480]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	4978      	ldr	r1, [pc, #480]	; (8011298 <HAL_RCC_OscConfig+0x30c>)
 80110b8:	400a      	ands	r2, r1
 80110ba:	601a      	str	r2, [r3, #0]
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	4977      	ldr	r1, [pc, #476]	; (801129c <HAL_RCC_OscConfig+0x310>)
 80110c0:	400a      	ands	r2, r1
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	e7e0      	b.n	8011088 <HAL_RCC_OscConfig+0xfc>
 80110c6:	4b73      	ldr	r3, [pc, #460]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 80110c8:	6819      	ldr	r1, [r3, #0]
 80110ca:	2280      	movs	r2, #128	; 0x80
 80110cc:	02d2      	lsls	r2, r2, #11
 80110ce:	430a      	orrs	r2, r1
 80110d0:	601a      	str	r2, [r3, #0]
 80110d2:	6819      	ldr	r1, [r3, #0]
 80110d4:	2280      	movs	r2, #128	; 0x80
 80110d6:	0252      	lsls	r2, r2, #9
 80110d8:	430a      	orrs	r2, r1
 80110da:	601a      	str	r2, [r3, #0]
 80110dc:	e7d4      	b.n	8011088 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80110de:	f7fe facf 	bl	800f680 <HAL_GetTick>
 80110e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80110e4:	4e6b      	ldr	r6, [pc, #428]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 80110e6:	2580      	movs	r5, #128	; 0x80
 80110e8:	02ad      	lsls	r5, r5, #10
 80110ea:	6833      	ldr	r3, [r6, #0]
 80110ec:	422b      	tst	r3, r5
 80110ee:	d08e      	beq.n	801100e <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80110f0:	f7fe fac6 	bl	800f680 <HAL_GetTick>
 80110f4:	1bc0      	subs	r0, r0, r7
 80110f6:	2864      	cmp	r0, #100	; 0x64
 80110f8:	d9f7      	bls.n	80110ea <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80110fa:	2003      	movs	r0, #3
 80110fc:	e77b      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80110fe:	4b65      	ldr	r3, [pc, #404]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	22c0      	movs	r2, #192	; 0xc0
 8011104:	0252      	lsls	r2, r2, #9
 8011106:	4013      	ands	r3, r2
 8011108:	2280      	movs	r2, #128	; 0x80
 801110a:	0212      	lsls	r2, r2, #8
 801110c:	4293      	cmp	r3, r2
 801110e:	d18d      	bne.n	801102c <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011110:	4b60      	ldr	r3, [pc, #384]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	079b      	lsls	r3, r3, #30
 8011116:	d504      	bpl.n	8011122 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8011118:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801111a:	68e3      	ldr	r3, [r4, #12]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d000      	beq.n	8011122 <HAL_RCC_OscConfig+0x196>
 8011120:	e769      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011122:	495c      	ldr	r1, [pc, #368]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011124:	680a      	ldr	r2, [r1, #0]
 8011126:	6923      	ldr	r3, [r4, #16]
 8011128:	00db      	lsls	r3, r3, #3
 801112a:	20f8      	movs	r0, #248	; 0xf8
 801112c:	4382      	bics	r2, r0
 801112e:	4313      	orrs	r3, r2
 8011130:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	071b      	lsls	r3, r3, #28
 8011136:	d547      	bpl.n	80111c8 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011138:	6a23      	ldr	r3, [r4, #32]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d030      	beq.n	80111a0 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 801113e:	4a55      	ldr	r2, [pc, #340]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011140:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011142:	2101      	movs	r1, #1
 8011144:	430b      	orrs	r3, r1
 8011146:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011148:	f7fe fa9a 	bl	800f680 <HAL_GetTick>
 801114c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801114e:	4e51      	ldr	r6, [pc, #324]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011150:	2502      	movs	r5, #2
 8011152:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011154:	421d      	tst	r5, r3
 8011156:	d137      	bne.n	80111c8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011158:	f7fe fa92 	bl	800f680 <HAL_GetTick>
 801115c:	1bc0      	subs	r0, r0, r7
 801115e:	2864      	cmp	r0, #100	; 0x64
 8011160:	d9f7      	bls.n	8011152 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8011162:	2003      	movs	r0, #3
 8011164:	e747      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011166:	494b      	ldr	r1, [pc, #300]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011168:	680a      	ldr	r2, [r1, #0]
 801116a:	6923      	ldr	r3, [r4, #16]
 801116c:	00db      	lsls	r3, r3, #3
 801116e:	20f8      	movs	r0, #248	; 0xf8
 8011170:	4382      	bics	r2, r0
 8011172:	4313      	orrs	r3, r2
 8011174:	600b      	str	r3, [r1, #0]
 8011176:	e7dc      	b.n	8011132 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8011178:	4a46      	ldr	r2, [pc, #280]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 801117a:	6813      	ldr	r3, [r2, #0]
 801117c:	2101      	movs	r1, #1
 801117e:	438b      	bics	r3, r1
 8011180:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011182:	f7fe fa7d 	bl	800f680 <HAL_GetTick>
 8011186:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011188:	4e42      	ldr	r6, [pc, #264]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 801118a:	2502      	movs	r5, #2
 801118c:	6833      	ldr	r3, [r6, #0]
 801118e:	421d      	tst	r5, r3
 8011190:	d0cf      	beq.n	8011132 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011192:	f7fe fa75 	bl	800f680 <HAL_GetTick>
 8011196:	1bc0      	subs	r0, r0, r7
 8011198:	2864      	cmp	r0, #100	; 0x64
 801119a:	d9f7      	bls.n	801118c <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 801119c:	2003      	movs	r0, #3
 801119e:	e72a      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 80111a0:	4a3c      	ldr	r2, [pc, #240]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 80111a2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80111a4:	2101      	movs	r1, #1
 80111a6:	438b      	bics	r3, r1
 80111a8:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80111aa:	f7fe fa69 	bl	800f680 <HAL_GetTick>
 80111ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80111b0:	4e38      	ldr	r6, [pc, #224]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 80111b2:	2502      	movs	r5, #2
 80111b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80111b6:	421d      	tst	r5, r3
 80111b8:	d006      	beq.n	80111c8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80111ba:	f7fe fa61 	bl	800f680 <HAL_GetTick>
 80111be:	1bc0      	subs	r0, r0, r7
 80111c0:	2864      	cmp	r0, #100	; 0x64
 80111c2:	d9f7      	bls.n	80111b4 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80111c4:	2003      	movs	r0, #3
 80111c6:	e716      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	075b      	lsls	r3, r3, #29
 80111cc:	d442      	bmi.n	8011254 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80111ce:	6823      	ldr	r3, [r4, #0]
 80111d0:	06db      	lsls	r3, r3, #27
 80111d2:	d512      	bpl.n	80111fa <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80111d4:	6963      	ldr	r3, [r4, #20]
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d100      	bne.n	80111dc <HAL_RCC_OscConfig+0x250>
 80111da:	e0ce      	b.n	801137a <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80111dc:	3305      	adds	r3, #5
 80111de:	d000      	beq.n	80111e2 <HAL_RCC_OscConfig+0x256>
 80111e0:	e0ec      	b.n	80113bc <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80111e2:	4a2c      	ldr	r2, [pc, #176]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 80111e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80111e6:	2104      	movs	r1, #4
 80111e8:	438b      	bics	r3, r1
 80111ea:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80111ec:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80111ee:	69a3      	ldr	r3, [r4, #24]
 80111f0:	00db      	lsls	r3, r3, #3
 80111f2:	20f8      	movs	r0, #248	; 0xf8
 80111f4:	4381      	bics	r1, r0
 80111f6:	430b      	orrs	r3, r1
 80111f8:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80111fa:	6823      	ldr	r3, [r4, #0]
 80111fc:	069b      	lsls	r3, r3, #26
 80111fe:	d400      	bmi.n	8011202 <HAL_RCC_OscConfig+0x276>
 8011200:	e106      	b.n	8011410 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011202:	4b24      	ldr	r3, [pc, #144]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011204:	685a      	ldr	r2, [r3, #4]
 8011206:	230c      	movs	r3, #12
 8011208:	4013      	ands	r3, r2
 801120a:	2b0c      	cmp	r3, #12
 801120c:	d100      	bne.n	8011210 <HAL_RCC_OscConfig+0x284>
 801120e:	e0f6      	b.n	80113fe <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011210:	4b20      	ldr	r3, [pc, #128]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011212:	685a      	ldr	r2, [r3, #4]
 8011214:	230c      	movs	r3, #12
 8011216:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011218:	2b08      	cmp	r3, #8
 801121a:	d100      	bne.n	801121e <HAL_RCC_OscConfig+0x292>
 801121c:	e0e7      	b.n	80113ee <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801121e:	69e3      	ldr	r3, [r4, #28]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d100      	bne.n	8011226 <HAL_RCC_OscConfig+0x29a>
 8011224:	e116      	b.n	8011454 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8011226:	4a1b      	ldr	r2, [pc, #108]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011228:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801122a:	2380      	movs	r3, #128	; 0x80
 801122c:	025b      	lsls	r3, r3, #9
 801122e:	430b      	orrs	r3, r1
 8011230:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011232:	f7fe fa25 	bl	800f680 <HAL_GetTick>
 8011236:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011238:	4e16      	ldr	r6, [pc, #88]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 801123a:	2580      	movs	r5, #128	; 0x80
 801123c:	026d      	lsls	r5, r5, #9
 801123e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011240:	422b      	tst	r3, r5
 8011242:	d000      	beq.n	8011246 <HAL_RCC_OscConfig+0x2ba>
 8011244:	e0e4      	b.n	8011410 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011246:	f7fe fa1b 	bl	800f680 <HAL_GetTick>
 801124a:	1bc0      	subs	r0, r0, r7
 801124c:	2864      	cmp	r0, #100	; 0x64
 801124e:	d9f6      	bls.n	801123e <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8011250:	2003      	movs	r0, #3
 8011252:	e6d0      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011254:	4a0f      	ldr	r2, [pc, #60]	; (8011294 <HAL_RCC_OscConfig+0x308>)
 8011256:	69d1      	ldr	r1, [r2, #28]
 8011258:	2080      	movs	r0, #128	; 0x80
 801125a:	0540      	lsls	r0, r0, #21
 801125c:	4301      	orrs	r1, r0
 801125e:	61d1      	str	r1, [r2, #28]
 8011260:	69d3      	ldr	r3, [r2, #28]
 8011262:	4003      	ands	r3, r0
 8011264:	9301      	str	r3, [sp, #4]
 8011266:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011268:	4a0d      	ldr	r2, [pc, #52]	; (80112a0 <HAL_RCC_OscConfig+0x314>)
 801126a:	6811      	ldr	r1, [r2, #0]
 801126c:	2380      	movs	r3, #128	; 0x80
 801126e:	005b      	lsls	r3, r3, #1
 8011270:	430b      	orrs	r3, r1
 8011272:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8011274:	f7fe fa04 	bl	800f680 <HAL_GetTick>
 8011278:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801127a:	4e09      	ldr	r6, [pc, #36]	; (80112a0 <HAL_RCC_OscConfig+0x314>)
 801127c:	2580      	movs	r5, #128	; 0x80
 801127e:	006d      	lsls	r5, r5, #1
 8011280:	6833      	ldr	r3, [r6, #0]
 8011282:	422b      	tst	r3, r5
 8011284:	d10e      	bne.n	80112a4 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011286:	f7fe f9fb 	bl	800f680 <HAL_GetTick>
 801128a:	1bc0      	subs	r0, r0, r7
 801128c:	2864      	cmp	r0, #100	; 0x64
 801128e:	d9f7      	bls.n	8011280 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8011290:	2003      	movs	r0, #3
 8011292:	e6b0      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
 8011294:	40021000 	.word	0x40021000
 8011298:	fffeffff 	.word	0xfffeffff
 801129c:	fffbffff 	.word	0xfffbffff
 80112a0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80112a4:	4b95      	ldr	r3, [pc, #596]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80112a6:	6a1a      	ldr	r2, [r3, #32]
 80112a8:	2101      	movs	r1, #1
 80112aa:	438a      	bics	r2, r1
 80112ac:	621a      	str	r2, [r3, #32]
 80112ae:	6a1a      	ldr	r2, [r3, #32]
 80112b0:	3103      	adds	r1, #3
 80112b2:	438a      	bics	r2, r1
 80112b4:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80112b6:	f7fe f9e3 	bl	800f680 <HAL_GetTick>
 80112ba:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80112bc:	4e8f      	ldr	r6, [pc, #572]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80112be:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80112c0:	4f8f      	ldr	r7, [pc, #572]	; (8011500 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80112c2:	6a33      	ldr	r3, [r6, #32]
 80112c4:	421d      	tst	r5, r3
 80112c6:	d007      	beq.n	80112d8 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80112c8:	f7fe f9da 	bl	800f680 <HAL_GetTick>
 80112cc:	4643      	mov	r3, r8
 80112ce:	1ac0      	subs	r0, r0, r3
 80112d0:	42b8      	cmp	r0, r7
 80112d2:	d9f6      	bls.n	80112c2 <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 80112d4:	2003      	movs	r0, #3
 80112d6:	e68e      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80112d8:	68a3      	ldr	r3, [r4, #8]
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d00b      	beq.n	80112f6 <HAL_RCC_OscConfig+0x36a>
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d123      	bne.n	801132a <HAL_RCC_OscConfig+0x39e>
 80112e2:	4b86      	ldr	r3, [pc, #536]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80112e4:	6a1a      	ldr	r2, [r3, #32]
 80112e6:	2101      	movs	r1, #1
 80112e8:	438a      	bics	r2, r1
 80112ea:	621a      	str	r2, [r3, #32]
 80112ec:	6a1a      	ldr	r2, [r3, #32]
 80112ee:	3103      	adds	r1, #3
 80112f0:	438a      	bics	r2, r1
 80112f2:	621a      	str	r2, [r3, #32]
 80112f4:	e004      	b.n	8011300 <HAL_RCC_OscConfig+0x374>
 80112f6:	4a81      	ldr	r2, [pc, #516]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80112f8:	6a13      	ldr	r3, [r2, #32]
 80112fa:	2101      	movs	r1, #1
 80112fc:	430b      	orrs	r3, r1
 80112fe:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011300:	68a3      	ldr	r3, [r4, #8]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d027      	beq.n	8011356 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8011306:	f7fe f9bb 	bl	800f680 <HAL_GetTick>
 801130a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801130c:	4e7b      	ldr	r6, [pc, #492]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 801130e:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011310:	4f7b      	ldr	r7, [pc, #492]	; (8011500 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011312:	6a33      	ldr	r3, [r6, #32]
 8011314:	421d      	tst	r5, r3
 8011316:	d000      	beq.n	801131a <HAL_RCC_OscConfig+0x38e>
 8011318:	e759      	b.n	80111ce <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801131a:	f7fe f9b1 	bl	800f680 <HAL_GetTick>
 801131e:	4643      	mov	r3, r8
 8011320:	1ac0      	subs	r0, r0, r3
 8011322:	42b8      	cmp	r0, r7
 8011324:	d9f5      	bls.n	8011312 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8011326:	2003      	movs	r0, #3
 8011328:	e665      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801132a:	2b05      	cmp	r3, #5
 801132c:	d009      	beq.n	8011342 <HAL_RCC_OscConfig+0x3b6>
 801132e:	4b73      	ldr	r3, [pc, #460]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 8011330:	6a1a      	ldr	r2, [r3, #32]
 8011332:	2101      	movs	r1, #1
 8011334:	438a      	bics	r2, r1
 8011336:	621a      	str	r2, [r3, #32]
 8011338:	6a1a      	ldr	r2, [r3, #32]
 801133a:	3103      	adds	r1, #3
 801133c:	438a      	bics	r2, r1
 801133e:	621a      	str	r2, [r3, #32]
 8011340:	e7de      	b.n	8011300 <HAL_RCC_OscConfig+0x374>
 8011342:	4b6e      	ldr	r3, [pc, #440]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 8011344:	6a1a      	ldr	r2, [r3, #32]
 8011346:	2104      	movs	r1, #4
 8011348:	430a      	orrs	r2, r1
 801134a:	621a      	str	r2, [r3, #32]
 801134c:	6a1a      	ldr	r2, [r3, #32]
 801134e:	3903      	subs	r1, #3
 8011350:	430a      	orrs	r2, r1
 8011352:	621a      	str	r2, [r3, #32]
 8011354:	e7d4      	b.n	8011300 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8011356:	f7fe f993 	bl	800f680 <HAL_GetTick>
 801135a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801135c:	4e67      	ldr	r6, [pc, #412]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 801135e:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011360:	4f67      	ldr	r7, [pc, #412]	; (8011500 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011362:	6a33      	ldr	r3, [r6, #32]
 8011364:	421d      	tst	r5, r3
 8011366:	d100      	bne.n	801136a <HAL_RCC_OscConfig+0x3de>
 8011368:	e731      	b.n	80111ce <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801136a:	f7fe f989 	bl	800f680 <HAL_GetTick>
 801136e:	4643      	mov	r3, r8
 8011370:	1ac0      	subs	r0, r0, r3
 8011372:	42b8      	cmp	r0, r7
 8011374:	d9f5      	bls.n	8011362 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8011376:	2003      	movs	r0, #3
 8011378:	e63d      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 801137a:	4b60      	ldr	r3, [pc, #384]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 801137c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801137e:	2104      	movs	r1, #4
 8011380:	430a      	orrs	r2, r1
 8011382:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011386:	3903      	subs	r1, #3
 8011388:	430a      	orrs	r2, r1
 801138a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 801138c:	f7fe f978 	bl	800f680 <HAL_GetTick>
 8011390:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011392:	4e5a      	ldr	r6, [pc, #360]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 8011394:	2502      	movs	r5, #2
 8011396:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011398:	421d      	tst	r5, r3
 801139a:	d106      	bne.n	80113aa <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801139c:	f7fe f970 	bl	800f680 <HAL_GetTick>
 80113a0:	1bc0      	subs	r0, r0, r7
 80113a2:	2864      	cmp	r0, #100	; 0x64
 80113a4:	d9f7      	bls.n	8011396 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80113a6:	2003      	movs	r0, #3
 80113a8:	e625      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80113aa:	4954      	ldr	r1, [pc, #336]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80113ac:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80113ae:	69a3      	ldr	r3, [r4, #24]
 80113b0:	00db      	lsls	r3, r3, #3
 80113b2:	20f8      	movs	r0, #248	; 0xf8
 80113b4:	4382      	bics	r2, r0
 80113b6:	4313      	orrs	r3, r2
 80113b8:	634b      	str	r3, [r1, #52]	; 0x34
 80113ba:	e71e      	b.n	80111fa <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80113bc:	4b4f      	ldr	r3, [pc, #316]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80113be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113c0:	2104      	movs	r1, #4
 80113c2:	430a      	orrs	r2, r1
 80113c4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80113c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113c8:	3903      	subs	r1, #3
 80113ca:	438a      	bics	r2, r1
 80113cc:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80113ce:	f7fe f957 	bl	800f680 <HAL_GetTick>
 80113d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80113d4:	4e49      	ldr	r6, [pc, #292]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80113d6:	2502      	movs	r5, #2
 80113d8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80113da:	421d      	tst	r5, r3
 80113dc:	d100      	bne.n	80113e0 <HAL_RCC_OscConfig+0x454>
 80113de:	e70c      	b.n	80111fa <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80113e0:	f7fe f94e 	bl	800f680 <HAL_GetTick>
 80113e4:	1bc0      	subs	r0, r0, r7
 80113e6:	2864      	cmp	r0, #100	; 0x64
 80113e8:	d9f6      	bls.n	80113d8 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80113ea:	2003      	movs	r0, #3
 80113ec:	e603      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80113ee:	4b43      	ldr	r3, [pc, #268]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	22c0      	movs	r2, #192	; 0xc0
 80113f4:	0252      	lsls	r2, r2, #9
 80113f6:	4013      	ands	r3, r2
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d000      	beq.n	80113fe <HAL_RCC_OscConfig+0x472>
 80113fc:	e70f      	b.n	801121e <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80113fe:	4b3f      	ldr	r3, [pc, #252]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 8011400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011402:	03db      	lsls	r3, r3, #15
 8011404:	d504      	bpl.n	8011410 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8011406:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011408:	69e3      	ldr	r3, [r4, #28]
 801140a:	2b01      	cmp	r3, #1
 801140c:	d000      	beq.n	8011410 <HAL_RCC_OscConfig+0x484>
 801140e:	e5f2      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011410:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8011412:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011414:	2b00      	cmp	r3, #0
 8011416:	d100      	bne.n	801141a <HAL_RCC_OscConfig+0x48e>
 8011418:	e5ed      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801141a:	4a38      	ldr	r2, [pc, #224]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 801141c:	6851      	ldr	r1, [r2, #4]
 801141e:	220c      	movs	r2, #12
 8011420:	400a      	ands	r2, r1
 8011422:	2a08      	cmp	r2, #8
 8011424:	d068      	beq.n	80114f8 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011426:	2b02      	cmp	r3, #2
 8011428:	d029      	beq.n	801147e <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801142a:	4a34      	ldr	r2, [pc, #208]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 801142c:	6813      	ldr	r3, [r2, #0]
 801142e:	4935      	ldr	r1, [pc, #212]	; (8011504 <HAL_RCC_OscConfig+0x578>)
 8011430:	400b      	ands	r3, r1
 8011432:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011434:	f7fe f924 	bl	800f680 <HAL_GetTick>
 8011438:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801143a:	4d30      	ldr	r5, [pc, #192]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 801143c:	2480      	movs	r4, #128	; 0x80
 801143e:	04a4      	lsls	r4, r4, #18
 8011440:	682b      	ldr	r3, [r5, #0]
 8011442:	4223      	tst	r3, r4
 8011444:	d056      	beq.n	80114f4 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011446:	f7fe f91b 	bl	800f680 <HAL_GetTick>
 801144a:	1b80      	subs	r0, r0, r6
 801144c:	2864      	cmp	r0, #100	; 0x64
 801144e:	d9f7      	bls.n	8011440 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8011450:	2003      	movs	r0, #3
 8011452:	e5d0      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8011454:	4a29      	ldr	r2, [pc, #164]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 8011456:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011458:	492b      	ldr	r1, [pc, #172]	; (8011508 <HAL_RCC_OscConfig+0x57c>)
 801145a:	400b      	ands	r3, r1
 801145c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801145e:	f7fe f90f 	bl	800f680 <HAL_GetTick>
 8011462:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011464:	4e25      	ldr	r6, [pc, #148]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 8011466:	2580      	movs	r5, #128	; 0x80
 8011468:	026d      	lsls	r5, r5, #9
 801146a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801146c:	422b      	tst	r3, r5
 801146e:	d0cf      	beq.n	8011410 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011470:	f7fe f906 	bl	800f680 <HAL_GetTick>
 8011474:	1bc0      	subs	r0, r0, r7
 8011476:	2864      	cmp	r0, #100	; 0x64
 8011478:	d9f7      	bls.n	801146a <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 801147a:	2003      	movs	r0, #3
 801147c:	e5bb      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 801147e:	4a1f      	ldr	r2, [pc, #124]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 8011480:	6813      	ldr	r3, [r2, #0]
 8011482:	4920      	ldr	r1, [pc, #128]	; (8011504 <HAL_RCC_OscConfig+0x578>)
 8011484:	400b      	ands	r3, r1
 8011486:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011488:	f7fe f8fa 	bl	800f680 <HAL_GetTick>
 801148c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801148e:	4e1b      	ldr	r6, [pc, #108]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 8011490:	2580      	movs	r5, #128	; 0x80
 8011492:	04ad      	lsls	r5, r5, #18
 8011494:	6833      	ldr	r3, [r6, #0]
 8011496:	422b      	tst	r3, r5
 8011498:	d006      	beq.n	80114a8 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801149a:	f7fe f8f1 	bl	800f680 <HAL_GetTick>
 801149e:	1bc0      	subs	r0, r0, r7
 80114a0:	2864      	cmp	r0, #100	; 0x64
 80114a2:	d9f7      	bls.n	8011494 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80114a4:	2003      	movs	r0, #3
 80114a6:	e5a6      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80114a8:	4b14      	ldr	r3, [pc, #80]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80114aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ac:	210f      	movs	r1, #15
 80114ae:	438a      	bics	r2, r1
 80114b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80114b2:	430a      	orrs	r2, r1
 80114b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80114b6:	6859      	ldr	r1, [r3, #4]
 80114b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80114ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80114bc:	4302      	orrs	r2, r0
 80114be:	4813      	ldr	r0, [pc, #76]	; (801150c <HAL_RCC_OscConfig+0x580>)
 80114c0:	4001      	ands	r1, r0
 80114c2:	430a      	orrs	r2, r1
 80114c4:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80114c6:	6819      	ldr	r1, [r3, #0]
 80114c8:	2280      	movs	r2, #128	; 0x80
 80114ca:	0452      	lsls	r2, r2, #17
 80114cc:	430a      	orrs	r2, r1
 80114ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80114d0:	f7fe f8d6 	bl	800f680 <HAL_GetTick>
 80114d4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80114d6:	4d09      	ldr	r5, [pc, #36]	; (80114fc <HAL_RCC_OscConfig+0x570>)
 80114d8:	2480      	movs	r4, #128	; 0x80
 80114da:	04a4      	lsls	r4, r4, #18
 80114dc:	682b      	ldr	r3, [r5, #0]
 80114de:	4223      	tst	r3, r4
 80114e0:	d106      	bne.n	80114f0 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80114e2:	f7fe f8cd 	bl	800f680 <HAL_GetTick>
 80114e6:	1b80      	subs	r0, r0, r6
 80114e8:	2864      	cmp	r0, #100	; 0x64
 80114ea:	d9f7      	bls.n	80114dc <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80114ec:	2003      	movs	r0, #3
 80114ee:	e582      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80114f0:	2000      	movs	r0, #0
 80114f2:	e580      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
 80114f4:	2000      	movs	r0, #0
 80114f6:	e57e      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80114f8:	2001      	movs	r0, #1
 80114fa:	e57c      	b.n	8010ff6 <HAL_RCC_OscConfig+0x6a>
 80114fc:	40021000 	.word	0x40021000
 8011500:	00001388 	.word	0x00001388
 8011504:	feffffff 	.word	0xfeffffff
 8011508:	fffeffff 	.word	0xfffeffff
 801150c:	ffc27fff 	.word	0xffc27fff

08011510 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011512:	46ce      	mov	lr, r9
 8011514:	4647      	mov	r7, r8
 8011516:	b580      	push	{r7, lr}
 8011518:	0005      	movs	r5, r0
 801151a:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801151c:	4b95      	ldr	r3, [pc, #596]	; (8011774 <HAL_RCC_ClockConfig+0x264>)
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	2301      	movs	r3, #1
 8011522:	4013      	ands	r3, r2
 8011524:	428b      	cmp	r3, r1
 8011526:	d300      	bcc.n	801152a <HAL_RCC_ClockConfig+0x1a>
 8011528:	e089      	b.n	801163e <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801152a:	4992      	ldr	r1, [pc, #584]	; (8011774 <HAL_RCC_ClockConfig+0x264>)
 801152c:	680b      	ldr	r3, [r1, #0]
 801152e:	2201      	movs	r2, #1
 8011530:	4393      	bics	r3, r2
 8011532:	4323      	orrs	r3, r4
 8011534:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011536:	680b      	ldr	r3, [r1, #0]
 8011538:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801153a:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801153c:	42a2      	cmp	r2, r4
 801153e:	d003      	beq.n	8011548 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011540:	bc0c      	pop	{r2, r3}
 8011542:	4690      	mov	r8, r2
 8011544:	4699      	mov	r9, r3
 8011546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011548:	682b      	ldr	r3, [r5, #0]
 801154a:	079b      	lsls	r3, r3, #30
 801154c:	d506      	bpl.n	801155c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801154e:	4a8a      	ldr	r2, [pc, #552]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011550:	6853      	ldr	r3, [r2, #4]
 8011552:	21f0      	movs	r1, #240	; 0xf0
 8011554:	438b      	bics	r3, r1
 8011556:	68a9      	ldr	r1, [r5, #8]
 8011558:	430b      	orrs	r3, r1
 801155a:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801155c:	682b      	ldr	r3, [r5, #0]
 801155e:	07db      	lsls	r3, r3, #31
 8011560:	d400      	bmi.n	8011564 <HAL_RCC_ClockConfig+0x54>
 8011562:	e0f7      	b.n	8011754 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011564:	686b      	ldr	r3, [r5, #4]
 8011566:	2b01      	cmp	r3, #1
 8011568:	d009      	beq.n	801157e <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801156a:	2b02      	cmp	r3, #2
 801156c:	d02b      	beq.n	80115c6 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801156e:	2b03      	cmp	r3, #3
 8011570:	d02f      	beq.n	80115d2 <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011572:	4a81      	ldr	r2, [pc, #516]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011574:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011576:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011578:	0792      	lsls	r2, r2, #30
 801157a:	d405      	bmi.n	8011588 <HAL_RCC_ClockConfig+0x78>
 801157c:	e7e0      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801157e:	4a7e      	ldr	r2, [pc, #504]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011580:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011582:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011584:	0392      	lsls	r2, r2, #14
 8011586:	d5db      	bpl.n	8011540 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011588:	497b      	ldr	r1, [pc, #492]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 801158a:	684a      	ldr	r2, [r1, #4]
 801158c:	2003      	movs	r0, #3
 801158e:	4382      	bics	r2, r0
 8011590:	4313      	orrs	r3, r2
 8011592:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8011594:	f7fe f874 	bl	800f680 <HAL_GetTick>
 8011598:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801159a:	686b      	ldr	r3, [r5, #4]
 801159c:	2b01      	cmp	r3, #1
 801159e:	d01e      	beq.n	80115de <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80115a0:	2b02      	cmp	r3, #2
 80115a2:	d02c      	beq.n	80115fe <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80115a4:	2b03      	cmp	r3, #3
 80115a6:	d03a      	beq.n	801161e <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80115a8:	4f73      	ldr	r7, [pc, #460]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80115aa:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115ac:	4b73      	ldr	r3, [pc, #460]	; (801177c <HAL_RCC_ClockConfig+0x26c>)
 80115ae:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	421e      	tst	r6, r3
 80115b4:	d100      	bne.n	80115b8 <HAL_RCC_ClockConfig+0xa8>
 80115b6:	e0cd      	b.n	8011754 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115b8:	f7fe f862 	bl	800f680 <HAL_GetTick>
 80115bc:	1b00      	subs	r0, r0, r4
 80115be:	4540      	cmp	r0, r8
 80115c0:	d9f6      	bls.n	80115b0 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80115c2:	2003      	movs	r0, #3
 80115c4:	e7bc      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80115c6:	4a6c      	ldr	r2, [pc, #432]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80115c8:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80115ca:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80115cc:	0192      	lsls	r2, r2, #6
 80115ce:	d4db      	bmi.n	8011588 <HAL_RCC_ClockConfig+0x78>
 80115d0:	e7b6      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80115d2:	4a69      	ldr	r2, [pc, #420]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80115d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80115d6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80115d8:	03d2      	lsls	r2, r2, #15
 80115da:	d4d5      	bmi.n	8011588 <HAL_RCC_ClockConfig+0x78>
 80115dc:	e7b0      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80115de:	4f66      	ldr	r7, [pc, #408]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80115e0:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115e2:	4b66      	ldr	r3, [pc, #408]	; (801177c <HAL_RCC_ClockConfig+0x26c>)
 80115e4:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4033      	ands	r3, r6
 80115ea:	2b04      	cmp	r3, #4
 80115ec:	d100      	bne.n	80115f0 <HAL_RCC_ClockConfig+0xe0>
 80115ee:	e0b1      	b.n	8011754 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115f0:	f7fe f846 	bl	800f680 <HAL_GetTick>
 80115f4:	1b00      	subs	r0, r0, r4
 80115f6:	4540      	cmp	r0, r8
 80115f8:	d9f5      	bls.n	80115e6 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 80115fa:	2003      	movs	r0, #3
 80115fc:	e7a0      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80115fe:	4f5e      	ldr	r7, [pc, #376]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011600:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011602:	4b5e      	ldr	r3, [pc, #376]	; (801177c <HAL_RCC_ClockConfig+0x26c>)
 8011604:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4033      	ands	r3, r6
 801160a:	2b08      	cmp	r3, #8
 801160c:	d100      	bne.n	8011610 <HAL_RCC_ClockConfig+0x100>
 801160e:	e0a1      	b.n	8011754 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011610:	f7fe f836 	bl	800f680 <HAL_GetTick>
 8011614:	1b00      	subs	r0, r0, r4
 8011616:	4540      	cmp	r0, r8
 8011618:	d9f5      	bls.n	8011606 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 801161a:	2003      	movs	r0, #3
 801161c:	e790      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801161e:	4f56      	ldr	r7, [pc, #344]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011620:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011622:	4b56      	ldr	r3, [pc, #344]	; (801177c <HAL_RCC_ClockConfig+0x26c>)
 8011624:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4033      	ands	r3, r6
 801162a:	2b0c      	cmp	r3, #12
 801162c:	d100      	bne.n	8011630 <HAL_RCC_ClockConfig+0x120>
 801162e:	e091      	b.n	8011754 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011630:	f7fe f826 	bl	800f680 <HAL_GetTick>
 8011634:	1b00      	subs	r0, r0, r4
 8011636:	4540      	cmp	r0, r8
 8011638:	d9f5      	bls.n	8011626 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 801163a:	2003      	movs	r0, #3
 801163c:	e780      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801163e:	6803      	ldr	r3, [r0, #0]
 8011640:	079b      	lsls	r3, r3, #30
 8011642:	d506      	bpl.n	8011652 <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011644:	4a4c      	ldr	r2, [pc, #304]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011646:	6853      	ldr	r3, [r2, #4]
 8011648:	21f0      	movs	r1, #240	; 0xf0
 801164a:	438b      	bics	r3, r1
 801164c:	6881      	ldr	r1, [r0, #8]
 801164e:	430b      	orrs	r3, r1
 8011650:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011652:	682b      	ldr	r3, [r5, #0]
 8011654:	07db      	lsls	r3, r3, #31
 8011656:	d571      	bpl.n	801173c <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011658:	686b      	ldr	r3, [r5, #4]
 801165a:	2b01      	cmp	r3, #1
 801165c:	d009      	beq.n	8011672 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801165e:	2b02      	cmp	r3, #2
 8011660:	d02d      	beq.n	80116be <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011662:	2b03      	cmp	r3, #3
 8011664:	d031      	beq.n	80116ca <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011666:	4a44      	ldr	r2, [pc, #272]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011668:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801166a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801166c:	0792      	lsls	r2, r2, #30
 801166e:	d406      	bmi.n	801167e <HAL_RCC_ClockConfig+0x16e>
 8011670:	e766      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011672:	4a41      	ldr	r2, [pc, #260]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011674:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011676:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011678:	0392      	lsls	r2, r2, #14
 801167a:	d400      	bmi.n	801167e <HAL_RCC_ClockConfig+0x16e>
 801167c:	e760      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801167e:	493e      	ldr	r1, [pc, #248]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 8011680:	684a      	ldr	r2, [r1, #4]
 8011682:	2003      	movs	r0, #3
 8011684:	4382      	bics	r2, r0
 8011686:	4313      	orrs	r3, r2
 8011688:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801168a:	f7fd fff9 	bl	800f680 <HAL_GetTick>
 801168e:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011690:	686b      	ldr	r3, [r5, #4]
 8011692:	2b01      	cmp	r3, #1
 8011694:	d01f      	beq.n	80116d6 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011696:	2b02      	cmp	r3, #2
 8011698:	d02e      	beq.n	80116f8 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801169a:	2b03      	cmp	r3, #3
 801169c:	d03d      	beq.n	801171a <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801169e:	4b36      	ldr	r3, [pc, #216]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80116a0:	4698      	mov	r8, r3
 80116a2:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116a4:	4b35      	ldr	r3, [pc, #212]	; (801177c <HAL_RCC_ClockConfig+0x26c>)
 80116a6:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80116a8:	4643      	mov	r3, r8
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	421f      	tst	r7, r3
 80116ae:	d045      	beq.n	801173c <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116b0:	f7fd ffe6 	bl	800f680 <HAL_GetTick>
 80116b4:	1b80      	subs	r0, r0, r6
 80116b6:	4548      	cmp	r0, r9
 80116b8:	d9f6      	bls.n	80116a8 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80116ba:	2003      	movs	r0, #3
 80116bc:	e740      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80116be:	4a2e      	ldr	r2, [pc, #184]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80116c0:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80116c2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80116c4:	0192      	lsls	r2, r2, #6
 80116c6:	d4da      	bmi.n	801167e <HAL_RCC_ClockConfig+0x16e>
 80116c8:	e73a      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80116ca:	4a2b      	ldr	r2, [pc, #172]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80116cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80116ce:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80116d0:	03d2      	lsls	r2, r2, #15
 80116d2:	d4d4      	bmi.n	801167e <HAL_RCC_ClockConfig+0x16e>
 80116d4:	e734      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80116d6:	4b28      	ldr	r3, [pc, #160]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80116d8:	4698      	mov	r8, r3
 80116da:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116dc:	4b27      	ldr	r3, [pc, #156]	; (801177c <HAL_RCC_ClockConfig+0x26c>)
 80116de:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80116e0:	4643      	mov	r3, r8
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	403b      	ands	r3, r7
 80116e6:	2b04      	cmp	r3, #4
 80116e8:	d028      	beq.n	801173c <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116ea:	f7fd ffc9 	bl	800f680 <HAL_GetTick>
 80116ee:	1b80      	subs	r0, r0, r6
 80116f0:	4548      	cmp	r0, r9
 80116f2:	d9f5      	bls.n	80116e0 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 80116f4:	2003      	movs	r0, #3
 80116f6:	e723      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80116f8:	4b1f      	ldr	r3, [pc, #124]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 80116fa:	4698      	mov	r8, r3
 80116fc:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116fe:	4b1f      	ldr	r3, [pc, #124]	; (801177c <HAL_RCC_ClockConfig+0x26c>)
 8011700:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011702:	4643      	mov	r3, r8
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	403b      	ands	r3, r7
 8011708:	2b08      	cmp	r3, #8
 801170a:	d017      	beq.n	801173c <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801170c:	f7fd ffb8 	bl	800f680 <HAL_GetTick>
 8011710:	1b80      	subs	r0, r0, r6
 8011712:	4548      	cmp	r0, r9
 8011714:	d9f5      	bls.n	8011702 <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8011716:	2003      	movs	r0, #3
 8011718:	e712      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801171a:	4b17      	ldr	r3, [pc, #92]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 801171c:	4698      	mov	r8, r3
 801171e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011720:	4b16      	ldr	r3, [pc, #88]	; (801177c <HAL_RCC_ClockConfig+0x26c>)
 8011722:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011724:	4643      	mov	r3, r8
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	403b      	ands	r3, r7
 801172a:	2b0c      	cmp	r3, #12
 801172c:	d006      	beq.n	801173c <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801172e:	f7fd ffa7 	bl	800f680 <HAL_GetTick>
 8011732:	1b80      	subs	r0, r0, r6
 8011734:	4548      	cmp	r0, r9
 8011736:	d9f5      	bls.n	8011724 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8011738:	2003      	movs	r0, #3
 801173a:	e701      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801173c:	490d      	ldr	r1, [pc, #52]	; (8011774 <HAL_RCC_ClockConfig+0x264>)
 801173e:	680b      	ldr	r3, [r1, #0]
 8011740:	2201      	movs	r2, #1
 8011742:	4393      	bics	r3, r2
 8011744:	4323      	orrs	r3, r4
 8011746:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011748:	680b      	ldr	r3, [r1, #0]
 801174a:	401a      	ands	r2, r3
      return HAL_ERROR;
 801174c:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801174e:	42a2      	cmp	r2, r4
 8011750:	d000      	beq.n	8011754 <HAL_RCC_ClockConfig+0x244>
 8011752:	e6f5      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011754:	682b      	ldr	r3, [r5, #0]
 8011756:	075b      	lsls	r3, r3, #29
 8011758:	d506      	bpl.n	8011768 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801175a:	4a07      	ldr	r2, [pc, #28]	; (8011778 <HAL_RCC_ClockConfig+0x268>)
 801175c:	6853      	ldr	r3, [r2, #4]
 801175e:	4908      	ldr	r1, [pc, #32]	; (8011780 <HAL_RCC_ClockConfig+0x270>)
 8011760:	400b      	ands	r3, r1
 8011762:	68e9      	ldr	r1, [r5, #12]
 8011764:	430b      	orrs	r3, r1
 8011766:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8011768:	2000      	movs	r0, #0
 801176a:	f7fd ff5f 	bl	800f62c <HAL_InitTick>
  return HAL_OK;
 801176e:	2000      	movs	r0, #0
 8011770:	e6e6      	b.n	8011540 <HAL_RCC_ClockConfig+0x30>
 8011772:	46c0      	nop			; (mov r8, r8)
 8011774:	40022000 	.word	0x40022000
 8011778:	40021000 	.word	0x40021000
 801177c:	00001388 	.word	0x00001388
 8011780:	fffff8ff 	.word	0xfffff8ff

08011784 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011784:	b530      	push	{r4, r5, lr}
 8011786:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011788:	aa04      	add	r2, sp, #16
 801178a:	4b21      	ldr	r3, [pc, #132]	; (8011810 <HAL_RCC_GetSysClockFreq+0x8c>)
 801178c:	0018      	movs	r0, r3
 801178e:	c832      	ldmia	r0!, {r1, r4, r5}
 8011790:	c232      	stmia	r2!, {r1, r4, r5}
 8011792:	0011      	movs	r1, r2
 8011794:	6802      	ldr	r2, [r0, #0]
 8011796:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011798:	466a      	mov	r2, sp
 801179a:	3310      	adds	r3, #16
 801179c:	cb13      	ldmia	r3!, {r0, r1, r4}
 801179e:	c213      	stmia	r2!, {r0, r1, r4}
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80117a4:	4b1b      	ldr	r3, [pc, #108]	; (8011814 <HAL_RCC_GetSysClockFreq+0x90>)
 80117a6:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80117a8:	200c      	movs	r0, #12
 80117aa:	4018      	ands	r0, r3
 80117ac:	2808      	cmp	r0, #8
 80117ae:	d00a      	beq.n	80117c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80117b0:	380c      	subs	r0, #12
 80117b2:	4243      	negs	r3, r0
 80117b4:	4158      	adcs	r0, r3
 80117b6:	4240      	negs	r0, r0
 80117b8:	4b17      	ldr	r3, [pc, #92]	; (8011818 <HAL_RCC_GetSysClockFreq+0x94>)
 80117ba:	4018      	ands	r0, r3
 80117bc:	4b17      	ldr	r3, [pc, #92]	; (801181c <HAL_RCC_GetSysClockFreq+0x98>)
 80117be:	469c      	mov	ip, r3
 80117c0:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80117c2:	b009      	add	sp, #36	; 0x24
 80117c4:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80117c6:	0c99      	lsrs	r1, r3, #18
 80117c8:	220f      	movs	r2, #15
 80117ca:	4011      	ands	r1, r2
 80117cc:	a804      	add	r0, sp, #16
 80117ce:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80117d0:	4910      	ldr	r1, [pc, #64]	; (8011814 <HAL_RCC_GetSysClockFreq+0x90>)
 80117d2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80117d4:	400a      	ands	r2, r1
 80117d6:	4669      	mov	r1, sp
 80117d8:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80117da:	22c0      	movs	r2, #192	; 0xc0
 80117dc:	0252      	lsls	r2, r2, #9
 80117de:	4013      	ands	r3, r2
 80117e0:	2280      	movs	r2, #128	; 0x80
 80117e2:	0252      	lsls	r2, r2, #9
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d008      	beq.n	80117fa <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80117e8:	22c0      	movs	r2, #192	; 0xc0
 80117ea:	0252      	lsls	r2, r2, #9
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d009      	beq.n	8011804 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80117f0:	480a      	ldr	r0, [pc, #40]	; (801181c <HAL_RCC_GetSysClockFreq+0x98>)
 80117f2:	f7ee fcad 	bl	8000150 <__udivsi3>
 80117f6:	4360      	muls	r0, r4
 80117f8:	e7e3      	b.n	80117c2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80117fa:	4808      	ldr	r0, [pc, #32]	; (801181c <HAL_RCC_GetSysClockFreq+0x98>)
 80117fc:	f7ee fca8 	bl	8000150 <__udivsi3>
 8011800:	4360      	muls	r0, r4
 8011802:	e7de      	b.n	80117c2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011804:	4806      	ldr	r0, [pc, #24]	; (8011820 <HAL_RCC_GetSysClockFreq+0x9c>)
 8011806:	f7ee fca3 	bl	8000150 <__udivsi3>
 801180a:	4360      	muls	r0, r4
 801180c:	e7d9      	b.n	80117c2 <HAL_RCC_GetSysClockFreq+0x3e>
 801180e:	46c0      	nop			; (mov r8, r8)
 8011810:	080177c4 	.word	0x080177c4
 8011814:	40021000 	.word	0x40021000
 8011818:	02625a00 	.word	0x02625a00
 801181c:	007a1200 	.word	0x007a1200
 8011820:	02dc6c00 	.word	0x02dc6c00

08011824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011824:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011826:	f7ff ffad 	bl	8011784 <HAL_RCC_GetSysClockFreq>
 801182a:	4b05      	ldr	r3, [pc, #20]	; (8011840 <HAL_RCC_GetHCLKFreq+0x1c>)
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	061b      	lsls	r3, r3, #24
 8011830:	0f1b      	lsrs	r3, r3, #28
 8011832:	4a04      	ldr	r2, [pc, #16]	; (8011844 <HAL_RCC_GetHCLKFreq+0x20>)
 8011834:	5cd3      	ldrb	r3, [r2, r3]
 8011836:	40d8      	lsrs	r0, r3
 8011838:	4b03      	ldr	r3, [pc, #12]	; (8011848 <HAL_RCC_GetHCLKFreq+0x24>)
 801183a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 801183c:	bd10      	pop	{r4, pc}
 801183e:	46c0      	nop			; (mov r8, r8)
 8011840:	40021000 	.word	0x40021000
 8011844:	0801a638 	.word	0x0801a638
 8011848:	20000090 	.word	0x20000090

0801184c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801184c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801184e:	f7ff ffe9 	bl	8011824 <HAL_RCC_GetHCLKFreq>
 8011852:	4b04      	ldr	r3, [pc, #16]	; (8011864 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	055b      	lsls	r3, r3, #21
 8011858:	0f5b      	lsrs	r3, r3, #29
 801185a:	4a03      	ldr	r2, [pc, #12]	; (8011868 <HAL_RCC_GetPCLK1Freq+0x1c>)
 801185c:	5cd3      	ldrb	r3, [r2, r3]
 801185e:	40d8      	lsrs	r0, r3
}    
 8011860:	bd10      	pop	{r4, pc}
 8011862:	46c0      	nop			; (mov r8, r8)
 8011864:	40021000 	.word	0x40021000
 8011868:	0801a638 	.word	0x0801a638

0801186c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801186e:	46c6      	mov	lr, r8
 8011870:	b500      	push	{lr}
 8011872:	b082      	sub	sp, #8
 8011874:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011876:	6803      	ldr	r3, [r0, #0]
 8011878:	03db      	lsls	r3, r3, #15
 801187a:	d507      	bpl.n	801188c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801187c:	4b43      	ldr	r3, [pc, #268]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801187e:	6a1b      	ldr	r3, [r3, #32]
 8011880:	6842      	ldr	r2, [r0, #4]
 8011882:	4053      	eors	r3, r2
 8011884:	22c0      	movs	r2, #192	; 0xc0
 8011886:	0092      	lsls	r2, r2, #2
 8011888:	4213      	tst	r3, r2
 801188a:	d136      	bne.n	80118fa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801188c:	6823      	ldr	r3, [r4, #0]
 801188e:	07db      	lsls	r3, r3, #31
 8011890:	d506      	bpl.n	80118a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011892:	4a3e      	ldr	r2, [pc, #248]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011894:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011896:	2103      	movs	r1, #3
 8011898:	438b      	bics	r3, r1
 801189a:	68a1      	ldr	r1, [r4, #8]
 801189c:	430b      	orrs	r3, r1
 801189e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80118a0:	6823      	ldr	r3, [r4, #0]
 80118a2:	079b      	lsls	r3, r3, #30
 80118a4:	d506      	bpl.n	80118b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80118a6:	4a39      	ldr	r2, [pc, #228]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80118aa:	4939      	ldr	r1, [pc, #228]	; (8011990 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80118ac:	400b      	ands	r3, r1
 80118ae:	68e1      	ldr	r1, [r4, #12]
 80118b0:	430b      	orrs	r3, r1
 80118b2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80118b4:	6823      	ldr	r3, [r4, #0]
 80118b6:	035b      	lsls	r3, r3, #13
 80118b8:	d506      	bpl.n	80118c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80118ba:	4a34      	ldr	r2, [pc, #208]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80118be:	4935      	ldr	r1, [pc, #212]	; (8011994 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80118c0:	400b      	ands	r3, r1
 80118c2:	6921      	ldr	r1, [r4, #16]
 80118c4:	430b      	orrs	r3, r1
 80118c6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80118c8:	6823      	ldr	r3, [r4, #0]
 80118ca:	069b      	lsls	r3, r3, #26
 80118cc:	d506      	bpl.n	80118dc <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80118ce:	4a2f      	ldr	r2, [pc, #188]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80118d2:	2110      	movs	r1, #16
 80118d4:	438b      	bics	r3, r1
 80118d6:	6961      	ldr	r1, [r4, #20]
 80118d8:	430b      	orrs	r3, r1
 80118da:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80118dc:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80118de:	6823      	ldr	r3, [r4, #0]
 80118e0:	055b      	lsls	r3, r3, #21
 80118e2:	d506      	bpl.n	80118f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80118e4:	4a29      	ldr	r2, [pc, #164]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80118e8:	2140      	movs	r1, #64	; 0x40
 80118ea:	438b      	bics	r3, r1
 80118ec:	69a1      	ldr	r1, [r4, #24]
 80118ee:	430b      	orrs	r3, r1
 80118f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80118f2:	b002      	add	sp, #8
 80118f4:	bc04      	pop	{r2}
 80118f6:	4690      	mov	r8, r2
 80118f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80118fa:	4a24      	ldr	r2, [pc, #144]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118fc:	69d1      	ldr	r1, [r2, #28]
 80118fe:	2080      	movs	r0, #128	; 0x80
 8011900:	0540      	lsls	r0, r0, #21
 8011902:	4301      	orrs	r1, r0
 8011904:	61d1      	str	r1, [r2, #28]
 8011906:	69d3      	ldr	r3, [r2, #28]
 8011908:	4003      	ands	r3, r0
 801190a:	9301      	str	r3, [sp, #4]
 801190c:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801190e:	4a22      	ldr	r2, [pc, #136]	; (8011998 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011910:	6811      	ldr	r1, [r2, #0]
 8011912:	2380      	movs	r3, #128	; 0x80
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	430b      	orrs	r3, r1
 8011918:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801191a:	f7fd feb1 	bl	800f680 <HAL_GetTick>
 801191e:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011920:	4e1d      	ldr	r6, [pc, #116]	; (8011998 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011922:	2580      	movs	r5, #128	; 0x80
 8011924:	006d      	lsls	r5, r5, #1
 8011926:	6833      	ldr	r3, [r6, #0]
 8011928:	422b      	tst	r3, r5
 801192a:	d106      	bne.n	801193a <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801192c:	f7fd fea8 	bl	800f680 <HAL_GetTick>
 8011930:	1bc0      	subs	r0, r0, r7
 8011932:	2864      	cmp	r0, #100	; 0x64
 8011934:	d9f7      	bls.n	8011926 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8011936:	2003      	movs	r0, #3
 8011938:	e7db      	b.n	80118f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801193a:	4b14      	ldr	r3, [pc, #80]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801193c:	6a18      	ldr	r0, [r3, #32]
 801193e:	4a17      	ldr	r2, [pc, #92]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011940:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8011942:	6a1d      	ldr	r5, [r3, #32]
 8011944:	2180      	movs	r1, #128	; 0x80
 8011946:	0249      	lsls	r1, r1, #9
 8011948:	4329      	orrs	r1, r5
 801194a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801194c:	6a19      	ldr	r1, [r3, #32]
 801194e:	4d14      	ldr	r5, [pc, #80]	; (80119a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8011950:	4029      	ands	r1, r5
 8011952:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011954:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011956:	0783      	lsls	r3, r0, #30
 8011958:	d407      	bmi.n	801196a <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801195a:	4a0c      	ldr	r2, [pc, #48]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801195c:	6a13      	ldr	r3, [r2, #32]
 801195e:	490f      	ldr	r1, [pc, #60]	; (801199c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011960:	400b      	ands	r3, r1
 8011962:	6861      	ldr	r1, [r4, #4]
 8011964:	430b      	orrs	r3, r1
 8011966:	6213      	str	r3, [r2, #32]
 8011968:	e790      	b.n	801188c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801196a:	f7fd fe89 	bl	800f680 <HAL_GetTick>
 801196e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011970:	4e06      	ldr	r6, [pc, #24]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011972:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011974:	4f0b      	ldr	r7, [pc, #44]	; (80119a4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011976:	6a33      	ldr	r3, [r6, #32]
 8011978:	421d      	tst	r5, r3
 801197a:	d1ee      	bne.n	801195a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801197c:	f7fd fe80 	bl	800f680 <HAL_GetTick>
 8011980:	4643      	mov	r3, r8
 8011982:	1ac0      	subs	r0, r0, r3
 8011984:	42b8      	cmp	r0, r7
 8011986:	d9f6      	bls.n	8011976 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8011988:	2003      	movs	r0, #3
 801198a:	e7b2      	b.n	80118f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
 801198c:	40021000 	.word	0x40021000
 8011990:	fffcffff 	.word	0xfffcffff
 8011994:	fff3ffff 	.word	0xfff3ffff
 8011998:	40007000 	.word	0x40007000
 801199c:	fffffcff 	.word	0xfffffcff
 80119a0:	fffeffff 	.word	0xfffeffff
 80119a4:	00001388 	.word	0x00001388

080119a8 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80119a8:	4770      	bx	lr

080119aa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80119aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ac:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80119ae:	6802      	ldr	r2, [r0, #0]
 80119b0:	68d3      	ldr	r3, [r2, #12]
 80119b2:	21a0      	movs	r1, #160	; 0xa0
 80119b4:	438b      	bics	r3, r1
 80119b6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80119b8:	f7fd fe62 	bl	800f680 <HAL_GetTick>
 80119bc:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80119be:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80119c0:	26fa      	movs	r6, #250	; 0xfa
 80119c2:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80119c4:	6823      	ldr	r3, [r4, #0]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	421d      	tst	r5, r3
 80119ca:	d106      	bne.n	80119da <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80119cc:	f7fd fe58 	bl	800f680 <HAL_GetTick>
 80119d0:	1bc0      	subs	r0, r0, r7
 80119d2:	42b0      	cmp	r0, r6
 80119d4:	d9f6      	bls.n	80119c4 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80119d6:	2003      	movs	r0, #3
 80119d8:	e000      	b.n	80119dc <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80119da:	2000      	movs	r0, #0
}
 80119dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119de <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80119de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119e0:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80119e2:	6803      	ldr	r3, [r0, #0]
 80119e4:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80119e6:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80119e8:	0652      	lsls	r2, r2, #25
 80119ea:	d500      	bpl.n	80119ee <RTC_EnterInitMode+0x10>
}
 80119ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80119ee:	2201      	movs	r2, #1
 80119f0:	4252      	negs	r2, r2
 80119f2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80119f4:	f7fd fe44 	bl	800f680 <HAL_GetTick>
 80119f8:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80119fa:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80119fc:	26fa      	movs	r6, #250	; 0xfa
 80119fe:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011a00:	6823      	ldr	r3, [r4, #0]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	421d      	tst	r5, r3
 8011a06:	d106      	bne.n	8011a16 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011a08:	f7fd fe3a 	bl	800f680 <HAL_GetTick>
 8011a0c:	1bc0      	subs	r0, r0, r7
 8011a0e:	42b0      	cmp	r0, r6
 8011a10:	d9f6      	bls.n	8011a00 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8011a12:	2003      	movs	r0, #3
 8011a14:	e7ea      	b.n	80119ec <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8011a16:	2000      	movs	r0, #0
 8011a18:	e7e8      	b.n	80119ec <RTC_EnterInitMode+0xe>
	...

08011a1c <HAL_RTC_Init>:
{
 8011a1c:	b570      	push	{r4, r5, r6, lr}
 8011a1e:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011a20:	d046      	beq.n	8011ab0 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011a22:	7f43      	ldrb	r3, [r0, #29]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d038      	beq.n	8011a9a <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011a28:	2302      	movs	r3, #2
 8011a2a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	22ca      	movs	r2, #202	; 0xca
 8011a30:	625a      	str	r2, [r3, #36]	; 0x24
 8011a32:	6823      	ldr	r3, [r4, #0]
 8011a34:	3a77      	subs	r2, #119	; 0x77
 8011a36:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011a38:	0020      	movs	r0, r4
 8011a3a:	f7ff ffd0 	bl	80119de <RTC_EnterInitMode>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d12f      	bne.n	8011aa2 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011a42:	6822      	ldr	r2, [r4, #0]
 8011a44:	6893      	ldr	r3, [r2, #8]
 8011a46:	491b      	ldr	r1, [pc, #108]	; (8011ab4 <HAL_RTC_Init+0x98>)
 8011a48:	400b      	ands	r3, r1
 8011a4a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011a4c:	6822      	ldr	r2, [r4, #0]
 8011a4e:	6891      	ldr	r1, [r2, #8]
 8011a50:	6863      	ldr	r3, [r4, #4]
 8011a52:	6925      	ldr	r5, [r4, #16]
 8011a54:	432b      	orrs	r3, r5
 8011a56:	6965      	ldr	r5, [r4, #20]
 8011a58:	432b      	orrs	r3, r5
 8011a5a:	430b      	orrs	r3, r1
 8011a5c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011a5e:	6823      	ldr	r3, [r4, #0]
 8011a60:	68e2      	ldr	r2, [r4, #12]
 8011a62:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011a64:	6822      	ldr	r2, [r4, #0]
 8011a66:	6911      	ldr	r1, [r2, #16]
 8011a68:	68a3      	ldr	r3, [r4, #8]
 8011a6a:	041b      	lsls	r3, r3, #16
 8011a6c:	430b      	orrs	r3, r1
 8011a6e:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011a70:	6822      	ldr	r2, [r4, #0]
 8011a72:	68d3      	ldr	r3, [r2, #12]
 8011a74:	2180      	movs	r1, #128	; 0x80
 8011a76:	438b      	bics	r3, r1
 8011a78:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011a7a:	6822      	ldr	r2, [r4, #0]
 8011a7c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011a7e:	490e      	ldr	r1, [pc, #56]	; (8011ab8 <HAL_RTC_Init+0x9c>)
 8011a80:	400b      	ands	r3, r1
 8011a82:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011a84:	6822      	ldr	r2, [r4, #0]
 8011a86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011a88:	69a1      	ldr	r1, [r4, #24]
 8011a8a:	430b      	orrs	r3, r1
 8011a8c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011a8e:	6823      	ldr	r3, [r4, #0]
 8011a90:	22ff      	movs	r2, #255	; 0xff
 8011a92:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011a94:	2301      	movs	r3, #1
 8011a96:	7763      	strb	r3, [r4, #29]
}
 8011a98:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8011a9a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011a9c:	f7ff ff84 	bl	80119a8 <HAL_RTC_MspInit>
 8011aa0:	e7c2      	b.n	8011a28 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	22ff      	movs	r2, #255	; 0xff
 8011aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011aa8:	2304      	movs	r3, #4
 8011aaa:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011aac:	2001      	movs	r0, #1
 8011aae:	e7f3      	b.n	8011a98 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8011ab0:	2001      	movs	r0, #1
 8011ab2:	e7f1      	b.n	8011a98 <HAL_RTC_Init+0x7c>
 8011ab4:	ff8fffbf 	.word	0xff8fffbf
 8011ab8:	fffbffff 	.word	0xfffbffff

08011abc <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8011abc:	2809      	cmp	r0, #9
 8011abe:	d909      	bls.n	8011ad4 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8011ac0:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8011ac2:	3301      	adds	r3, #1
    Value -= 10;
 8011ac4:	380a      	subs	r0, #10
 8011ac6:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8011ac8:	2809      	cmp	r0, #9
 8011aca:	d8fa      	bhi.n	8011ac2 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011acc:	011b      	lsls	r3, r3, #4
 8011ace:	4318      	orrs	r0, r3
 8011ad0:	b2c0      	uxtb	r0, r0
}
 8011ad2:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	e7f9      	b.n	8011acc <RTC_ByteToBcd2+0x10>

08011ad8 <HAL_RTC_SetTime>:
{
 8011ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ada:	46c6      	mov	lr, r8
 8011adc:	b500      	push	{lr}
 8011ade:	0004      	movs	r4, r0
 8011ae0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8011ae2:	7f03      	ldrb	r3, [r0, #28]
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d100      	bne.n	8011aea <HAL_RTC_SetTime+0x12>
 8011ae8:	e075      	b.n	8011bd6 <HAL_RTC_SetTime+0xfe>
 8011aea:	2301      	movs	r3, #1
 8011aec:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011aee:	3301      	adds	r3, #1
 8011af0:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8011af2:	2a00      	cmp	r2, #0
 8011af4:	d144      	bne.n	8011b80 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011af6:	6803      	ldr	r3, [r0, #0]
 8011af8:	689b      	ldr	r3, [r3, #8]
 8011afa:	065b      	lsls	r3, r3, #25
 8011afc:	d401      	bmi.n	8011b02 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8011afe:	2300      	movs	r3, #0
 8011b00:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011b02:	7830      	ldrb	r0, [r6, #0]
 8011b04:	f7ff ffda 	bl	8011abc <RTC_ByteToBcd2>
 8011b08:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011b0a:	7870      	ldrb	r0, [r6, #1]
 8011b0c:	f7ff ffd6 	bl	8011abc <RTC_ByteToBcd2>
 8011b10:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011b12:	78b0      	ldrb	r0, [r6, #2]
 8011b14:	f7ff ffd2 	bl	8011abc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8011b18:	7a35      	ldrb	r5, [r6, #8]
 8011b1a:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011b1c:	4305      	orrs	r5, r0
 8011b1e:	4643      	mov	r3, r8
 8011b20:	0418      	lsls	r0, r3, #16
 8011b22:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011b24:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011b26:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b28:	6823      	ldr	r3, [r4, #0]
 8011b2a:	22ca      	movs	r2, #202	; 0xca
 8011b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8011b2e:	6823      	ldr	r3, [r4, #0]
 8011b30:	3a77      	subs	r2, #119	; 0x77
 8011b32:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b34:	0020      	movs	r0, r4
 8011b36:	f7ff ff52 	bl	80119de <RTC_EnterInitMode>
 8011b3a:	1e07      	subs	r7, r0, #0
 8011b3c:	d131      	bne.n	8011ba2 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011b3e:	6823      	ldr	r3, [r4, #0]
 8011b40:	4826      	ldr	r0, [pc, #152]	; (8011bdc <HAL_RTC_SetTime+0x104>)
 8011b42:	4005      	ands	r5, r0
 8011b44:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011b46:	6822      	ldr	r2, [r4, #0]
 8011b48:	6893      	ldr	r3, [r2, #8]
 8011b4a:	4925      	ldr	r1, [pc, #148]	; (8011be0 <HAL_RTC_SetTime+0x108>)
 8011b4c:	400b      	ands	r3, r1
 8011b4e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011b50:	6822      	ldr	r2, [r4, #0]
 8011b52:	6891      	ldr	r1, [r2, #8]
 8011b54:	68f3      	ldr	r3, [r6, #12]
 8011b56:	6930      	ldr	r0, [r6, #16]
 8011b58:	4303      	orrs	r3, r0
 8011b5a:	430b      	orrs	r3, r1
 8011b5c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b5e:	6822      	ldr	r2, [r4, #0]
 8011b60:	68d3      	ldr	r3, [r2, #12]
 8011b62:	2180      	movs	r1, #128	; 0x80
 8011b64:	438b      	bics	r3, r1
 8011b66:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011b68:	6823      	ldr	r3, [r4, #0]
 8011b6a:	689b      	ldr	r3, [r3, #8]
 8011b6c:	069b      	lsls	r3, r3, #26
 8011b6e:	d524      	bpl.n	8011bba <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b70:	6823      	ldr	r3, [r4, #0]
 8011b72:	22ff      	movs	r2, #255	; 0xff
 8011b74:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011b76:	2301      	movs	r3, #1
 8011b78:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8011b7e:	e018      	b.n	8011bb2 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011b80:	6803      	ldr	r3, [r0, #0]
 8011b82:	689b      	ldr	r3, [r3, #8]
 8011b84:	065b      	lsls	r3, r3, #25
 8011b86:	d401      	bmi.n	8011b8c <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b8c:	7835      	ldrb	r5, [r6, #0]
 8011b8e:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011b90:	7870      	ldrb	r0, [r6, #1]
 8011b92:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b94:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8011b96:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011b98:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8011b9a:	7a30      	ldrb	r0, [r6, #8]
 8011b9c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b9e:	4305      	orrs	r5, r0
 8011ba0:	e7c2      	b.n	8011b28 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011ba2:	6823      	ldr	r3, [r4, #0]
 8011ba4:	22ff      	movs	r2, #255	; 0xff
 8011ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011ba8:	2304      	movs	r3, #4
 8011baa:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011bac:	2300      	movs	r3, #0
 8011bae:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011bb0:	2701      	movs	r7, #1
}
 8011bb2:	0038      	movs	r0, r7
 8011bb4:	bc04      	pop	{r2}
 8011bb6:	4690      	mov	r8, r2
 8011bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011bba:	0020      	movs	r0, r4
 8011bbc:	f7ff fef5 	bl	80119aa <HAL_RTC_WaitForSynchro>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d0d5      	beq.n	8011b70 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011bc4:	6823      	ldr	r3, [r4, #0]
 8011bc6:	22ff      	movs	r2, #255	; 0xff
 8011bc8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011bca:	2304      	movs	r3, #4
 8011bcc:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011bce:	2300      	movs	r3, #0
 8011bd0:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011bd2:	2701      	movs	r7, #1
 8011bd4:	e7ed      	b.n	8011bb2 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8011bd6:	2702      	movs	r7, #2
 8011bd8:	e7eb      	b.n	8011bb2 <HAL_RTC_SetTime+0xda>
 8011bda:	46c0      	nop			; (mov r8, r8)
 8011bdc:	007f7f7f 	.word	0x007f7f7f
 8011be0:	fffbffff 	.word	0xfffbffff

08011be4 <HAL_RTC_SetDate>:
{
 8011be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011be6:	46c6      	mov	lr, r8
 8011be8:	b500      	push	{lr}
 8011bea:	0004      	movs	r4, r0
 8011bec:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8011bee:	7f03      	ldrb	r3, [r0, #28]
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d03a      	beq.n	8011c6a <HAL_RTC_SetDate+0x86>
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011bfc:	2a00      	cmp	r2, #0
 8011bfe:	d136      	bne.n	8011c6e <HAL_RTC_SetDate+0x8a>
 8011c00:	784b      	ldrb	r3, [r1, #1]
 8011c02:	06da      	lsls	r2, r3, #27
 8011c04:	d503      	bpl.n	8011c0e <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011c06:	2210      	movs	r2, #16
 8011c08:	4393      	bics	r3, r2
 8011c0a:	330a      	adds	r3, #10
 8011c0c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011c0e:	78f0      	ldrb	r0, [r6, #3]
 8011c10:	f7ff ff54 	bl	8011abc <RTC_ByteToBcd2>
 8011c14:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011c16:	7870      	ldrb	r0, [r6, #1]
 8011c18:	f7ff ff50 	bl	8011abc <RTC_ByteToBcd2>
 8011c1c:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011c1e:	78b0      	ldrb	r0, [r6, #2]
 8011c20:	f7ff ff4c 	bl	8011abc <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8011c24:	7835      	ldrb	r5, [r6, #0]
 8011c26:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011c28:	4305      	orrs	r5, r0
 8011c2a:	4643      	mov	r3, r8
 8011c2c:	0418      	lsls	r0, r3, #16
 8011c2e:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011c30:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011c32:	433d      	orrs	r5, r7
 8011c34:	e025      	b.n	8011c82 <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011c36:	6823      	ldr	r3, [r4, #0]
 8011c38:	22ff      	movs	r2, #255	; 0xff
 8011c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011c3c:	2304      	movs	r3, #4
 8011c3e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011c40:	2300      	movs	r3, #0
 8011c42:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011c44:	2601      	movs	r6, #1
}
 8011c46:	0030      	movs	r0, r6
 8011c48:	bc04      	pop	{r2}
 8011c4a:	4690      	mov	r8, r2
 8011c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011c4e:	0020      	movs	r0, r4
 8011c50:	f7ff feab 	bl	80119aa <HAL_RTC_WaitForSynchro>
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d02c      	beq.n	8011cb2 <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	22ff      	movs	r2, #255	; 0xff
 8011c5c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011c5e:	2304      	movs	r3, #4
 8011c60:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011c62:	2300      	movs	r3, #0
 8011c64:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011c66:	2601      	movs	r6, #1
 8011c68:	e7ed      	b.n	8011c46 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011c6a:	2602      	movs	r6, #2
 8011c6c:	e7eb      	b.n	8011c46 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011c6e:	78cd      	ldrb	r5, [r1, #3]
 8011c70:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8011c72:	7848      	ldrb	r0, [r1, #1]
 8011c74:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011c76:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8011c78:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8011c7a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011c7c:	7808      	ldrb	r0, [r1, #0]
 8011c7e:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011c80:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c82:	6823      	ldr	r3, [r4, #0]
 8011c84:	22ca      	movs	r2, #202	; 0xca
 8011c86:	625a      	str	r2, [r3, #36]	; 0x24
 8011c88:	6823      	ldr	r3, [r4, #0]
 8011c8a:	3a77      	subs	r2, #119	; 0x77
 8011c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011c8e:	0020      	movs	r0, r4
 8011c90:	f7ff fea5 	bl	80119de <RTC_EnterInitMode>
 8011c94:	1e06      	subs	r6, r0, #0
 8011c96:	d1ce      	bne.n	8011c36 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011c98:	6823      	ldr	r3, [r4, #0]
 8011c9a:	480a      	ldr	r0, [pc, #40]	; (8011cc4 <HAL_RTC_SetDate+0xe0>)
 8011c9c:	4005      	ands	r5, r0
 8011c9e:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011ca0:	6822      	ldr	r2, [r4, #0]
 8011ca2:	68d3      	ldr	r3, [r2, #12]
 8011ca4:	2180      	movs	r1, #128	; 0x80
 8011ca6:	438b      	bics	r3, r1
 8011ca8:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011caa:	6823      	ldr	r3, [r4, #0]
 8011cac:	689b      	ldr	r3, [r3, #8]
 8011cae:	069b      	lsls	r3, r3, #26
 8011cb0:	d5cd      	bpl.n	8011c4e <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011cb2:	6823      	ldr	r3, [r4, #0]
 8011cb4:	22ff      	movs	r2, #255	; 0xff
 8011cb6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011cb8:	2301      	movs	r3, #1
 8011cba:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8011cc0:	e7c1      	b.n	8011c46 <HAL_RTC_SetDate+0x62>
 8011cc2:	46c0      	nop			; (mov r8, r8)
 8011cc4:	00ffff3f 	.word	0x00ffff3f

08011cc8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011cc8:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011cca:	0900      	lsrs	r0, r0, #4
 8011ccc:	0083      	lsls	r3, r0, #2
 8011cce:	181b      	adds	r3, r3, r0
 8011cd0:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011cd2:	200f      	movs	r0, #15
 8011cd4:	4010      	ands	r0, r2
 8011cd6:	1818      	adds	r0, r3, r0
 8011cd8:	b2c0      	uxtb	r0, r0
}
 8011cda:	4770      	bx	lr

08011cdc <HAL_RTC_GetTime>:
{
 8011cdc:	b570      	push	{r4, r5, r6, lr}
 8011cde:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011ce0:	6803      	ldr	r3, [r0, #0]
 8011ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ce4:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011ce6:	6803      	ldr	r3, [r0, #0]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	490e      	ldr	r1, [pc, #56]	; (8011d24 <HAL_RTC_GetTime+0x48>)
 8011cec:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011cee:	0c19      	lsrs	r1, r3, #16
 8011cf0:	203f      	movs	r0, #63	; 0x3f
 8011cf2:	4008      	ands	r0, r1
 8011cf4:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011cf6:	0a1e      	lsrs	r6, r3, #8
 8011cf8:	b2f6      	uxtb	r6, r6
 8011cfa:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011cfc:	b2dc      	uxtb	r4, r3
 8011cfe:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011d00:	2340      	movs	r3, #64	; 0x40
 8011d02:	400b      	ands	r3, r1
 8011d04:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8011d06:	2a00      	cmp	r2, #0
 8011d08:	d10a      	bne.n	8011d20 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011d0a:	f7ff ffdd 	bl	8011cc8 <RTC_Bcd2ToByte>
 8011d0e:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011d10:	0030      	movs	r0, r6
 8011d12:	f7ff ffd9 	bl	8011cc8 <RTC_Bcd2ToByte>
 8011d16:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011d18:	0020      	movs	r0, r4
 8011d1a:	f7ff ffd5 	bl	8011cc8 <RTC_Bcd2ToByte>
 8011d1e:	70a8      	strb	r0, [r5, #2]
}
 8011d20:	2000      	movs	r0, #0
 8011d22:	bd70      	pop	{r4, r5, r6, pc}
 8011d24:	007f7f7f 	.word	0x007f7f7f

08011d28 <HAL_RTC_GetDate>:
{
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011d2c:	6803      	ldr	r3, [r0, #0]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	490d      	ldr	r1, [pc, #52]	; (8011d68 <HAL_RTC_GetDate+0x40>)
 8011d32:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011d34:	0c18      	lsrs	r0, r3, #16
 8011d36:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011d38:	04dd      	lsls	r5, r3, #19
 8011d3a:	0eed      	lsrs	r5, r5, #27
 8011d3c:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011d3e:	b2de      	uxtb	r6, r3
 8011d40:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011d42:	041b      	lsls	r3, r3, #16
 8011d44:	0f5b      	lsrs	r3, r3, #29
 8011d46:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8011d48:	2a00      	cmp	r2, #0
 8011d4a:	d10a      	bne.n	8011d62 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011d4c:	f7ff ffbc 	bl	8011cc8 <RTC_Bcd2ToByte>
 8011d50:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011d52:	0028      	movs	r0, r5
 8011d54:	f7ff ffb8 	bl	8011cc8 <RTC_Bcd2ToByte>
 8011d58:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011d5a:	0030      	movs	r0, r6
 8011d5c:	f7ff ffb4 	bl	8011cc8 <RTC_Bcd2ToByte>
 8011d60:	70a0      	strb	r0, [r4, #2]
}
 8011d62:	2000      	movs	r0, #0
 8011d64:	bd70      	pop	{r4, r5, r6, pc}
 8011d66:	46c0      	nop			; (mov r8, r8)
 8011d68:	00ffff3f 	.word	0x00ffff3f

08011d6c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011d6c:	6803      	ldr	r3, [r0, #0]
 8011d6e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011d70:	0089      	lsls	r1, r1, #2
 8011d72:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011d74:	600a      	str	r2, [r1, #0]
}
 8011d76:	4770      	bx	lr

08011d78 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011d78:	6803      	ldr	r3, [r0, #0]
 8011d7a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011d7c:	0089      	lsls	r1, r1, #2
 8011d7e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011d80:	6808      	ldr	r0, [r1, #0]
}
 8011d82:	4770      	bx	lr

08011d84 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011d84:	4770      	bx	lr

08011d86 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011d86:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011d88:	2239      	movs	r2, #57	; 0x39
 8011d8a:	2302      	movs	r3, #2
 8011d8c:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011d8e:	6804      	ldr	r4, [r0, #0]
 8011d90:	6823      	ldr	r3, [r4, #0]
 8011d92:	2101      	movs	r1, #1
 8011d94:	430b      	orrs	r3, r1
 8011d96:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011d98:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011d9a:	2000      	movs	r0, #0
 8011d9c:	bd10      	pop	{r4, pc}
	...

08011da0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8011da0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011da2:	4a36      	ldr	r2, [pc, #216]	; (8011e7c <TIM_Base_SetConfig+0xdc>)
 8011da4:	4290      	cmp	r0, r2
 8011da6:	d022      	beq.n	8011dee <TIM_Base_SetConfig+0x4e>
 8011da8:	2280      	movs	r2, #128	; 0x80
 8011daa:	05d2      	lsls	r2, r2, #23
 8011dac:	4290      	cmp	r0, r2
 8011dae:	d014      	beq.n	8011dda <TIM_Base_SetConfig+0x3a>
 8011db0:	4a33      	ldr	r2, [pc, #204]	; (8011e80 <TIM_Base_SetConfig+0xe0>)
 8011db2:	4290      	cmp	r0, r2
 8011db4:	d016      	beq.n	8011de4 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011db6:	4a33      	ldr	r2, [pc, #204]	; (8011e84 <TIM_Base_SetConfig+0xe4>)
 8011db8:	4290      	cmp	r0, r2
 8011dba:	d040      	beq.n	8011e3e <TIM_Base_SetConfig+0x9e>
 8011dbc:	4a32      	ldr	r2, [pc, #200]	; (8011e88 <TIM_Base_SetConfig+0xe8>)
 8011dbe:	4290      	cmp	r0, r2
 8011dc0:	d047      	beq.n	8011e52 <TIM_Base_SetConfig+0xb2>
 8011dc2:	4a32      	ldr	r2, [pc, #200]	; (8011e8c <TIM_Base_SetConfig+0xec>)
 8011dc4:	4290      	cmp	r0, r2
 8011dc6:	d04e      	beq.n	8011e66 <TIM_Base_SetConfig+0xc6>
 8011dc8:	4a31      	ldr	r2, [pc, #196]	; (8011e90 <TIM_Base_SetConfig+0xf0>)
 8011dca:	4290      	cmp	r0, r2
 8011dcc:	d02d      	beq.n	8011e2a <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011dce:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011dd0:	688b      	ldr	r3, [r1, #8]
 8011dd2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011dd4:	680b      	ldr	r3, [r1, #0]
 8011dd6:	6283      	str	r3, [r0, #40]	; 0x28
 8011dd8:	e024      	b.n	8011e24 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011dda:	2270      	movs	r2, #112	; 0x70
 8011ddc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011dde:	684a      	ldr	r2, [r1, #4]
 8011de0:	4313      	orrs	r3, r2
 8011de2:	e008      	b.n	8011df6 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011de4:	2270      	movs	r2, #112	; 0x70
 8011de6:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011de8:	684a      	ldr	r2, [r1, #4]
 8011dea:	4313      	orrs	r3, r2
 8011dec:	e003      	b.n	8011df6 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011dee:	2270      	movs	r2, #112	; 0x70
 8011df0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011df2:	684a      	ldr	r2, [r1, #4]
 8011df4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011df6:	4a27      	ldr	r2, [pc, #156]	; (8011e94 <TIM_Base_SetConfig+0xf4>)
 8011df8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011dfa:	68ca      	ldr	r2, [r1, #12]
 8011dfc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011dfe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e00:	688b      	ldr	r3, [r1, #8]
 8011e02:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e04:	680b      	ldr	r3, [r1, #0]
 8011e06:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011e08:	4b1c      	ldr	r3, [pc, #112]	; (8011e7c <TIM_Base_SetConfig+0xdc>)
 8011e0a:	4298      	cmp	r0, r3
 8011e0c:	d008      	beq.n	8011e20 <TIM_Base_SetConfig+0x80>
 8011e0e:	4b1e      	ldr	r3, [pc, #120]	; (8011e88 <TIM_Base_SetConfig+0xe8>)
 8011e10:	4298      	cmp	r0, r3
 8011e12:	d005      	beq.n	8011e20 <TIM_Base_SetConfig+0x80>
 8011e14:	4b1d      	ldr	r3, [pc, #116]	; (8011e8c <TIM_Base_SetConfig+0xec>)
 8011e16:	4298      	cmp	r0, r3
 8011e18:	d002      	beq.n	8011e20 <TIM_Base_SetConfig+0x80>
 8011e1a:	4b1d      	ldr	r3, [pc, #116]	; (8011e90 <TIM_Base_SetConfig+0xf0>)
 8011e1c:	4298      	cmp	r0, r3
 8011e1e:	d101      	bne.n	8011e24 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011e20:	690b      	ldr	r3, [r1, #16]
 8011e22:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011e24:	2301      	movs	r3, #1
 8011e26:	6143      	str	r3, [r0, #20]
}
 8011e28:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e2a:	4a1a      	ldr	r2, [pc, #104]	; (8011e94 <TIM_Base_SetConfig+0xf4>)
 8011e2c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e2e:	68ca      	ldr	r2, [r1, #12]
 8011e30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011e32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e34:	688b      	ldr	r3, [r1, #8]
 8011e36:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e38:	680b      	ldr	r3, [r1, #0]
 8011e3a:	6283      	str	r3, [r0, #40]	; 0x28
 8011e3c:	e7f0      	b.n	8011e20 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e3e:	4a15      	ldr	r2, [pc, #84]	; (8011e94 <TIM_Base_SetConfig+0xf4>)
 8011e40:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e42:	68ca      	ldr	r2, [r1, #12]
 8011e44:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011e46:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e48:	688b      	ldr	r3, [r1, #8]
 8011e4a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e4c:	680b      	ldr	r3, [r1, #0]
 8011e4e:	6283      	str	r3, [r0, #40]	; 0x28
 8011e50:	e7e8      	b.n	8011e24 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e52:	4a10      	ldr	r2, [pc, #64]	; (8011e94 <TIM_Base_SetConfig+0xf4>)
 8011e54:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e56:	68ca      	ldr	r2, [r1, #12]
 8011e58:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011e5a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e5c:	688b      	ldr	r3, [r1, #8]
 8011e5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e60:	680b      	ldr	r3, [r1, #0]
 8011e62:	6283      	str	r3, [r0, #40]	; 0x28
 8011e64:	e7dc      	b.n	8011e20 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e66:	4a0b      	ldr	r2, [pc, #44]	; (8011e94 <TIM_Base_SetConfig+0xf4>)
 8011e68:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e6a:	68ca      	ldr	r2, [r1, #12]
 8011e6c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011e6e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e70:	688b      	ldr	r3, [r1, #8]
 8011e72:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e74:	680b      	ldr	r3, [r1, #0]
 8011e76:	6283      	str	r3, [r0, #40]	; 0x28
 8011e78:	e7d2      	b.n	8011e20 <TIM_Base_SetConfig+0x80>
 8011e7a:	46c0      	nop			; (mov r8, r8)
 8011e7c:	40012c00 	.word	0x40012c00
 8011e80:	40000400 	.word	0x40000400
 8011e84:	40002000 	.word	0x40002000
 8011e88:	40014000 	.word	0x40014000
 8011e8c:	40014400 	.word	0x40014400
 8011e90:	40014800 	.word	0x40014800
 8011e94:	fffffcff 	.word	0xfffffcff

08011e98 <HAL_TIM_Base_Init>:
{
 8011e98:	b570      	push	{r4, r5, r6, lr}
 8011e9a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011e9c:	d014      	beq.n	8011ec8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011e9e:	2339      	movs	r3, #57	; 0x39
 8011ea0:	5cc3      	ldrb	r3, [r0, r3]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d00a      	beq.n	8011ebc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8011ea6:	2539      	movs	r5, #57	; 0x39
 8011ea8:	2302      	movs	r3, #2
 8011eaa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011eac:	1d21      	adds	r1, r4, #4
 8011eae:	6820      	ldr	r0, [r4, #0]
 8011eb0:	f7ff ff76 	bl	8011da0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8011eb8:	2000      	movs	r0, #0
}
 8011eba:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011ebc:	3338      	adds	r3, #56	; 0x38
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8011ec2:	f7ff ff5f 	bl	8011d84 <HAL_TIM_Base_MspInit>
 8011ec6:	e7ee      	b.n	8011ea6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8011ec8:	2001      	movs	r0, #1
 8011eca:	e7f6      	b.n	8011eba <HAL_TIM_Base_Init+0x22>

08011ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011ece:	2338      	movs	r3, #56	; 0x38
 8011ed0:	5cc3      	ldrb	r3, [r0, r3]
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d01e      	beq.n	8011f14 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8011ed6:	2238      	movs	r2, #56	; 0x38
 8011ed8:	2501      	movs	r5, #1
 8011eda:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8011edc:	2439      	movs	r4, #57	; 0x39
 8011ede:	2302      	movs	r3, #2
 8011ee0:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011ee2:	6806      	ldr	r6, [r0, #0]
 8011ee4:	6873      	ldr	r3, [r6, #4]
 8011ee6:	2770      	movs	r7, #112	; 0x70
 8011ee8:	43bb      	bics	r3, r7
 8011eea:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011eec:	6806      	ldr	r6, [r0, #0]
 8011eee:	6873      	ldr	r3, [r6, #4]
 8011ef0:	680f      	ldr	r7, [r1, #0]
 8011ef2:	433b      	orrs	r3, r7
 8011ef4:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011ef6:	6806      	ldr	r6, [r0, #0]
 8011ef8:	68b3      	ldr	r3, [r6, #8]
 8011efa:	2780      	movs	r7, #128	; 0x80
 8011efc:	43bb      	bics	r3, r7
 8011efe:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011f00:	6806      	ldr	r6, [r0, #0]
 8011f02:	68b3      	ldr	r3, [r6, #8]
 8011f04:	6849      	ldr	r1, [r1, #4]
 8011f06:	430b      	orrs	r3, r1
 8011f08:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011f0a:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8011f10:	2000      	movs	r0, #0
}
 8011f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8011f14:	2002      	movs	r0, #2
 8011f16:	e7fc      	b.n	8011f12 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08011f18 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8011f18:	4770      	bx	lr

08011f1a <HAL_UART_DeInit>:
{
 8011f1a:	b570      	push	{r4, r5, r6, lr}
 8011f1c:	0004      	movs	r4, r0
    return HAL_ERROR;
 8011f1e:	2001      	movs	r0, #1
  if(huart == NULL)
 8011f20:	2c00      	cmp	r4, #0
 8011f22:	d016      	beq.n	8011f52 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8011f24:	2669      	movs	r6, #105	; 0x69
 8011f26:	2302      	movs	r3, #2
 8011f28:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011f2a:	6822      	ldr	r2, [r4, #0]
 8011f2c:	6813      	ldr	r3, [r2, #0]
 8011f2e:	2101      	movs	r1, #1
 8011f30:	438b      	bics	r3, r1
 8011f32:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8011f34:	6823      	ldr	r3, [r4, #0]
 8011f36:	2500      	movs	r5, #0
 8011f38:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011f3a:	6823      	ldr	r3, [r4, #0]
 8011f3c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011f3e:	6823      	ldr	r3, [r4, #0]
 8011f40:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011f42:	0020      	movs	r0, r4
 8011f44:	f7ff ffe8 	bl	8011f18 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f48:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011f4a:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011f4c:	2368      	movs	r3, #104	; 0x68
 8011f4e:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8011f50:	2000      	movs	r0, #0
}
 8011f52:	bd70      	pop	{r4, r5, r6, pc}

08011f54 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f54:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011f56:	2369      	movs	r3, #105	; 0x69
 8011f58:	5cc3      	ldrb	r3, [r0, r3]
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d004      	beq.n	8011f68 <HAL_UART_Transmit_IT+0x14>
 8011f5e:	2369      	movs	r3, #105	; 0x69
 8011f60:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011f62:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011f64:	2c22      	cmp	r4, #34	; 0x22
 8011f66:	d127      	bne.n	8011fb8 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8011f68:	2900      	cmp	r1, #0
 8011f6a:	d02b      	beq.n	8011fc4 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8011f6c:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8011f6e:	2a00      	cmp	r2, #0
 8011f70:	d022      	beq.n	8011fb8 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8011f72:	3367      	adds	r3, #103	; 0x67
 8011f74:	5cc3      	ldrb	r3, [r0, r3]
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d026      	beq.n	8011fc8 <HAL_UART_Transmit_IT+0x74>
 8011f7a:	2368      	movs	r3, #104	; 0x68
 8011f7c:	2401      	movs	r4, #1
 8011f7e:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8011f80:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011f82:	3b18      	subs	r3, #24
 8011f84:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8011f86:	3302      	adds	r3, #2
 8011f88:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011f8e:	3369      	adds	r3, #105	; 0x69
 8011f90:	5cc3      	ldrb	r3, [r0, r3]
 8011f92:	2b22      	cmp	r3, #34	; 0x22
 8011f94:	d012      	beq.n	8011fbc <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011f96:	2369      	movs	r3, #105	; 0x69
 8011f98:	2212      	movs	r2, #18
 8011f9a:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011f9c:	6802      	ldr	r2, [r0, #0]
 8011f9e:	6893      	ldr	r3, [r2, #8]
 8011fa0:	2101      	movs	r1, #1
 8011fa2:	430b      	orrs	r3, r1
 8011fa4:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011fa6:	2368      	movs	r3, #104	; 0x68
 8011fa8:	2200      	movs	r2, #0
 8011faa:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011fac:	6802      	ldr	r2, [r0, #0]
 8011fae:	6813      	ldr	r3, [r2, #0]
 8011fb0:	317f      	adds	r1, #127	; 0x7f
 8011fb2:	430b      	orrs	r3, r1
 8011fb4:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8011fb6:	2300      	movs	r3, #0
  }
}
 8011fb8:	0018      	movs	r0, r3
 8011fba:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011fbc:	3347      	adds	r3, #71	; 0x47
 8011fbe:	2232      	movs	r2, #50	; 0x32
 8011fc0:	54c2      	strb	r2, [r0, r3]
 8011fc2:	e7eb      	b.n	8011f9c <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8011fc4:	2301      	movs	r3, #1
 8011fc6:	e7f7      	b.n	8011fb8 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8011fc8:	2302      	movs	r3, #2
 8011fca:	e7f5      	b.n	8011fb8 <HAL_UART_Transmit_IT+0x64>

08011fcc <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011fcc:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011fce:	2369      	movs	r3, #105	; 0x69
 8011fd0:	5cc3      	ldrb	r3, [r0, r3]
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d004      	beq.n	8011fe0 <HAL_UART_Receive_IT+0x14>
 8011fd6:	2369      	movs	r3, #105	; 0x69
 8011fd8:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011fda:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011fdc:	2c12      	cmp	r4, #18
 8011fde:	d14e      	bne.n	801207e <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8011fe0:	2900      	cmp	r1, #0
 8011fe2:	d05d      	beq.n	80120a0 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8011fe4:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8011fe6:	2a00      	cmp	r2, #0
 8011fe8:	d049      	beq.n	801207e <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8011fea:	3367      	adds	r3, #103	; 0x67
 8011fec:	5cc3      	ldrb	r3, [r0, r3]
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d058      	beq.n	80120a4 <HAL_UART_Receive_IT+0xd8>
 8011ff2:	2368      	movs	r3, #104	; 0x68
 8011ff4:	2401      	movs	r4, #1
 8011ff6:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8011ff8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8011ffa:	3b10      	subs	r3, #16
 8011ffc:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8011ffe:	3302      	adds	r3, #2
 8012000:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8012002:	6883      	ldr	r3, [r0, #8]
 8012004:	2280      	movs	r2, #128	; 0x80
 8012006:	0152      	lsls	r2, r2, #5
 8012008:	4293      	cmp	r3, r2
 801200a:	d008      	beq.n	801201e <HAL_UART_Receive_IT+0x52>
 801200c:	2b00      	cmp	r3, #0
 801200e:	d115      	bne.n	801203c <HAL_UART_Receive_IT+0x70>
 8012010:	6903      	ldr	r3, [r0, #16]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d10e      	bne.n	8012034 <HAL_UART_Receive_IT+0x68>
 8012016:	335c      	adds	r3, #92	; 0x5c
 8012018:	22ff      	movs	r2, #255	; 0xff
 801201a:	52c2      	strh	r2, [r0, r3]
 801201c:	e012      	b.n	8012044 <HAL_UART_Receive_IT+0x78>
 801201e:	6903      	ldr	r3, [r0, #16]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d103      	bne.n	801202c <HAL_UART_Receive_IT+0x60>
 8012024:	335c      	adds	r3, #92	; 0x5c
 8012026:	4a20      	ldr	r2, [pc, #128]	; (80120a8 <HAL_UART_Receive_IT+0xdc>)
 8012028:	52c2      	strh	r2, [r0, r3]
 801202a:	e00b      	b.n	8012044 <HAL_UART_Receive_IT+0x78>
 801202c:	235c      	movs	r3, #92	; 0x5c
 801202e:	22ff      	movs	r2, #255	; 0xff
 8012030:	52c2      	strh	r2, [r0, r3]
 8012032:	e007      	b.n	8012044 <HAL_UART_Receive_IT+0x78>
 8012034:	235c      	movs	r3, #92	; 0x5c
 8012036:	227f      	movs	r2, #127	; 0x7f
 8012038:	52c2      	strh	r2, [r0, r3]
 801203a:	e003      	b.n	8012044 <HAL_UART_Receive_IT+0x78>
 801203c:	2280      	movs	r2, #128	; 0x80
 801203e:	0552      	lsls	r2, r2, #21
 8012040:	4293      	cmp	r3, r2
 8012042:	d01e      	beq.n	8012082 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012044:	2300      	movs	r3, #0
 8012046:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012048:	3369      	adds	r3, #105	; 0x69
 801204a:	5cc3      	ldrb	r3, [r0, r3]
 801204c:	2b12      	cmp	r3, #18
 801204e:	d023      	beq.n	8012098 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012050:	2369      	movs	r3, #105	; 0x69
 8012052:	2222      	movs	r2, #34	; 0x22
 8012054:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012056:	6802      	ldr	r2, [r0, #0]
 8012058:	6811      	ldr	r1, [r2, #0]
 801205a:	2380      	movs	r3, #128	; 0x80
 801205c:	005b      	lsls	r3, r3, #1
 801205e:	430b      	orrs	r3, r1
 8012060:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012062:	6802      	ldr	r2, [r0, #0]
 8012064:	6893      	ldr	r3, [r2, #8]
 8012066:	2101      	movs	r1, #1
 8012068:	430b      	orrs	r3, r1
 801206a:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 801206c:	2368      	movs	r3, #104	; 0x68
 801206e:	2200      	movs	r2, #0
 8012070:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012072:	6802      	ldr	r2, [r0, #0]
 8012074:	6813      	ldr	r3, [r2, #0]
 8012076:	311f      	adds	r1, #31
 8012078:	430b      	orrs	r3, r1
 801207a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 801207c:	2300      	movs	r3, #0
  }
}
 801207e:	0018      	movs	r0, r3
 8012080:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012082:	6903      	ldr	r3, [r0, #16]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d103      	bne.n	8012090 <HAL_UART_Receive_IT+0xc4>
 8012088:	335c      	adds	r3, #92	; 0x5c
 801208a:	227f      	movs	r2, #127	; 0x7f
 801208c:	52c2      	strh	r2, [r0, r3]
 801208e:	e7d9      	b.n	8012044 <HAL_UART_Receive_IT+0x78>
 8012090:	235c      	movs	r3, #92	; 0x5c
 8012092:	223f      	movs	r2, #63	; 0x3f
 8012094:	52c2      	strh	r2, [r0, r3]
 8012096:	e7d5      	b.n	8012044 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012098:	3357      	adds	r3, #87	; 0x57
 801209a:	2232      	movs	r2, #50	; 0x32
 801209c:	54c2      	strb	r2, [r0, r3]
 801209e:	e7da      	b.n	8012056 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 80120a0:	2301      	movs	r3, #1
 80120a2:	e7ec      	b.n	801207e <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80120a4:	2302      	movs	r3, #2
 80120a6:	e7ea      	b.n	801207e <HAL_UART_Receive_IT+0xb2>
 80120a8:	000001ff 	.word	0x000001ff

080120ac <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80120ac:	b510      	push	{r4, lr}
 80120ae:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80120b0:	2369      	movs	r3, #105	; 0x69
 80120b2:	5cc3      	ldrb	r3, [r0, r3]
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d004      	beq.n	80120c2 <HAL_UART_Transmit_DMA+0x16>
 80120b8:	2369      	movs	r3, #105	; 0x69
 80120ba:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80120bc:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80120be:	2b22      	cmp	r3, #34	; 0x22
 80120c0:	d134      	bne.n	801212c <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80120c2:	2900      	cmp	r1, #0
 80120c4:	d037      	beq.n	8012136 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 80120c6:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80120c8:	2a00      	cmp	r2, #0
 80120ca:	d02f      	beq.n	801212c <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 80120cc:	2368      	movs	r3, #104	; 0x68
 80120ce:	5ce3      	ldrb	r3, [r4, r3]
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d032      	beq.n	801213a <HAL_UART_Transmit_DMA+0x8e>
 80120d4:	2368      	movs	r3, #104	; 0x68
 80120d6:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 80120d8:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80120da:	3b18      	subs	r3, #24
 80120dc:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80120de:	3302      	adds	r3, #2
 80120e0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120e2:	2300      	movs	r3, #0
 80120e4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80120e6:	3369      	adds	r3, #105	; 0x69
 80120e8:	5ce3      	ldrb	r3, [r4, r3]
 80120ea:	2b22      	cmp	r3, #34	; 0x22
 80120ec:	d01f      	beq.n	801212e <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80120ee:	2369      	movs	r3, #105	; 0x69
 80120f0:	2012      	movs	r0, #18
 80120f2:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80120f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80120f6:	4812      	ldr	r0, [pc, #72]	; (8012140 <HAL_UART_Transmit_DMA+0x94>)
 80120f8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80120fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80120fc:	4811      	ldr	r0, [pc, #68]	; (8012144 <HAL_UART_Transmit_DMA+0x98>)
 80120fe:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012100:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012102:	4811      	ldr	r0, [pc, #68]	; (8012148 <HAL_UART_Transmit_DMA+0x9c>)
 8012104:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012106:	6820      	ldr	r0, [r4, #0]
 8012108:	3028      	adds	r0, #40	; 0x28
 801210a:	0013      	movs	r3, r2
 801210c:	0002      	movs	r2, r0
 801210e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012110:	f7fd ffb0 	bl	8010074 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	2240      	movs	r2, #64	; 0x40
 8012118:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801211a:	6822      	ldr	r2, [r4, #0]
 801211c:	6893      	ldr	r3, [r2, #8]
 801211e:	2180      	movs	r1, #128	; 0x80
 8012120:	430b      	orrs	r3, r1
 8012122:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012124:	2368      	movs	r3, #104	; 0x68
 8012126:	2200      	movs	r2, #0
 8012128:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801212a:	2000      	movs	r0, #0
  }
}
 801212c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801212e:	3347      	adds	r3, #71	; 0x47
 8012130:	3031      	adds	r0, #49	; 0x31
 8012132:	54e0      	strb	r0, [r4, r3]
 8012134:	e7de      	b.n	80120f4 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8012136:	2001      	movs	r0, #1
 8012138:	e7f8      	b.n	801212c <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 801213a:	2002      	movs	r0, #2
 801213c:	e7f6      	b.n	801212c <HAL_UART_Transmit_DMA+0x80>
 801213e:	46c0      	nop			; (mov r8, r8)
 8012140:	080121e5 	.word	0x080121e5
 8012144:	08012217 	.word	0x08012217
 8012148:	08012267 	.word	0x08012267

0801214c <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801214c:	b510      	push	{r4, lr}
 801214e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012150:	2069      	movs	r0, #105	; 0x69
 8012152:	5c20      	ldrb	r0, [r4, r0]
 8012154:	2801      	cmp	r0, #1
 8012156:	d004      	beq.n	8012162 <HAL_UART_Receive_DMA+0x16>
 8012158:	2369      	movs	r3, #105	; 0x69
 801215a:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801215c:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801215e:	2b12      	cmp	r3, #18
 8012160:	d130      	bne.n	80121c4 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8012162:	2900      	cmp	r1, #0
 8012164:	d033      	beq.n	80121ce <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8012166:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012168:	2a00      	cmp	r2, #0
 801216a:	d02b      	beq.n	80121c4 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 801216c:	2368      	movs	r3, #104	; 0x68
 801216e:	5ce3      	ldrb	r3, [r4, r3]
 8012170:	2b01      	cmp	r3, #1
 8012172:	d02e      	beq.n	80121d2 <HAL_UART_Receive_DMA+0x86>
 8012174:	2368      	movs	r3, #104	; 0x68
 8012176:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8012178:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 801217a:	3b10      	subs	r3, #16
 801217c:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801217e:	2300      	movs	r3, #0
 8012180:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012182:	3369      	adds	r3, #105	; 0x69
 8012184:	5ce3      	ldrb	r3, [r4, r3]
 8012186:	2b12      	cmp	r3, #18
 8012188:	d01d      	beq.n	80121c6 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801218a:	2369      	movs	r3, #105	; 0x69
 801218c:	2022      	movs	r0, #34	; 0x22
 801218e:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012192:	4811      	ldr	r0, [pc, #68]	; (80121d8 <HAL_UART_Receive_DMA+0x8c>)
 8012194:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012198:	4810      	ldr	r0, [pc, #64]	; (80121dc <HAL_UART_Receive_DMA+0x90>)
 801219a:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801219c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801219e:	4810      	ldr	r0, [pc, #64]	; (80121e0 <HAL_UART_Receive_DMA+0x94>)
 80121a0:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80121a2:	6820      	ldr	r0, [r4, #0]
 80121a4:	3024      	adds	r0, #36	; 0x24
 80121a6:	0013      	movs	r3, r2
 80121a8:	000a      	movs	r2, r1
 80121aa:	0001      	movs	r1, r0
 80121ac:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80121ae:	f7fd ff61 	bl	8010074 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80121b2:	6822      	ldr	r2, [r4, #0]
 80121b4:	6893      	ldr	r3, [r2, #8]
 80121b6:	2140      	movs	r1, #64	; 0x40
 80121b8:	430b      	orrs	r3, r1
 80121ba:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80121bc:	2368      	movs	r3, #104	; 0x68
 80121be:	2200      	movs	r2, #0
 80121c0:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80121c2:	2000      	movs	r0, #0
  }
}
 80121c4:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80121c6:	3357      	adds	r3, #87	; 0x57
 80121c8:	3031      	adds	r0, #49	; 0x31
 80121ca:	54e0      	strb	r0, [r4, r3]
 80121cc:	e7e0      	b.n	8012190 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 80121ce:	2001      	movs	r0, #1
 80121d0:	e7f8      	b.n	80121c4 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80121d2:	2002      	movs	r0, #2
 80121d4:	e7f6      	b.n	80121c4 <HAL_UART_Receive_DMA+0x78>
 80121d6:	46c0      	nop			; (mov r8, r8)
 80121d8:	08012221 	.word	0x08012221
 80121dc:	0801225d 	.word	0x0801225d
 80121e0:	08012267 	.word	0x08012267

080121e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80121e4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80121e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80121e8:	6802      	ldr	r2, [r0, #0]
 80121ea:	6812      	ldr	r2, [r2, #0]
 80121ec:	0692      	lsls	r2, r2, #26
 80121ee:	d40d      	bmi.n	801220c <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 80121f0:	2252      	movs	r2, #82	; 0x52
 80121f2:	2100      	movs	r1, #0
 80121f4:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80121f6:	6819      	ldr	r1, [r3, #0]
 80121f8:	688a      	ldr	r2, [r1, #8]
 80121fa:	2080      	movs	r0, #128	; 0x80
 80121fc:	4382      	bics	r2, r0
 80121fe:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	6813      	ldr	r3, [r2, #0]
 8012204:	2140      	movs	r1, #64	; 0x40
 8012206:	430b      	orrs	r3, r1
 8012208:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 801220a:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 801220c:	0018      	movs	r0, r3
 801220e:	f7fa fcb1 	bl	800cb74 <HAL_UART_TxCpltCallback>
}
 8012212:	e7fa      	b.n	801220a <UART_DMATransmitCplt+0x26>

08012214 <HAL_UART_TxHalfCpltCallback>:
}
 8012214:	4770      	bx	lr

08012216 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012216:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8012218:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801221a:	f7ff fffb 	bl	8012214 <HAL_UART_TxHalfCpltCallback>
}
 801221e:	bd10      	pop	{r4, pc}

08012220 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012220:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012222:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012224:	6802      	ldr	r2, [r0, #0]
 8012226:	6812      	ldr	r2, [r2, #0]
 8012228:	0692      	lsls	r2, r2, #26
 801222a:	d40e      	bmi.n	801224a <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 801222c:	225a      	movs	r2, #90	; 0x5a
 801222e:	2100      	movs	r1, #0
 8012230:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012232:	6819      	ldr	r1, [r3, #0]
 8012234:	688a      	ldr	r2, [r1, #8]
 8012236:	2040      	movs	r0, #64	; 0x40
 8012238:	4382      	bics	r2, r0
 801223a:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801223c:	2269      	movs	r2, #105	; 0x69
 801223e:	5c9a      	ldrb	r2, [r3, r2]
 8012240:	2a32      	cmp	r2, #50	; 0x32
 8012242:	d006      	beq.n	8012252 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012244:	2269      	movs	r2, #105	; 0x69
 8012246:	2101      	movs	r1, #1
 8012248:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801224a:	0018      	movs	r0, r3
 801224c:	f7fa fcd0 	bl	800cbf0 <HAL_UART_RxCpltCallback>
}
 8012250:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012252:	3237      	adds	r2, #55	; 0x37
 8012254:	2112      	movs	r1, #18
 8012256:	5499      	strb	r1, [r3, r2]
 8012258:	e7f7      	b.n	801224a <UART_DMAReceiveCplt+0x2a>

0801225a <HAL_UART_RxHalfCpltCallback>:
}
 801225a:	4770      	bx	lr

0801225c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801225c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801225e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012260:	f7ff fffb 	bl	801225a <HAL_UART_RxHalfCpltCallback>
}
 8012264:	bd10      	pop	{r4, pc}

08012266 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012266:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012268:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801226a:	2300      	movs	r3, #0
 801226c:	225a      	movs	r2, #90	; 0x5a
 801226e:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012270:	3a08      	subs	r2, #8
 8012272:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012274:	3369      	adds	r3, #105	; 0x69
 8012276:	3a51      	subs	r2, #81	; 0x51
 8012278:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801227a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801227c:	320f      	adds	r2, #15
 801227e:	4313      	orrs	r3, r2
 8012280:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012282:	f7fa fc8f 	bl	800cba4 <HAL_UART_ErrorCallback>
}
 8012286:	bd10      	pop	{r4, pc}

08012288 <UART_SetConfig>:
{
 8012288:	b570      	push	{r4, r5, r6, lr}
 801228a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801228c:	6801      	ldr	r1, [r0, #0]
 801228e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012290:	6883      	ldr	r3, [r0, #8]
 8012292:	6900      	ldr	r0, [r0, #16]
 8012294:	4303      	orrs	r3, r0
 8012296:	6960      	ldr	r0, [r4, #20]
 8012298:	4303      	orrs	r3, r0
 801229a:	69e0      	ldr	r0, [r4, #28]
 801229c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801229e:	487e      	ldr	r0, [pc, #504]	; (8012498 <UART_SetConfig+0x210>)
 80122a0:	4002      	ands	r2, r0
 80122a2:	4313      	orrs	r3, r2
 80122a4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80122a6:	6822      	ldr	r2, [r4, #0]
 80122a8:	6853      	ldr	r3, [r2, #4]
 80122aa:	497c      	ldr	r1, [pc, #496]	; (801249c <UART_SetConfig+0x214>)
 80122ac:	400b      	ands	r3, r1
 80122ae:	68e1      	ldr	r1, [r4, #12]
 80122b0:	430b      	orrs	r3, r1
 80122b2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80122b4:	6821      	ldr	r1, [r4, #0]
 80122b6:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80122b8:	69a3      	ldr	r3, [r4, #24]
 80122ba:	6a20      	ldr	r0, [r4, #32]
 80122bc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80122be:	4878      	ldr	r0, [pc, #480]	; (80124a0 <UART_SetConfig+0x218>)
 80122c0:	4002      	ands	r2, r0
 80122c2:	4313      	orrs	r3, r2
 80122c4:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80122c6:	6825      	ldr	r5, [r4, #0]
 80122c8:	4b76      	ldr	r3, [pc, #472]	; (80124a4 <UART_SetConfig+0x21c>)
 80122ca:	429d      	cmp	r5, r3
 80122cc:	d022      	beq.n	8012314 <UART_SetConfig+0x8c>
 80122ce:	4b76      	ldr	r3, [pc, #472]	; (80124a8 <UART_SetConfig+0x220>)
 80122d0:	429d      	cmp	r5, r3
 80122d2:	d034      	beq.n	801233e <UART_SetConfig+0xb6>
 80122d4:	4b75      	ldr	r3, [pc, #468]	; (80124ac <UART_SetConfig+0x224>)
 80122d6:	429d      	cmp	r5, r3
 80122d8:	d100      	bne.n	80122dc <UART_SetConfig+0x54>
 80122da:	e06b      	b.n	80123b4 <UART_SetConfig+0x12c>
 80122dc:	4b74      	ldr	r3, [pc, #464]	; (80124b0 <UART_SetConfig+0x228>)
 80122de:	429d      	cmp	r5, r3
 80122e0:	d100      	bne.n	80122e4 <UART_SetConfig+0x5c>
 80122e2:	e08e      	b.n	8012402 <UART_SetConfig+0x17a>
 80122e4:	4b73      	ldr	r3, [pc, #460]	; (80124b4 <UART_SetConfig+0x22c>)
 80122e6:	429d      	cmp	r5, r3
 80122e8:	d100      	bne.n	80122ec <UART_SetConfig+0x64>
 80122ea:	e08a      	b.n	8012402 <UART_SetConfig+0x17a>
 80122ec:	4b72      	ldr	r3, [pc, #456]	; (80124b8 <UART_SetConfig+0x230>)
 80122ee:	429d      	cmp	r5, r3
 80122f0:	d100      	bne.n	80122f4 <UART_SetConfig+0x6c>
 80122f2:	e086      	b.n	8012402 <UART_SetConfig+0x17a>
 80122f4:	4b71      	ldr	r3, [pc, #452]	; (80124bc <UART_SetConfig+0x234>)
 80122f6:	429d      	cmp	r5, r3
 80122f8:	d100      	bne.n	80122fc <UART_SetConfig+0x74>
 80122fa:	e082      	b.n	8012402 <UART_SetConfig+0x17a>
 80122fc:	4b70      	ldr	r3, [pc, #448]	; (80124c0 <UART_SetConfig+0x238>)
 80122fe:	429d      	cmp	r5, r3
 8012300:	d100      	bne.n	8012304 <UART_SetConfig+0x7c>
 8012302:	e07e      	b.n	8012402 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012304:	2380      	movs	r3, #128	; 0x80
 8012306:	021b      	lsls	r3, r3, #8
 8012308:	69e2      	ldr	r2, [r4, #28]
 801230a:	429a      	cmp	r2, r3
 801230c:	d100      	bne.n	8012310 <UART_SetConfig+0x88>
 801230e:	e072      	b.n	80123f6 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8012310:	2001      	movs	r0, #1
 8012312:	e04e      	b.n	80123b2 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012314:	4b6b      	ldr	r3, [pc, #428]	; (80124c4 <UART_SetConfig+0x23c>)
 8012316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012318:	2303      	movs	r3, #3
 801231a:	4013      	ands	r3, r2
 801231c:	2b01      	cmp	r3, #1
 801231e:	d100      	bne.n	8012322 <UART_SetConfig+0x9a>
 8012320:	e09a      	b.n	8012458 <UART_SetConfig+0x1d0>
 8012322:	2b00      	cmp	r3, #0
 8012324:	d02f      	beq.n	8012386 <UART_SetConfig+0xfe>
 8012326:	2b02      	cmp	r3, #2
 8012328:	d100      	bne.n	801232c <UART_SetConfig+0xa4>
 801232a:	e0a5      	b.n	8012478 <UART_SetConfig+0x1f0>
 801232c:	2b03      	cmp	r3, #3
 801232e:	d01a      	beq.n	8012366 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012330:	2380      	movs	r3, #128	; 0x80
 8012332:	021b      	lsls	r3, r3, #8
 8012334:	69e2      	ldr	r2, [r4, #28]
 8012336:	429a      	cmp	r2, r3
 8012338:	d060      	beq.n	80123fc <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 801233a:	2001      	movs	r0, #1
 801233c:	e039      	b.n	80123b2 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801233e:	4b61      	ldr	r3, [pc, #388]	; (80124c4 <UART_SetConfig+0x23c>)
 8012340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012342:	22c0      	movs	r2, #192	; 0xc0
 8012344:	0292      	lsls	r2, r2, #10
 8012346:	4013      	ands	r3, r2
 8012348:	2280      	movs	r2, #128	; 0x80
 801234a:	0252      	lsls	r2, r2, #9
 801234c:	4293      	cmp	r3, r2
 801234e:	d100      	bne.n	8012352 <UART_SetConfig+0xca>
 8012350:	e082      	b.n	8012458 <UART_SetConfig+0x1d0>
 8012352:	d916      	bls.n	8012382 <UART_SetConfig+0xfa>
 8012354:	2280      	movs	r2, #128	; 0x80
 8012356:	0292      	lsls	r2, r2, #10
 8012358:	4293      	cmp	r3, r2
 801235a:	d100      	bne.n	801235e <UART_SetConfig+0xd6>
 801235c:	e08c      	b.n	8012478 <UART_SetConfig+0x1f0>
 801235e:	22c0      	movs	r2, #192	; 0xc0
 8012360:	0292      	lsls	r2, r2, #10
 8012362:	4293      	cmp	r3, r2
 8012364:	d1e4      	bne.n	8012330 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012366:	2380      	movs	r3, #128	; 0x80
 8012368:	021b      	lsls	r3, r3, #8
 801236a:	69e2      	ldr	r2, [r4, #28]
 801236c:	429a      	cmp	r2, r3
 801236e:	d038      	beq.n	80123e2 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012370:	6861      	ldr	r1, [r4, #4]
 8012372:	4855      	ldr	r0, [pc, #340]	; (80124c8 <UART_SetConfig+0x240>)
 8012374:	f7ed feec 	bl	8000150 <__udivsi3>
 8012378:	0400      	lsls	r0, r0, #16
 801237a:	0c00      	lsrs	r0, r0, #16
 801237c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801237e:	2000      	movs	r0, #0
        break;
 8012380:	e017      	b.n	80123b2 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1d4      	bne.n	8012330 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012386:	2380      	movs	r3, #128	; 0x80
 8012388:	021b      	lsls	r3, r3, #8
 801238a:	69e2      	ldr	r2, [r4, #28]
 801238c:	429a      	cmp	r2, r3
 801238e:	d13d      	bne.n	801240c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012390:	f7ff fa5c 	bl	801184c <HAL_RCC_GetPCLK1Freq>
 8012394:	0040      	lsls	r0, r0, #1
 8012396:	6861      	ldr	r1, [r4, #4]
 8012398:	f7ed feda 	bl	8000150 <__udivsi3>
 801239c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801239e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80123a0:	220f      	movs	r2, #15
 80123a2:	0019      	movs	r1, r3
 80123a4:	4391      	bics	r1, r2
 80123a6:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80123a8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80123aa:	071b      	lsls	r3, r3, #28
 80123ac:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80123ae:	4313      	orrs	r3, r2
 80123b0:	60cb      	str	r3, [r1, #12]
}
 80123b2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123b4:	4b43      	ldr	r3, [pc, #268]	; (80124c4 <UART_SetConfig+0x23c>)
 80123b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123b8:	22c0      	movs	r2, #192	; 0xc0
 80123ba:	0312      	lsls	r2, r2, #12
 80123bc:	4013      	ands	r3, r2
 80123be:	2280      	movs	r2, #128	; 0x80
 80123c0:	02d2      	lsls	r2, r2, #11
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d02d      	beq.n	8012422 <UART_SetConfig+0x19a>
 80123c6:	d913      	bls.n	80123f0 <UART_SetConfig+0x168>
 80123c8:	2280      	movs	r2, #128	; 0x80
 80123ca:	0312      	lsls	r2, r2, #12
 80123cc:	4293      	cmp	r3, r2
 80123ce:	d036      	beq.n	801243e <UART_SetConfig+0x1b6>
 80123d0:	22c0      	movs	r2, #192	; 0xc0
 80123d2:	0312      	lsls	r2, r2, #12
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d1ab      	bne.n	8012330 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123d8:	2380      	movs	r3, #128	; 0x80
 80123da:	021b      	lsls	r3, r3, #8
 80123dc:	69e2      	ldr	r2, [r4, #28]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d1c6      	bne.n	8012370 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80123e2:	6861      	ldr	r1, [r4, #4]
 80123e4:	4839      	ldr	r0, [pc, #228]	; (80124cc <UART_SetConfig+0x244>)
 80123e6:	f7ed feb3 	bl	8000150 <__udivsi3>
 80123ea:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80123ec:	2000      	movs	r0, #0
        break;
 80123ee:	e7d7      	b.n	80123a0 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d0c8      	beq.n	8012386 <UART_SetConfig+0xfe>
 80123f4:	e79c      	b.n	8012330 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 80123f6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80123f8:	2300      	movs	r3, #0
 80123fa:	e7d1      	b.n	80123a0 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 80123fc:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80123fe:	2300      	movs	r3, #0
 8012400:	e7ce      	b.n	80123a0 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012402:	2380      	movs	r3, #128	; 0x80
 8012404:	021b      	lsls	r3, r3, #8
 8012406:	69e2      	ldr	r2, [r4, #28]
 8012408:	429a      	cmp	r2, r3
 801240a:	d0c1      	beq.n	8012390 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801240c:	f7ff fa1e 	bl	801184c <HAL_RCC_GetPCLK1Freq>
 8012410:	6825      	ldr	r5, [r4, #0]
 8012412:	6861      	ldr	r1, [r4, #4]
 8012414:	f7ed fe9c 	bl	8000150 <__udivsi3>
 8012418:	0400      	lsls	r0, r0, #16
 801241a:	0c00      	lsrs	r0, r0, #16
 801241c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801241e:	2000      	movs	r0, #0
  return ret;
 8012420:	e7c7      	b.n	80123b2 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012422:	2380      	movs	r3, #128	; 0x80
 8012424:	021b      	lsls	r3, r3, #8
 8012426:	69e2      	ldr	r2, [r4, #28]
 8012428:	429a      	cmp	r2, r3
 801242a:	d11a      	bne.n	8012462 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801242c:	f7ff f9aa 	bl	8011784 <HAL_RCC_GetSysClockFreq>
 8012430:	0040      	lsls	r0, r0, #1
 8012432:	6861      	ldr	r1, [r4, #4]
 8012434:	f7ed fe8c 	bl	8000150 <__udivsi3>
 8012438:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801243a:	2000      	movs	r0, #0
        break;
 801243c:	e7b0      	b.n	80123a0 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801243e:	2380      	movs	r3, #128	; 0x80
 8012440:	021b      	lsls	r3, r3, #8
 8012442:	69e2      	ldr	r2, [r4, #28]
 8012444:	429a      	cmp	r2, r3
 8012446:	d11c      	bne.n	8012482 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012448:	6861      	ldr	r1, [r4, #4]
 801244a:	2080      	movs	r0, #128	; 0x80
 801244c:	0240      	lsls	r0, r0, #9
 801244e:	f7ed fe7f 	bl	8000150 <__udivsi3>
 8012452:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012454:	2000      	movs	r0, #0
        break;
 8012456:	e7a3      	b.n	80123a0 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012458:	2380      	movs	r3, #128	; 0x80
 801245a:	021b      	lsls	r3, r3, #8
 801245c:	69e2      	ldr	r2, [r4, #28]
 801245e:	429a      	cmp	r2, r3
 8012460:	d0e4      	beq.n	801242c <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012462:	f7ff f98f 	bl	8011784 <HAL_RCC_GetSysClockFreq>
 8012466:	6825      	ldr	r5, [r4, #0]
 8012468:	6861      	ldr	r1, [r4, #4]
 801246a:	f7ed fe71 	bl	8000150 <__udivsi3>
 801246e:	0400      	lsls	r0, r0, #16
 8012470:	0c00      	lsrs	r0, r0, #16
 8012472:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012474:	2000      	movs	r0, #0
        break;
 8012476:	e79c      	b.n	80123b2 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012478:	2380      	movs	r3, #128	; 0x80
 801247a:	021b      	lsls	r3, r3, #8
 801247c:	69e2      	ldr	r2, [r4, #28]
 801247e:	429a      	cmp	r2, r3
 8012480:	d0e2      	beq.n	8012448 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012482:	6861      	ldr	r1, [r4, #4]
 8012484:	2080      	movs	r0, #128	; 0x80
 8012486:	0200      	lsls	r0, r0, #8
 8012488:	f7ed fe62 	bl	8000150 <__udivsi3>
 801248c:	0400      	lsls	r0, r0, #16
 801248e:	0c00      	lsrs	r0, r0, #16
 8012490:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012492:	2000      	movs	r0, #0
        break;
 8012494:	e78d      	b.n	80123b2 <UART_SetConfig+0x12a>
 8012496:	46c0      	nop			; (mov r8, r8)
 8012498:	efff69f3 	.word	0xefff69f3
 801249c:	ffffcfff 	.word	0xffffcfff
 80124a0:	fffff4ff 	.word	0xfffff4ff
 80124a4:	40013800 	.word	0x40013800
 80124a8:	40004400 	.word	0x40004400
 80124ac:	40004800 	.word	0x40004800
 80124b0:	40004c00 	.word	0x40004c00
 80124b4:	40005000 	.word	0x40005000
 80124b8:	40011400 	.word	0x40011400
 80124bc:	40011800 	.word	0x40011800
 80124c0:	40011c00 	.word	0x40011c00
 80124c4:	40021000 	.word	0x40021000
 80124c8:	007a1200 	.word	0x007a1200
 80124cc:	00f42400 	.word	0x00f42400

080124d0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80124d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124d2:	07db      	lsls	r3, r3, #31
 80124d4:	d506      	bpl.n	80124e4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80124d6:	6802      	ldr	r2, [r0, #0]
 80124d8:	6853      	ldr	r3, [r2, #4]
 80124da:	492c      	ldr	r1, [pc, #176]	; (801258c <UART_AdvFeatureConfig+0xbc>)
 80124dc:	400b      	ands	r3, r1
 80124de:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80124e0:	430b      	orrs	r3, r1
 80124e2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80124e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124e6:	079b      	lsls	r3, r3, #30
 80124e8:	d506      	bpl.n	80124f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80124ea:	6802      	ldr	r2, [r0, #0]
 80124ec:	6853      	ldr	r3, [r2, #4]
 80124ee:	4928      	ldr	r1, [pc, #160]	; (8012590 <UART_AdvFeatureConfig+0xc0>)
 80124f0:	400b      	ands	r3, r1
 80124f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80124f4:	430b      	orrs	r3, r1
 80124f6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80124f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124fa:	075b      	lsls	r3, r3, #29
 80124fc:	d506      	bpl.n	801250c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80124fe:	6802      	ldr	r2, [r0, #0]
 8012500:	6853      	ldr	r3, [r2, #4]
 8012502:	4924      	ldr	r1, [pc, #144]	; (8012594 <UART_AdvFeatureConfig+0xc4>)
 8012504:	400b      	ands	r3, r1
 8012506:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012508:	430b      	orrs	r3, r1
 801250a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801250c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801250e:	071b      	lsls	r3, r3, #28
 8012510:	d506      	bpl.n	8012520 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012512:	6802      	ldr	r2, [r0, #0]
 8012514:	6853      	ldr	r3, [r2, #4]
 8012516:	4920      	ldr	r1, [pc, #128]	; (8012598 <UART_AdvFeatureConfig+0xc8>)
 8012518:	400b      	ands	r3, r1
 801251a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801251c:	430b      	orrs	r3, r1
 801251e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012522:	06db      	lsls	r3, r3, #27
 8012524:	d506      	bpl.n	8012534 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012526:	6802      	ldr	r2, [r0, #0]
 8012528:	6893      	ldr	r3, [r2, #8]
 801252a:	491c      	ldr	r1, [pc, #112]	; (801259c <UART_AdvFeatureConfig+0xcc>)
 801252c:	400b      	ands	r3, r1
 801252e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012530:	430b      	orrs	r3, r1
 8012532:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012534:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012536:	069b      	lsls	r3, r3, #26
 8012538:	d506      	bpl.n	8012548 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801253a:	6802      	ldr	r2, [r0, #0]
 801253c:	6893      	ldr	r3, [r2, #8]
 801253e:	4918      	ldr	r1, [pc, #96]	; (80125a0 <UART_AdvFeatureConfig+0xd0>)
 8012540:	400b      	ands	r3, r1
 8012542:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012544:	430b      	orrs	r3, r1
 8012546:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012548:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801254a:	065b      	lsls	r3, r3, #25
 801254c:	d50b      	bpl.n	8012566 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801254e:	6802      	ldr	r2, [r0, #0]
 8012550:	6853      	ldr	r3, [r2, #4]
 8012552:	4914      	ldr	r1, [pc, #80]	; (80125a4 <UART_AdvFeatureConfig+0xd4>)
 8012554:	400b      	ands	r3, r1
 8012556:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012558:	430b      	orrs	r3, r1
 801255a:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801255c:	2380      	movs	r3, #128	; 0x80
 801255e:	035b      	lsls	r3, r3, #13
 8012560:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012562:	429a      	cmp	r2, r3
 8012564:	d00a      	beq.n	801257c <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012566:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012568:	061b      	lsls	r3, r3, #24
 801256a:	d506      	bpl.n	801257a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801256c:	6802      	ldr	r2, [r0, #0]
 801256e:	6853      	ldr	r3, [r2, #4]
 8012570:	490d      	ldr	r1, [pc, #52]	; (80125a8 <UART_AdvFeatureConfig+0xd8>)
 8012572:	400b      	ands	r3, r1
 8012574:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012576:	430b      	orrs	r3, r1
 8012578:	6053      	str	r3, [r2, #4]
}
 801257a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801257c:	6802      	ldr	r2, [r0, #0]
 801257e:	6853      	ldr	r3, [r2, #4]
 8012580:	490a      	ldr	r1, [pc, #40]	; (80125ac <UART_AdvFeatureConfig+0xdc>)
 8012582:	400b      	ands	r3, r1
 8012584:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012586:	430b      	orrs	r3, r1
 8012588:	6053      	str	r3, [r2, #4]
 801258a:	e7ec      	b.n	8012566 <UART_AdvFeatureConfig+0x96>
 801258c:	fffdffff 	.word	0xfffdffff
 8012590:	fffeffff 	.word	0xfffeffff
 8012594:	fffbffff 	.word	0xfffbffff
 8012598:	ffff7fff 	.word	0xffff7fff
 801259c:	ffffefff 	.word	0xffffefff
 80125a0:	ffffdfff 	.word	0xffffdfff
 80125a4:	ffefffff 	.word	0xffefffff
 80125a8:	fff7ffff 	.word	0xfff7ffff
 80125ac:	ff9fffff 	.word	0xff9fffff

080125b0 <UART_WaitOnFlagUntilTimeout>:
{
 80125b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125b2:	46c6      	mov	lr, r8
 80125b4:	b500      	push	{lr}
 80125b6:	0006      	movs	r6, r0
 80125b8:	000c      	movs	r4, r1
 80125ba:	0017      	movs	r7, r2
 80125bc:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80125be:	f7fd f85f 	bl	800f680 <HAL_GetTick>
 80125c2:	4680      	mov	r8, r0
  if(Status == RESET)
 80125c4:	2f00      	cmp	r7, #0
 80125c6:	d029      	beq.n	801261c <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80125c8:	6832      	ldr	r2, [r6, #0]
 80125ca:	69d3      	ldr	r3, [r2, #28]
 80125cc:	4023      	ands	r3, r4
 80125ce:	42a3      	cmp	r3, r4
 80125d0:	d152      	bne.n	8012678 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80125d2:	1c6b      	adds	r3, r5, #1
 80125d4:	d0f9      	beq.n	80125ca <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80125d6:	2d00      	cmp	r5, #0
 80125d8:	d005      	beq.n	80125e6 <UART_WaitOnFlagUntilTimeout+0x36>
 80125da:	f7fd f851 	bl	800f680 <HAL_GetTick>
 80125de:	4643      	mov	r3, r8
 80125e0:	1ac0      	subs	r0, r0, r3
 80125e2:	42a8      	cmp	r0, r5
 80125e4:	d9f0      	bls.n	80125c8 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80125e6:	6832      	ldr	r2, [r6, #0]
 80125e8:	6813      	ldr	r3, [r2, #0]
 80125ea:	2180      	movs	r1, #128	; 0x80
 80125ec:	438b      	bics	r3, r1
 80125ee:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80125f0:	6832      	ldr	r2, [r6, #0]
 80125f2:	6813      	ldr	r3, [r2, #0]
 80125f4:	3960      	subs	r1, #96	; 0x60
 80125f6:	438b      	bics	r3, r1
 80125f8:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80125fa:	6832      	ldr	r2, [r6, #0]
 80125fc:	6813      	ldr	r3, [r2, #0]
 80125fe:	491f      	ldr	r1, [pc, #124]	; (801267c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012600:	400b      	ands	r3, r1
 8012602:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012604:	6831      	ldr	r1, [r6, #0]
 8012606:	688b      	ldr	r3, [r1, #8]
 8012608:	2201      	movs	r2, #1
 801260a:	4393      	bics	r3, r2
 801260c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801260e:	2369      	movs	r3, #105	; 0x69
 8012610:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012612:	3b01      	subs	r3, #1
 8012614:	2200      	movs	r2, #0
 8012616:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012618:	2003      	movs	r0, #3
 801261a:	e02a      	b.n	8012672 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801261c:	6832      	ldr	r2, [r6, #0]
 801261e:	69d3      	ldr	r3, [r2, #28]
 8012620:	4023      	ands	r3, r4
 8012622:	42a3      	cmp	r3, r4
 8012624:	d024      	beq.n	8012670 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8012626:	1c6b      	adds	r3, r5, #1
 8012628:	d0f9      	beq.n	801261e <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801262a:	2d00      	cmp	r5, #0
 801262c:	d005      	beq.n	801263a <UART_WaitOnFlagUntilTimeout+0x8a>
 801262e:	f7fd f827 	bl	800f680 <HAL_GetTick>
 8012632:	4643      	mov	r3, r8
 8012634:	1ac0      	subs	r0, r0, r3
 8012636:	42a8      	cmp	r0, r5
 8012638:	d9f0      	bls.n	801261c <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801263a:	6832      	ldr	r2, [r6, #0]
 801263c:	6813      	ldr	r3, [r2, #0]
 801263e:	2180      	movs	r1, #128	; 0x80
 8012640:	438b      	bics	r3, r1
 8012642:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012644:	6832      	ldr	r2, [r6, #0]
 8012646:	6813      	ldr	r3, [r2, #0]
 8012648:	3960      	subs	r1, #96	; 0x60
 801264a:	438b      	bics	r3, r1
 801264c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801264e:	6832      	ldr	r2, [r6, #0]
 8012650:	6813      	ldr	r3, [r2, #0]
 8012652:	490a      	ldr	r1, [pc, #40]	; (801267c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012654:	400b      	ands	r3, r1
 8012656:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012658:	6831      	ldr	r1, [r6, #0]
 801265a:	688b      	ldr	r3, [r1, #8]
 801265c:	2201      	movs	r2, #1
 801265e:	4393      	bics	r3, r2
 8012660:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012662:	2369      	movs	r3, #105	; 0x69
 8012664:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012666:	3b01      	subs	r3, #1
 8012668:	2200      	movs	r2, #0
 801266a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801266c:	2003      	movs	r0, #3
 801266e:	e000      	b.n	8012672 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012670:	2000      	movs	r0, #0
}
 8012672:	bc04      	pop	{r2}
 8012674:	4690      	mov	r8, r2
 8012676:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012678:	2000      	movs	r0, #0
 801267a:	e7fa      	b.n	8012672 <UART_WaitOnFlagUntilTimeout+0xc2>
 801267c:	fffffeff 	.word	0xfffffeff

08012680 <HAL_UART_Transmit>:
{
 8012680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012682:	b083      	sub	sp, #12
 8012684:	0004      	movs	r4, r0
 8012686:	000e      	movs	r6, r1
 8012688:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801268a:	2369      	movs	r3, #105	; 0x69
 801268c:	5cc3      	ldrb	r3, [r0, r3]
 801268e:	2b01      	cmp	r3, #1
 8012690:	d004      	beq.n	801269c <HAL_UART_Transmit+0x1c>
 8012692:	2369      	movs	r3, #105	; 0x69
 8012694:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8012696:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012698:	2b22      	cmp	r3, #34	; 0x22
 801269a:	d153      	bne.n	8012744 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 801269c:	2e00      	cmp	r6, #0
 801269e:	d050      	beq.n	8012742 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 80126a0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80126a2:	2a00      	cmp	r2, #0
 80126a4:	d04e      	beq.n	8012744 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80126a6:	2368      	movs	r3, #104	; 0x68
 80126a8:	5ce3      	ldrb	r3, [r4, r3]
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d04c      	beq.n	8012748 <HAL_UART_Transmit+0xc8>
 80126ae:	2368      	movs	r3, #104	; 0x68
 80126b0:	2101      	movs	r1, #1
 80126b2:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126b4:	2300      	movs	r3, #0
 80126b6:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80126b8:	3369      	adds	r3, #105	; 0x69
 80126ba:	5ce3      	ldrb	r3, [r4, r3]
 80126bc:	2b22      	cmp	r3, #34	; 0x22
 80126be:	d008      	beq.n	80126d2 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80126c0:	2369      	movs	r3, #105	; 0x69
 80126c2:	2112      	movs	r1, #18
 80126c4:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80126c6:	2350      	movs	r3, #80	; 0x50
 80126c8:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80126ca:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126cc:	2580      	movs	r5, #128	; 0x80
 80126ce:	016d      	lsls	r5, r5, #5
 80126d0:	e00a      	b.n	80126e8 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80126d2:	3347      	adds	r3, #71	; 0x47
 80126d4:	3131      	adds	r1, #49	; 0x31
 80126d6:	54e1      	strb	r1, [r4, r3]
 80126d8:	e7f5      	b.n	80126c6 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80126da:	7833      	ldrb	r3, [r6, #0]
 80126dc:	6822      	ldr	r2, [r4, #0]
 80126de:	8513      	strh	r3, [r2, #40]	; 0x28
 80126e0:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80126e2:	5be2      	ldrh	r2, [r4, r7]
 80126e4:	2a00      	cmp	r2, #0
 80126e6:	d016      	beq.n	8012716 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80126e8:	3a01      	subs	r2, #1
 80126ea:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80126ec:	9b01      	ldr	r3, [sp, #4]
 80126ee:	2200      	movs	r2, #0
 80126f0:	2180      	movs	r1, #128	; 0x80
 80126f2:	0020      	movs	r0, r4
 80126f4:	f7ff ff5c 	bl	80125b0 <UART_WaitOnFlagUntilTimeout>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	d127      	bne.n	801274c <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126fc:	68a3      	ldr	r3, [r4, #8]
 80126fe:	42ab      	cmp	r3, r5
 8012700:	d1eb      	bne.n	80126da <HAL_UART_Transmit+0x5a>
 8012702:	6923      	ldr	r3, [r4, #16]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d1e8      	bne.n	80126da <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012708:	8833      	ldrh	r3, [r6, #0]
 801270a:	05db      	lsls	r3, r3, #23
 801270c:	0ddb      	lsrs	r3, r3, #23
 801270e:	6822      	ldr	r2, [r4, #0]
 8012710:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012712:	3602      	adds	r6, #2
 8012714:	e7e5      	b.n	80126e2 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012716:	9b01      	ldr	r3, [sp, #4]
 8012718:	2140      	movs	r1, #64	; 0x40
 801271a:	0020      	movs	r0, r4
 801271c:	f7ff ff48 	bl	80125b0 <UART_WaitOnFlagUntilTimeout>
 8012720:	2800      	cmp	r0, #0
 8012722:	d115      	bne.n	8012750 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012724:	2369      	movs	r3, #105	; 0x69
 8012726:	5ce3      	ldrb	r3, [r4, r3]
 8012728:	2b32      	cmp	r3, #50	; 0x32
 801272a:	d006      	beq.n	801273a <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 801272c:	2369      	movs	r3, #105	; 0x69
 801272e:	2201      	movs	r2, #1
 8012730:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012732:	2368      	movs	r3, #104	; 0x68
 8012734:	2200      	movs	r2, #0
 8012736:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012738:	e004      	b.n	8012744 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801273a:	3337      	adds	r3, #55	; 0x37
 801273c:	2222      	movs	r2, #34	; 0x22
 801273e:	54e2      	strb	r2, [r4, r3]
 8012740:	e7f7      	b.n	8012732 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8012742:	2001      	movs	r0, #1
}
 8012744:	b003      	add	sp, #12
 8012746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8012748:	2002      	movs	r0, #2
 801274a:	e7fb      	b.n	8012744 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 801274c:	2003      	movs	r0, #3
 801274e:	e7f9      	b.n	8012744 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012750:	2003      	movs	r0, #3
 8012752:	e7f7      	b.n	8012744 <HAL_UART_Transmit+0xc4>

08012754 <UART_CheckIdleState>:
{
 8012754:	b510      	push	{r4, lr}
 8012756:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012758:	2300      	movs	r3, #0
 801275a:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 801275c:	6803      	ldr	r3, [r0, #0]
 801275e:	4a18      	ldr	r2, [pc, #96]	; (80127c0 <UART_CheckIdleState+0x6c>)
 8012760:	4293      	cmp	r3, r2
 8012762:	d005      	beq.n	8012770 <UART_CheckIdleState+0x1c>
 8012764:	4a17      	ldr	r2, [pc, #92]	; (80127c4 <UART_CheckIdleState+0x70>)
 8012766:	4293      	cmp	r3, r2
 8012768:	d002      	beq.n	8012770 <UART_CheckIdleState+0x1c>
 801276a:	4a17      	ldr	r2, [pc, #92]	; (80127c8 <UART_CheckIdleState+0x74>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d106      	bne.n	801277e <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	071b      	lsls	r3, r3, #28
 8012774:	d40b      	bmi.n	801278e <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012776:	6823      	ldr	r3, [r4, #0]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	075b      	lsls	r3, r3, #29
 801277c:	d413      	bmi.n	80127a6 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 801277e:	2369      	movs	r3, #105	; 0x69
 8012780:	2201      	movs	r2, #1
 8012782:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012784:	3b01      	subs	r3, #1
 8012786:	2200      	movs	r2, #0
 8012788:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801278a:	2000      	movs	r0, #0
}
 801278c:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801278e:	23fa      	movs	r3, #250	; 0xfa
 8012790:	2180      	movs	r1, #128	; 0x80
 8012792:	009b      	lsls	r3, r3, #2
 8012794:	2200      	movs	r2, #0
 8012796:	0389      	lsls	r1, r1, #14
 8012798:	0020      	movs	r0, r4
 801279a:	f7ff ff09 	bl	80125b0 <UART_WaitOnFlagUntilTimeout>
 801279e:	2800      	cmp	r0, #0
 80127a0:	d0e9      	beq.n	8012776 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80127a2:	2003      	movs	r0, #3
 80127a4:	e7f2      	b.n	801278c <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80127a6:	23fa      	movs	r3, #250	; 0xfa
 80127a8:	2180      	movs	r1, #128	; 0x80
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	2200      	movs	r2, #0
 80127ae:	03c9      	lsls	r1, r1, #15
 80127b0:	0020      	movs	r0, r4
 80127b2:	f7ff fefd 	bl	80125b0 <UART_WaitOnFlagUntilTimeout>
 80127b6:	2800      	cmp	r0, #0
 80127b8:	d0e1      	beq.n	801277e <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80127ba:	2003      	movs	r0, #3
 80127bc:	e7e6      	b.n	801278c <UART_CheckIdleState+0x38>
 80127be:	46c0      	nop			; (mov r8, r8)
 80127c0:	40013800 	.word	0x40013800
 80127c4:	40004400 	.word	0x40004400
 80127c8:	40004800 	.word	0x40004800

080127cc <HAL_UART_Init>:
{
 80127cc:	b510      	push	{r4, lr}
 80127ce:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80127d0:	d030      	beq.n	8012834 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80127d2:	2369      	movs	r3, #105	; 0x69
 80127d4:	5cc3      	ldrb	r3, [r0, r3]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d022      	beq.n	8012820 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80127da:	2369      	movs	r3, #105	; 0x69
 80127dc:	2202      	movs	r2, #2
 80127de:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80127e0:	6822      	ldr	r2, [r4, #0]
 80127e2:	6813      	ldr	r3, [r2, #0]
 80127e4:	2101      	movs	r1, #1
 80127e6:	438b      	bics	r3, r1
 80127e8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80127ea:	0020      	movs	r0, r4
 80127ec:	f7ff fd4c 	bl	8012288 <UART_SetConfig>
 80127f0:	2801      	cmp	r0, #1
 80127f2:	d014      	beq.n	801281e <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80127f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d118      	bne.n	801282c <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80127fa:	6822      	ldr	r2, [r4, #0]
 80127fc:	6853      	ldr	r3, [r2, #4]
 80127fe:	490e      	ldr	r1, [pc, #56]	; (8012838 <HAL_UART_Init+0x6c>)
 8012800:	400b      	ands	r3, r1
 8012802:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012804:	6822      	ldr	r2, [r4, #0]
 8012806:	6893      	ldr	r3, [r2, #8]
 8012808:	212a      	movs	r1, #42	; 0x2a
 801280a:	438b      	bics	r3, r1
 801280c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 801280e:	6822      	ldr	r2, [r4, #0]
 8012810:	6813      	ldr	r3, [r2, #0]
 8012812:	3929      	subs	r1, #41	; 0x29
 8012814:	430b      	orrs	r3, r1
 8012816:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012818:	0020      	movs	r0, r4
 801281a:	f7ff ff9b 	bl	8012754 <UART_CheckIdleState>
}
 801281e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012820:	3368      	adds	r3, #104	; 0x68
 8012822:	2200      	movs	r2, #0
 8012824:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8012826:	f7fa fc7f 	bl	800d128 <HAL_UART_MspInit>
 801282a:	e7d6      	b.n	80127da <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 801282c:	0020      	movs	r0, r4
 801282e:	f7ff fe4f 	bl	80124d0 <UART_AdvFeatureConfig>
 8012832:	e7e2      	b.n	80127fa <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012834:	2001      	movs	r0, #1
 8012836:	e7f2      	b.n	801281e <HAL_UART_Init+0x52>
 8012838:	ffffb7ff 	.word	0xffffb7ff

0801283c <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801283c:	2369      	movs	r3, #105	; 0x69
 801283e:	5cc3      	ldrb	r3, [r0, r3]
 8012840:	2b12      	cmp	r3, #18
 8012842:	d004      	beq.n	801284e <UART_Transmit_IT+0x12>
 8012844:	2369      	movs	r3, #105	; 0x69
 8012846:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8012848:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801284a:	2a32      	cmp	r2, #50	; 0x32
 801284c:	d113      	bne.n	8012876 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 801284e:	2352      	movs	r3, #82	; 0x52
 8012850:	5ac3      	ldrh	r3, [r0, r3]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d011      	beq.n	801287a <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012856:	2380      	movs	r3, #128	; 0x80
 8012858:	015b      	lsls	r3, r3, #5
 801285a:	6882      	ldr	r2, [r0, #8]
 801285c:	429a      	cmp	r2, r3
 801285e:	d018      	beq.n	8012892 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012860:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012862:	1c5a      	adds	r2, r3, #1
 8012864:	64c2      	str	r2, [r0, #76]	; 0x4c
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	6802      	ldr	r2, [r0, #0]
 801286a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 801286c:	2252      	movs	r2, #82	; 0x52
 801286e:	5a83      	ldrh	r3, [r0, r2]
 8012870:	3b01      	subs	r3, #1
 8012872:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8012874:	2300      	movs	r3, #0
  }
}
 8012876:	0018      	movs	r0, r3
 8012878:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801287a:	6802      	ldr	r2, [r0, #0]
 801287c:	6813      	ldr	r3, [r2, #0]
 801287e:	2180      	movs	r1, #128	; 0x80
 8012880:	438b      	bics	r3, r1
 8012882:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012884:	6802      	ldr	r2, [r0, #0]
 8012886:	6813      	ldr	r3, [r2, #0]
 8012888:	3940      	subs	r1, #64	; 0x40
 801288a:	430b      	orrs	r3, r1
 801288c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 801288e:	2300      	movs	r3, #0
 8012890:	e7f1      	b.n	8012876 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012892:	6903      	ldr	r3, [r0, #16]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d1e3      	bne.n	8012860 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012898:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801289a:	881b      	ldrh	r3, [r3, #0]
 801289c:	05db      	lsls	r3, r3, #23
 801289e:	0ddb      	lsrs	r3, r3, #23
 80128a0:	6802      	ldr	r2, [r0, #0]
 80128a2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80128a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80128a6:	3302      	adds	r3, #2
 80128a8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80128aa:	e7df      	b.n	801286c <UART_Transmit_IT+0x30>

080128ac <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80128ac:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80128ae:	6802      	ldr	r2, [r0, #0]
 80128b0:	6813      	ldr	r3, [r2, #0]
 80128b2:	2140      	movs	r1, #64	; 0x40
 80128b4:	438b      	bics	r3, r1
 80128b6:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80128b8:	2369      	movs	r3, #105	; 0x69
 80128ba:	5cc3      	ldrb	r3, [r0, r3]
 80128bc:	2b32      	cmp	r3, #50	; 0x32
 80128be:	d00a      	beq.n	80128d6 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80128c0:	6801      	ldr	r1, [r0, #0]
 80128c2:	688b      	ldr	r3, [r1, #8]
 80128c4:	2201      	movs	r2, #1
 80128c6:	4393      	bics	r3, r2
 80128c8:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80128ca:	2369      	movs	r3, #105	; 0x69
 80128cc:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80128ce:	f7fa f951 	bl	800cb74 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80128d2:	2000      	movs	r0, #0
 80128d4:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80128d6:	3337      	adds	r3, #55	; 0x37
 80128d8:	2222      	movs	r2, #34	; 0x22
 80128da:	54c2      	strb	r2, [r0, r3]
 80128dc:	e7f7      	b.n	80128ce <UART_EndTransmit_IT+0x22>
	...

080128e0 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80128e0:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80128e2:	2369      	movs	r3, #105	; 0x69
 80128e4:	5cc3      	ldrb	r3, [r0, r3]
 80128e6:	2b22      	cmp	r3, #34	; 0x22
 80128e8:	d004      	beq.n	80128f4 <UART_Receive_IT+0x14>
 80128ea:	2369      	movs	r3, #105	; 0x69
 80128ec:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80128ee:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80128f0:	2b32      	cmp	r3, #50	; 0x32
 80128f2:	d12d      	bne.n	8012950 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 80128f4:	235c      	movs	r3, #92	; 0x5c
 80128f6:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128f8:	2280      	movs	r2, #128	; 0x80
 80128fa:	0152      	lsls	r2, r2, #5
 80128fc:	6883      	ldr	r3, [r0, #8]
 80128fe:	4293      	cmp	r3, r2
 8012900:	d028      	beq.n	8012954 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012902:	6803      	ldr	r3, [r0, #0]
 8012904:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012906:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012908:	1c54      	adds	r4, r2, #1
 801290a:	6544      	str	r4, [r0, #84]	; 0x54
 801290c:	400b      	ands	r3, r1
 801290e:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012910:	225a      	movs	r2, #90	; 0x5a
 8012912:	5a83      	ldrh	r3, [r0, r2]
 8012914:	3b01      	subs	r3, #1
 8012916:	b29b      	uxth	r3, r3
 8012918:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801291a:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 801291c:	2b00      	cmp	r3, #0
 801291e:	d117      	bne.n	8012950 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012920:	6802      	ldr	r2, [r0, #0]
 8012922:	6813      	ldr	r3, [r2, #0]
 8012924:	2120      	movs	r1, #32
 8012926:	438b      	bics	r3, r1
 8012928:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801292a:	2369      	movs	r3, #105	; 0x69
 801292c:	5cc3      	ldrb	r3, [r0, r3]
 801292e:	2b32      	cmp	r3, #50	; 0x32
 8012930:	d01c      	beq.n	801296c <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012932:	6802      	ldr	r2, [r0, #0]
 8012934:	6813      	ldr	r3, [r2, #0]
 8012936:	490f      	ldr	r1, [pc, #60]	; (8012974 <UART_Receive_IT+0x94>)
 8012938:	400b      	ands	r3, r1
 801293a:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801293c:	6801      	ldr	r1, [r0, #0]
 801293e:	688b      	ldr	r3, [r1, #8]
 8012940:	2201      	movs	r2, #1
 8012942:	4393      	bics	r3, r2
 8012944:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8012946:	2369      	movs	r3, #105	; 0x69
 8012948:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 801294a:	f7fa f951 	bl	800cbf0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 801294e:	2200      	movs	r2, #0
  }
}
 8012950:	0010      	movs	r0, r2
 8012952:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012954:	6903      	ldr	r3, [r0, #16]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1d3      	bne.n	8012902 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801295a:	6803      	ldr	r3, [r0, #0]
 801295c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801295e:	400b      	ands	r3, r1
 8012960:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012962:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012964:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012966:	3302      	adds	r3, #2
 8012968:	6543      	str	r3, [r0, #84]	; 0x54
 801296a:	e7d1      	b.n	8012910 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 801296c:	3337      	adds	r3, #55	; 0x37
 801296e:	2212      	movs	r2, #18
 8012970:	54c2      	strb	r2, [r0, r3]
 8012972:	e7ea      	b.n	801294a <UART_Receive_IT+0x6a>
 8012974:	fffffeff 	.word	0xfffffeff

08012978 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012978:	4770      	bx	lr

0801297a <HAL_UART_IRQHandler>:
{
 801297a:	b510      	push	{r4, lr}
 801297c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801297e:	6803      	ldr	r3, [r0, #0]
 8012980:	69da      	ldr	r2, [r3, #28]
 8012982:	07d2      	lsls	r2, r2, #31
 8012984:	d509      	bpl.n	801299a <HAL_UART_IRQHandler+0x20>
 8012986:	681a      	ldr	r2, [r3, #0]
 8012988:	05d2      	lsls	r2, r2, #23
 801298a:	d506      	bpl.n	801299a <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 801298c:	2201      	movs	r2, #1
 801298e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012990:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012992:	4313      	orrs	r3, r2
 8012994:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012996:	2369      	movs	r3, #105	; 0x69
 8012998:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	69da      	ldr	r2, [r3, #28]
 801299e:	0792      	lsls	r2, r2, #30
 80129a0:	d50b      	bpl.n	80129ba <HAL_UART_IRQHandler+0x40>
 80129a2:	689a      	ldr	r2, [r3, #8]
 80129a4:	07d2      	lsls	r2, r2, #31
 80129a6:	d508      	bpl.n	80129ba <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80129a8:	2202      	movs	r2, #2
 80129aa:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80129ae:	3202      	adds	r2, #2
 80129b0:	4313      	orrs	r3, r2
 80129b2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129b4:	2369      	movs	r3, #105	; 0x69
 80129b6:	3a03      	subs	r2, #3
 80129b8:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80129ba:	6823      	ldr	r3, [r4, #0]
 80129bc:	69da      	ldr	r2, [r3, #28]
 80129be:	0752      	lsls	r2, r2, #29
 80129c0:	d50b      	bpl.n	80129da <HAL_UART_IRQHandler+0x60>
 80129c2:	689a      	ldr	r2, [r3, #8]
 80129c4:	07d2      	lsls	r2, r2, #31
 80129c6:	d508      	bpl.n	80129da <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80129c8:	2204      	movs	r2, #4
 80129ca:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80129cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80129ce:	3a02      	subs	r2, #2
 80129d0:	4313      	orrs	r3, r2
 80129d2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129d4:	2369      	movs	r3, #105	; 0x69
 80129d6:	3a01      	subs	r2, #1
 80129d8:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80129da:	6823      	ldr	r3, [r4, #0]
 80129dc:	69da      	ldr	r2, [r3, #28]
 80129de:	0712      	lsls	r2, r2, #28
 80129e0:	d50a      	bpl.n	80129f8 <HAL_UART_IRQHandler+0x7e>
 80129e2:	689a      	ldr	r2, [r3, #8]
 80129e4:	07d2      	lsls	r2, r2, #31
 80129e6:	d507      	bpl.n	80129f8 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80129e8:	2208      	movs	r2, #8
 80129ea:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80129ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80129ee:	4313      	orrs	r3, r2
 80129f0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129f2:	2369      	movs	r3, #105	; 0x69
 80129f4:	3a07      	subs	r2, #7
 80129f6:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80129f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d11c      	bne.n	8012a38 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80129fe:	6823      	ldr	r3, [r4, #0]
 8012a00:	69da      	ldr	r2, [r3, #28]
 8012a02:	02d2      	lsls	r2, r2, #11
 8012a04:	d502      	bpl.n	8012a0c <HAL_UART_IRQHandler+0x92>
 8012a06:	689a      	ldr	r2, [r3, #8]
 8012a08:	0252      	lsls	r2, r2, #9
 8012a0a:	d419      	bmi.n	8012a40 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012a0c:	6823      	ldr	r3, [r4, #0]
 8012a0e:	69da      	ldr	r2, [r3, #28]
 8012a10:	0692      	lsls	r2, r2, #26
 8012a12:	d502      	bpl.n	8012a1a <HAL_UART_IRQHandler+0xa0>
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	069b      	lsls	r3, r3, #26
 8012a18:	d41c      	bmi.n	8012a54 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012a1a:	6823      	ldr	r3, [r4, #0]
 8012a1c:	69da      	ldr	r2, [r3, #28]
 8012a1e:	0612      	lsls	r2, r2, #24
 8012a20:	d502      	bpl.n	8012a28 <HAL_UART_IRQHandler+0xae>
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	061b      	lsls	r3, r3, #24
 8012a26:	d41e      	bmi.n	8012a66 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012a28:	6823      	ldr	r3, [r4, #0]
 8012a2a:	69da      	ldr	r2, [r3, #28]
 8012a2c:	0652      	lsls	r2, r2, #25
 8012a2e:	d502      	bpl.n	8012a36 <HAL_UART_IRQHandler+0xbc>
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	065b      	lsls	r3, r3, #25
 8012a34:	d41b      	bmi.n	8012a6e <HAL_UART_IRQHandler+0xf4>
}
 8012a36:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8012a38:	0020      	movs	r0, r4
 8012a3a:	f7fa f8b3 	bl	800cba4 <HAL_UART_ErrorCallback>
 8012a3e:	e7de      	b.n	80129fe <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012a40:	2280      	movs	r2, #128	; 0x80
 8012a42:	0352      	lsls	r2, r2, #13
 8012a44:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012a46:	2369      	movs	r3, #105	; 0x69
 8012a48:	2201      	movs	r2, #1
 8012a4a:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012a4c:	0020      	movs	r0, r4
 8012a4e:	f7ff ff93 	bl	8012978 <HAL_UARTEx_WakeupCallback>
 8012a52:	e7db      	b.n	8012a0c <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8012a54:	0020      	movs	r0, r4
 8012a56:	f7ff ff43 	bl	80128e0 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a5a:	6822      	ldr	r2, [r4, #0]
 8012a5c:	6993      	ldr	r3, [r2, #24]
 8012a5e:	2108      	movs	r1, #8
 8012a60:	430b      	orrs	r3, r1
 8012a62:	6193      	str	r3, [r2, #24]
 8012a64:	e7d9      	b.n	8012a1a <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8012a66:	0020      	movs	r0, r4
 8012a68:	f7ff fee8 	bl	801283c <UART_Transmit_IT>
 8012a6c:	e7dc      	b.n	8012a28 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8012a6e:	0020      	movs	r0, r4
 8012a70:	f7ff ff1c 	bl	80128ac <UART_EndTransmit_IT>
}
 8012a74:	e7df      	b.n	8012a36 <HAL_UART_IRQHandler+0xbc>

08012a76 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012a76:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012a78:	f7f1 fdf8 	bl	800466c <Module_Init>
 8012a7c:	e7fe      	b.n	8012a7c <main+0x6>

08012a7e <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012a7e:	e7fe      	b.n	8012a7e <UserTask>

08012a80 <atof>:
 8012a80:	b510      	push	{r4, lr}
 8012a82:	2100      	movs	r1, #0
 8012a84:	f001 fb3e 	bl	8014104 <strtod>
 8012a88:	bd10      	pop	{r4, pc}

08012a8a <atoi>:
 8012a8a:	b510      	push	{r4, lr}
 8012a8c:	220a      	movs	r2, #10
 8012a8e:	2100      	movs	r1, #0
 8012a90:	f001 fc04 	bl	801429c <strtol>
 8012a94:	bd10      	pop	{r4, pc}

08012a96 <atol>:
 8012a96:	b510      	push	{r4, lr}
 8012a98:	220a      	movs	r2, #10
 8012a9a:	2100      	movs	r1, #0
 8012a9c:	f001 fbfe 	bl	801429c <strtol>
 8012aa0:	bd10      	pop	{r4, pc}
	...

08012aa4 <__libc_init_array>:
 8012aa4:	b570      	push	{r4, r5, r6, lr}
 8012aa6:	2600      	movs	r6, #0
 8012aa8:	4d0c      	ldr	r5, [pc, #48]	; (8012adc <__libc_init_array+0x38>)
 8012aaa:	4c0d      	ldr	r4, [pc, #52]	; (8012ae0 <__libc_init_array+0x3c>)
 8012aac:	1b64      	subs	r4, r4, r5
 8012aae:	10a4      	asrs	r4, r4, #2
 8012ab0:	42a6      	cmp	r6, r4
 8012ab2:	d109      	bne.n	8012ac8 <__libc_init_array+0x24>
 8012ab4:	2600      	movs	r6, #0
 8012ab6:	f004 fe6d 	bl	8017794 <_init>
 8012aba:	4d0a      	ldr	r5, [pc, #40]	; (8012ae4 <__libc_init_array+0x40>)
 8012abc:	4c0a      	ldr	r4, [pc, #40]	; (8012ae8 <__libc_init_array+0x44>)
 8012abe:	1b64      	subs	r4, r4, r5
 8012ac0:	10a4      	asrs	r4, r4, #2
 8012ac2:	42a6      	cmp	r6, r4
 8012ac4:	d105      	bne.n	8012ad2 <__libc_init_array+0x2e>
 8012ac6:	bd70      	pop	{r4, r5, r6, pc}
 8012ac8:	00b3      	lsls	r3, r6, #2
 8012aca:	58eb      	ldr	r3, [r5, r3]
 8012acc:	4798      	blx	r3
 8012ace:	3601      	adds	r6, #1
 8012ad0:	e7ee      	b.n	8012ab0 <__libc_init_array+0xc>
 8012ad2:	00b3      	lsls	r3, r6, #2
 8012ad4:	58eb      	ldr	r3, [r5, r3]
 8012ad6:	4798      	blx	r3
 8012ad8:	3601      	adds	r6, #1
 8012ada:	e7f2      	b.n	8012ac2 <__libc_init_array+0x1e>
 8012adc:	0801a914 	.word	0x0801a914
 8012ae0:	0801a914 	.word	0x0801a914
 8012ae4:	0801a914 	.word	0x0801a914
 8012ae8:	0801a91c 	.word	0x0801a91c

08012aec <__locale_ctype_ptr_l>:
 8012aec:	30ec      	adds	r0, #236	; 0xec
 8012aee:	6800      	ldr	r0, [r0, #0]
 8012af0:	4770      	bx	lr
	...

08012af4 <__locale_ctype_ptr>:
 8012af4:	4b04      	ldr	r3, [pc, #16]	; (8012b08 <__locale_ctype_ptr+0x14>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d100      	bne.n	8012b00 <__locale_ctype_ptr+0xc>
 8012afe:	4b03      	ldr	r3, [pc, #12]	; (8012b0c <__locale_ctype_ptr+0x18>)
 8012b00:	33ec      	adds	r3, #236	; 0xec
 8012b02:	6818      	ldr	r0, [r3, #0]
 8012b04:	4770      	bx	lr
 8012b06:	46c0      	nop			; (mov r8, r8)
 8012b08:	200000a8 	.word	0x200000a8
 8012b0c:	200004d8 	.word	0x200004d8

08012b10 <malloc>:
 8012b10:	b510      	push	{r4, lr}
 8012b12:	4b03      	ldr	r3, [pc, #12]	; (8012b20 <malloc+0x10>)
 8012b14:	0001      	movs	r1, r0
 8012b16:	6818      	ldr	r0, [r3, #0]
 8012b18:	f000 f80e 	bl	8012b38 <_malloc_r>
 8012b1c:	bd10      	pop	{r4, pc}
 8012b1e:	46c0      	nop			; (mov r8, r8)
 8012b20:	200000a8 	.word	0x200000a8

08012b24 <free>:
 8012b24:	b510      	push	{r4, lr}
 8012b26:	4b03      	ldr	r3, [pc, #12]	; (8012b34 <free+0x10>)
 8012b28:	0001      	movs	r1, r0
 8012b2a:	6818      	ldr	r0, [r3, #0]
 8012b2c:	f003 fd10 	bl	8016550 <_free_r>
 8012b30:	bd10      	pop	{r4, pc}
 8012b32:	46c0      	nop			; (mov r8, r8)
 8012b34:	200000a8 	.word	0x200000a8

08012b38 <_malloc_r>:
 8012b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b3a:	000d      	movs	r5, r1
 8012b3c:	b085      	sub	sp, #20
 8012b3e:	350b      	adds	r5, #11
 8012b40:	9001      	str	r0, [sp, #4]
 8012b42:	2d16      	cmp	r5, #22
 8012b44:	d908      	bls.n	8012b58 <_malloc_r+0x20>
 8012b46:	2307      	movs	r3, #7
 8012b48:	439d      	bics	r5, r3
 8012b4a:	d506      	bpl.n	8012b5a <_malloc_r+0x22>
 8012b4c:	230c      	movs	r3, #12
 8012b4e:	9a01      	ldr	r2, [sp, #4]
 8012b50:	6013      	str	r3, [r2, #0]
 8012b52:	2000      	movs	r0, #0
 8012b54:	b005      	add	sp, #20
 8012b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b58:	2510      	movs	r5, #16
 8012b5a:	428d      	cmp	r5, r1
 8012b5c:	d3f6      	bcc.n	8012b4c <_malloc_r+0x14>
 8012b5e:	9801      	ldr	r0, [sp, #4]
 8012b60:	f000 fa34 	bl	8012fcc <__malloc_lock>
 8012b64:	23f8      	movs	r3, #248	; 0xf8
 8012b66:	33ff      	adds	r3, #255	; 0xff
 8012b68:	4ac4      	ldr	r2, [pc, #784]	; (8012e7c <_malloc_r+0x344>)
 8012b6a:	429d      	cmp	r5, r3
 8012b6c:	d820      	bhi.n	8012bb0 <_malloc_r+0x78>
 8012b6e:	0029      	movs	r1, r5
 8012b70:	3108      	adds	r1, #8
 8012b72:	1851      	adds	r1, r2, r1
 8012b74:	0008      	movs	r0, r1
 8012b76:	684c      	ldr	r4, [r1, #4]
 8012b78:	3808      	subs	r0, #8
 8012b7a:	08eb      	lsrs	r3, r5, #3
 8012b7c:	4284      	cmp	r4, r0
 8012b7e:	d104      	bne.n	8012b8a <_malloc_r+0x52>
 8012b80:	68cc      	ldr	r4, [r1, #12]
 8012b82:	3302      	adds	r3, #2
 8012b84:	469c      	mov	ip, r3
 8012b86:	42a1      	cmp	r1, r4
 8012b88:	d02a      	beq.n	8012be0 <_malloc_r+0xa8>
 8012b8a:	2303      	movs	r3, #3
 8012b8c:	6862      	ldr	r2, [r4, #4]
 8012b8e:	68a1      	ldr	r1, [r4, #8]
 8012b90:	439a      	bics	r2, r3
 8012b92:	0013      	movs	r3, r2
 8012b94:	68e2      	ldr	r2, [r4, #12]
 8012b96:	18e3      	adds	r3, r4, r3
 8012b98:	60ca      	str	r2, [r1, #12]
 8012b9a:	6091      	str	r1, [r2, #8]
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	6859      	ldr	r1, [r3, #4]
 8012ba0:	430a      	orrs	r2, r1
 8012ba2:	605a      	str	r2, [r3, #4]
 8012ba4:	9801      	ldr	r0, [sp, #4]
 8012ba6:	f000 fa19 	bl	8012fdc <__malloc_unlock>
 8012baa:	0020      	movs	r0, r4
 8012bac:	3008      	adds	r0, #8
 8012bae:	e7d1      	b.n	8012b54 <_malloc_r+0x1c>
 8012bb0:	0a69      	lsrs	r1, r5, #9
 8012bb2:	233f      	movs	r3, #63	; 0x3f
 8012bb4:	2900      	cmp	r1, #0
 8012bb6:	d003      	beq.n	8012bc0 <_malloc_r+0x88>
 8012bb8:	2904      	cmp	r1, #4
 8012bba:	d828      	bhi.n	8012c0e <_malloc_r+0xd6>
 8012bbc:	09ab      	lsrs	r3, r5, #6
 8012bbe:	3338      	adds	r3, #56	; 0x38
 8012bc0:	2103      	movs	r1, #3
 8012bc2:	468c      	mov	ip, r1
 8012bc4:	00d8      	lsls	r0, r3, #3
 8012bc6:	1880      	adds	r0, r0, r2
 8012bc8:	68c4      	ldr	r4, [r0, #12]
 8012bca:	4284      	cmp	r4, r0
 8012bcc:	d006      	beq.n	8012bdc <_malloc_r+0xa4>
 8012bce:	4666      	mov	r6, ip
 8012bd0:	6861      	ldr	r1, [r4, #4]
 8012bd2:	43b1      	bics	r1, r6
 8012bd4:	1b4f      	subs	r7, r1, r5
 8012bd6:	2f0f      	cmp	r7, #15
 8012bd8:	dd31      	ble.n	8012c3e <_malloc_r+0x106>
 8012bda:	3b01      	subs	r3, #1
 8012bdc:	3301      	adds	r3, #1
 8012bde:	469c      	mov	ip, r3
 8012be0:	6914      	ldr	r4, [r2, #16]
 8012be2:	49a7      	ldr	r1, [pc, #668]	; (8012e80 <_malloc_r+0x348>)
 8012be4:	428c      	cmp	r4, r1
 8012be6:	d055      	beq.n	8012c94 <_malloc_r+0x15c>
 8012be8:	2303      	movs	r3, #3
 8012bea:	6860      	ldr	r0, [r4, #4]
 8012bec:	4398      	bics	r0, r3
 8012bee:	0003      	movs	r3, r0
 8012bf0:	1b46      	subs	r6, r0, r5
 8012bf2:	2e0f      	cmp	r6, #15
 8012bf4:	dd31      	ble.n	8012c5a <_malloc_r+0x122>
 8012bf6:	2701      	movs	r7, #1
 8012bf8:	1960      	adds	r0, r4, r5
 8012bfa:	433d      	orrs	r5, r7
 8012bfc:	4337      	orrs	r7, r6
 8012bfe:	6065      	str	r5, [r4, #4]
 8012c00:	6150      	str	r0, [r2, #20]
 8012c02:	6110      	str	r0, [r2, #16]
 8012c04:	60c1      	str	r1, [r0, #12]
 8012c06:	6081      	str	r1, [r0, #8]
 8012c08:	6047      	str	r7, [r0, #4]
 8012c0a:	50e6      	str	r6, [r4, r3]
 8012c0c:	e7ca      	b.n	8012ba4 <_malloc_r+0x6c>
 8012c0e:	2914      	cmp	r1, #20
 8012c10:	d802      	bhi.n	8012c18 <_malloc_r+0xe0>
 8012c12:	000b      	movs	r3, r1
 8012c14:	335b      	adds	r3, #91	; 0x5b
 8012c16:	e7d3      	b.n	8012bc0 <_malloc_r+0x88>
 8012c18:	2954      	cmp	r1, #84	; 0x54
 8012c1a:	d802      	bhi.n	8012c22 <_malloc_r+0xea>
 8012c1c:	0b2b      	lsrs	r3, r5, #12
 8012c1e:	336e      	adds	r3, #110	; 0x6e
 8012c20:	e7ce      	b.n	8012bc0 <_malloc_r+0x88>
 8012c22:	23aa      	movs	r3, #170	; 0xaa
 8012c24:	005b      	lsls	r3, r3, #1
 8012c26:	4299      	cmp	r1, r3
 8012c28:	d802      	bhi.n	8012c30 <_malloc_r+0xf8>
 8012c2a:	0beb      	lsrs	r3, r5, #15
 8012c2c:	3377      	adds	r3, #119	; 0x77
 8012c2e:	e7c7      	b.n	8012bc0 <_malloc_r+0x88>
 8012c30:	4894      	ldr	r0, [pc, #592]	; (8012e84 <_malloc_r+0x34c>)
 8012c32:	237e      	movs	r3, #126	; 0x7e
 8012c34:	4281      	cmp	r1, r0
 8012c36:	d8c3      	bhi.n	8012bc0 <_malloc_r+0x88>
 8012c38:	0cab      	lsrs	r3, r5, #18
 8012c3a:	337c      	adds	r3, #124	; 0x7c
 8012c3c:	e7c0      	b.n	8012bc0 <_malloc_r+0x88>
 8012c3e:	68e6      	ldr	r6, [r4, #12]
 8012c40:	2f00      	cmp	r7, #0
 8012c42:	db08      	blt.n	8012c56 <_malloc_r+0x11e>
 8012c44:	68a3      	ldr	r3, [r4, #8]
 8012c46:	1861      	adds	r1, r4, r1
 8012c48:	60de      	str	r6, [r3, #12]
 8012c4a:	60b3      	str	r3, [r6, #8]
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	684a      	ldr	r2, [r1, #4]
 8012c50:	4313      	orrs	r3, r2
 8012c52:	604b      	str	r3, [r1, #4]
 8012c54:	e7a6      	b.n	8012ba4 <_malloc_r+0x6c>
 8012c56:	0034      	movs	r4, r6
 8012c58:	e7b7      	b.n	8012bca <_malloc_r+0x92>
 8012c5a:	6151      	str	r1, [r2, #20]
 8012c5c:	6111      	str	r1, [r2, #16]
 8012c5e:	2e00      	cmp	r6, #0
 8012c60:	db05      	blt.n	8012c6e <_malloc_r+0x136>
 8012c62:	2101      	movs	r1, #1
 8012c64:	1823      	adds	r3, r4, r0
 8012c66:	685a      	ldr	r2, [r3, #4]
 8012c68:	4311      	orrs	r1, r2
 8012c6a:	6059      	str	r1, [r3, #4]
 8012c6c:	e79a      	b.n	8012ba4 <_malloc_r+0x6c>
 8012c6e:	4986      	ldr	r1, [pc, #536]	; (8012e88 <_malloc_r+0x350>)
 8012c70:	6857      	ldr	r7, [r2, #4]
 8012c72:	4288      	cmp	r0, r1
 8012c74:	d900      	bls.n	8012c78 <_malloc_r+0x140>
 8012c76:	e090      	b.n	8012d9a <_malloc_r+0x262>
 8012c78:	08c3      	lsrs	r3, r0, #3
 8012c7a:	39ff      	subs	r1, #255	; 0xff
 8012c7c:	1098      	asrs	r0, r3, #2
 8012c7e:	39ff      	subs	r1, #255	; 0xff
 8012c80:	4081      	lsls	r1, r0
 8012c82:	00db      	lsls	r3, r3, #3
 8012c84:	4339      	orrs	r1, r7
 8012c86:	6051      	str	r1, [r2, #4]
 8012c88:	189a      	adds	r2, r3, r2
 8012c8a:	6893      	ldr	r3, [r2, #8]
 8012c8c:	60e2      	str	r2, [r4, #12]
 8012c8e:	60a3      	str	r3, [r4, #8]
 8012c90:	6094      	str	r4, [r2, #8]
 8012c92:	60dc      	str	r4, [r3, #12]
 8012c94:	4663      	mov	r3, ip
 8012c96:	2201      	movs	r2, #1
 8012c98:	4978      	ldr	r1, [pc, #480]	; (8012e7c <_malloc_r+0x344>)
 8012c9a:	109b      	asrs	r3, r3, #2
 8012c9c:	6848      	ldr	r0, [r1, #4]
 8012c9e:	409a      	lsls	r2, r3
 8012ca0:	4290      	cmp	r0, r2
 8012ca2:	d32d      	bcc.n	8012d00 <_malloc_r+0x1c8>
 8012ca4:	4202      	tst	r2, r0
 8012ca6:	d109      	bne.n	8012cbc <_malloc_r+0x184>
 8012ca8:	2303      	movs	r3, #3
 8012caa:	4664      	mov	r4, ip
 8012cac:	439c      	bics	r4, r3
 8012cae:	0023      	movs	r3, r4
 8012cb0:	3304      	adds	r3, #4
 8012cb2:	469c      	mov	ip, r3
 8012cb4:	0052      	lsls	r2, r2, #1
 8012cb6:	4202      	tst	r2, r0
 8012cb8:	d100      	bne.n	8012cbc <_malloc_r+0x184>
 8012cba:	e0a4      	b.n	8012e06 <_malloc_r+0x2ce>
 8012cbc:	4663      	mov	r3, ip
 8012cbe:	00db      	lsls	r3, r3, #3
 8012cc0:	18cb      	adds	r3, r1, r3
 8012cc2:	9303      	str	r3, [sp, #12]
 8012cc4:	001f      	movs	r7, r3
 8012cc6:	4663      	mov	r3, ip
 8012cc8:	9302      	str	r3, [sp, #8]
 8012cca:	68fc      	ldr	r4, [r7, #12]
 8012ccc:	42bc      	cmp	r4, r7
 8012cce:	d000      	beq.n	8012cd2 <_malloc_r+0x19a>
 8012cd0:	e09c      	b.n	8012e0c <_malloc_r+0x2d4>
 8012cd2:	2003      	movs	r0, #3
 8012cd4:	9b02      	ldr	r3, [sp, #8]
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	3301      	adds	r3, #1
 8012cda:	9302      	str	r3, [sp, #8]
 8012cdc:	4203      	tst	r3, r0
 8012cde:	d1f4      	bne.n	8012cca <_malloc_r+0x192>
 8012ce0:	4663      	mov	r3, ip
 8012ce2:	2003      	movs	r0, #3
 8012ce4:	4203      	tst	r3, r0
 8012ce6:	d000      	beq.n	8012cea <_malloc_r+0x1b2>
 8012ce8:	e0b3      	b.n	8012e52 <_malloc_r+0x31a>
 8012cea:	684b      	ldr	r3, [r1, #4]
 8012cec:	4393      	bics	r3, r2
 8012cee:	604b      	str	r3, [r1, #4]
 8012cf0:	4b62      	ldr	r3, [pc, #392]	; (8012e7c <_malloc_r+0x344>)
 8012cf2:	0052      	lsls	r2, r2, #1
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d302      	bcc.n	8012d00 <_malloc_r+0x1c8>
 8012cfa:	2a00      	cmp	r2, #0
 8012cfc:	d000      	beq.n	8012d00 <_malloc_r+0x1c8>
 8012cfe:	e0b9      	b.n	8012e74 <_malloc_r+0x33c>
 8012d00:	2303      	movs	r3, #3
 8012d02:	688f      	ldr	r7, [r1, #8]
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	439a      	bics	r2, r3
 8012d08:	9202      	str	r2, [sp, #8]
 8012d0a:	42aa      	cmp	r2, r5
 8012d0c:	d303      	bcc.n	8012d16 <_malloc_r+0x1de>
 8012d0e:	1b52      	subs	r2, r2, r5
 8012d10:	2a0f      	cmp	r2, #15
 8012d12:	dd00      	ble.n	8012d16 <_malloc_r+0x1de>
 8012d14:	e116      	b.n	8012f44 <_malloc_r+0x40c>
 8012d16:	4b5d      	ldr	r3, [pc, #372]	; (8012e8c <_malloc_r+0x354>)
 8012d18:	2008      	movs	r0, #8
 8012d1a:	681e      	ldr	r6, [r3, #0]
 8012d1c:	f002 fd26 	bl	801576c <sysconf>
 8012d20:	4b5b      	ldr	r3, [pc, #364]	; (8012e90 <_malloc_r+0x358>)
 8012d22:	3610      	adds	r6, #16
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	1976      	adds	r6, r6, r5
 8012d28:	9003      	str	r0, [sp, #12]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	d003      	beq.n	8012d36 <_malloc_r+0x1fe>
 8012d2e:	3e01      	subs	r6, #1
 8012d30:	1836      	adds	r6, r6, r0
 8012d32:	4243      	negs	r3, r0
 8012d34:	401e      	ands	r6, r3
 8012d36:	0031      	movs	r1, r6
 8012d38:	9801      	ldr	r0, [sp, #4]
 8012d3a:	f000 fb27 	bl	801338c <_sbrk_r>
 8012d3e:	0004      	movs	r4, r0
 8012d40:	1c43      	adds	r3, r0, #1
 8012d42:	d100      	bne.n	8012d46 <_malloc_r+0x20e>
 8012d44:	e0d6      	b.n	8012ef4 <_malloc_r+0x3bc>
 8012d46:	9b02      	ldr	r3, [sp, #8]
 8012d48:	18fb      	adds	r3, r7, r3
 8012d4a:	4283      	cmp	r3, r0
 8012d4c:	d903      	bls.n	8012d56 <_malloc_r+0x21e>
 8012d4e:	4a4b      	ldr	r2, [pc, #300]	; (8012e7c <_malloc_r+0x344>)
 8012d50:	4297      	cmp	r7, r2
 8012d52:	d000      	beq.n	8012d56 <_malloc_r+0x21e>
 8012d54:	e0ce      	b.n	8012ef4 <_malloc_r+0x3bc>
 8012d56:	494f      	ldr	r1, [pc, #316]	; (8012e94 <_malloc_r+0x35c>)
 8012d58:	680a      	ldr	r2, [r1, #0]
 8012d5a:	18b2      	adds	r2, r6, r2
 8012d5c:	600a      	str	r2, [r1, #0]
 8012d5e:	9903      	ldr	r1, [sp, #12]
 8012d60:	4694      	mov	ip, r2
 8012d62:	1e48      	subs	r0, r1, #1
 8012d64:	42a3      	cmp	r3, r4
 8012d66:	d000      	beq.n	8012d6a <_malloc_r+0x232>
 8012d68:	e09a      	b.n	8012ea0 <_malloc_r+0x368>
 8012d6a:	4203      	tst	r3, r0
 8012d6c:	d000      	beq.n	8012d70 <_malloc_r+0x238>
 8012d6e:	e097      	b.n	8012ea0 <_malloc_r+0x368>
 8012d70:	9a02      	ldr	r2, [sp, #8]
 8012d72:	4b42      	ldr	r3, [pc, #264]	; (8012e7c <_malloc_r+0x344>)
 8012d74:	1992      	adds	r2, r2, r6
 8012d76:	2601      	movs	r6, #1
 8012d78:	689b      	ldr	r3, [r3, #8]
 8012d7a:	4316      	orrs	r6, r2
 8012d7c:	605e      	str	r6, [r3, #4]
 8012d7e:	4b45      	ldr	r3, [pc, #276]	; (8012e94 <_malloc_r+0x35c>)
 8012d80:	4a45      	ldr	r2, [pc, #276]	; (8012e98 <_malloc_r+0x360>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	6811      	ldr	r1, [r2, #0]
 8012d86:	428b      	cmp	r3, r1
 8012d88:	d900      	bls.n	8012d8c <_malloc_r+0x254>
 8012d8a:	6013      	str	r3, [r2, #0]
 8012d8c:	4a43      	ldr	r2, [pc, #268]	; (8012e9c <_malloc_r+0x364>)
 8012d8e:	6811      	ldr	r1, [r2, #0]
 8012d90:	428b      	cmp	r3, r1
 8012d92:	d800      	bhi.n	8012d96 <_malloc_r+0x25e>
 8012d94:	e0ae      	b.n	8012ef4 <_malloc_r+0x3bc>
 8012d96:	6013      	str	r3, [r2, #0]
 8012d98:	e0ac      	b.n	8012ef4 <_malloc_r+0x3bc>
 8012d9a:	0a40      	lsrs	r0, r0, #9
 8012d9c:	2804      	cmp	r0, #4
 8012d9e:	d810      	bhi.n	8012dc2 <_malloc_r+0x28a>
 8012da0:	0999      	lsrs	r1, r3, #6
 8012da2:	3138      	adds	r1, #56	; 0x38
 8012da4:	00ce      	lsls	r6, r1, #3
 8012da6:	18b6      	adds	r6, r6, r2
 8012da8:	68b0      	ldr	r0, [r6, #8]
 8012daa:	4286      	cmp	r6, r0
 8012dac:	d124      	bne.n	8012df8 <_malloc_r+0x2c0>
 8012dae:	2301      	movs	r3, #1
 8012db0:	1089      	asrs	r1, r1, #2
 8012db2:	408b      	lsls	r3, r1
 8012db4:	433b      	orrs	r3, r7
 8012db6:	6053      	str	r3, [r2, #4]
 8012db8:	60e6      	str	r6, [r4, #12]
 8012dba:	60a0      	str	r0, [r4, #8]
 8012dbc:	60b4      	str	r4, [r6, #8]
 8012dbe:	60c4      	str	r4, [r0, #12]
 8012dc0:	e768      	b.n	8012c94 <_malloc_r+0x15c>
 8012dc2:	2814      	cmp	r0, #20
 8012dc4:	d802      	bhi.n	8012dcc <_malloc_r+0x294>
 8012dc6:	0001      	movs	r1, r0
 8012dc8:	315b      	adds	r1, #91	; 0x5b
 8012dca:	e7eb      	b.n	8012da4 <_malloc_r+0x26c>
 8012dcc:	2854      	cmp	r0, #84	; 0x54
 8012dce:	d802      	bhi.n	8012dd6 <_malloc_r+0x29e>
 8012dd0:	0b19      	lsrs	r1, r3, #12
 8012dd2:	316e      	adds	r1, #110	; 0x6e
 8012dd4:	e7e6      	b.n	8012da4 <_malloc_r+0x26c>
 8012dd6:	21aa      	movs	r1, #170	; 0xaa
 8012dd8:	0049      	lsls	r1, r1, #1
 8012dda:	4288      	cmp	r0, r1
 8012ddc:	d802      	bhi.n	8012de4 <_malloc_r+0x2ac>
 8012dde:	0bd9      	lsrs	r1, r3, #15
 8012de0:	3177      	adds	r1, #119	; 0x77
 8012de2:	e7df      	b.n	8012da4 <_malloc_r+0x26c>
 8012de4:	4e27      	ldr	r6, [pc, #156]	; (8012e84 <_malloc_r+0x34c>)
 8012de6:	217e      	movs	r1, #126	; 0x7e
 8012de8:	42b0      	cmp	r0, r6
 8012dea:	d8db      	bhi.n	8012da4 <_malloc_r+0x26c>
 8012dec:	0c99      	lsrs	r1, r3, #18
 8012dee:	317c      	adds	r1, #124	; 0x7c
 8012df0:	e7d8      	b.n	8012da4 <_malloc_r+0x26c>
 8012df2:	6880      	ldr	r0, [r0, #8]
 8012df4:	4286      	cmp	r6, r0
 8012df6:	d004      	beq.n	8012e02 <_malloc_r+0x2ca>
 8012df8:	2103      	movs	r1, #3
 8012dfa:	6842      	ldr	r2, [r0, #4]
 8012dfc:	438a      	bics	r2, r1
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d8f7      	bhi.n	8012df2 <_malloc_r+0x2ba>
 8012e02:	68c6      	ldr	r6, [r0, #12]
 8012e04:	e7d8      	b.n	8012db8 <_malloc_r+0x280>
 8012e06:	2304      	movs	r3, #4
 8012e08:	449c      	add	ip, r3
 8012e0a:	e753      	b.n	8012cb4 <_malloc_r+0x17c>
 8012e0c:	2003      	movs	r0, #3
 8012e0e:	6863      	ldr	r3, [r4, #4]
 8012e10:	4383      	bics	r3, r0
 8012e12:	1b5e      	subs	r6, r3, r5
 8012e14:	68e0      	ldr	r0, [r4, #12]
 8012e16:	2e0f      	cmp	r6, #15
 8012e18:	dd0e      	ble.n	8012e38 <_malloc_r+0x300>
 8012e1a:	2701      	movs	r7, #1
 8012e1c:	1962      	adds	r2, r4, r5
 8012e1e:	433d      	orrs	r5, r7
 8012e20:	6065      	str	r5, [r4, #4]
 8012e22:	68a5      	ldr	r5, [r4, #8]
 8012e24:	4337      	orrs	r7, r6
 8012e26:	60e8      	str	r0, [r5, #12]
 8012e28:	6085      	str	r5, [r0, #8]
 8012e2a:	614a      	str	r2, [r1, #20]
 8012e2c:	610a      	str	r2, [r1, #16]
 8012e2e:	4914      	ldr	r1, [pc, #80]	; (8012e80 <_malloc_r+0x348>)
 8012e30:	6057      	str	r7, [r2, #4]
 8012e32:	60d1      	str	r1, [r2, #12]
 8012e34:	6091      	str	r1, [r2, #8]
 8012e36:	e6e8      	b.n	8012c0a <_malloc_r+0xd2>
 8012e38:	2e00      	cmp	r6, #0
 8012e3a:	db08      	blt.n	8012e4e <_malloc_r+0x316>
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	18e3      	adds	r3, r4, r3
 8012e40:	6859      	ldr	r1, [r3, #4]
 8012e42:	430a      	orrs	r2, r1
 8012e44:	605a      	str	r2, [r3, #4]
 8012e46:	68a3      	ldr	r3, [r4, #8]
 8012e48:	60d8      	str	r0, [r3, #12]
 8012e4a:	6083      	str	r3, [r0, #8]
 8012e4c:	e6aa      	b.n	8012ba4 <_malloc_r+0x6c>
 8012e4e:	0004      	movs	r4, r0
 8012e50:	e73c      	b.n	8012ccc <_malloc_r+0x194>
 8012e52:	2301      	movs	r3, #1
 8012e54:	425b      	negs	r3, r3
 8012e56:	449c      	add	ip, r3
 8012e58:	9b03      	ldr	r3, [sp, #12]
 8012e5a:	6818      	ldr	r0, [r3, #0]
 8012e5c:	3b08      	subs	r3, #8
 8012e5e:	9003      	str	r0, [sp, #12]
 8012e60:	4298      	cmp	r0, r3
 8012e62:	d100      	bne.n	8012e66 <_malloc_r+0x32e>
 8012e64:	e73c      	b.n	8012ce0 <_malloc_r+0x1a8>
 8012e66:	e743      	b.n	8012cf0 <_malloc_r+0x1b8>
 8012e68:	2004      	movs	r0, #4
 8012e6a:	0052      	lsls	r2, r2, #1
 8012e6c:	4484      	add	ip, r0
 8012e6e:	421a      	tst	r2, r3
 8012e70:	d0fa      	beq.n	8012e68 <_malloc_r+0x330>
 8012e72:	e723      	b.n	8012cbc <_malloc_r+0x184>
 8012e74:	9802      	ldr	r0, [sp, #8]
 8012e76:	4684      	mov	ip, r0
 8012e78:	e7f9      	b.n	8012e6e <_malloc_r+0x336>
 8012e7a:	46c0      	nop			; (mov r8, r8)
 8012e7c:	20000644 	.word	0x20000644
 8012e80:	2000064c 	.word	0x2000064c
 8012e84:	00000554 	.word	0x00000554
 8012e88:	000001ff 	.word	0x000001ff
 8012e8c:	20006940 	.word	0x20006940
 8012e90:	20000a4c 	.word	0x20000a4c
 8012e94:	20006910 	.word	0x20006910
 8012e98:	20006938 	.word	0x20006938
 8012e9c:	2000693c 	.word	0x2000693c
 8012ea0:	492e      	ldr	r1, [pc, #184]	; (8012f5c <_malloc_r+0x424>)
 8012ea2:	680a      	ldr	r2, [r1, #0]
 8012ea4:	3201      	adds	r2, #1
 8012ea6:	d133      	bne.n	8012f10 <_malloc_r+0x3d8>
 8012ea8:	600c      	str	r4, [r1, #0]
 8012eaa:	2307      	movs	r3, #7
 8012eac:	4023      	ands	r3, r4
 8012eae:	d002      	beq.n	8012eb6 <_malloc_r+0x37e>
 8012eb0:	2208      	movs	r2, #8
 8012eb2:	1ad3      	subs	r3, r2, r3
 8012eb4:	18e4      	adds	r4, r4, r3
 8012eb6:	9a03      	ldr	r2, [sp, #12]
 8012eb8:	19a6      	adds	r6, r4, r6
 8012eba:	18d3      	adds	r3, r2, r3
 8012ebc:	4006      	ands	r6, r0
 8012ebe:	1b9e      	subs	r6, r3, r6
 8012ec0:	0031      	movs	r1, r6
 8012ec2:	9801      	ldr	r0, [sp, #4]
 8012ec4:	f000 fa62 	bl	801338c <_sbrk_r>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	d101      	bne.n	8012ed0 <_malloc_r+0x398>
 8012ecc:	0020      	movs	r0, r4
 8012ece:	2600      	movs	r6, #0
 8012ed0:	4a23      	ldr	r2, [pc, #140]	; (8012f60 <_malloc_r+0x428>)
 8012ed2:	1b00      	subs	r0, r0, r4
 8012ed4:	6813      	ldr	r3, [r2, #0]
 8012ed6:	199b      	adds	r3, r3, r6
 8012ed8:	6013      	str	r3, [r2, #0]
 8012eda:	2301      	movs	r3, #1
 8012edc:	4a21      	ldr	r2, [pc, #132]	; (8012f64 <_malloc_r+0x42c>)
 8012ede:	1986      	adds	r6, r0, r6
 8012ee0:	431e      	orrs	r6, r3
 8012ee2:	6094      	str	r4, [r2, #8]
 8012ee4:	6066      	str	r6, [r4, #4]
 8012ee6:	4297      	cmp	r7, r2
 8012ee8:	d100      	bne.n	8012eec <_malloc_r+0x3b4>
 8012eea:	e748      	b.n	8012d7e <_malloc_r+0x246>
 8012eec:	9a02      	ldr	r2, [sp, #8]
 8012eee:	2a0f      	cmp	r2, #15
 8012ef0:	d813      	bhi.n	8012f1a <_malloc_r+0x3e2>
 8012ef2:	6063      	str	r3, [r4, #4]
 8012ef4:	2203      	movs	r2, #3
 8012ef6:	4b1b      	ldr	r3, [pc, #108]	; (8012f64 <_malloc_r+0x42c>)
 8012ef8:	689b      	ldr	r3, [r3, #8]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	4393      	bics	r3, r2
 8012efe:	1b5a      	subs	r2, r3, r5
 8012f00:	42ab      	cmp	r3, r5
 8012f02:	d301      	bcc.n	8012f08 <_malloc_r+0x3d0>
 8012f04:	2a0f      	cmp	r2, #15
 8012f06:	dc1d      	bgt.n	8012f44 <_malloc_r+0x40c>
 8012f08:	9801      	ldr	r0, [sp, #4]
 8012f0a:	f000 f867 	bl	8012fdc <__malloc_unlock>
 8012f0e:	e620      	b.n	8012b52 <_malloc_r+0x1a>
 8012f10:	1ae3      	subs	r3, r4, r3
 8012f12:	4a13      	ldr	r2, [pc, #76]	; (8012f60 <_malloc_r+0x428>)
 8012f14:	4463      	add	r3, ip
 8012f16:	6013      	str	r3, [r2, #0]
 8012f18:	e7c7      	b.n	8012eaa <_malloc_r+0x372>
 8012f1a:	2207      	movs	r2, #7
 8012f1c:	9e02      	ldr	r6, [sp, #8]
 8012f1e:	3e0c      	subs	r6, #12
 8012f20:	4396      	bics	r6, r2
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	4013      	ands	r3, r2
 8012f26:	2205      	movs	r2, #5
 8012f28:	4333      	orrs	r3, r6
 8012f2a:	607b      	str	r3, [r7, #4]
 8012f2c:	19bb      	adds	r3, r7, r6
 8012f2e:	605a      	str	r2, [r3, #4]
 8012f30:	609a      	str	r2, [r3, #8]
 8012f32:	2e0f      	cmp	r6, #15
 8012f34:	d800      	bhi.n	8012f38 <_malloc_r+0x400>
 8012f36:	e722      	b.n	8012d7e <_malloc_r+0x246>
 8012f38:	0039      	movs	r1, r7
 8012f3a:	9801      	ldr	r0, [sp, #4]
 8012f3c:	3108      	adds	r1, #8
 8012f3e:	f003 fb07 	bl	8016550 <_free_r>
 8012f42:	e71c      	b.n	8012d7e <_malloc_r+0x246>
 8012f44:	2301      	movs	r3, #1
 8012f46:	0018      	movs	r0, r3
 8012f48:	4906      	ldr	r1, [pc, #24]	; (8012f64 <_malloc_r+0x42c>)
 8012f4a:	4328      	orrs	r0, r5
 8012f4c:	688c      	ldr	r4, [r1, #8]
 8012f4e:	4313      	orrs	r3, r2
 8012f50:	1965      	adds	r5, r4, r5
 8012f52:	6060      	str	r0, [r4, #4]
 8012f54:	608d      	str	r5, [r1, #8]
 8012f56:	606b      	str	r3, [r5, #4]
 8012f58:	e624      	b.n	8012ba4 <_malloc_r+0x6c>
 8012f5a:	46c0      	nop			; (mov r8, r8)
 8012f5c:	20000a4c 	.word	0x20000a4c
 8012f60:	20006910 	.word	0x20006910
 8012f64:	20000644 	.word	0x20000644

08012f68 <__ascii_mbtowc>:
 8012f68:	b082      	sub	sp, #8
 8012f6a:	2900      	cmp	r1, #0
 8012f6c:	d100      	bne.n	8012f70 <__ascii_mbtowc+0x8>
 8012f6e:	a901      	add	r1, sp, #4
 8012f70:	1e10      	subs	r0, r2, #0
 8012f72:	d006      	beq.n	8012f82 <__ascii_mbtowc+0x1a>
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d006      	beq.n	8012f86 <__ascii_mbtowc+0x1e>
 8012f78:	7813      	ldrb	r3, [r2, #0]
 8012f7a:	600b      	str	r3, [r1, #0]
 8012f7c:	7810      	ldrb	r0, [r2, #0]
 8012f7e:	1e43      	subs	r3, r0, #1
 8012f80:	4198      	sbcs	r0, r3
 8012f82:	b002      	add	sp, #8
 8012f84:	4770      	bx	lr
 8012f86:	2002      	movs	r0, #2
 8012f88:	4240      	negs	r0, r0
 8012f8a:	e7fa      	b.n	8012f82 <__ascii_mbtowc+0x1a>

08012f8c <memcmp>:
 8012f8c:	b530      	push	{r4, r5, lr}
 8012f8e:	2400      	movs	r4, #0
 8012f90:	42a2      	cmp	r2, r4
 8012f92:	d101      	bne.n	8012f98 <memcmp+0xc>
 8012f94:	2000      	movs	r0, #0
 8012f96:	e005      	b.n	8012fa4 <memcmp+0x18>
 8012f98:	5d03      	ldrb	r3, [r0, r4]
 8012f9a:	1c65      	adds	r5, r4, #1
 8012f9c:	5d0c      	ldrb	r4, [r1, r4]
 8012f9e:	42a3      	cmp	r3, r4
 8012fa0:	d001      	beq.n	8012fa6 <memcmp+0x1a>
 8012fa2:	1b18      	subs	r0, r3, r4
 8012fa4:	bd30      	pop	{r4, r5, pc}
 8012fa6:	002c      	movs	r4, r5
 8012fa8:	e7f2      	b.n	8012f90 <memcmp+0x4>

08012faa <memcpy>:
 8012faa:	2300      	movs	r3, #0
 8012fac:	b510      	push	{r4, lr}
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d100      	bne.n	8012fb4 <memcpy+0xa>
 8012fb2:	bd10      	pop	{r4, pc}
 8012fb4:	5ccc      	ldrb	r4, [r1, r3]
 8012fb6:	54c4      	strb	r4, [r0, r3]
 8012fb8:	3301      	adds	r3, #1
 8012fba:	e7f8      	b.n	8012fae <memcpy+0x4>

08012fbc <memset>:
 8012fbc:	0003      	movs	r3, r0
 8012fbe:	1812      	adds	r2, r2, r0
 8012fc0:	4293      	cmp	r3, r2
 8012fc2:	d100      	bne.n	8012fc6 <memset+0xa>
 8012fc4:	4770      	bx	lr
 8012fc6:	7019      	strb	r1, [r3, #0]
 8012fc8:	3301      	adds	r3, #1
 8012fca:	e7f9      	b.n	8012fc0 <memset+0x4>

08012fcc <__malloc_lock>:
 8012fcc:	b510      	push	{r4, lr}
 8012fce:	4802      	ldr	r0, [pc, #8]	; (8012fd8 <__malloc_lock+0xc>)
 8012fd0:	f003 feb2 	bl	8016d38 <__retarget_lock_acquire_recursive>
 8012fd4:	bd10      	pop	{r4, pc}
 8012fd6:	46c0      	nop			; (mov r8, r8)
 8012fd8:	20006edc 	.word	0x20006edc

08012fdc <__malloc_unlock>:
 8012fdc:	b510      	push	{r4, lr}
 8012fde:	4802      	ldr	r0, [pc, #8]	; (8012fe8 <__malloc_unlock+0xc>)
 8012fe0:	f003 feab 	bl	8016d3a <__retarget_lock_release_recursive>
 8012fe4:	bd10      	pop	{r4, pc}
 8012fe6:	46c0      	nop			; (mov r8, r8)
 8012fe8:	20006edc 	.word	0x20006edc

08012fec <rand>:
 8012fec:	4b09      	ldr	r3, [pc, #36]	; (8013014 <rand+0x28>)
 8012fee:	b510      	push	{r4, lr}
 8012ff0:	681c      	ldr	r4, [r3, #0]
 8012ff2:	4a09      	ldr	r2, [pc, #36]	; (8013018 <rand+0x2c>)
 8012ff4:	34a8      	adds	r4, #168	; 0xa8
 8012ff6:	6820      	ldr	r0, [r4, #0]
 8012ff8:	6861      	ldr	r1, [r4, #4]
 8012ffa:	4b08      	ldr	r3, [pc, #32]	; (801301c <rand+0x30>)
 8012ffc:	f7ed fab6 	bl	800056c <__aeabi_lmul>
 8013000:	2201      	movs	r2, #1
 8013002:	2300      	movs	r3, #0
 8013004:	1880      	adds	r0, r0, r2
 8013006:	4159      	adcs	r1, r3
 8013008:	6020      	str	r0, [r4, #0]
 801300a:	6061      	str	r1, [r4, #4]
 801300c:	0048      	lsls	r0, r1, #1
 801300e:	0840      	lsrs	r0, r0, #1
 8013010:	bd10      	pop	{r4, pc}
 8013012:	46c0      	nop			; (mov r8, r8)
 8013014:	200000a8 	.word	0x200000a8
 8013018:	4c957f2d 	.word	0x4c957f2d
 801301c:	5851f42d 	.word	0x5851f42d

08013020 <realloc>:
 8013020:	b510      	push	{r4, lr}
 8013022:	4b03      	ldr	r3, [pc, #12]	; (8013030 <realloc+0x10>)
 8013024:	000a      	movs	r2, r1
 8013026:	0001      	movs	r1, r0
 8013028:	6818      	ldr	r0, [r3, #0]
 801302a:	f000 f803 	bl	8013034 <_realloc_r>
 801302e:	bd10      	pop	{r4, pc}
 8013030:	200000a8 	.word	0x200000a8

08013034 <_realloc_r>:
 8013034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013036:	b087      	sub	sp, #28
 8013038:	9003      	str	r0, [sp, #12]
 801303a:	1e0c      	subs	r4, r1, #0
 801303c:	9205      	str	r2, [sp, #20]
 801303e:	d106      	bne.n	801304e <_realloc_r+0x1a>
 8013040:	0011      	movs	r1, r2
 8013042:	f7ff fd79 	bl	8012b38 <_malloc_r>
 8013046:	0007      	movs	r7, r0
 8013048:	0038      	movs	r0, r7
 801304a:	b007      	add	sp, #28
 801304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801304e:	9803      	ldr	r0, [sp, #12]
 8013050:	f7ff ffbc 	bl	8012fcc <__malloc_lock>
 8013054:	0023      	movs	r3, r4
 8013056:	3b08      	subs	r3, #8
 8013058:	685f      	ldr	r7, [r3, #4]
 801305a:	9302      	str	r3, [sp, #8]
 801305c:	003a      	movs	r2, r7
 801305e:	2303      	movs	r3, #3
 8013060:	9e05      	ldr	r6, [sp, #20]
 8013062:	439a      	bics	r2, r3
 8013064:	360b      	adds	r6, #11
 8013066:	9204      	str	r2, [sp, #16]
 8013068:	2e16      	cmp	r6, #22
 801306a:	d908      	bls.n	801307e <_realloc_r+0x4a>
 801306c:	3304      	adds	r3, #4
 801306e:	439e      	bics	r6, r3
 8013070:	9601      	str	r6, [sp, #4]
 8013072:	d506      	bpl.n	8013082 <_realloc_r+0x4e>
 8013074:	230c      	movs	r3, #12
 8013076:	9a03      	ldr	r2, [sp, #12]
 8013078:	2700      	movs	r7, #0
 801307a:	6013      	str	r3, [r2, #0]
 801307c:	e7e4      	b.n	8013048 <_realloc_r+0x14>
 801307e:	2310      	movs	r3, #16
 8013080:	9301      	str	r3, [sp, #4]
 8013082:	9b01      	ldr	r3, [sp, #4]
 8013084:	9a05      	ldr	r2, [sp, #20]
 8013086:	4293      	cmp	r3, r2
 8013088:	d3f4      	bcc.n	8013074 <_realloc_r+0x40>
 801308a:	9b01      	ldr	r3, [sp, #4]
 801308c:	9a04      	ldr	r2, [sp, #16]
 801308e:	4293      	cmp	r3, r2
 8013090:	dc00      	bgt.n	8013094 <_realloc_r+0x60>
 8013092:	e16f      	b.n	8013374 <_realloc_r+0x340>
 8013094:	9b02      	ldr	r3, [sp, #8]
 8013096:	48bc      	ldr	r0, [pc, #752]	; (8013388 <_realloc_r+0x354>)
 8013098:	189b      	adds	r3, r3, r2
 801309a:	6882      	ldr	r2, [r0, #8]
 801309c:	4694      	mov	ip, r2
 801309e:	685a      	ldr	r2, [r3, #4]
 80130a0:	459c      	cmp	ip, r3
 80130a2:	d006      	beq.n	80130b2 <_realloc_r+0x7e>
 80130a4:	2501      	movs	r5, #1
 80130a6:	0011      	movs	r1, r2
 80130a8:	43a9      	bics	r1, r5
 80130aa:	1859      	adds	r1, r3, r1
 80130ac:	6849      	ldr	r1, [r1, #4]
 80130ae:	4229      	tst	r1, r5
 80130b0:	d146      	bne.n	8013140 <_realloc_r+0x10c>
 80130b2:	2103      	movs	r1, #3
 80130b4:	438a      	bics	r2, r1
 80130b6:	9904      	ldr	r1, [sp, #16]
 80130b8:	188e      	adds	r6, r1, r2
 80130ba:	9901      	ldr	r1, [sp, #4]
 80130bc:	459c      	cmp	ip, r3
 80130be:	d117      	bne.n	80130f0 <_realloc_r+0xbc>
 80130c0:	3110      	adds	r1, #16
 80130c2:	42b1      	cmp	r1, r6
 80130c4:	dc3e      	bgt.n	8013144 <_realloc_r+0x110>
 80130c6:	9901      	ldr	r1, [sp, #4]
 80130c8:	9b02      	ldr	r3, [sp, #8]
 80130ca:	468c      	mov	ip, r1
 80130cc:	4463      	add	r3, ip
 80130ce:	6083      	str	r3, [r0, #8]
 80130d0:	001a      	movs	r2, r3
 80130d2:	1a73      	subs	r3, r6, r1
 80130d4:	2601      	movs	r6, #1
 80130d6:	4333      	orrs	r3, r6
 80130d8:	6053      	str	r3, [r2, #4]
 80130da:	0023      	movs	r3, r4
 80130dc:	3b08      	subs	r3, #8
 80130de:	685a      	ldr	r2, [r3, #4]
 80130e0:	9803      	ldr	r0, [sp, #12]
 80130e2:	4016      	ands	r6, r2
 80130e4:	430e      	orrs	r6, r1
 80130e6:	605e      	str	r6, [r3, #4]
 80130e8:	f7ff ff78 	bl	8012fdc <__malloc_unlock>
 80130ec:	0027      	movs	r7, r4
 80130ee:	e7ab      	b.n	8013048 <_realloc_r+0x14>
 80130f0:	42b1      	cmp	r1, r6
 80130f2:	dc27      	bgt.n	8013144 <_realloc_r+0x110>
 80130f4:	68da      	ldr	r2, [r3, #12]
 80130f6:	689b      	ldr	r3, [r3, #8]
 80130f8:	60da      	str	r2, [r3, #12]
 80130fa:	6093      	str	r3, [r2, #8]
 80130fc:	9b01      	ldr	r3, [sp, #4]
 80130fe:	9a02      	ldr	r2, [sp, #8]
 8013100:	1af4      	subs	r4, r6, r3
 8013102:	9b02      	ldr	r3, [sp, #8]
 8013104:	1992      	adds	r2, r2, r6
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	9304      	str	r3, [sp, #16]
 801310a:	2301      	movs	r3, #1
 801310c:	9804      	ldr	r0, [sp, #16]
 801310e:	4018      	ands	r0, r3
 8013110:	2c0f      	cmp	r4, #15
 8013112:	d800      	bhi.n	8013116 <_realloc_r+0xe2>
 8013114:	e130      	b.n	8013378 <_realloc_r+0x344>
 8013116:	9d01      	ldr	r5, [sp, #4]
 8013118:	9902      	ldr	r1, [sp, #8]
 801311a:	4328      	orrs	r0, r5
 801311c:	1949      	adds	r1, r1, r5
 801311e:	9d02      	ldr	r5, [sp, #8]
 8013120:	431c      	orrs	r4, r3
 8013122:	6068      	str	r0, [r5, #4]
 8013124:	604c      	str	r4, [r1, #4]
 8013126:	6850      	ldr	r0, [r2, #4]
 8013128:	3108      	adds	r1, #8
 801312a:	4303      	orrs	r3, r0
 801312c:	6053      	str	r3, [r2, #4]
 801312e:	9803      	ldr	r0, [sp, #12]
 8013130:	f003 fa0e 	bl	8016550 <_free_r>
 8013134:	9803      	ldr	r0, [sp, #12]
 8013136:	f7ff ff51 	bl	8012fdc <__malloc_unlock>
 801313a:	9f02      	ldr	r7, [sp, #8]
 801313c:	3708      	adds	r7, #8
 801313e:	e783      	b.n	8013048 <_realloc_r+0x14>
 8013140:	2200      	movs	r2, #0
 8013142:	0013      	movs	r3, r2
 8013144:	07f9      	lsls	r1, r7, #31
 8013146:	d500      	bpl.n	801314a <_realloc_r+0x116>
 8013148:	e0c6      	b.n	80132d8 <_realloc_r+0x2a4>
 801314a:	0021      	movs	r1, r4
 801314c:	3908      	subs	r1, #8
 801314e:	680d      	ldr	r5, [r1, #0]
 8013150:	9902      	ldr	r1, [sp, #8]
 8013152:	1b4d      	subs	r5, r1, r5
 8013154:	2103      	movs	r1, #3
 8013156:	686f      	ldr	r7, [r5, #4]
 8013158:	438f      	bics	r7, r1
 801315a:	9904      	ldr	r1, [sp, #16]
 801315c:	187f      	adds	r7, r7, r1
 801315e:	2b00      	cmp	r3, #0
 8013160:	d100      	bne.n	8013164 <_realloc_r+0x130>
 8013162:	e084      	b.n	801326e <_realloc_r+0x23a>
 8013164:	19d6      	adds	r6, r2, r7
 8013166:	459c      	cmp	ip, r3
 8013168:	d148      	bne.n	80131fc <_realloc_r+0x1c8>
 801316a:	9b01      	ldr	r3, [sp, #4]
 801316c:	3310      	adds	r3, #16
 801316e:	42b3      	cmp	r3, r6
 8013170:	dc7d      	bgt.n	801326e <_realloc_r+0x23a>
 8013172:	68aa      	ldr	r2, [r5, #8]
 8013174:	68eb      	ldr	r3, [r5, #12]
 8013176:	002f      	movs	r7, r5
 8013178:	60d3      	str	r3, [r2, #12]
 801317a:	609a      	str	r2, [r3, #8]
 801317c:	000a      	movs	r2, r1
 801317e:	3a04      	subs	r2, #4
 8013180:	3708      	adds	r7, #8
 8013182:	2a24      	cmp	r2, #36	; 0x24
 8013184:	d835      	bhi.n	80131f2 <_realloc_r+0x1be>
 8013186:	003b      	movs	r3, r7
 8013188:	2a13      	cmp	r2, #19
 801318a:	d908      	bls.n	801319e <_realloc_r+0x16a>
 801318c:	6823      	ldr	r3, [r4, #0]
 801318e:	60ab      	str	r3, [r5, #8]
 8013190:	6863      	ldr	r3, [r4, #4]
 8013192:	60eb      	str	r3, [r5, #12]
 8013194:	2a1b      	cmp	r2, #27
 8013196:	d81a      	bhi.n	80131ce <_realloc_r+0x19a>
 8013198:	002b      	movs	r3, r5
 801319a:	3408      	adds	r4, #8
 801319c:	3310      	adds	r3, #16
 801319e:	6822      	ldr	r2, [r4, #0]
 80131a0:	601a      	str	r2, [r3, #0]
 80131a2:	6862      	ldr	r2, [r4, #4]
 80131a4:	605a      	str	r2, [r3, #4]
 80131a6:	68a2      	ldr	r2, [r4, #8]
 80131a8:	609a      	str	r2, [r3, #8]
 80131aa:	9b01      	ldr	r3, [sp, #4]
 80131ac:	18ea      	adds	r2, r5, r3
 80131ae:	4b76      	ldr	r3, [pc, #472]	; (8013388 <_realloc_r+0x354>)
 80131b0:	609a      	str	r2, [r3, #8]
 80131b2:	9b01      	ldr	r3, [sp, #4]
 80131b4:	1af3      	subs	r3, r6, r3
 80131b6:	2601      	movs	r6, #1
 80131b8:	4333      	orrs	r3, r6
 80131ba:	6053      	str	r3, [r2, #4]
 80131bc:	686b      	ldr	r3, [r5, #4]
 80131be:	401e      	ands	r6, r3
 80131c0:	9b01      	ldr	r3, [sp, #4]
 80131c2:	431e      	orrs	r6, r3
 80131c4:	606e      	str	r6, [r5, #4]
 80131c6:	9803      	ldr	r0, [sp, #12]
 80131c8:	f7ff ff08 	bl	8012fdc <__malloc_unlock>
 80131cc:	e73c      	b.n	8013048 <_realloc_r+0x14>
 80131ce:	68a3      	ldr	r3, [r4, #8]
 80131d0:	612b      	str	r3, [r5, #16]
 80131d2:	68e3      	ldr	r3, [r4, #12]
 80131d4:	616b      	str	r3, [r5, #20]
 80131d6:	2a24      	cmp	r2, #36	; 0x24
 80131d8:	d003      	beq.n	80131e2 <_realloc_r+0x1ae>
 80131da:	002b      	movs	r3, r5
 80131dc:	3410      	adds	r4, #16
 80131de:	3318      	adds	r3, #24
 80131e0:	e7dd      	b.n	801319e <_realloc_r+0x16a>
 80131e2:	6923      	ldr	r3, [r4, #16]
 80131e4:	61ab      	str	r3, [r5, #24]
 80131e6:	002b      	movs	r3, r5
 80131e8:	6962      	ldr	r2, [r4, #20]
 80131ea:	3320      	adds	r3, #32
 80131ec:	61ea      	str	r2, [r5, #28]
 80131ee:	3418      	adds	r4, #24
 80131f0:	e7d5      	b.n	801319e <_realloc_r+0x16a>
 80131f2:	0021      	movs	r1, r4
 80131f4:	0038      	movs	r0, r7
 80131f6:	f003 fdac 	bl	8016d52 <memmove>
 80131fa:	e7d6      	b.n	80131aa <_realloc_r+0x176>
 80131fc:	9a01      	ldr	r2, [sp, #4]
 80131fe:	42b2      	cmp	r2, r6
 8013200:	dc35      	bgt.n	801326e <_realloc_r+0x23a>
 8013202:	0028      	movs	r0, r5
 8013204:	68da      	ldr	r2, [r3, #12]
 8013206:	689b      	ldr	r3, [r3, #8]
 8013208:	3008      	adds	r0, #8
 801320a:	60da      	str	r2, [r3, #12]
 801320c:	6093      	str	r3, [r2, #8]
 801320e:	68aa      	ldr	r2, [r5, #8]
 8013210:	68eb      	ldr	r3, [r5, #12]
 8013212:	60d3      	str	r3, [r2, #12]
 8013214:	609a      	str	r2, [r3, #8]
 8013216:	9a04      	ldr	r2, [sp, #16]
 8013218:	3a04      	subs	r2, #4
 801321a:	2a24      	cmp	r2, #36	; 0x24
 801321c:	d823      	bhi.n	8013266 <_realloc_r+0x232>
 801321e:	2a13      	cmp	r2, #19
 8013220:	d907      	bls.n	8013232 <_realloc_r+0x1fe>
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	60ab      	str	r3, [r5, #8]
 8013226:	6863      	ldr	r3, [r4, #4]
 8013228:	60eb      	str	r3, [r5, #12]
 801322a:	2a1b      	cmp	r2, #27
 801322c:	d809      	bhi.n	8013242 <_realloc_r+0x20e>
 801322e:	3408      	adds	r4, #8
 8013230:	3008      	adds	r0, #8
 8013232:	6823      	ldr	r3, [r4, #0]
 8013234:	6003      	str	r3, [r0, #0]
 8013236:	6863      	ldr	r3, [r4, #4]
 8013238:	6043      	str	r3, [r0, #4]
 801323a:	68a3      	ldr	r3, [r4, #8]
 801323c:	6083      	str	r3, [r0, #8]
 801323e:	9502      	str	r5, [sp, #8]
 8013240:	e75c      	b.n	80130fc <_realloc_r+0xc8>
 8013242:	68a3      	ldr	r3, [r4, #8]
 8013244:	612b      	str	r3, [r5, #16]
 8013246:	68e3      	ldr	r3, [r4, #12]
 8013248:	616b      	str	r3, [r5, #20]
 801324a:	2a24      	cmp	r2, #36	; 0x24
 801324c:	d003      	beq.n	8013256 <_realloc_r+0x222>
 801324e:	0028      	movs	r0, r5
 8013250:	3410      	adds	r4, #16
 8013252:	3018      	adds	r0, #24
 8013254:	e7ed      	b.n	8013232 <_realloc_r+0x1fe>
 8013256:	0028      	movs	r0, r5
 8013258:	6923      	ldr	r3, [r4, #16]
 801325a:	3020      	adds	r0, #32
 801325c:	61ab      	str	r3, [r5, #24]
 801325e:	6963      	ldr	r3, [r4, #20]
 8013260:	3418      	adds	r4, #24
 8013262:	61eb      	str	r3, [r5, #28]
 8013264:	e7e5      	b.n	8013232 <_realloc_r+0x1fe>
 8013266:	0021      	movs	r1, r4
 8013268:	f003 fd73 	bl	8016d52 <memmove>
 801326c:	e7e7      	b.n	801323e <_realloc_r+0x20a>
 801326e:	9b01      	ldr	r3, [sp, #4]
 8013270:	42bb      	cmp	r3, r7
 8013272:	dc31      	bgt.n	80132d8 <_realloc_r+0x2a4>
 8013274:	0028      	movs	r0, r5
 8013276:	68aa      	ldr	r2, [r5, #8]
 8013278:	68eb      	ldr	r3, [r5, #12]
 801327a:	3008      	adds	r0, #8
 801327c:	60d3      	str	r3, [r2, #12]
 801327e:	609a      	str	r2, [r3, #8]
 8013280:	9a04      	ldr	r2, [sp, #16]
 8013282:	3a04      	subs	r2, #4
 8013284:	2a24      	cmp	r2, #36	; 0x24
 8013286:	d823      	bhi.n	80132d0 <_realloc_r+0x29c>
 8013288:	2a13      	cmp	r2, #19
 801328a:	d907      	bls.n	801329c <_realloc_r+0x268>
 801328c:	6823      	ldr	r3, [r4, #0]
 801328e:	60ab      	str	r3, [r5, #8]
 8013290:	6863      	ldr	r3, [r4, #4]
 8013292:	60eb      	str	r3, [r5, #12]
 8013294:	2a1b      	cmp	r2, #27
 8013296:	d809      	bhi.n	80132ac <_realloc_r+0x278>
 8013298:	3408      	adds	r4, #8
 801329a:	3008      	adds	r0, #8
 801329c:	6823      	ldr	r3, [r4, #0]
 801329e:	6003      	str	r3, [r0, #0]
 80132a0:	6863      	ldr	r3, [r4, #4]
 80132a2:	6043      	str	r3, [r0, #4]
 80132a4:	68a3      	ldr	r3, [r4, #8]
 80132a6:	6083      	str	r3, [r0, #8]
 80132a8:	003e      	movs	r6, r7
 80132aa:	e7c8      	b.n	801323e <_realloc_r+0x20a>
 80132ac:	68a3      	ldr	r3, [r4, #8]
 80132ae:	612b      	str	r3, [r5, #16]
 80132b0:	68e3      	ldr	r3, [r4, #12]
 80132b2:	616b      	str	r3, [r5, #20]
 80132b4:	2a24      	cmp	r2, #36	; 0x24
 80132b6:	d003      	beq.n	80132c0 <_realloc_r+0x28c>
 80132b8:	0028      	movs	r0, r5
 80132ba:	3410      	adds	r4, #16
 80132bc:	3018      	adds	r0, #24
 80132be:	e7ed      	b.n	801329c <_realloc_r+0x268>
 80132c0:	0028      	movs	r0, r5
 80132c2:	6923      	ldr	r3, [r4, #16]
 80132c4:	3020      	adds	r0, #32
 80132c6:	61ab      	str	r3, [r5, #24]
 80132c8:	6963      	ldr	r3, [r4, #20]
 80132ca:	3418      	adds	r4, #24
 80132cc:	61eb      	str	r3, [r5, #28]
 80132ce:	e7e5      	b.n	801329c <_realloc_r+0x268>
 80132d0:	0021      	movs	r1, r4
 80132d2:	f003 fd3e 	bl	8016d52 <memmove>
 80132d6:	e7e7      	b.n	80132a8 <_realloc_r+0x274>
 80132d8:	9905      	ldr	r1, [sp, #20]
 80132da:	9803      	ldr	r0, [sp, #12]
 80132dc:	f7ff fc2c 	bl	8012b38 <_malloc_r>
 80132e0:	1e07      	subs	r7, r0, #0
 80132e2:	d100      	bne.n	80132e6 <_realloc_r+0x2b2>
 80132e4:	e76f      	b.n	80131c6 <_realloc_r+0x192>
 80132e6:	0023      	movs	r3, r4
 80132e8:	2201      	movs	r2, #1
 80132ea:	3b08      	subs	r3, #8
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	4393      	bics	r3, r2
 80132f0:	9a02      	ldr	r2, [sp, #8]
 80132f2:	18d3      	adds	r3, r2, r3
 80132f4:	0002      	movs	r2, r0
 80132f6:	3a08      	subs	r2, #8
 80132f8:	4293      	cmp	r3, r2
 80132fa:	d105      	bne.n	8013308 <_realloc_r+0x2d4>
 80132fc:	685e      	ldr	r6, [r3, #4]
 80132fe:	2303      	movs	r3, #3
 8013300:	439e      	bics	r6, r3
 8013302:	9b04      	ldr	r3, [sp, #16]
 8013304:	18f6      	adds	r6, r6, r3
 8013306:	e6f9      	b.n	80130fc <_realloc_r+0xc8>
 8013308:	9a04      	ldr	r2, [sp, #16]
 801330a:	3a04      	subs	r2, #4
 801330c:	2a24      	cmp	r2, #36	; 0x24
 801330e:	d82d      	bhi.n	801336c <_realloc_r+0x338>
 8013310:	2a13      	cmp	r2, #19
 8013312:	d928      	bls.n	8013366 <_realloc_r+0x332>
 8013314:	6823      	ldr	r3, [r4, #0]
 8013316:	6003      	str	r3, [r0, #0]
 8013318:	6863      	ldr	r3, [r4, #4]
 801331a:	6043      	str	r3, [r0, #4]
 801331c:	2a1b      	cmp	r2, #27
 801331e:	d80e      	bhi.n	801333e <_realloc_r+0x30a>
 8013320:	0022      	movs	r2, r4
 8013322:	0003      	movs	r3, r0
 8013324:	3208      	adds	r2, #8
 8013326:	3308      	adds	r3, #8
 8013328:	6811      	ldr	r1, [r2, #0]
 801332a:	6019      	str	r1, [r3, #0]
 801332c:	6851      	ldr	r1, [r2, #4]
 801332e:	6059      	str	r1, [r3, #4]
 8013330:	6892      	ldr	r2, [r2, #8]
 8013332:	609a      	str	r2, [r3, #8]
 8013334:	0021      	movs	r1, r4
 8013336:	9803      	ldr	r0, [sp, #12]
 8013338:	f003 f90a 	bl	8016550 <_free_r>
 801333c:	e743      	b.n	80131c6 <_realloc_r+0x192>
 801333e:	68a3      	ldr	r3, [r4, #8]
 8013340:	6083      	str	r3, [r0, #8]
 8013342:	68e3      	ldr	r3, [r4, #12]
 8013344:	60c3      	str	r3, [r0, #12]
 8013346:	2a24      	cmp	r2, #36	; 0x24
 8013348:	d004      	beq.n	8013354 <_realloc_r+0x320>
 801334a:	0022      	movs	r2, r4
 801334c:	0003      	movs	r3, r0
 801334e:	3210      	adds	r2, #16
 8013350:	3310      	adds	r3, #16
 8013352:	e7e9      	b.n	8013328 <_realloc_r+0x2f4>
 8013354:	6923      	ldr	r3, [r4, #16]
 8013356:	0022      	movs	r2, r4
 8013358:	6103      	str	r3, [r0, #16]
 801335a:	0003      	movs	r3, r0
 801335c:	6961      	ldr	r1, [r4, #20]
 801335e:	3218      	adds	r2, #24
 8013360:	3318      	adds	r3, #24
 8013362:	6141      	str	r1, [r0, #20]
 8013364:	e7e0      	b.n	8013328 <_realloc_r+0x2f4>
 8013366:	0003      	movs	r3, r0
 8013368:	0022      	movs	r2, r4
 801336a:	e7dd      	b.n	8013328 <_realloc_r+0x2f4>
 801336c:	0021      	movs	r1, r4
 801336e:	f003 fcf0 	bl	8016d52 <memmove>
 8013372:	e7df      	b.n	8013334 <_realloc_r+0x300>
 8013374:	9e04      	ldr	r6, [sp, #16]
 8013376:	e6c1      	b.n	80130fc <_realloc_r+0xc8>
 8013378:	9902      	ldr	r1, [sp, #8]
 801337a:	4306      	orrs	r6, r0
 801337c:	604e      	str	r6, [r1, #4]
 801337e:	6851      	ldr	r1, [r2, #4]
 8013380:	430b      	orrs	r3, r1
 8013382:	6053      	str	r3, [r2, #4]
 8013384:	e6d6      	b.n	8013134 <_realloc_r+0x100>
 8013386:	46c0      	nop			; (mov r8, r8)
 8013388:	20000644 	.word	0x20000644

0801338c <_sbrk_r>:
 801338c:	2300      	movs	r3, #0
 801338e:	b570      	push	{r4, r5, r6, lr}
 8013390:	4c06      	ldr	r4, [pc, #24]	; (80133ac <_sbrk_r+0x20>)
 8013392:	0005      	movs	r5, r0
 8013394:	0008      	movs	r0, r1
 8013396:	6023      	str	r3, [r4, #0]
 8013398:	f004 f9ec 	bl	8017774 <_sbrk>
 801339c:	1c43      	adds	r3, r0, #1
 801339e:	d103      	bne.n	80133a8 <_sbrk_r+0x1c>
 80133a0:	6823      	ldr	r3, [r4, #0]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d000      	beq.n	80133a8 <_sbrk_r+0x1c>
 80133a6:	602b      	str	r3, [r5, #0]
 80133a8:	bd70      	pop	{r4, r5, r6, pc}
 80133aa:	46c0      	nop			; (mov r8, r8)
 80133ac:	20006ee4 	.word	0x20006ee4

080133b0 <sprintf>:
 80133b0:	b40e      	push	{r1, r2, r3}
 80133b2:	b500      	push	{lr}
 80133b4:	490b      	ldr	r1, [pc, #44]	; (80133e4 <sprintf+0x34>)
 80133b6:	b09c      	sub	sp, #112	; 0x70
 80133b8:	ab1d      	add	r3, sp, #116	; 0x74
 80133ba:	9002      	str	r0, [sp, #8]
 80133bc:	9006      	str	r0, [sp, #24]
 80133be:	9107      	str	r1, [sp, #28]
 80133c0:	9104      	str	r1, [sp, #16]
 80133c2:	4809      	ldr	r0, [pc, #36]	; (80133e8 <sprintf+0x38>)
 80133c4:	4909      	ldr	r1, [pc, #36]	; (80133ec <sprintf+0x3c>)
 80133c6:	cb04      	ldmia	r3!, {r2}
 80133c8:	9105      	str	r1, [sp, #20]
 80133ca:	6800      	ldr	r0, [r0, #0]
 80133cc:	a902      	add	r1, sp, #8
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	f000 ff78 	bl	80142c4 <_svfprintf_r>
 80133d4:	2300      	movs	r3, #0
 80133d6:	9a02      	ldr	r2, [sp, #8]
 80133d8:	7013      	strb	r3, [r2, #0]
 80133da:	b01c      	add	sp, #112	; 0x70
 80133dc:	bc08      	pop	{r3}
 80133de:	b003      	add	sp, #12
 80133e0:	4718      	bx	r3
 80133e2:	46c0      	nop			; (mov r8, r8)
 80133e4:	7fffffff 	.word	0x7fffffff
 80133e8:	200000a8 	.word	0x200000a8
 80133ec:	ffff0208 	.word	0xffff0208

080133f0 <strcat>:
 80133f0:	0002      	movs	r2, r0
 80133f2:	b510      	push	{r4, lr}
 80133f4:	7813      	ldrb	r3, [r2, #0]
 80133f6:	1c54      	adds	r4, r2, #1
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d105      	bne.n	8013408 <strcat+0x18>
 80133fc:	5ccc      	ldrb	r4, [r1, r3]
 80133fe:	54d4      	strb	r4, [r2, r3]
 8013400:	3301      	adds	r3, #1
 8013402:	2c00      	cmp	r4, #0
 8013404:	d1fa      	bne.n	80133fc <strcat+0xc>
 8013406:	bd10      	pop	{r4, pc}
 8013408:	0022      	movs	r2, r4
 801340a:	e7f3      	b.n	80133f4 <strcat+0x4>

0801340c <strchr>:
 801340c:	b2c9      	uxtb	r1, r1
 801340e:	7803      	ldrb	r3, [r0, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d004      	beq.n	801341e <strchr+0x12>
 8013414:	428b      	cmp	r3, r1
 8013416:	d100      	bne.n	801341a <strchr+0xe>
 8013418:	4770      	bx	lr
 801341a:	3001      	adds	r0, #1
 801341c:	e7f7      	b.n	801340e <strchr+0x2>
 801341e:	424b      	negs	r3, r1
 8013420:	4159      	adcs	r1, r3
 8013422:	4249      	negs	r1, r1
 8013424:	4008      	ands	r0, r1
 8013426:	e7f7      	b.n	8013418 <strchr+0xc>

08013428 <strcpy>:
 8013428:	0003      	movs	r3, r0
 801342a:	780a      	ldrb	r2, [r1, #0]
 801342c:	3101      	adds	r1, #1
 801342e:	701a      	strb	r2, [r3, #0]
 8013430:	3301      	adds	r3, #1
 8013432:	2a00      	cmp	r2, #0
 8013434:	d1f9      	bne.n	801342a <strcpy+0x2>
 8013436:	4770      	bx	lr

08013438 <strncmp>:
 8013438:	2300      	movs	r3, #0
 801343a:	b530      	push	{r4, r5, lr}
 801343c:	429a      	cmp	r2, r3
 801343e:	d00a      	beq.n	8013456 <strncmp+0x1e>
 8013440:	3a01      	subs	r2, #1
 8013442:	5cc4      	ldrb	r4, [r0, r3]
 8013444:	5ccd      	ldrb	r5, [r1, r3]
 8013446:	42ac      	cmp	r4, r5
 8013448:	d104      	bne.n	8013454 <strncmp+0x1c>
 801344a:	4293      	cmp	r3, r2
 801344c:	d002      	beq.n	8013454 <strncmp+0x1c>
 801344e:	3301      	adds	r3, #1
 8013450:	2c00      	cmp	r4, #0
 8013452:	d1f6      	bne.n	8013442 <strncmp+0xa>
 8013454:	1b63      	subs	r3, r4, r5
 8013456:	0018      	movs	r0, r3
 8013458:	bd30      	pop	{r4, r5, pc}

0801345a <strncpy>:
 801345a:	b530      	push	{r4, r5, lr}
 801345c:	0005      	movs	r5, r0
 801345e:	2a00      	cmp	r2, #0
 8013460:	d100      	bne.n	8013464 <strncpy+0xa>
 8013462:	bd30      	pop	{r4, r5, pc}
 8013464:	780c      	ldrb	r4, [r1, #0]
 8013466:	3a01      	subs	r2, #1
 8013468:	1c6b      	adds	r3, r5, #1
 801346a:	702c      	strb	r4, [r5, #0]
 801346c:	3101      	adds	r1, #1
 801346e:	2c00      	cmp	r4, #0
 8013470:	d105      	bne.n	801347e <strncpy+0x24>
 8013472:	189a      	adds	r2, r3, r2
 8013474:	429a      	cmp	r2, r3
 8013476:	d0f4      	beq.n	8013462 <strncpy+0x8>
 8013478:	701c      	strb	r4, [r3, #0]
 801347a:	3301      	adds	r3, #1
 801347c:	e7fa      	b.n	8013474 <strncpy+0x1a>
 801347e:	001d      	movs	r5, r3
 8013480:	e7ed      	b.n	801345e <strncpy+0x4>
	...

08013484 <sulp>:
 8013484:	b570      	push	{r4, r5, r6, lr}
 8013486:	0016      	movs	r6, r2
 8013488:	000d      	movs	r5, r1
 801348a:	f003 ff17 	bl	80172bc <__ulp>
 801348e:	2e00      	cmp	r6, #0
 8013490:	d00d      	beq.n	80134ae <sulp+0x2a>
 8013492:	236b      	movs	r3, #107	; 0x6b
 8013494:	006a      	lsls	r2, r5, #1
 8013496:	0d52      	lsrs	r2, r2, #21
 8013498:	1a9b      	subs	r3, r3, r2
 801349a:	2b00      	cmp	r3, #0
 801349c:	dd07      	ble.n	80134ae <sulp+0x2a>
 801349e:	2400      	movs	r4, #0
 80134a0:	4a03      	ldr	r2, [pc, #12]	; (80134b0 <sulp+0x2c>)
 80134a2:	051b      	lsls	r3, r3, #20
 80134a4:	189d      	adds	r5, r3, r2
 80134a6:	002b      	movs	r3, r5
 80134a8:	0022      	movs	r2, r4
 80134aa:	f7ee fcc3 	bl	8001e34 <__aeabi_dmul>
 80134ae:	bd70      	pop	{r4, r5, r6, pc}
 80134b0:	3ff00000 	.word	0x3ff00000

080134b4 <_strtod_l>:
 80134b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134b6:	b0a7      	sub	sp, #156	; 0x9c
 80134b8:	9307      	str	r3, [sp, #28]
 80134ba:	2300      	movs	r3, #0
 80134bc:	9004      	str	r0, [sp, #16]
 80134be:	9807      	ldr	r0, [sp, #28]
 80134c0:	9322      	str	r3, [sp, #136]	; 0x88
 80134c2:	9106      	str	r1, [sp, #24]
 80134c4:	921d      	str	r2, [sp, #116]	; 0x74
 80134c6:	f003 fc28 	bl	8016d1a <__localeconv_l>
 80134ca:	0005      	movs	r5, r0
 80134cc:	6800      	ldr	r0, [r0, #0]
 80134ce:	f7ec fe23 	bl	8000118 <strlen>
 80134d2:	2600      	movs	r6, #0
 80134d4:	2700      	movs	r7, #0
 80134d6:	9b06      	ldr	r3, [sp, #24]
 80134d8:	9005      	str	r0, [sp, #20]
 80134da:	9321      	str	r3, [sp, #132]	; 0x84
 80134dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134de:	781a      	ldrb	r2, [r3, #0]
 80134e0:	2a0d      	cmp	r2, #13
 80134e2:	d839      	bhi.n	8013558 <_strtod_l+0xa4>
 80134e4:	2a09      	cmp	r2, #9
 80134e6:	d23d      	bcs.n	8013564 <_strtod_l+0xb0>
 80134e8:	2a00      	cmp	r2, #0
 80134ea:	d044      	beq.n	8013576 <_strtod_l+0xc2>
 80134ec:	2300      	movs	r3, #0
 80134ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80134f0:	2200      	movs	r2, #0
 80134f2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80134f4:	920c      	str	r2, [sp, #48]	; 0x30
 80134f6:	7823      	ldrb	r3, [r4, #0]
 80134f8:	2b30      	cmp	r3, #48	; 0x30
 80134fa:	d000      	beq.n	80134fe <_strtod_l+0x4a>
 80134fc:	e07e      	b.n	80135fc <_strtod_l+0x148>
 80134fe:	7863      	ldrb	r3, [r4, #1]
 8013500:	2b58      	cmp	r3, #88	; 0x58
 8013502:	d002      	beq.n	801350a <_strtod_l+0x56>
 8013504:	2b78      	cmp	r3, #120	; 0x78
 8013506:	d000      	beq.n	801350a <_strtod_l+0x56>
 8013508:	e06e      	b.n	80135e8 <_strtod_l+0x134>
 801350a:	9b07      	ldr	r3, [sp, #28]
 801350c:	4a96      	ldr	r2, [pc, #600]	; (8013768 <_strtod_l+0x2b4>)
 801350e:	9302      	str	r3, [sp, #8]
 8013510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013512:	a921      	add	r1, sp, #132	; 0x84
 8013514:	9301      	str	r3, [sp, #4]
 8013516:	ab22      	add	r3, sp, #136	; 0x88
 8013518:	9300      	str	r3, [sp, #0]
 801351a:	9804      	ldr	r0, [sp, #16]
 801351c:	ab23      	add	r3, sp, #140	; 0x8c
 801351e:	f003 f914 	bl	801674a <__gethex>
 8013522:	2507      	movs	r5, #7
 8013524:	9005      	str	r0, [sp, #20]
 8013526:	4005      	ands	r5, r0
 8013528:	d005      	beq.n	8013536 <_strtod_l+0x82>
 801352a:	2d06      	cmp	r5, #6
 801352c:	d12f      	bne.n	801358e <_strtod_l+0xda>
 801352e:	2300      	movs	r3, #0
 8013530:	3401      	adds	r4, #1
 8013532:	9421      	str	r4, [sp, #132]	; 0x84
 8013534:	9313      	str	r3, [sp, #76]	; 0x4c
 8013536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013538:	2b00      	cmp	r3, #0
 801353a:	d002      	beq.n	8013542 <_strtod_l+0x8e>
 801353c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801353e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013540:	601a      	str	r2, [r3, #0]
 8013542:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013544:	2b00      	cmp	r3, #0
 8013546:	d01d      	beq.n	8013584 <_strtod_l+0xd0>
 8013548:	2380      	movs	r3, #128	; 0x80
 801354a:	0032      	movs	r2, r6
 801354c:	061b      	lsls	r3, r3, #24
 801354e:	18fb      	adds	r3, r7, r3
 8013550:	0010      	movs	r0, r2
 8013552:	0019      	movs	r1, r3
 8013554:	b027      	add	sp, #156	; 0x9c
 8013556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013558:	2a2b      	cmp	r2, #43	; 0x2b
 801355a:	d016      	beq.n	801358a <_strtod_l+0xd6>
 801355c:	2a2d      	cmp	r2, #45	; 0x2d
 801355e:	d003      	beq.n	8013568 <_strtod_l+0xb4>
 8013560:	2a20      	cmp	r2, #32
 8013562:	d1c3      	bne.n	80134ec <_strtod_l+0x38>
 8013564:	3301      	adds	r3, #1
 8013566:	e7b8      	b.n	80134da <_strtod_l+0x26>
 8013568:	2201      	movs	r2, #1
 801356a:	9213      	str	r2, [sp, #76]	; 0x4c
 801356c:	1c5a      	adds	r2, r3, #1
 801356e:	9221      	str	r2, [sp, #132]	; 0x84
 8013570:	785b      	ldrb	r3, [r3, #1]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d1bc      	bne.n	80134f0 <_strtod_l+0x3c>
 8013576:	9b06      	ldr	r3, [sp, #24]
 8013578:	9321      	str	r3, [sp, #132]	; 0x84
 801357a:	2300      	movs	r3, #0
 801357c:	9313      	str	r3, [sp, #76]	; 0x4c
 801357e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013580:	2b00      	cmp	r3, #0
 8013582:	d1db      	bne.n	801353c <_strtod_l+0x88>
 8013584:	0032      	movs	r2, r6
 8013586:	003b      	movs	r3, r7
 8013588:	e7e2      	b.n	8013550 <_strtod_l+0x9c>
 801358a:	2200      	movs	r2, #0
 801358c:	e7ed      	b.n	801356a <_strtod_l+0xb6>
 801358e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013590:	2a00      	cmp	r2, #0
 8013592:	d007      	beq.n	80135a4 <_strtod_l+0xf0>
 8013594:	2135      	movs	r1, #53	; 0x35
 8013596:	a824      	add	r0, sp, #144	; 0x90
 8013598:	f003 ff7d 	bl	8017496 <__copybits>
 801359c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801359e:	9804      	ldr	r0, [sp, #16]
 80135a0:	f003 fc12 	bl	8016dc8 <_Bfree>
 80135a4:	1e68      	subs	r0, r5, #1
 80135a6:	2804      	cmp	r0, #4
 80135a8:	d806      	bhi.n	80135b8 <_strtod_l+0x104>
 80135aa:	f7ec fdbd 	bl	8000128 <__gnu_thumb1_case_uqi>
 80135ae:	030c      	.short	0x030c
 80135b0:	1917      	.short	0x1917
 80135b2:	0c          	.byte	0x0c
 80135b3:	00          	.byte	0x00
 80135b4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135b6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80135b8:	9b05      	ldr	r3, [sp, #20]
 80135ba:	071b      	lsls	r3, r3, #28
 80135bc:	d5bb      	bpl.n	8013536 <_strtod_l+0x82>
 80135be:	2380      	movs	r3, #128	; 0x80
 80135c0:	061b      	lsls	r3, r3, #24
 80135c2:	431f      	orrs	r7, r3
 80135c4:	e7b7      	b.n	8013536 <_strtod_l+0x82>
 80135c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80135c8:	4a68      	ldr	r2, [pc, #416]	; (801376c <_strtod_l+0x2b8>)
 80135ca:	4969      	ldr	r1, [pc, #420]	; (8013770 <_strtod_l+0x2bc>)
 80135cc:	401a      	ands	r2, r3
 80135ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80135d0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135d2:	185b      	adds	r3, r3, r1
 80135d4:	051b      	lsls	r3, r3, #20
 80135d6:	431a      	orrs	r2, r3
 80135d8:	0017      	movs	r7, r2
 80135da:	e7ed      	b.n	80135b8 <_strtod_l+0x104>
 80135dc:	4f65      	ldr	r7, [pc, #404]	; (8013774 <_strtod_l+0x2c0>)
 80135de:	e7eb      	b.n	80135b8 <_strtod_l+0x104>
 80135e0:	2601      	movs	r6, #1
 80135e2:	4f65      	ldr	r7, [pc, #404]	; (8013778 <_strtod_l+0x2c4>)
 80135e4:	4276      	negs	r6, r6
 80135e6:	e7e7      	b.n	80135b8 <_strtod_l+0x104>
 80135e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135ea:	1c5a      	adds	r2, r3, #1
 80135ec:	9221      	str	r2, [sp, #132]	; 0x84
 80135ee:	785b      	ldrb	r3, [r3, #1]
 80135f0:	2b30      	cmp	r3, #48	; 0x30
 80135f2:	d0f9      	beq.n	80135e8 <_strtod_l+0x134>
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d09e      	beq.n	8013536 <_strtod_l+0x82>
 80135f8:	2301      	movs	r3, #1
 80135fa:	930c      	str	r3, [sp, #48]	; 0x30
 80135fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135fe:	220a      	movs	r2, #10
 8013600:	9312      	str	r3, [sp, #72]	; 0x48
 8013602:	2300      	movs	r3, #0
 8013604:	930b      	str	r3, [sp, #44]	; 0x2c
 8013606:	9308      	str	r3, [sp, #32]
 8013608:	930a      	str	r3, [sp, #40]	; 0x28
 801360a:	9821      	ldr	r0, [sp, #132]	; 0x84
 801360c:	7804      	ldrb	r4, [r0, #0]
 801360e:	0023      	movs	r3, r4
 8013610:	3b30      	subs	r3, #48	; 0x30
 8013612:	b2d9      	uxtb	r1, r3
 8013614:	2909      	cmp	r1, #9
 8013616:	d934      	bls.n	8013682 <_strtod_l+0x1ce>
 8013618:	9a05      	ldr	r2, [sp, #20]
 801361a:	6829      	ldr	r1, [r5, #0]
 801361c:	f7ff ff0c 	bl	8013438 <strncmp>
 8013620:	2800      	cmp	r0, #0
 8013622:	d040      	beq.n	80136a6 <_strtod_l+0x1f2>
 8013624:	2000      	movs	r0, #0
 8013626:	0023      	movs	r3, r4
 8013628:	4684      	mov	ip, r0
 801362a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801362c:	9007      	str	r0, [sp, #28]
 801362e:	9205      	str	r2, [sp, #20]
 8013630:	2220      	movs	r2, #32
 8013632:	0019      	movs	r1, r3
 8013634:	4391      	bics	r1, r2
 8013636:	000a      	movs	r2, r1
 8013638:	2100      	movs	r1, #0
 801363a:	2a45      	cmp	r2, #69	; 0x45
 801363c:	d000      	beq.n	8013640 <_strtod_l+0x18c>
 801363e:	e0bf      	b.n	80137c0 <_strtod_l+0x30c>
 8013640:	9b05      	ldr	r3, [sp, #20]
 8013642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013644:	4303      	orrs	r3, r0
 8013646:	4313      	orrs	r3, r2
 8013648:	428b      	cmp	r3, r1
 801364a:	d094      	beq.n	8013576 <_strtod_l+0xc2>
 801364c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801364e:	9306      	str	r3, [sp, #24]
 8013650:	3301      	adds	r3, #1
 8013652:	9321      	str	r3, [sp, #132]	; 0x84
 8013654:	9b06      	ldr	r3, [sp, #24]
 8013656:	785b      	ldrb	r3, [r3, #1]
 8013658:	2b2b      	cmp	r3, #43	; 0x2b
 801365a:	d100      	bne.n	801365e <_strtod_l+0x1aa>
 801365c:	e082      	b.n	8013764 <_strtod_l+0x2b0>
 801365e:	000c      	movs	r4, r1
 8013660:	2b2d      	cmp	r3, #45	; 0x2d
 8013662:	d105      	bne.n	8013670 <_strtod_l+0x1bc>
 8013664:	2401      	movs	r4, #1
 8013666:	9b06      	ldr	r3, [sp, #24]
 8013668:	3302      	adds	r3, #2
 801366a:	9321      	str	r3, [sp, #132]	; 0x84
 801366c:	9b06      	ldr	r3, [sp, #24]
 801366e:	789b      	ldrb	r3, [r3, #2]
 8013670:	001a      	movs	r2, r3
 8013672:	3a30      	subs	r2, #48	; 0x30
 8013674:	2a09      	cmp	r2, #9
 8013676:	d800      	bhi.n	801367a <_strtod_l+0x1c6>
 8013678:	e084      	b.n	8013784 <_strtod_l+0x2d0>
 801367a:	9a06      	ldr	r2, [sp, #24]
 801367c:	2100      	movs	r1, #0
 801367e:	9221      	str	r2, [sp, #132]	; 0x84
 8013680:	e09e      	b.n	80137c0 <_strtod_l+0x30c>
 8013682:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013684:	2908      	cmp	r1, #8
 8013686:	dc09      	bgt.n	801369c <_strtod_l+0x1e8>
 8013688:	9908      	ldr	r1, [sp, #32]
 801368a:	4351      	muls	r1, r2
 801368c:	18cb      	adds	r3, r1, r3
 801368e:	9308      	str	r3, [sp, #32]
 8013690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013692:	3001      	adds	r0, #1
 8013694:	3301      	adds	r3, #1
 8013696:	930a      	str	r3, [sp, #40]	; 0x28
 8013698:	9021      	str	r0, [sp, #132]	; 0x84
 801369a:	e7b6      	b.n	801360a <_strtod_l+0x156>
 801369c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801369e:	4351      	muls	r1, r2
 80136a0:	18cb      	adds	r3, r1, r3
 80136a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80136a4:	e7f4      	b.n	8013690 <_strtod_l+0x1dc>
 80136a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80136a8:	9b05      	ldr	r3, [sp, #20]
 80136aa:	4694      	mov	ip, r2
 80136ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ae:	4463      	add	r3, ip
 80136b0:	9321      	str	r3, [sp, #132]	; 0x84
 80136b2:	781b      	ldrb	r3, [r3, #0]
 80136b4:	2a00      	cmp	r2, #0
 80136b6:	d036      	beq.n	8013726 <_strtod_l+0x272>
 80136b8:	4684      	mov	ip, r0
 80136ba:	9205      	str	r2, [sp, #20]
 80136bc:	001a      	movs	r2, r3
 80136be:	3a30      	subs	r2, #48	; 0x30
 80136c0:	2a09      	cmp	r2, #9
 80136c2:	d912      	bls.n	80136ea <_strtod_l+0x236>
 80136c4:	2201      	movs	r2, #1
 80136c6:	9207      	str	r2, [sp, #28]
 80136c8:	e7b2      	b.n	8013630 <_strtod_l+0x17c>
 80136ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136cc:	3001      	adds	r0, #1
 80136ce:	1c5a      	adds	r2, r3, #1
 80136d0:	9221      	str	r2, [sp, #132]	; 0x84
 80136d2:	785b      	ldrb	r3, [r3, #1]
 80136d4:	2b30      	cmp	r3, #48	; 0x30
 80136d6:	d0f8      	beq.n	80136ca <_strtod_l+0x216>
 80136d8:	001a      	movs	r2, r3
 80136da:	3a31      	subs	r2, #49	; 0x31
 80136dc:	2a08      	cmp	r2, #8
 80136de:	d83c      	bhi.n	801375a <_strtod_l+0x2a6>
 80136e0:	4684      	mov	ip, r0
 80136e2:	2000      	movs	r0, #0
 80136e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80136e6:	9005      	str	r0, [sp, #20]
 80136e8:	9212      	str	r2, [sp, #72]	; 0x48
 80136ea:	3b30      	subs	r3, #48	; 0x30
 80136ec:	1c42      	adds	r2, r0, #1
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d013      	beq.n	801371a <_strtod_l+0x266>
 80136f2:	210a      	movs	r1, #10
 80136f4:	4494      	add	ip, r2
 80136f6:	9a05      	ldr	r2, [sp, #20]
 80136f8:	1885      	adds	r5, r0, r2
 80136fa:	42aa      	cmp	r2, r5
 80136fc:	d115      	bne.n	801372a <_strtod_l+0x276>
 80136fe:	9905      	ldr	r1, [sp, #20]
 8013700:	9a05      	ldr	r2, [sp, #20]
 8013702:	3101      	adds	r1, #1
 8013704:	1809      	adds	r1, r1, r0
 8013706:	1812      	adds	r2, r2, r0
 8013708:	9105      	str	r1, [sp, #20]
 801370a:	2a08      	cmp	r2, #8
 801370c:	dc1b      	bgt.n	8013746 <_strtod_l+0x292>
 801370e:	220a      	movs	r2, #10
 8013710:	9908      	ldr	r1, [sp, #32]
 8013712:	434a      	muls	r2, r1
 8013714:	189b      	adds	r3, r3, r2
 8013716:	2200      	movs	r2, #0
 8013718:	9308      	str	r3, [sp, #32]
 801371a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801371c:	0010      	movs	r0, r2
 801371e:	1c59      	adds	r1, r3, #1
 8013720:	9121      	str	r1, [sp, #132]	; 0x84
 8013722:	785b      	ldrb	r3, [r3, #1]
 8013724:	e7ca      	b.n	80136bc <_strtod_l+0x208>
 8013726:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013728:	e7d4      	b.n	80136d4 <_strtod_l+0x220>
 801372a:	1c54      	adds	r4, r2, #1
 801372c:	2a08      	cmp	r2, #8
 801372e:	dc04      	bgt.n	801373a <_strtod_l+0x286>
 8013730:	9a08      	ldr	r2, [sp, #32]
 8013732:	434a      	muls	r2, r1
 8013734:	9208      	str	r2, [sp, #32]
 8013736:	0022      	movs	r2, r4
 8013738:	e7df      	b.n	80136fa <_strtod_l+0x246>
 801373a:	2c10      	cmp	r4, #16
 801373c:	dcfb      	bgt.n	8013736 <_strtod_l+0x282>
 801373e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013740:	434a      	muls	r2, r1
 8013742:	920b      	str	r2, [sp, #44]	; 0x2c
 8013744:	e7f7      	b.n	8013736 <_strtod_l+0x282>
 8013746:	9905      	ldr	r1, [sp, #20]
 8013748:	2200      	movs	r2, #0
 801374a:	2910      	cmp	r1, #16
 801374c:	dce5      	bgt.n	801371a <_strtod_l+0x266>
 801374e:	210a      	movs	r1, #10
 8013750:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013752:	4341      	muls	r1, r0
 8013754:	185b      	adds	r3, r3, r1
 8013756:	930b      	str	r3, [sp, #44]	; 0x2c
 8013758:	e7df      	b.n	801371a <_strtod_l+0x266>
 801375a:	2200      	movs	r2, #0
 801375c:	4694      	mov	ip, r2
 801375e:	9205      	str	r2, [sp, #20]
 8013760:	3201      	adds	r2, #1
 8013762:	e7b0      	b.n	80136c6 <_strtod_l+0x212>
 8013764:	000c      	movs	r4, r1
 8013766:	e77e      	b.n	8013666 <_strtod_l+0x1b2>
 8013768:	0801a658 	.word	0x0801a658
 801376c:	ffefffff 	.word	0xffefffff
 8013770:	00000433 	.word	0x00000433
 8013774:	7ff00000 	.word	0x7ff00000
 8013778:	7fffffff 	.word	0x7fffffff
 801377c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801377e:	1c5a      	adds	r2, r3, #1
 8013780:	9221      	str	r2, [sp, #132]	; 0x84
 8013782:	785b      	ldrb	r3, [r3, #1]
 8013784:	2b30      	cmp	r3, #48	; 0x30
 8013786:	d0f9      	beq.n	801377c <_strtod_l+0x2c8>
 8013788:	001a      	movs	r2, r3
 801378a:	3a31      	subs	r2, #49	; 0x31
 801378c:	2100      	movs	r1, #0
 801378e:	2a08      	cmp	r2, #8
 8013790:	d816      	bhi.n	80137c0 <_strtod_l+0x30c>
 8013792:	3b30      	subs	r3, #48	; 0x30
 8013794:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8013796:	930e      	str	r3, [sp, #56]	; 0x38
 8013798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801379a:	1c59      	adds	r1, r3, #1
 801379c:	9121      	str	r1, [sp, #132]	; 0x84
 801379e:	785b      	ldrb	r3, [r3, #1]
 80137a0:	001a      	movs	r2, r3
 80137a2:	3a30      	subs	r2, #48	; 0x30
 80137a4:	2a09      	cmp	r2, #9
 80137a6:	d932      	bls.n	801380e <_strtod_l+0x35a>
 80137a8:	1b4a      	subs	r2, r1, r5
 80137aa:	4dad      	ldr	r5, [pc, #692]	; (8013a60 <_strtod_l+0x5ac>)
 80137ac:	0029      	movs	r1, r5
 80137ae:	2a08      	cmp	r2, #8
 80137b0:	dc03      	bgt.n	80137ba <_strtod_l+0x306>
 80137b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80137b4:	42a9      	cmp	r1, r5
 80137b6:	dd00      	ble.n	80137ba <_strtod_l+0x306>
 80137b8:	0029      	movs	r1, r5
 80137ba:	2c00      	cmp	r4, #0
 80137bc:	d000      	beq.n	80137c0 <_strtod_l+0x30c>
 80137be:	4249      	negs	r1, r1
 80137c0:	9a05      	ldr	r2, [sp, #20]
 80137c2:	2a00      	cmp	r2, #0
 80137c4:	d149      	bne.n	801385a <_strtod_l+0x3a6>
 80137c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137c8:	4310      	orrs	r0, r2
 80137ca:	d000      	beq.n	80137ce <_strtod_l+0x31a>
 80137cc:	e6b3      	b.n	8013536 <_strtod_l+0x82>
 80137ce:	9a07      	ldr	r2, [sp, #28]
 80137d0:	2a00      	cmp	r2, #0
 80137d2:	d000      	beq.n	80137d6 <_strtod_l+0x322>
 80137d4:	e6cf      	b.n	8013576 <_strtod_l+0xc2>
 80137d6:	2b4e      	cmp	r3, #78	; 0x4e
 80137d8:	d025      	beq.n	8013826 <_strtod_l+0x372>
 80137da:	dc1f      	bgt.n	801381c <_strtod_l+0x368>
 80137dc:	2b49      	cmp	r3, #73	; 0x49
 80137de:	d000      	beq.n	80137e2 <_strtod_l+0x32e>
 80137e0:	e6c9      	b.n	8013576 <_strtod_l+0xc2>
 80137e2:	49a0      	ldr	r1, [pc, #640]	; (8013a64 <_strtod_l+0x5b0>)
 80137e4:	a821      	add	r0, sp, #132	; 0x84
 80137e6:	f003 f9ed 	bl	8016bc4 <__match>
 80137ea:	2800      	cmp	r0, #0
 80137ec:	d100      	bne.n	80137f0 <_strtod_l+0x33c>
 80137ee:	e6c2      	b.n	8013576 <_strtod_l+0xc2>
 80137f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137f2:	499d      	ldr	r1, [pc, #628]	; (8013a68 <_strtod_l+0x5b4>)
 80137f4:	3b01      	subs	r3, #1
 80137f6:	a821      	add	r0, sp, #132	; 0x84
 80137f8:	9321      	str	r3, [sp, #132]	; 0x84
 80137fa:	f003 f9e3 	bl	8016bc4 <__match>
 80137fe:	2800      	cmp	r0, #0
 8013800:	d102      	bne.n	8013808 <_strtod_l+0x354>
 8013802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013804:	3301      	adds	r3, #1
 8013806:	9321      	str	r3, [sp, #132]	; 0x84
 8013808:	4f98      	ldr	r7, [pc, #608]	; (8013a6c <_strtod_l+0x5b8>)
 801380a:	2600      	movs	r6, #0
 801380c:	e693      	b.n	8013536 <_strtod_l+0x82>
 801380e:	220a      	movs	r2, #10
 8013810:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013812:	434a      	muls	r2, r1
 8013814:	18d2      	adds	r2, r2, r3
 8013816:	3a30      	subs	r2, #48	; 0x30
 8013818:	920e      	str	r2, [sp, #56]	; 0x38
 801381a:	e7bd      	b.n	8013798 <_strtod_l+0x2e4>
 801381c:	2b69      	cmp	r3, #105	; 0x69
 801381e:	d0e0      	beq.n	80137e2 <_strtod_l+0x32e>
 8013820:	2b6e      	cmp	r3, #110	; 0x6e
 8013822:	d000      	beq.n	8013826 <_strtod_l+0x372>
 8013824:	e6a7      	b.n	8013576 <_strtod_l+0xc2>
 8013826:	4992      	ldr	r1, [pc, #584]	; (8013a70 <_strtod_l+0x5bc>)
 8013828:	a821      	add	r0, sp, #132	; 0x84
 801382a:	f003 f9cb 	bl	8016bc4 <__match>
 801382e:	2800      	cmp	r0, #0
 8013830:	d100      	bne.n	8013834 <_strtod_l+0x380>
 8013832:	e6a0      	b.n	8013576 <_strtod_l+0xc2>
 8013834:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	2b28      	cmp	r3, #40	; 0x28
 801383a:	d10c      	bne.n	8013856 <_strtod_l+0x3a2>
 801383c:	aa24      	add	r2, sp, #144	; 0x90
 801383e:	498d      	ldr	r1, [pc, #564]	; (8013a74 <_strtod_l+0x5c0>)
 8013840:	a821      	add	r0, sp, #132	; 0x84
 8013842:	f003 f9d3 	bl	8016bec <__hexnan>
 8013846:	2805      	cmp	r0, #5
 8013848:	d105      	bne.n	8013856 <_strtod_l+0x3a2>
 801384a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801384c:	4a87      	ldr	r2, [pc, #540]	; (8013a6c <_strtod_l+0x5b8>)
 801384e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013850:	431a      	orrs	r2, r3
 8013852:	0017      	movs	r7, r2
 8013854:	e66f      	b.n	8013536 <_strtod_l+0x82>
 8013856:	4f88      	ldr	r7, [pc, #544]	; (8013a78 <_strtod_l+0x5c4>)
 8013858:	e7d7      	b.n	801380a <_strtod_l+0x356>
 801385a:	4663      	mov	r3, ip
 801385c:	1acb      	subs	r3, r1, r3
 801385e:	9307      	str	r3, [sp, #28]
 8013860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013862:	2b00      	cmp	r3, #0
 8013864:	d101      	bne.n	801386a <_strtod_l+0x3b6>
 8013866:	9b05      	ldr	r3, [sp, #20]
 8013868:	930a      	str	r3, [sp, #40]	; 0x28
 801386a:	9c05      	ldr	r4, [sp, #20]
 801386c:	2c10      	cmp	r4, #16
 801386e:	dd00      	ble.n	8013872 <_strtod_l+0x3be>
 8013870:	2410      	movs	r4, #16
 8013872:	9808      	ldr	r0, [sp, #32]
 8013874:	f7ef f924 	bl	8002ac0 <__aeabi_ui2d>
 8013878:	9b05      	ldr	r3, [sp, #20]
 801387a:	0006      	movs	r6, r0
 801387c:	000f      	movs	r7, r1
 801387e:	2b09      	cmp	r3, #9
 8013880:	dc15      	bgt.n	80138ae <_strtod_l+0x3fa>
 8013882:	9b07      	ldr	r3, [sp, #28]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d100      	bne.n	801388a <_strtod_l+0x3d6>
 8013888:	e655      	b.n	8013536 <_strtod_l+0x82>
 801388a:	9b07      	ldr	r3, [sp, #28]
 801388c:	2b00      	cmp	r3, #0
 801388e:	dc00      	bgt.n	8013892 <_strtod_l+0x3de>
 8013890:	e07d      	b.n	801398e <_strtod_l+0x4da>
 8013892:	2b16      	cmp	r3, #22
 8013894:	dc62      	bgt.n	801395c <_strtod_l+0x4a8>
 8013896:	00dc      	lsls	r4, r3, #3
 8013898:	4b78      	ldr	r3, [pc, #480]	; (8013a7c <_strtod_l+0x5c8>)
 801389a:	0032      	movs	r2, r6
 801389c:	1919      	adds	r1, r3, r4
 801389e:	003b      	movs	r3, r7
 80138a0:	6808      	ldr	r0, [r1, #0]
 80138a2:	6849      	ldr	r1, [r1, #4]
 80138a4:	f7ee fac6 	bl	8001e34 <__aeabi_dmul>
 80138a8:	0006      	movs	r6, r0
 80138aa:	000f      	movs	r7, r1
 80138ac:	e643      	b.n	8013536 <_strtod_l+0x82>
 80138ae:	0022      	movs	r2, r4
 80138b0:	4b72      	ldr	r3, [pc, #456]	; (8013a7c <_strtod_l+0x5c8>)
 80138b2:	3a09      	subs	r2, #9
 80138b4:	00d2      	lsls	r2, r2, #3
 80138b6:	189b      	adds	r3, r3, r2
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	f7ee faba 	bl	8001e34 <__aeabi_dmul>
 80138c0:	0006      	movs	r6, r0
 80138c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80138c4:	000f      	movs	r7, r1
 80138c6:	f7ef f8fb 	bl	8002ac0 <__aeabi_ui2d>
 80138ca:	000b      	movs	r3, r1
 80138cc:	0002      	movs	r2, r0
 80138ce:	0039      	movs	r1, r7
 80138d0:	0030      	movs	r0, r6
 80138d2:	f7ed fb89 	bl	8000fe8 <__aeabi_dadd>
 80138d6:	9b05      	ldr	r3, [sp, #20]
 80138d8:	0006      	movs	r6, r0
 80138da:	000f      	movs	r7, r1
 80138dc:	2b0f      	cmp	r3, #15
 80138de:	ddd0      	ble.n	8013882 <_strtod_l+0x3ce>
 80138e0:	9b05      	ldr	r3, [sp, #20]
 80138e2:	1b1c      	subs	r4, r3, r4
 80138e4:	9b07      	ldr	r3, [sp, #28]
 80138e6:	18e4      	adds	r4, r4, r3
 80138e8:	2c00      	cmp	r4, #0
 80138ea:	dc00      	bgt.n	80138ee <_strtod_l+0x43a>
 80138ec:	e094      	b.n	8013a18 <_strtod_l+0x564>
 80138ee:	230f      	movs	r3, #15
 80138f0:	4023      	ands	r3, r4
 80138f2:	d00a      	beq.n	801390a <_strtod_l+0x456>
 80138f4:	4961      	ldr	r1, [pc, #388]	; (8013a7c <_strtod_l+0x5c8>)
 80138f6:	00db      	lsls	r3, r3, #3
 80138f8:	18c9      	adds	r1, r1, r3
 80138fa:	0032      	movs	r2, r6
 80138fc:	6808      	ldr	r0, [r1, #0]
 80138fe:	6849      	ldr	r1, [r1, #4]
 8013900:	003b      	movs	r3, r7
 8013902:	f7ee fa97 	bl	8001e34 <__aeabi_dmul>
 8013906:	0006      	movs	r6, r0
 8013908:	000f      	movs	r7, r1
 801390a:	230f      	movs	r3, #15
 801390c:	439c      	bics	r4, r3
 801390e:	d06e      	beq.n	80139ee <_strtod_l+0x53a>
 8013910:	3326      	adds	r3, #38	; 0x26
 8013912:	33ff      	adds	r3, #255	; 0xff
 8013914:	429c      	cmp	r4, r3
 8013916:	dd48      	ble.n	80139aa <_strtod_l+0x4f6>
 8013918:	2400      	movs	r4, #0
 801391a:	9405      	str	r4, [sp, #20]
 801391c:	940b      	str	r4, [sp, #44]	; 0x2c
 801391e:	940a      	str	r4, [sp, #40]	; 0x28
 8013920:	2322      	movs	r3, #34	; 0x22
 8013922:	2600      	movs	r6, #0
 8013924:	9a04      	ldr	r2, [sp, #16]
 8013926:	4f51      	ldr	r7, [pc, #324]	; (8013a6c <_strtod_l+0x5b8>)
 8013928:	6013      	str	r3, [r2, #0]
 801392a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801392c:	42b3      	cmp	r3, r6
 801392e:	d100      	bne.n	8013932 <_strtod_l+0x47e>
 8013930:	e601      	b.n	8013536 <_strtod_l+0x82>
 8013932:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013934:	9804      	ldr	r0, [sp, #16]
 8013936:	f003 fa47 	bl	8016dc8 <_Bfree>
 801393a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801393c:	9804      	ldr	r0, [sp, #16]
 801393e:	f003 fa43 	bl	8016dc8 <_Bfree>
 8013942:	9905      	ldr	r1, [sp, #20]
 8013944:	9804      	ldr	r0, [sp, #16]
 8013946:	f003 fa3f 	bl	8016dc8 <_Bfree>
 801394a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801394c:	9804      	ldr	r0, [sp, #16]
 801394e:	f003 fa3b 	bl	8016dc8 <_Bfree>
 8013952:	0021      	movs	r1, r4
 8013954:	9804      	ldr	r0, [sp, #16]
 8013956:	f003 fa37 	bl	8016dc8 <_Bfree>
 801395a:	e5ec      	b.n	8013536 <_strtod_l+0x82>
 801395c:	2325      	movs	r3, #37	; 0x25
 801395e:	9a05      	ldr	r2, [sp, #20]
 8013960:	1a9b      	subs	r3, r3, r2
 8013962:	9a07      	ldr	r2, [sp, #28]
 8013964:	4293      	cmp	r3, r2
 8013966:	dbbb      	blt.n	80138e0 <_strtod_l+0x42c>
 8013968:	230f      	movs	r3, #15
 801396a:	9a05      	ldr	r2, [sp, #20]
 801396c:	4c43      	ldr	r4, [pc, #268]	; (8013a7c <_strtod_l+0x5c8>)
 801396e:	1a9d      	subs	r5, r3, r2
 8013970:	00e9      	lsls	r1, r5, #3
 8013972:	1861      	adds	r1, r4, r1
 8013974:	0032      	movs	r2, r6
 8013976:	6808      	ldr	r0, [r1, #0]
 8013978:	6849      	ldr	r1, [r1, #4]
 801397a:	003b      	movs	r3, r7
 801397c:	f7ee fa5a 	bl	8001e34 <__aeabi_dmul>
 8013980:	9b07      	ldr	r3, [sp, #28]
 8013982:	1b5e      	subs	r6, r3, r5
 8013984:	00f6      	lsls	r6, r6, #3
 8013986:	19a6      	adds	r6, r4, r6
 8013988:	6832      	ldr	r2, [r6, #0]
 801398a:	6873      	ldr	r3, [r6, #4]
 801398c:	e78a      	b.n	80138a4 <_strtod_l+0x3f0>
 801398e:	9b07      	ldr	r3, [sp, #28]
 8013990:	3316      	adds	r3, #22
 8013992:	dba5      	blt.n	80138e0 <_strtod_l+0x42c>
 8013994:	9b07      	ldr	r3, [sp, #28]
 8013996:	0030      	movs	r0, r6
 8013998:	00da      	lsls	r2, r3, #3
 801399a:	4b38      	ldr	r3, [pc, #224]	; (8013a7c <_strtod_l+0x5c8>)
 801399c:	0039      	movs	r1, r7
 801399e:	1a9b      	subs	r3, r3, r2
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	f7ed fe3c 	bl	8001620 <__aeabi_ddiv>
 80139a8:	e77e      	b.n	80138a8 <_strtod_l+0x3f4>
 80139aa:	2300      	movs	r3, #0
 80139ac:	0030      	movs	r0, r6
 80139ae:	0039      	movs	r1, r7
 80139b0:	001d      	movs	r5, r3
 80139b2:	1124      	asrs	r4, r4, #4
 80139b4:	2c01      	cmp	r4, #1
 80139b6:	dc1d      	bgt.n	80139f4 <_strtod_l+0x540>
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d001      	beq.n	80139c0 <_strtod_l+0x50c>
 80139bc:	0006      	movs	r6, r0
 80139be:	000f      	movs	r7, r1
 80139c0:	4b2f      	ldr	r3, [pc, #188]	; (8013a80 <_strtod_l+0x5cc>)
 80139c2:	00ed      	lsls	r5, r5, #3
 80139c4:	18ff      	adds	r7, r7, r3
 80139c6:	4b2f      	ldr	r3, [pc, #188]	; (8013a84 <_strtod_l+0x5d0>)
 80139c8:	0032      	movs	r2, r6
 80139ca:	195d      	adds	r5, r3, r5
 80139cc:	6828      	ldr	r0, [r5, #0]
 80139ce:	6869      	ldr	r1, [r5, #4]
 80139d0:	003b      	movs	r3, r7
 80139d2:	f7ee fa2f 	bl	8001e34 <__aeabi_dmul>
 80139d6:	4b25      	ldr	r3, [pc, #148]	; (8013a6c <_strtod_l+0x5b8>)
 80139d8:	4a2b      	ldr	r2, [pc, #172]	; (8013a88 <_strtod_l+0x5d4>)
 80139da:	0006      	movs	r6, r0
 80139dc:	400b      	ands	r3, r1
 80139de:	4293      	cmp	r3, r2
 80139e0:	d89a      	bhi.n	8013918 <_strtod_l+0x464>
 80139e2:	4a2a      	ldr	r2, [pc, #168]	; (8013a8c <_strtod_l+0x5d8>)
 80139e4:	4293      	cmp	r3, r2
 80139e6:	d913      	bls.n	8013a10 <_strtod_l+0x55c>
 80139e8:	2601      	movs	r6, #1
 80139ea:	4f29      	ldr	r7, [pc, #164]	; (8013a90 <_strtod_l+0x5dc>)
 80139ec:	4276      	negs	r6, r6
 80139ee:	2300      	movs	r3, #0
 80139f0:	9306      	str	r3, [sp, #24]
 80139f2:	e07b      	b.n	8013aec <_strtod_l+0x638>
 80139f4:	2201      	movs	r2, #1
 80139f6:	4214      	tst	r4, r2
 80139f8:	d007      	beq.n	8013a0a <_strtod_l+0x556>
 80139fa:	4a22      	ldr	r2, [pc, #136]	; (8013a84 <_strtod_l+0x5d0>)
 80139fc:	00eb      	lsls	r3, r5, #3
 80139fe:	189b      	adds	r3, r3, r2
 8013a00:	681a      	ldr	r2, [r3, #0]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	f7ee fa16 	bl	8001e34 <__aeabi_dmul>
 8013a08:	2301      	movs	r3, #1
 8013a0a:	3501      	adds	r5, #1
 8013a0c:	1064      	asrs	r4, r4, #1
 8013a0e:	e7d1      	b.n	80139b4 <_strtod_l+0x500>
 8013a10:	23d4      	movs	r3, #212	; 0xd4
 8013a12:	049b      	lsls	r3, r3, #18
 8013a14:	18cf      	adds	r7, r1, r3
 8013a16:	e7ea      	b.n	80139ee <_strtod_l+0x53a>
 8013a18:	2c00      	cmp	r4, #0
 8013a1a:	d0e8      	beq.n	80139ee <_strtod_l+0x53a>
 8013a1c:	230f      	movs	r3, #15
 8013a1e:	4264      	negs	r4, r4
 8013a20:	4023      	ands	r3, r4
 8013a22:	d00a      	beq.n	8013a3a <_strtod_l+0x586>
 8013a24:	4a15      	ldr	r2, [pc, #84]	; (8013a7c <_strtod_l+0x5c8>)
 8013a26:	00db      	lsls	r3, r3, #3
 8013a28:	18d3      	adds	r3, r2, r3
 8013a2a:	0030      	movs	r0, r6
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	0039      	movs	r1, r7
 8013a32:	f7ed fdf5 	bl	8001620 <__aeabi_ddiv>
 8013a36:	0006      	movs	r6, r0
 8013a38:	000f      	movs	r7, r1
 8013a3a:	1124      	asrs	r4, r4, #4
 8013a3c:	d0d7      	beq.n	80139ee <_strtod_l+0x53a>
 8013a3e:	2c1f      	cmp	r4, #31
 8013a40:	dd28      	ble.n	8013a94 <_strtod_l+0x5e0>
 8013a42:	2400      	movs	r4, #0
 8013a44:	9405      	str	r4, [sp, #20]
 8013a46:	940b      	str	r4, [sp, #44]	; 0x2c
 8013a48:	940a      	str	r4, [sp, #40]	; 0x28
 8013a4a:	2322      	movs	r3, #34	; 0x22
 8013a4c:	9a04      	ldr	r2, [sp, #16]
 8013a4e:	2600      	movs	r6, #0
 8013a50:	6013      	str	r3, [r2, #0]
 8013a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a54:	2700      	movs	r7, #0
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d000      	beq.n	8013a5c <_strtod_l+0x5a8>
 8013a5a:	e76a      	b.n	8013932 <_strtod_l+0x47e>
 8013a5c:	e56b      	b.n	8013536 <_strtod_l+0x82>
 8013a5e:	46c0      	nop			; (mov r8, r8)
 8013a60:	00004e1f 	.word	0x00004e1f
 8013a64:	0801a6ad 	.word	0x0801a6ad
 8013a68:	0801a800 	.word	0x0801a800
 8013a6c:	7ff00000 	.word	0x7ff00000
 8013a70:	0801a6b5 	.word	0x0801a6b5
 8013a74:	0801a66c 	.word	0x0801a66c
 8013a78:	fff80000 	.word	0xfff80000
 8013a7c:	0801a838 	.word	0x0801a838
 8013a80:	fcb00000 	.word	0xfcb00000
 8013a84:	0801a810 	.word	0x0801a810
 8013a88:	7ca00000 	.word	0x7ca00000
 8013a8c:	7c900000 	.word	0x7c900000
 8013a90:	7fefffff 	.word	0x7fefffff
 8013a94:	2310      	movs	r3, #16
 8013a96:	4023      	ands	r3, r4
 8013a98:	9306      	str	r3, [sp, #24]
 8013a9a:	d001      	beq.n	8013aa0 <_strtod_l+0x5ec>
 8013a9c:	236a      	movs	r3, #106	; 0x6a
 8013a9e:	9306      	str	r3, [sp, #24]
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	0030      	movs	r0, r6
 8013aa4:	0039      	movs	r1, r7
 8013aa6:	001d      	movs	r5, r3
 8013aa8:	2c00      	cmp	r4, #0
 8013aaa:	dd00      	ble.n	8013aae <_strtod_l+0x5fa>
 8013aac:	e10e      	b.n	8013ccc <_strtod_l+0x818>
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d001      	beq.n	8013ab6 <_strtod_l+0x602>
 8013ab2:	0006      	movs	r6, r0
 8013ab4:	000f      	movs	r7, r1
 8013ab6:	9b06      	ldr	r3, [sp, #24]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d00f      	beq.n	8013adc <_strtod_l+0x628>
 8013abc:	236b      	movs	r3, #107	; 0x6b
 8013abe:	0079      	lsls	r1, r7, #1
 8013ac0:	0d49      	lsrs	r1, r1, #21
 8013ac2:	003a      	movs	r2, r7
 8013ac4:	1a5b      	subs	r3, r3, r1
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	dd08      	ble.n	8013adc <_strtod_l+0x628>
 8013aca:	2b1f      	cmp	r3, #31
 8013acc:	dc00      	bgt.n	8013ad0 <_strtod_l+0x61c>
 8013ace:	e112      	b.n	8013cf6 <_strtod_l+0x842>
 8013ad0:	2600      	movs	r6, #0
 8013ad2:	2b34      	cmp	r3, #52	; 0x34
 8013ad4:	dc00      	bgt.n	8013ad8 <_strtod_l+0x624>
 8013ad6:	e107      	b.n	8013ce8 <_strtod_l+0x834>
 8013ad8:	27dc      	movs	r7, #220	; 0xdc
 8013ada:	04bf      	lsls	r7, r7, #18
 8013adc:	2200      	movs	r2, #0
 8013ade:	2300      	movs	r3, #0
 8013ae0:	0030      	movs	r0, r6
 8013ae2:	0039      	movs	r1, r7
 8013ae4:	f7ec fcba 	bl	800045c <__aeabi_dcmpeq>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	d1aa      	bne.n	8013a42 <_strtod_l+0x58e>
 8013aec:	9b08      	ldr	r3, [sp, #32]
 8013aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013af0:	9300      	str	r3, [sp, #0]
 8013af2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013af4:	9b05      	ldr	r3, [sp, #20]
 8013af6:	9804      	ldr	r0, [sp, #16]
 8013af8:	f003 f9ae 	bl	8016e58 <__s2b>
 8013afc:	900b      	str	r0, [sp, #44]	; 0x2c
 8013afe:	2800      	cmp	r0, #0
 8013b00:	d100      	bne.n	8013b04 <_strtod_l+0x650>
 8013b02:	e709      	b.n	8013918 <_strtod_l+0x464>
 8013b04:	9b07      	ldr	r3, [sp, #28]
 8013b06:	9a07      	ldr	r2, [sp, #28]
 8013b08:	17db      	asrs	r3, r3, #31
 8013b0a:	4252      	negs	r2, r2
 8013b0c:	4013      	ands	r3, r2
 8013b0e:	9315      	str	r3, [sp, #84]	; 0x54
 8013b10:	9b07      	ldr	r3, [sp, #28]
 8013b12:	2400      	movs	r4, #0
 8013b14:	43db      	mvns	r3, r3
 8013b16:	9a07      	ldr	r2, [sp, #28]
 8013b18:	17db      	asrs	r3, r3, #31
 8013b1a:	401a      	ands	r2, r3
 8013b1c:	921c      	str	r2, [sp, #112]	; 0x70
 8013b1e:	9405      	str	r4, [sp, #20]
 8013b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b22:	9804      	ldr	r0, [sp, #16]
 8013b24:	6859      	ldr	r1, [r3, #4]
 8013b26:	f003 f927 	bl	8016d78 <_Balloc>
 8013b2a:	900a      	str	r0, [sp, #40]	; 0x28
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d100      	bne.n	8013b32 <_strtod_l+0x67e>
 8013b30:	e6f6      	b.n	8013920 <_strtod_l+0x46c>
 8013b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b36:	691b      	ldr	r3, [r3, #16]
 8013b38:	310c      	adds	r1, #12
 8013b3a:	1c9a      	adds	r2, r3, #2
 8013b3c:	0092      	lsls	r2, r2, #2
 8013b3e:	300c      	adds	r0, #12
 8013b40:	9308      	str	r3, [sp, #32]
 8013b42:	f7ff fa32 	bl	8012faa <memcpy>
 8013b46:	ab24      	add	r3, sp, #144	; 0x90
 8013b48:	9301      	str	r3, [sp, #4]
 8013b4a:	ab23      	add	r3, sp, #140	; 0x8c
 8013b4c:	9300      	str	r3, [sp, #0]
 8013b4e:	0032      	movs	r2, r6
 8013b50:	003b      	movs	r3, r7
 8013b52:	9804      	ldr	r0, [sp, #16]
 8013b54:	960e      	str	r6, [sp, #56]	; 0x38
 8013b56:	970f      	str	r7, [sp, #60]	; 0x3c
 8013b58:	f003 fc22 	bl	80173a0 <__d2b>
 8013b5c:	9022      	str	r0, [sp, #136]	; 0x88
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	d100      	bne.n	8013b64 <_strtod_l+0x6b0>
 8013b62:	e6dd      	b.n	8013920 <_strtod_l+0x46c>
 8013b64:	2101      	movs	r1, #1
 8013b66:	9804      	ldr	r0, [sp, #16]
 8013b68:	f003 f9fd 	bl	8016f66 <__i2b>
 8013b6c:	9005      	str	r0, [sp, #20]
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	d100      	bne.n	8013b74 <_strtod_l+0x6c0>
 8013b72:	e6d5      	b.n	8013920 <_strtod_l+0x46c>
 8013b74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	da00      	bge.n	8013b7c <_strtod_l+0x6c8>
 8013b7a:	e0c1      	b.n	8013d00 <_strtod_l+0x84c>
 8013b7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013b7e:	189d      	adds	r5, r3, r2
 8013b80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b82:	4694      	mov	ip, r2
 8013b84:	9906      	ldr	r1, [sp, #24]
 8013b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013b88:	1a5b      	subs	r3, r3, r1
 8013b8a:	2136      	movs	r1, #54	; 0x36
 8013b8c:	189b      	adds	r3, r3, r2
 8013b8e:	1a8a      	subs	r2, r1, r2
 8013b90:	49b2      	ldr	r1, [pc, #712]	; (8013e5c <_strtod_l+0x9a8>)
 8013b92:	3b01      	subs	r3, #1
 8013b94:	2001      	movs	r0, #1
 8013b96:	428b      	cmp	r3, r1
 8013b98:	db00      	blt.n	8013b9c <_strtod_l+0x6e8>
 8013b9a:	e0bd      	b.n	8013d18 <_strtod_l+0x864>
 8013b9c:	1ac9      	subs	r1, r1, r3
 8013b9e:	1a52      	subs	r2, r2, r1
 8013ba0:	291f      	cmp	r1, #31
 8013ba2:	dd00      	ble.n	8013ba6 <_strtod_l+0x6f2>
 8013ba4:	e0b1      	b.n	8013d0a <_strtod_l+0x856>
 8013ba6:	4088      	lsls	r0, r1
 8013ba8:	2300      	movs	r3, #0
 8013baa:	9014      	str	r0, [sp, #80]	; 0x50
 8013bac:	9310      	str	r3, [sp, #64]	; 0x40
 8013bae:	18ab      	adds	r3, r5, r2
 8013bb0:	9308      	str	r3, [sp, #32]
 8013bb2:	0013      	movs	r3, r2
 8013bb4:	9a06      	ldr	r2, [sp, #24]
 8013bb6:	4463      	add	r3, ip
 8013bb8:	18d3      	adds	r3, r2, r3
 8013bba:	9a08      	ldr	r2, [sp, #32]
 8013bbc:	930c      	str	r3, [sp, #48]	; 0x30
 8013bbe:	002b      	movs	r3, r5
 8013bc0:	4295      	cmp	r5, r2
 8013bc2:	dd00      	ble.n	8013bc6 <_strtod_l+0x712>
 8013bc4:	0013      	movs	r3, r2
 8013bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	dd00      	ble.n	8013bce <_strtod_l+0x71a>
 8013bcc:	0013      	movs	r3, r2
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	dd06      	ble.n	8013be0 <_strtod_l+0x72c>
 8013bd2:	9a08      	ldr	r2, [sp, #32]
 8013bd4:	1aed      	subs	r5, r5, r3
 8013bd6:	1ad2      	subs	r2, r2, r3
 8013bd8:	9208      	str	r2, [sp, #32]
 8013bda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bdc:	1ad2      	subs	r2, r2, r3
 8013bde:	920c      	str	r2, [sp, #48]	; 0x30
 8013be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d017      	beq.n	8013c16 <_strtod_l+0x762>
 8013be6:	001a      	movs	r2, r3
 8013be8:	9905      	ldr	r1, [sp, #20]
 8013bea:	9804      	ldr	r0, [sp, #16]
 8013bec:	f003 fa54 	bl	8017098 <__pow5mult>
 8013bf0:	9005      	str	r0, [sp, #20]
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	d100      	bne.n	8013bf8 <_strtod_l+0x744>
 8013bf6:	e693      	b.n	8013920 <_strtod_l+0x46c>
 8013bf8:	0001      	movs	r1, r0
 8013bfa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013bfc:	9804      	ldr	r0, [sp, #16]
 8013bfe:	f003 f9bb 	bl	8016f78 <__multiply>
 8013c02:	9012      	str	r0, [sp, #72]	; 0x48
 8013c04:	2800      	cmp	r0, #0
 8013c06:	d100      	bne.n	8013c0a <_strtod_l+0x756>
 8013c08:	e68a      	b.n	8013920 <_strtod_l+0x46c>
 8013c0a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c0c:	9804      	ldr	r0, [sp, #16]
 8013c0e:	f003 f8db 	bl	8016dc8 <_Bfree>
 8013c12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c14:	9322      	str	r3, [sp, #136]	; 0x88
 8013c16:	9b08      	ldr	r3, [sp, #32]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	dd00      	ble.n	8013c1e <_strtod_l+0x76a>
 8013c1c:	e07f      	b.n	8013d1e <_strtod_l+0x86a>
 8013c1e:	9b07      	ldr	r3, [sp, #28]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	dd08      	ble.n	8013c36 <_strtod_l+0x782>
 8013c24:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c28:	9804      	ldr	r0, [sp, #16]
 8013c2a:	f003 fa35 	bl	8017098 <__pow5mult>
 8013c2e:	900a      	str	r0, [sp, #40]	; 0x28
 8013c30:	2800      	cmp	r0, #0
 8013c32:	d100      	bne.n	8013c36 <_strtod_l+0x782>
 8013c34:	e674      	b.n	8013920 <_strtod_l+0x46c>
 8013c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	dd08      	ble.n	8013c4e <_strtod_l+0x79a>
 8013c3c:	001a      	movs	r2, r3
 8013c3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c40:	9804      	ldr	r0, [sp, #16]
 8013c42:	f003 fa6b 	bl	801711c <__lshift>
 8013c46:	900a      	str	r0, [sp, #40]	; 0x28
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d100      	bne.n	8013c4e <_strtod_l+0x79a>
 8013c4c:	e668      	b.n	8013920 <_strtod_l+0x46c>
 8013c4e:	2d00      	cmp	r5, #0
 8013c50:	dd08      	ble.n	8013c64 <_strtod_l+0x7b0>
 8013c52:	002a      	movs	r2, r5
 8013c54:	9905      	ldr	r1, [sp, #20]
 8013c56:	9804      	ldr	r0, [sp, #16]
 8013c58:	f003 fa60 	bl	801711c <__lshift>
 8013c5c:	9005      	str	r0, [sp, #20]
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	d100      	bne.n	8013c64 <_strtod_l+0x7b0>
 8013c62:	e65d      	b.n	8013920 <_strtod_l+0x46c>
 8013c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c66:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c68:	9804      	ldr	r0, [sp, #16]
 8013c6a:	f003 fac3 	bl	80171f4 <__mdiff>
 8013c6e:	1e04      	subs	r4, r0, #0
 8013c70:	d100      	bne.n	8013c74 <_strtod_l+0x7c0>
 8013c72:	e655      	b.n	8013920 <_strtod_l+0x46c>
 8013c74:	2500      	movs	r5, #0
 8013c76:	68c3      	ldr	r3, [r0, #12]
 8013c78:	9905      	ldr	r1, [sp, #20]
 8013c7a:	60c5      	str	r5, [r0, #12]
 8013c7c:	9312      	str	r3, [sp, #72]	; 0x48
 8013c7e:	f003 fa9f 	bl	80171c0 <__mcmp>
 8013c82:	42a8      	cmp	r0, r5
 8013c84:	da55      	bge.n	8013d32 <_strtod_l+0x87e>
 8013c86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c88:	42ab      	cmp	r3, r5
 8013c8a:	d11b      	bne.n	8013cc4 <_strtod_l+0x810>
 8013c8c:	42ae      	cmp	r6, r5
 8013c8e:	d119      	bne.n	8013cc4 <_strtod_l+0x810>
 8013c90:	033b      	lsls	r3, r7, #12
 8013c92:	42ab      	cmp	r3, r5
 8013c94:	d116      	bne.n	8013cc4 <_strtod_l+0x810>
 8013c96:	22d6      	movs	r2, #214	; 0xd6
 8013c98:	4b71      	ldr	r3, [pc, #452]	; (8013e60 <_strtod_l+0x9ac>)
 8013c9a:	04d2      	lsls	r2, r2, #19
 8013c9c:	403b      	ands	r3, r7
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	d910      	bls.n	8013cc4 <_strtod_l+0x810>
 8013ca2:	6963      	ldr	r3, [r4, #20]
 8013ca4:	42ab      	cmp	r3, r5
 8013ca6:	d102      	bne.n	8013cae <_strtod_l+0x7fa>
 8013ca8:	6923      	ldr	r3, [r4, #16]
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	dd0a      	ble.n	8013cc4 <_strtod_l+0x810>
 8013cae:	0021      	movs	r1, r4
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	9804      	ldr	r0, [sp, #16]
 8013cb4:	f003 fa32 	bl	801711c <__lshift>
 8013cb8:	9905      	ldr	r1, [sp, #20]
 8013cba:	0004      	movs	r4, r0
 8013cbc:	f003 fa80 	bl	80171c0 <__mcmp>
 8013cc0:	2800      	cmp	r0, #0
 8013cc2:	dc6b      	bgt.n	8013d9c <_strtod_l+0x8e8>
 8013cc4:	9b06      	ldr	r3, [sp, #24]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d178      	bne.n	8013dbc <_strtod_l+0x908>
 8013cca:	e632      	b.n	8013932 <_strtod_l+0x47e>
 8013ccc:	2201      	movs	r2, #1
 8013cce:	4214      	tst	r4, r2
 8013cd0:	d007      	beq.n	8013ce2 <_strtod_l+0x82e>
 8013cd2:	4a64      	ldr	r2, [pc, #400]	; (8013e64 <_strtod_l+0x9b0>)
 8013cd4:	00eb      	lsls	r3, r5, #3
 8013cd6:	18d3      	adds	r3, r2, r3
 8013cd8:	681a      	ldr	r2, [r3, #0]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	f7ee f8aa 	bl	8001e34 <__aeabi_dmul>
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	3501      	adds	r5, #1
 8013ce4:	1064      	asrs	r4, r4, #1
 8013ce6:	e6df      	b.n	8013aa8 <_strtod_l+0x5f4>
 8013ce8:	2101      	movs	r1, #1
 8013cea:	3b20      	subs	r3, #32
 8013cec:	4249      	negs	r1, r1
 8013cee:	4099      	lsls	r1, r3
 8013cf0:	400a      	ands	r2, r1
 8013cf2:	0017      	movs	r7, r2
 8013cf4:	e6f2      	b.n	8013adc <_strtod_l+0x628>
 8013cf6:	2201      	movs	r2, #1
 8013cf8:	4252      	negs	r2, r2
 8013cfa:	409a      	lsls	r2, r3
 8013cfc:	4016      	ands	r6, r2
 8013cfe:	e6ed      	b.n	8013adc <_strtod_l+0x628>
 8013d00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013d02:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013d04:	1ad2      	subs	r2, r2, r3
 8013d06:	4694      	mov	ip, r2
 8013d08:	e73c      	b.n	8013b84 <_strtod_l+0x6d0>
 8013d0a:	4957      	ldr	r1, [pc, #348]	; (8013e68 <_strtod_l+0x9b4>)
 8013d0c:	1acb      	subs	r3, r1, r3
 8013d0e:	0001      	movs	r1, r0
 8013d10:	4099      	lsls	r1, r3
 8013d12:	9110      	str	r1, [sp, #64]	; 0x40
 8013d14:	9014      	str	r0, [sp, #80]	; 0x50
 8013d16:	e74a      	b.n	8013bae <_strtod_l+0x6fa>
 8013d18:	2300      	movs	r3, #0
 8013d1a:	9310      	str	r3, [sp, #64]	; 0x40
 8013d1c:	e7fa      	b.n	8013d14 <_strtod_l+0x860>
 8013d1e:	9a08      	ldr	r2, [sp, #32]
 8013d20:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013d22:	9804      	ldr	r0, [sp, #16]
 8013d24:	f003 f9fa 	bl	801711c <__lshift>
 8013d28:	9022      	str	r0, [sp, #136]	; 0x88
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	d000      	beq.n	8013d30 <_strtod_l+0x87c>
 8013d2e:	e776      	b.n	8013c1e <_strtod_l+0x76a>
 8013d30:	e5f6      	b.n	8013920 <_strtod_l+0x46c>
 8013d32:	970c      	str	r7, [sp, #48]	; 0x30
 8013d34:	2800      	cmp	r0, #0
 8013d36:	d000      	beq.n	8013d3a <_strtod_l+0x886>
 8013d38:	e0a0      	b.n	8013e7c <_strtod_l+0x9c8>
 8013d3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d3c:	033b      	lsls	r3, r7, #12
 8013d3e:	0b1b      	lsrs	r3, r3, #12
 8013d40:	2a00      	cmp	r2, #0
 8013d42:	d027      	beq.n	8013d94 <_strtod_l+0x8e0>
 8013d44:	4a49      	ldr	r2, [pc, #292]	; (8013e6c <_strtod_l+0x9b8>)
 8013d46:	4293      	cmp	r3, r2
 8013d48:	d157      	bne.n	8013dfa <_strtod_l+0x946>
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	9b06      	ldr	r3, [sp, #24]
 8013d4e:	4252      	negs	r2, r2
 8013d50:	0031      	movs	r1, r6
 8013d52:	0010      	movs	r0, r2
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d00b      	beq.n	8013d70 <_strtod_l+0x8bc>
 8013d58:	25d4      	movs	r5, #212	; 0xd4
 8013d5a:	4b41      	ldr	r3, [pc, #260]	; (8013e60 <_strtod_l+0x9ac>)
 8013d5c:	04ed      	lsls	r5, r5, #19
 8013d5e:	403b      	ands	r3, r7
 8013d60:	0010      	movs	r0, r2
 8013d62:	42ab      	cmp	r3, r5
 8013d64:	d804      	bhi.n	8013d70 <_strtod_l+0x8bc>
 8013d66:	306c      	adds	r0, #108	; 0x6c
 8013d68:	0d1b      	lsrs	r3, r3, #20
 8013d6a:	1ac3      	subs	r3, r0, r3
 8013d6c:	409a      	lsls	r2, r3
 8013d6e:	0010      	movs	r0, r2
 8013d70:	4281      	cmp	r1, r0
 8013d72:	d142      	bne.n	8013dfa <_strtod_l+0x946>
 8013d74:	4b3e      	ldr	r3, [pc, #248]	; (8013e70 <_strtod_l+0x9bc>)
 8013d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d102      	bne.n	8013d82 <_strtod_l+0x8ce>
 8013d7c:	1c4b      	adds	r3, r1, #1
 8013d7e:	d100      	bne.n	8013d82 <_strtod_l+0x8ce>
 8013d80:	e5ce      	b.n	8013920 <_strtod_l+0x46c>
 8013d82:	4b37      	ldr	r3, [pc, #220]	; (8013e60 <_strtod_l+0x9ac>)
 8013d84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d86:	2600      	movs	r6, #0
 8013d88:	401a      	ands	r2, r3
 8013d8a:	0013      	movs	r3, r2
 8013d8c:	2280      	movs	r2, #128	; 0x80
 8013d8e:	0352      	lsls	r2, r2, #13
 8013d90:	189f      	adds	r7, r3, r2
 8013d92:	e797      	b.n	8013cc4 <_strtod_l+0x810>
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d130      	bne.n	8013dfa <_strtod_l+0x946>
 8013d98:	2e00      	cmp	r6, #0
 8013d9a:	d12e      	bne.n	8013dfa <_strtod_l+0x946>
 8013d9c:	9906      	ldr	r1, [sp, #24]
 8013d9e:	003b      	movs	r3, r7
 8013da0:	4a2f      	ldr	r2, [pc, #188]	; (8013e60 <_strtod_l+0x9ac>)
 8013da2:	2900      	cmp	r1, #0
 8013da4:	d020      	beq.n	8013de8 <_strtod_l+0x934>
 8013da6:	0011      	movs	r1, r2
 8013da8:	20d6      	movs	r0, #214	; 0xd6
 8013daa:	4039      	ands	r1, r7
 8013dac:	04c0      	lsls	r0, r0, #19
 8013dae:	4281      	cmp	r1, r0
 8013db0:	dc1a      	bgt.n	8013de8 <_strtod_l+0x934>
 8013db2:	23dc      	movs	r3, #220	; 0xdc
 8013db4:	049b      	lsls	r3, r3, #18
 8013db6:	4299      	cmp	r1, r3
 8013db8:	dc00      	bgt.n	8013dbc <_strtod_l+0x908>
 8013dba:	e646      	b.n	8013a4a <_strtod_l+0x596>
 8013dbc:	4b2d      	ldr	r3, [pc, #180]	; (8013e74 <_strtod_l+0x9c0>)
 8013dbe:	0030      	movs	r0, r6
 8013dc0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8013dc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013dc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dca:	0039      	movs	r1, r7
 8013dcc:	f7ee f832 	bl	8001e34 <__aeabi_dmul>
 8013dd0:	0006      	movs	r6, r0
 8013dd2:	000f      	movs	r7, r1
 8013dd4:	1e0b      	subs	r3, r1, #0
 8013dd6:	d000      	beq.n	8013dda <_strtod_l+0x926>
 8013dd8:	e5ab      	b.n	8013932 <_strtod_l+0x47e>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	d000      	beq.n	8013de0 <_strtod_l+0x92c>
 8013dde:	e5a8      	b.n	8013932 <_strtod_l+0x47e>
 8013de0:	9a04      	ldr	r2, [sp, #16]
 8013de2:	3322      	adds	r3, #34	; 0x22
 8013de4:	6013      	str	r3, [r2, #0]
 8013de6:	e5a4      	b.n	8013932 <_strtod_l+0x47e>
 8013de8:	2601      	movs	r6, #1
 8013dea:	4013      	ands	r3, r2
 8013dec:	4a22      	ldr	r2, [pc, #136]	; (8013e78 <_strtod_l+0x9c4>)
 8013dee:	4276      	negs	r6, r6
 8013df0:	189b      	adds	r3, r3, r2
 8013df2:	4a1e      	ldr	r2, [pc, #120]	; (8013e6c <_strtod_l+0x9b8>)
 8013df4:	431a      	orrs	r2, r3
 8013df6:	0017      	movs	r7, r2
 8013df8:	e764      	b.n	8013cc4 <_strtod_l+0x810>
 8013dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d015      	beq.n	8013e2c <_strtod_l+0x978>
 8013e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e04:	4213      	tst	r3, r2
 8013e06:	d100      	bne.n	8013e0a <_strtod_l+0x956>
 8013e08:	e75c      	b.n	8013cc4 <_strtod_l+0x810>
 8013e0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e0c:	9a06      	ldr	r2, [sp, #24]
 8013e0e:	0030      	movs	r0, r6
 8013e10:	0039      	movs	r1, r7
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d00f      	beq.n	8013e36 <_strtod_l+0x982>
 8013e16:	f7ff fb35 	bl	8013484 <sulp>
 8013e1a:	0002      	movs	r2, r0
 8013e1c:	000b      	movs	r3, r1
 8013e1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e22:	f7ed f8e1 	bl	8000fe8 <__aeabi_dadd>
 8013e26:	0006      	movs	r6, r0
 8013e28:	000f      	movs	r7, r1
 8013e2a:	e74b      	b.n	8013cc4 <_strtod_l+0x810>
 8013e2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e2e:	4233      	tst	r3, r6
 8013e30:	d100      	bne.n	8013e34 <_strtod_l+0x980>
 8013e32:	e747      	b.n	8013cc4 <_strtod_l+0x810>
 8013e34:	e7e9      	b.n	8013e0a <_strtod_l+0x956>
 8013e36:	f7ff fb25 	bl	8013484 <sulp>
 8013e3a:	0002      	movs	r2, r0
 8013e3c:	000b      	movs	r3, r1
 8013e3e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e42:	f7ee fa69 	bl	8002318 <__aeabi_dsub>
 8013e46:	2200      	movs	r2, #0
 8013e48:	2300      	movs	r3, #0
 8013e4a:	0006      	movs	r6, r0
 8013e4c:	000f      	movs	r7, r1
 8013e4e:	f7ec fb05 	bl	800045c <__aeabi_dcmpeq>
 8013e52:	2800      	cmp	r0, #0
 8013e54:	d000      	beq.n	8013e58 <_strtod_l+0x9a4>
 8013e56:	e5f8      	b.n	8013a4a <_strtod_l+0x596>
 8013e58:	e734      	b.n	8013cc4 <_strtod_l+0x810>
 8013e5a:	46c0      	nop			; (mov r8, r8)
 8013e5c:	fffffc02 	.word	0xfffffc02
 8013e60:	7ff00000 	.word	0x7ff00000
 8013e64:	0801a680 	.word	0x0801a680
 8013e68:	fffffbe2 	.word	0xfffffbe2
 8013e6c:	000fffff 	.word	0x000fffff
 8013e70:	7fefffff 	.word	0x7fefffff
 8013e74:	39500000 	.word	0x39500000
 8013e78:	fff00000 	.word	0xfff00000
 8013e7c:	9905      	ldr	r1, [sp, #20]
 8013e7e:	0020      	movs	r0, r4
 8013e80:	f003 fae2 	bl	8017448 <__ratio>
 8013e84:	2380      	movs	r3, #128	; 0x80
 8013e86:	2200      	movs	r2, #0
 8013e88:	05db      	lsls	r3, r3, #23
 8013e8a:	9008      	str	r0, [sp, #32]
 8013e8c:	9109      	str	r1, [sp, #36]	; 0x24
 8013e8e:	f7ec faf5 	bl	800047c <__aeabi_dcmple>
 8013e92:	2800      	cmp	r0, #0
 8013e94:	d100      	bne.n	8013e98 <_strtod_l+0x9e4>
 8013e96:	e07f      	b.n	8013f98 <_strtod_l+0xae4>
 8013e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d04b      	beq.n	8013f36 <_strtod_l+0xa82>
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	4b8a      	ldr	r3, [pc, #552]	; (80140cc <_strtod_l+0xc18>)
 8013ea2:	9210      	str	r2, [sp, #64]	; 0x40
 8013ea4:	9311      	str	r3, [sp, #68]	; 0x44
 8013ea6:	4b89      	ldr	r3, [pc, #548]	; (80140cc <_strtod_l+0xc18>)
 8013ea8:	9308      	str	r3, [sp, #32]
 8013eaa:	4a89      	ldr	r2, [pc, #548]	; (80140d0 <_strtod_l+0xc1c>)
 8013eac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013eae:	4013      	ands	r3, r2
 8013eb0:	9314      	str	r3, [sp, #80]	; 0x50
 8013eb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013eb4:	4b87      	ldr	r3, [pc, #540]	; (80140d4 <_strtod_l+0xc20>)
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d000      	beq.n	8013ebc <_strtod_l+0xa08>
 8013eba:	e0ba      	b.n	8014032 <_strtod_l+0xb7e>
 8013ebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ec0:	921a      	str	r2, [sp, #104]	; 0x68
 8013ec2:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ec4:	4a84      	ldr	r2, [pc, #528]	; (80140d8 <_strtod_l+0xc24>)
 8013ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ec8:	4694      	mov	ip, r2
 8013eca:	4463      	add	r3, ip
 8013ecc:	001f      	movs	r7, r3
 8013ece:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013ed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ed2:	0030      	movs	r0, r6
 8013ed4:	0039      	movs	r1, r7
 8013ed6:	920c      	str	r2, [sp, #48]	; 0x30
 8013ed8:	930d      	str	r3, [sp, #52]	; 0x34
 8013eda:	f003 f9ef 	bl	80172bc <__ulp>
 8013ede:	0002      	movs	r2, r0
 8013ee0:	000b      	movs	r3, r1
 8013ee2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013ee4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013ee6:	f7ed ffa5 	bl	8001e34 <__aeabi_dmul>
 8013eea:	0032      	movs	r2, r6
 8013eec:	003b      	movs	r3, r7
 8013eee:	f7ed f87b 	bl	8000fe8 <__aeabi_dadd>
 8013ef2:	4a77      	ldr	r2, [pc, #476]	; (80140d0 <_strtod_l+0xc1c>)
 8013ef4:	4b79      	ldr	r3, [pc, #484]	; (80140dc <_strtod_l+0xc28>)
 8013ef6:	0006      	movs	r6, r0
 8013ef8:	400a      	ands	r2, r1
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d964      	bls.n	8013fc8 <_strtod_l+0xb14>
 8013efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f00:	4a77      	ldr	r2, [pc, #476]	; (80140e0 <_strtod_l+0xc2c>)
 8013f02:	4293      	cmp	r3, r2
 8013f04:	d103      	bne.n	8013f0e <_strtod_l+0xa5a>
 8013f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f08:	3301      	adds	r3, #1
 8013f0a:	d100      	bne.n	8013f0e <_strtod_l+0xa5a>
 8013f0c:	e508      	b.n	8013920 <_strtod_l+0x46c>
 8013f0e:	2601      	movs	r6, #1
 8013f10:	4f73      	ldr	r7, [pc, #460]	; (80140e0 <_strtod_l+0xc2c>)
 8013f12:	4276      	negs	r6, r6
 8013f14:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013f16:	9804      	ldr	r0, [sp, #16]
 8013f18:	f002 ff56 	bl	8016dc8 <_Bfree>
 8013f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f1e:	9804      	ldr	r0, [sp, #16]
 8013f20:	f002 ff52 	bl	8016dc8 <_Bfree>
 8013f24:	9905      	ldr	r1, [sp, #20]
 8013f26:	9804      	ldr	r0, [sp, #16]
 8013f28:	f002 ff4e 	bl	8016dc8 <_Bfree>
 8013f2c:	0021      	movs	r1, r4
 8013f2e:	9804      	ldr	r0, [sp, #16]
 8013f30:	f002 ff4a 	bl	8016dc8 <_Bfree>
 8013f34:	e5f4      	b.n	8013b20 <_strtod_l+0x66c>
 8013f36:	2e00      	cmp	r6, #0
 8013f38:	d11e      	bne.n	8013f78 <_strtod_l+0xac4>
 8013f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f3c:	031b      	lsls	r3, r3, #12
 8013f3e:	d121      	bne.n	8013f84 <_strtod_l+0xad0>
 8013f40:	9808      	ldr	r0, [sp, #32]
 8013f42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f44:	2200      	movs	r2, #0
 8013f46:	4b61      	ldr	r3, [pc, #388]	; (80140cc <_strtod_l+0xc18>)
 8013f48:	f7ec fa8e 	bl	8000468 <__aeabi_dcmplt>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d11f      	bne.n	8013f90 <_strtod_l+0xadc>
 8013f50:	9808      	ldr	r0, [sp, #32]
 8013f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f54:	2200      	movs	r2, #0
 8013f56:	4b63      	ldr	r3, [pc, #396]	; (80140e4 <_strtod_l+0xc30>)
 8013f58:	f7ed ff6c 	bl	8001e34 <__aeabi_dmul>
 8013f5c:	0005      	movs	r5, r0
 8013f5e:	9108      	str	r1, [sp, #32]
 8013f60:	2280      	movs	r2, #128	; 0x80
 8013f62:	0612      	lsls	r2, r2, #24
 8013f64:	4694      	mov	ip, r2
 8013f66:	9b08      	ldr	r3, [sp, #32]
 8013f68:	951e      	str	r5, [sp, #120]	; 0x78
 8013f6a:	4463      	add	r3, ip
 8013f6c:	931f      	str	r3, [sp, #124]	; 0x7c
 8013f6e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f72:	9210      	str	r2, [sp, #64]	; 0x40
 8013f74:	9311      	str	r3, [sp, #68]	; 0x44
 8013f76:	e798      	b.n	8013eaa <_strtod_l+0x9f6>
 8013f78:	2e01      	cmp	r6, #1
 8013f7a:	d103      	bne.n	8013f84 <_strtod_l+0xad0>
 8013f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d100      	bne.n	8013f84 <_strtod_l+0xad0>
 8013f82:	e562      	b.n	8013a4a <_strtod_l+0x596>
 8013f84:	2200      	movs	r2, #0
 8013f86:	4b58      	ldr	r3, [pc, #352]	; (80140e8 <_strtod_l+0xc34>)
 8013f88:	2500      	movs	r5, #0
 8013f8a:	9210      	str	r2, [sp, #64]	; 0x40
 8013f8c:	9311      	str	r3, [sp, #68]	; 0x44
 8013f8e:	e78a      	b.n	8013ea6 <_strtod_l+0x9f2>
 8013f90:	4b54      	ldr	r3, [pc, #336]	; (80140e4 <_strtod_l+0xc30>)
 8013f92:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013f94:	9308      	str	r3, [sp, #32]
 8013f96:	e7e3      	b.n	8013f60 <_strtod_l+0xaac>
 8013f98:	4b52      	ldr	r3, [pc, #328]	; (80140e4 <_strtod_l+0xc30>)
 8013f9a:	9808      	ldr	r0, [sp, #32]
 8013f9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	f7ed ff48 	bl	8001e34 <__aeabi_dmul>
 8013fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013fa6:	0005      	movs	r5, r0
 8013fa8:	9108      	str	r1, [sp, #32]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d107      	bne.n	8013fbe <_strtod_l+0xb0a>
 8013fae:	2380      	movs	r3, #128	; 0x80
 8013fb0:	061b      	lsls	r3, r3, #24
 8013fb2:	18cb      	adds	r3, r1, r3
 8013fb4:	9016      	str	r0, [sp, #88]	; 0x58
 8013fb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013fba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fbc:	e7d9      	b.n	8013f72 <_strtod_l+0xabe>
 8013fbe:	0002      	movs	r2, r0
 8013fc0:	9b08      	ldr	r3, [sp, #32]
 8013fc2:	9216      	str	r2, [sp, #88]	; 0x58
 8013fc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fc6:	e7f7      	b.n	8013fb8 <_strtod_l+0xb04>
 8013fc8:	23d4      	movs	r3, #212	; 0xd4
 8013fca:	049b      	lsls	r3, r3, #18
 8013fcc:	18cf      	adds	r7, r1, r3
 8013fce:	9b06      	ldr	r3, [sp, #24]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d19f      	bne.n	8013f14 <_strtod_l+0xa60>
 8013fd4:	4b3e      	ldr	r3, [pc, #248]	; (80140d0 <_strtod_l+0xc1c>)
 8013fd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013fd8:	970c      	str	r7, [sp, #48]	; 0x30
 8013fda:	403b      	ands	r3, r7
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d199      	bne.n	8013f14 <_strtod_l+0xa60>
 8013fe0:	9908      	ldr	r1, [sp, #32]
 8013fe2:	0028      	movs	r0, r5
 8013fe4:	f7ee fcfc 	bl	80029e0 <__aeabi_d2iz>
 8013fe8:	f7ee fd30 	bl	8002a4c <__aeabi_i2d>
 8013fec:	000b      	movs	r3, r1
 8013fee:	0002      	movs	r2, r0
 8013ff0:	9908      	ldr	r1, [sp, #32]
 8013ff2:	0028      	movs	r0, r5
 8013ff4:	f7ee f990 	bl	8002318 <__aeabi_dsub>
 8013ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ffa:	9008      	str	r0, [sp, #32]
 8013ffc:	9109      	str	r1, [sp, #36]	; 0x24
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d104      	bne.n	801400c <_strtod_l+0xb58>
 8014002:	2e00      	cmp	r6, #0
 8014004:	d102      	bne.n	801400c <_strtod_l+0xb58>
 8014006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014008:	031b      	lsls	r3, r3, #12
 801400a:	d058      	beq.n	80140be <_strtod_l+0xc0a>
 801400c:	9808      	ldr	r0, [sp, #32]
 801400e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014010:	4a36      	ldr	r2, [pc, #216]	; (80140ec <_strtod_l+0xc38>)
 8014012:	4b37      	ldr	r3, [pc, #220]	; (80140f0 <_strtod_l+0xc3c>)
 8014014:	f7ec fa28 	bl	8000468 <__aeabi_dcmplt>
 8014018:	2800      	cmp	r0, #0
 801401a:	d000      	beq.n	801401e <_strtod_l+0xb6a>
 801401c:	e489      	b.n	8013932 <_strtod_l+0x47e>
 801401e:	9808      	ldr	r0, [sp, #32]
 8014020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014022:	4a34      	ldr	r2, [pc, #208]	; (80140f4 <_strtod_l+0xc40>)
 8014024:	4b2f      	ldr	r3, [pc, #188]	; (80140e4 <_strtod_l+0xc30>)
 8014026:	f7ec fa33 	bl	8000490 <__aeabi_dcmpgt>
 801402a:	2800      	cmp	r0, #0
 801402c:	d100      	bne.n	8014030 <_strtod_l+0xb7c>
 801402e:	e771      	b.n	8013f14 <_strtod_l+0xa60>
 8014030:	e47f      	b.n	8013932 <_strtod_l+0x47e>
 8014032:	9b06      	ldr	r3, [sp, #24]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d02a      	beq.n	801408e <_strtod_l+0xbda>
 8014038:	23d4      	movs	r3, #212	; 0xd4
 801403a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801403c:	04db      	lsls	r3, r3, #19
 801403e:	429a      	cmp	r2, r3
 8014040:	d825      	bhi.n	801408e <_strtod_l+0xbda>
 8014042:	4a2d      	ldr	r2, [pc, #180]	; (80140f8 <_strtod_l+0xc44>)
 8014044:	4b2d      	ldr	r3, [pc, #180]	; (80140fc <_strtod_l+0xc48>)
 8014046:	0028      	movs	r0, r5
 8014048:	9908      	ldr	r1, [sp, #32]
 801404a:	f7ec fa17 	bl	800047c <__aeabi_dcmple>
 801404e:	2800      	cmp	r0, #0
 8014050:	d016      	beq.n	8014080 <_strtod_l+0xbcc>
 8014052:	0028      	movs	r0, r5
 8014054:	9908      	ldr	r1, [sp, #32]
 8014056:	f7ec facb 	bl	80005f0 <__aeabi_d2uiz>
 801405a:	2800      	cmp	r0, #0
 801405c:	d100      	bne.n	8014060 <_strtod_l+0xbac>
 801405e:	3001      	adds	r0, #1
 8014060:	f7ee fd2e 	bl	8002ac0 <__aeabi_ui2d>
 8014064:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014066:	0005      	movs	r5, r0
 8014068:	9108      	str	r1, [sp, #32]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d122      	bne.n	80140b4 <_strtod_l+0xc00>
 801406e:	2380      	movs	r3, #128	; 0x80
 8014070:	061b      	lsls	r3, r3, #24
 8014072:	18cb      	adds	r3, r1, r3
 8014074:	9018      	str	r0, [sp, #96]	; 0x60
 8014076:	9319      	str	r3, [sp, #100]	; 0x64
 8014078:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801407a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801407c:	9210      	str	r2, [sp, #64]	; 0x40
 801407e:	9311      	str	r3, [sp, #68]	; 0x44
 8014080:	22d6      	movs	r2, #214	; 0xd6
 8014082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014084:	04d2      	lsls	r2, r2, #19
 8014086:	189b      	adds	r3, r3, r2
 8014088:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801408a:	1a9b      	subs	r3, r3, r2
 801408c:	9311      	str	r3, [sp, #68]	; 0x44
 801408e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014090:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014092:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014094:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014096:	f003 f911 	bl	80172bc <__ulp>
 801409a:	0002      	movs	r2, r0
 801409c:	000b      	movs	r3, r1
 801409e:	0030      	movs	r0, r6
 80140a0:	0039      	movs	r1, r7
 80140a2:	f7ed fec7 	bl	8001e34 <__aeabi_dmul>
 80140a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140aa:	f7ec ff9d 	bl	8000fe8 <__aeabi_dadd>
 80140ae:	0006      	movs	r6, r0
 80140b0:	000f      	movs	r7, r1
 80140b2:	e78c      	b.n	8013fce <_strtod_l+0xb1a>
 80140b4:	0002      	movs	r2, r0
 80140b6:	9b08      	ldr	r3, [sp, #32]
 80140b8:	9218      	str	r2, [sp, #96]	; 0x60
 80140ba:	9319      	str	r3, [sp, #100]	; 0x64
 80140bc:	e7dc      	b.n	8014078 <_strtod_l+0xbc4>
 80140be:	4a0b      	ldr	r2, [pc, #44]	; (80140ec <_strtod_l+0xc38>)
 80140c0:	4b0f      	ldr	r3, [pc, #60]	; (8014100 <_strtod_l+0xc4c>)
 80140c2:	9808      	ldr	r0, [sp, #32]
 80140c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140c6:	f7ec f9cf 	bl	8000468 <__aeabi_dcmplt>
 80140ca:	e7ae      	b.n	801402a <_strtod_l+0xb76>
 80140cc:	3ff00000 	.word	0x3ff00000
 80140d0:	7ff00000 	.word	0x7ff00000
 80140d4:	7fe00000 	.word	0x7fe00000
 80140d8:	fcb00000 	.word	0xfcb00000
 80140dc:	7c9fffff 	.word	0x7c9fffff
 80140e0:	7fefffff 	.word	0x7fefffff
 80140e4:	3fe00000 	.word	0x3fe00000
 80140e8:	bff00000 	.word	0xbff00000
 80140ec:	94a03595 	.word	0x94a03595
 80140f0:	3fdfffff 	.word	0x3fdfffff
 80140f4:	35afe535 	.word	0x35afe535
 80140f8:	ffc00000 	.word	0xffc00000
 80140fc:	41dfffff 	.word	0x41dfffff
 8014100:	3fcfffff 	.word	0x3fcfffff

08014104 <strtod>:
 8014104:	4b06      	ldr	r3, [pc, #24]	; (8014120 <strtod+0x1c>)
 8014106:	b510      	push	{r4, lr}
 8014108:	0004      	movs	r4, r0
 801410a:	6818      	ldr	r0, [r3, #0]
 801410c:	000a      	movs	r2, r1
 801410e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014110:	2b00      	cmp	r3, #0
 8014112:	d100      	bne.n	8014116 <strtod+0x12>
 8014114:	4b03      	ldr	r3, [pc, #12]	; (8014124 <strtod+0x20>)
 8014116:	0021      	movs	r1, r4
 8014118:	f7ff f9cc 	bl	80134b4 <_strtod_l>
 801411c:	bd10      	pop	{r4, pc}
 801411e:	46c0      	nop			; (mov r8, r8)
 8014120:	200000a8 	.word	0x200000a8
 8014124:	200004d8 	.word	0x200004d8

08014128 <strtok>:
 8014128:	4b03      	ldr	r3, [pc, #12]	; (8014138 <strtok+0x10>)
 801412a:	b510      	push	{r4, lr}
 801412c:	681a      	ldr	r2, [r3, #0]
 801412e:	2301      	movs	r3, #1
 8014130:	325c      	adds	r2, #92	; 0x5c
 8014132:	f000 f803 	bl	801413c <__strtok_r>
 8014136:	bd10      	pop	{r4, pc}
 8014138:	200000a8 	.word	0x200000a8

0801413c <__strtok_r>:
 801413c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801413e:	2800      	cmp	r0, #0
 8014140:	d104      	bne.n	801414c <__strtok_r+0x10>
 8014142:	6810      	ldr	r0, [r2, #0]
 8014144:	2800      	cmp	r0, #0
 8014146:	d101      	bne.n	801414c <__strtok_r+0x10>
 8014148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801414a:	0020      	movs	r0, r4
 801414c:	000e      	movs	r6, r1
 801414e:	7805      	ldrb	r5, [r0, #0]
 8014150:	1c44      	adds	r4, r0, #1
 8014152:	7837      	ldrb	r7, [r6, #0]
 8014154:	2f00      	cmp	r7, #0
 8014156:	d104      	bne.n	8014162 <__strtok_r+0x26>
 8014158:	2d00      	cmp	r5, #0
 801415a:	d110      	bne.n	801417e <__strtok_r+0x42>
 801415c:	6015      	str	r5, [r2, #0]
 801415e:	0028      	movs	r0, r5
 8014160:	e7f2      	b.n	8014148 <__strtok_r+0xc>
 8014162:	3601      	adds	r6, #1
 8014164:	42bd      	cmp	r5, r7
 8014166:	d1f4      	bne.n	8014152 <__strtok_r+0x16>
 8014168:	2b00      	cmp	r3, #0
 801416a:	d1ee      	bne.n	801414a <__strtok_r+0xe>
 801416c:	6014      	str	r4, [r2, #0]
 801416e:	7003      	strb	r3, [r0, #0]
 8014170:	e7ea      	b.n	8014148 <__strtok_r+0xc>
 8014172:	0033      	movs	r3, r6
 8014174:	e00d      	b.n	8014192 <__strtok_r+0x56>
 8014176:	3501      	adds	r5, #1
 8014178:	2f00      	cmp	r7, #0
 801417a:	d103      	bne.n	8014184 <__strtok_r+0x48>
 801417c:	001c      	movs	r4, r3
 801417e:	000d      	movs	r5, r1
 8014180:	7826      	ldrb	r6, [r4, #0]
 8014182:	1c63      	adds	r3, r4, #1
 8014184:	782f      	ldrb	r7, [r5, #0]
 8014186:	42be      	cmp	r6, r7
 8014188:	d1f5      	bne.n	8014176 <__strtok_r+0x3a>
 801418a:	2e00      	cmp	r6, #0
 801418c:	d0f1      	beq.n	8014172 <__strtok_r+0x36>
 801418e:	2100      	movs	r1, #0
 8014190:	7021      	strb	r1, [r4, #0]
 8014192:	6013      	str	r3, [r2, #0]
 8014194:	e7d8      	b.n	8014148 <__strtok_r+0xc>
	...

08014198 <_strtol_l.isra.0>:
 8014198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801419a:	001f      	movs	r7, r3
 801419c:	000e      	movs	r6, r1
 801419e:	b087      	sub	sp, #28
 80141a0:	9005      	str	r0, [sp, #20]
 80141a2:	9101      	str	r1, [sp, #4]
 80141a4:	9202      	str	r2, [sp, #8]
 80141a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80141a8:	7834      	ldrb	r4, [r6, #0]
 80141aa:	f7fe fc9f 	bl	8012aec <__locale_ctype_ptr_l>
 80141ae:	2208      	movs	r2, #8
 80141b0:	1900      	adds	r0, r0, r4
 80141b2:	7843      	ldrb	r3, [r0, #1]
 80141b4:	1c75      	adds	r5, r6, #1
 80141b6:	4013      	ands	r3, r2
 80141b8:	d136      	bne.n	8014228 <_strtol_l.isra.0+0x90>
 80141ba:	2c2d      	cmp	r4, #45	; 0x2d
 80141bc:	d136      	bne.n	801422c <_strtol_l.isra.0+0x94>
 80141be:	1cb5      	adds	r5, r6, #2
 80141c0:	7874      	ldrb	r4, [r6, #1]
 80141c2:	2601      	movs	r6, #1
 80141c4:	2f00      	cmp	r7, #0
 80141c6:	d062      	beq.n	801428e <_strtol_l.isra.0+0xf6>
 80141c8:	2f10      	cmp	r7, #16
 80141ca:	d109      	bne.n	80141e0 <_strtol_l.isra.0+0x48>
 80141cc:	2c30      	cmp	r4, #48	; 0x30
 80141ce:	d107      	bne.n	80141e0 <_strtol_l.isra.0+0x48>
 80141d0:	2220      	movs	r2, #32
 80141d2:	782b      	ldrb	r3, [r5, #0]
 80141d4:	4393      	bics	r3, r2
 80141d6:	2b58      	cmp	r3, #88	; 0x58
 80141d8:	d154      	bne.n	8014284 <_strtol_l.isra.0+0xec>
 80141da:	2710      	movs	r7, #16
 80141dc:	786c      	ldrb	r4, [r5, #1]
 80141de:	3502      	adds	r5, #2
 80141e0:	4b2d      	ldr	r3, [pc, #180]	; (8014298 <_strtol_l.isra.0+0x100>)
 80141e2:	0039      	movs	r1, r7
 80141e4:	18f3      	adds	r3, r6, r3
 80141e6:	0018      	movs	r0, r3
 80141e8:	9303      	str	r3, [sp, #12]
 80141ea:	f7ec f837 	bl	800025c <__aeabi_uidivmod>
 80141ee:	9104      	str	r1, [sp, #16]
 80141f0:	2101      	movs	r1, #1
 80141f2:	2300      	movs	r3, #0
 80141f4:	4249      	negs	r1, r1
 80141f6:	0002      	movs	r2, r0
 80141f8:	468c      	mov	ip, r1
 80141fa:	0018      	movs	r0, r3
 80141fc:	0021      	movs	r1, r4
 80141fe:	3930      	subs	r1, #48	; 0x30
 8014200:	2909      	cmp	r1, #9
 8014202:	d81a      	bhi.n	801423a <_strtol_l.isra.0+0xa2>
 8014204:	000c      	movs	r4, r1
 8014206:	42a7      	cmp	r7, r4
 8014208:	dd23      	ble.n	8014252 <_strtol_l.isra.0+0xba>
 801420a:	1c59      	adds	r1, r3, #1
 801420c:	d009      	beq.n	8014222 <_strtol_l.isra.0+0x8a>
 801420e:	4663      	mov	r3, ip
 8014210:	4282      	cmp	r2, r0
 8014212:	d306      	bcc.n	8014222 <_strtol_l.isra.0+0x8a>
 8014214:	d102      	bne.n	801421c <_strtol_l.isra.0+0x84>
 8014216:	9904      	ldr	r1, [sp, #16]
 8014218:	42a1      	cmp	r1, r4
 801421a:	db02      	blt.n	8014222 <_strtol_l.isra.0+0x8a>
 801421c:	2301      	movs	r3, #1
 801421e:	4378      	muls	r0, r7
 8014220:	1820      	adds	r0, r4, r0
 8014222:	782c      	ldrb	r4, [r5, #0]
 8014224:	3501      	adds	r5, #1
 8014226:	e7e9      	b.n	80141fc <_strtol_l.isra.0+0x64>
 8014228:	002e      	movs	r6, r5
 801422a:	e7bc      	b.n	80141a6 <_strtol_l.isra.0+0xe>
 801422c:	2c2b      	cmp	r4, #43	; 0x2b
 801422e:	d001      	beq.n	8014234 <_strtol_l.isra.0+0x9c>
 8014230:	001e      	movs	r6, r3
 8014232:	e7c7      	b.n	80141c4 <_strtol_l.isra.0+0x2c>
 8014234:	1cb5      	adds	r5, r6, #2
 8014236:	7874      	ldrb	r4, [r6, #1]
 8014238:	e7fa      	b.n	8014230 <_strtol_l.isra.0+0x98>
 801423a:	0021      	movs	r1, r4
 801423c:	3941      	subs	r1, #65	; 0x41
 801423e:	2919      	cmp	r1, #25
 8014240:	d801      	bhi.n	8014246 <_strtol_l.isra.0+0xae>
 8014242:	3c37      	subs	r4, #55	; 0x37
 8014244:	e7df      	b.n	8014206 <_strtol_l.isra.0+0x6e>
 8014246:	0021      	movs	r1, r4
 8014248:	3961      	subs	r1, #97	; 0x61
 801424a:	2919      	cmp	r1, #25
 801424c:	d801      	bhi.n	8014252 <_strtol_l.isra.0+0xba>
 801424e:	3c57      	subs	r4, #87	; 0x57
 8014250:	e7d9      	b.n	8014206 <_strtol_l.isra.0+0x6e>
 8014252:	1c5a      	adds	r2, r3, #1
 8014254:	d108      	bne.n	8014268 <_strtol_l.isra.0+0xd0>
 8014256:	9a05      	ldr	r2, [sp, #20]
 8014258:	3323      	adds	r3, #35	; 0x23
 801425a:	6013      	str	r3, [r2, #0]
 801425c:	9b02      	ldr	r3, [sp, #8]
 801425e:	9803      	ldr	r0, [sp, #12]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d109      	bne.n	8014278 <_strtol_l.isra.0+0xe0>
 8014264:	b007      	add	sp, #28
 8014266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014268:	2e00      	cmp	r6, #0
 801426a:	d000      	beq.n	801426e <_strtol_l.isra.0+0xd6>
 801426c:	4240      	negs	r0, r0
 801426e:	9a02      	ldr	r2, [sp, #8]
 8014270:	2a00      	cmp	r2, #0
 8014272:	d0f7      	beq.n	8014264 <_strtol_l.isra.0+0xcc>
 8014274:	2b00      	cmp	r3, #0
 8014276:	d001      	beq.n	801427c <_strtol_l.isra.0+0xe4>
 8014278:	1e6b      	subs	r3, r5, #1
 801427a:	9301      	str	r3, [sp, #4]
 801427c:	9b02      	ldr	r3, [sp, #8]
 801427e:	9a01      	ldr	r2, [sp, #4]
 8014280:	601a      	str	r2, [r3, #0]
 8014282:	e7ef      	b.n	8014264 <_strtol_l.isra.0+0xcc>
 8014284:	2430      	movs	r4, #48	; 0x30
 8014286:	2f00      	cmp	r7, #0
 8014288:	d1aa      	bne.n	80141e0 <_strtol_l.isra.0+0x48>
 801428a:	2708      	movs	r7, #8
 801428c:	e7a8      	b.n	80141e0 <_strtol_l.isra.0+0x48>
 801428e:	2c30      	cmp	r4, #48	; 0x30
 8014290:	d09e      	beq.n	80141d0 <_strtol_l.isra.0+0x38>
 8014292:	270a      	movs	r7, #10
 8014294:	e7a4      	b.n	80141e0 <_strtol_l.isra.0+0x48>
 8014296:	46c0      	nop			; (mov r8, r8)
 8014298:	7fffffff 	.word	0x7fffffff

0801429c <strtol>:
 801429c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801429e:	0013      	movs	r3, r2
 80142a0:	4a06      	ldr	r2, [pc, #24]	; (80142bc <strtol+0x20>)
 80142a2:	0005      	movs	r5, r0
 80142a4:	6810      	ldr	r0, [r2, #0]
 80142a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80142a8:	2c00      	cmp	r4, #0
 80142aa:	d100      	bne.n	80142ae <strtol+0x12>
 80142ac:	4c04      	ldr	r4, [pc, #16]	; (80142c0 <strtol+0x24>)
 80142ae:	000a      	movs	r2, r1
 80142b0:	9400      	str	r4, [sp, #0]
 80142b2:	0029      	movs	r1, r5
 80142b4:	f7ff ff70 	bl	8014198 <_strtol_l.isra.0>
 80142b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80142ba:	46c0      	nop			; (mov r8, r8)
 80142bc:	200000a8 	.word	0x200000a8
 80142c0:	200004d8 	.word	0x200004d8

080142c4 <_svfprintf_r>:
 80142c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142c6:	b0d9      	sub	sp, #356	; 0x164
 80142c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80142ca:	9209      	str	r2, [sp, #36]	; 0x24
 80142cc:	001c      	movs	r4, r3
 80142ce:	900a      	str	r0, [sp, #40]	; 0x28
 80142d0:	f002 fd26 	bl	8016d20 <_localeconv_r>
 80142d4:	6803      	ldr	r3, [r0, #0]
 80142d6:	0018      	movs	r0, r3
 80142d8:	931c      	str	r3, [sp, #112]	; 0x70
 80142da:	f7eb ff1d 	bl	8000118 <strlen>
 80142de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142e0:	9014      	str	r0, [sp, #80]	; 0x50
 80142e2:	899b      	ldrh	r3, [r3, #12]
 80142e4:	061b      	lsls	r3, r3, #24
 80142e6:	d518      	bpl.n	801431a <_svfprintf_r+0x56>
 80142e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142ea:	691b      	ldr	r3, [r3, #16]
 80142ec:	9308      	str	r3, [sp, #32]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d113      	bne.n	801431a <_svfprintf_r+0x56>
 80142f2:	2140      	movs	r1, #64	; 0x40
 80142f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142f6:	f7fe fc1f 	bl	8012b38 <_malloc_r>
 80142fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142fc:	6018      	str	r0, [r3, #0]
 80142fe:	6118      	str	r0, [r3, #16]
 8014300:	2800      	cmp	r0, #0
 8014302:	d107      	bne.n	8014314 <_svfprintf_r+0x50>
 8014304:	230c      	movs	r3, #12
 8014306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014308:	6013      	str	r3, [r2, #0]
 801430a:	3b0d      	subs	r3, #13
 801430c:	9315      	str	r3, [sp, #84]	; 0x54
 801430e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014310:	b059      	add	sp, #356	; 0x164
 8014312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014314:	2340      	movs	r3, #64	; 0x40
 8014316:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014318:	6153      	str	r3, [r2, #20]
 801431a:	2600      	movs	r6, #0
 801431c:	af2f      	add	r7, sp, #188	; 0xbc
 801431e:	972c      	str	r7, [sp, #176]	; 0xb0
 8014320:	962e      	str	r6, [sp, #184]	; 0xb8
 8014322:	962d      	str	r6, [sp, #180]	; 0xb4
 8014324:	960d      	str	r6, [sp, #52]	; 0x34
 8014326:	961a      	str	r6, [sp, #104]	; 0x68
 8014328:	9619      	str	r6, [sp, #100]	; 0x64
 801432a:	961e      	str	r6, [sp, #120]	; 0x78
 801432c:	961d      	str	r6, [sp, #116]	; 0x74
 801432e:	9613      	str	r6, [sp, #76]	; 0x4c
 8014330:	961b      	str	r6, [sp, #108]	; 0x6c
 8014332:	961f      	str	r6, [sp, #124]	; 0x7c
 8014334:	9615      	str	r6, [sp, #84]	; 0x54
 8014336:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014338:	782b      	ldrb	r3, [r5, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d002      	beq.n	8014344 <_svfprintf_r+0x80>
 801433e:	2b25      	cmp	r3, #37	; 0x25
 8014340:	d000      	beq.n	8014344 <_svfprintf_r+0x80>
 8014342:	e095      	b.n	8014470 <_svfprintf_r+0x1ac>
 8014344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014346:	1aee      	subs	r6, r5, r3
 8014348:	d017      	beq.n	801437a <_svfprintf_r+0xb6>
 801434a:	603b      	str	r3, [r7, #0]
 801434c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801434e:	607e      	str	r6, [r7, #4]
 8014350:	199b      	adds	r3, r3, r6
 8014352:	932e      	str	r3, [sp, #184]	; 0xb8
 8014354:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014356:	3708      	adds	r7, #8
 8014358:	9308      	str	r3, [sp, #32]
 801435a:	3301      	adds	r3, #1
 801435c:	932d      	str	r3, [sp, #180]	; 0xb4
 801435e:	2b07      	cmp	r3, #7
 8014360:	dd08      	ble.n	8014374 <_svfprintf_r+0xb0>
 8014362:	aa2c      	add	r2, sp, #176	; 0xb0
 8014364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014366:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014368:	f003 f900 	bl	801756c <__ssprint_r>
 801436c:	2800      	cmp	r0, #0
 801436e:	d000      	beq.n	8014372 <_svfprintf_r+0xae>
 8014370:	e2d9      	b.n	8014926 <_svfprintf_r+0x662>
 8014372:	af2f      	add	r7, sp, #188	; 0xbc
 8014374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014376:	199b      	adds	r3, r3, r6
 8014378:	9315      	str	r3, [sp, #84]	; 0x54
 801437a:	782b      	ldrb	r3, [r5, #0]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d101      	bne.n	8014384 <_svfprintf_r+0xc0>
 8014380:	f001 f9e5 	bl	801574e <_svfprintf_r+0x148a>
 8014384:	1c6b      	adds	r3, r5, #1
 8014386:	221b      	movs	r2, #27
 8014388:	9311      	str	r3, [sp, #68]	; 0x44
 801438a:	2300      	movs	r3, #0
 801438c:	a91e      	add	r1, sp, #120	; 0x78
 801438e:	1852      	adds	r2, r2, r1
 8014390:	7013      	strb	r3, [r2, #0]
 8014392:	2201      	movs	r2, #1
 8014394:	001e      	movs	r6, r3
 8014396:	2520      	movs	r5, #32
 8014398:	4252      	negs	r2, r2
 801439a:	9208      	str	r2, [sp, #32]
 801439c:	9316      	str	r3, [sp, #88]	; 0x58
 801439e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	930e      	str	r3, [sp, #56]	; 0x38
 80143a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80143a6:	3301      	adds	r3, #1
 80143a8:	9311      	str	r3, [sp, #68]	; 0x44
 80143aa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80143ac:	3820      	subs	r0, #32
 80143ae:	285a      	cmp	r0, #90	; 0x5a
 80143b0:	d901      	bls.n	80143b6 <_svfprintf_r+0xf2>
 80143b2:	f000 fe3d 	bl	8015030 <_svfprintf_r+0xd6c>
 80143b6:	f7eb fec1 	bl	800013c <__gnu_thumb1_case_shi>
 80143ba:	009e      	.short	0x009e
 80143bc:	063b063b 	.word	0x063b063b
 80143c0:	063b00a7 	.word	0x063b00a7
 80143c4:	063b063b 	.word	0x063b063b
 80143c8:	063b0080 	.word	0x063b0080
 80143cc:	00a9063b 	.word	0x00a9063b
 80143d0:	063b00b3 	.word	0x063b00b3
 80143d4:	00b900b1 	.word	0x00b900b1
 80143d8:	00dd063b 	.word	0x00dd063b
 80143dc:	00df00df 	.word	0x00df00df
 80143e0:	00df00df 	.word	0x00df00df
 80143e4:	00df00df 	.word	0x00df00df
 80143e8:	00df00df 	.word	0x00df00df
 80143ec:	063b00df 	.word	0x063b00df
 80143f0:	063b063b 	.word	0x063b063b
 80143f4:	063b063b 	.word	0x063b063b
 80143f8:	063b063b 	.word	0x063b063b
 80143fc:	063b0240 	.word	0x063b0240
 8014400:	01fd010a 	.word	0x01fd010a
 8014404:	02400240 	.word	0x02400240
 8014408:	063b0240 	.word	0x063b0240
 801440c:	063b063b 	.word	0x063b063b
 8014410:	00f1063b 	.word	0x00f1063b
 8014414:	063b063b 	.word	0x063b063b
 8014418:	063b04e2 	.word	0x063b04e2
 801441c:	063b063b 	.word	0x063b063b
 8014420:	063b0537 	.word	0x063b0537
 8014424:	063b0557 	.word	0x063b0557
 8014428:	005d063b 	.word	0x005d063b
 801442c:	063b063b 	.word	0x063b063b
 8014430:	063b063b 	.word	0x063b063b
 8014434:	063b063b 	.word	0x063b063b
 8014438:	063b063b 	.word	0x063b063b
 801443c:	063b0240 	.word	0x063b0240
 8014440:	01ff010a 	.word	0x01ff010a
 8014444:	02400240 	.word	0x02400240
 8014448:	00f30240 	.word	0x00f30240
 801444c:	010601ff 	.word	0x010601ff
 8014450:	00ff063b 	.word	0x00ff063b
 8014454:	04c5063b 	.word	0x04c5063b
 8014458:	052704e4 	.word	0x052704e4
 801445c:	063b0106 	.word	0x063b0106
 8014460:	fff20537 	.word	0xfff20537
 8014464:	063b0559 	.word	0x063b0559
 8014468:	0582063b 	.word	0x0582063b
 801446c:	fff2063b 	.word	0xfff2063b
 8014470:	3501      	adds	r5, #1
 8014472:	e761      	b.n	8014338 <_svfprintf_r+0x74>
 8014474:	4bcb      	ldr	r3, [pc, #812]	; (80147a4 <_svfprintf_r+0x4e0>)
 8014476:	2220      	movs	r2, #32
 8014478:	931e      	str	r3, [sp, #120]	; 0x78
 801447a:	4032      	ands	r2, r6
 801447c:	d101      	bne.n	8014482 <_svfprintf_r+0x1be>
 801447e:	f000 fd21 	bl	8014ec4 <_svfprintf_r+0xc00>
 8014482:	2307      	movs	r3, #7
 8014484:	3407      	adds	r4, #7
 8014486:	439c      	bics	r4, r3
 8014488:	0023      	movs	r3, r4
 801448a:	3308      	adds	r3, #8
 801448c:	9312      	str	r3, [sp, #72]	; 0x48
 801448e:	6823      	ldr	r3, [r4, #0]
 8014490:	6864      	ldr	r4, [r4, #4]
 8014492:	9306      	str	r3, [sp, #24]
 8014494:	9407      	str	r4, [sp, #28]
 8014496:	07f3      	lsls	r3, r6, #31
 8014498:	d50a      	bpl.n	80144b0 <_svfprintf_r+0x1ec>
 801449a:	9b06      	ldr	r3, [sp, #24]
 801449c:	9a07      	ldr	r2, [sp, #28]
 801449e:	4313      	orrs	r3, r2
 80144a0:	d006      	beq.n	80144b0 <_svfprintf_r+0x1ec>
 80144a2:	2230      	movs	r2, #48	; 0x30
 80144a4:	ab25      	add	r3, sp, #148	; 0x94
 80144a6:	701a      	strb	r2, [r3, #0]
 80144a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80144aa:	705a      	strb	r2, [r3, #1]
 80144ac:	2302      	movs	r3, #2
 80144ae:	431e      	orrs	r6, r3
 80144b0:	4bbd      	ldr	r3, [pc, #756]	; (80147a8 <_svfprintf_r+0x4e4>)
 80144b2:	401e      	ands	r6, r3
 80144b4:	2302      	movs	r3, #2
 80144b6:	f000 fc74 	bl	8014da2 <_svfprintf_r+0xade>
 80144ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144bc:	f002 fc30 	bl	8016d20 <_localeconv_r>
 80144c0:	6843      	ldr	r3, [r0, #4]
 80144c2:	0018      	movs	r0, r3
 80144c4:	931f      	str	r3, [sp, #124]	; 0x7c
 80144c6:	f7eb fe27 	bl	8000118 <strlen>
 80144ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80144cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144ce:	f002 fc27 	bl	8016d20 <_localeconv_r>
 80144d2:	6883      	ldr	r3, [r0, #8]
 80144d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80144d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d100      	bne.n	80144de <_svfprintf_r+0x21a>
 80144dc:	e75f      	b.n	801439e <_svfprintf_r+0xda>
 80144de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d100      	bne.n	80144e6 <_svfprintf_r+0x222>
 80144e4:	e75b      	b.n	801439e <_svfprintf_r+0xda>
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d100      	bne.n	80144ee <_svfprintf_r+0x22a>
 80144ec:	e757      	b.n	801439e <_svfprintf_r+0xda>
 80144ee:	2380      	movs	r3, #128	; 0x80
 80144f0:	00db      	lsls	r3, r3, #3
 80144f2:	431e      	orrs	r6, r3
 80144f4:	e753      	b.n	801439e <_svfprintf_r+0xda>
 80144f6:	231b      	movs	r3, #27
 80144f8:	aa1e      	add	r2, sp, #120	; 0x78
 80144fa:	189b      	adds	r3, r3, r2
 80144fc:	781a      	ldrb	r2, [r3, #0]
 80144fe:	2a00      	cmp	r2, #0
 8014500:	d000      	beq.n	8014504 <_svfprintf_r+0x240>
 8014502:	e74c      	b.n	801439e <_svfprintf_r+0xda>
 8014504:	701d      	strb	r5, [r3, #0]
 8014506:	e74a      	b.n	801439e <_svfprintf_r+0xda>
 8014508:	2301      	movs	r3, #1
 801450a:	e7f2      	b.n	80144f2 <_svfprintf_r+0x22e>
 801450c:	6823      	ldr	r3, [r4, #0]
 801450e:	3404      	adds	r4, #4
 8014510:	9316      	str	r3, [sp, #88]	; 0x58
 8014512:	2b00      	cmp	r3, #0
 8014514:	db00      	blt.n	8014518 <_svfprintf_r+0x254>
 8014516:	e742      	b.n	801439e <_svfprintf_r+0xda>
 8014518:	425b      	negs	r3, r3
 801451a:	9316      	str	r3, [sp, #88]	; 0x58
 801451c:	2304      	movs	r3, #4
 801451e:	e7e8      	b.n	80144f2 <_svfprintf_r+0x22e>
 8014520:	231b      	movs	r3, #27
 8014522:	aa1e      	add	r2, sp, #120	; 0x78
 8014524:	189b      	adds	r3, r3, r2
 8014526:	222b      	movs	r2, #43	; 0x2b
 8014528:	701a      	strb	r2, [r3, #0]
 801452a:	e738      	b.n	801439e <_svfprintf_r+0xda>
 801452c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801452e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014530:	7812      	ldrb	r2, [r2, #0]
 8014532:	3301      	adds	r3, #1
 8014534:	920e      	str	r2, [sp, #56]	; 0x38
 8014536:	2a2a      	cmp	r2, #42	; 0x2a
 8014538:	d008      	beq.n	801454c <_svfprintf_r+0x288>
 801453a:	2200      	movs	r2, #0
 801453c:	9208      	str	r2, [sp, #32]
 801453e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014540:	001a      	movs	r2, r3
 8014542:	3930      	subs	r1, #48	; 0x30
 8014544:	2909      	cmp	r1, #9
 8014546:	d90c      	bls.n	8014562 <_svfprintf_r+0x29e>
 8014548:	9211      	str	r2, [sp, #68]	; 0x44
 801454a:	e72e      	b.n	80143aa <_svfprintf_r+0xe6>
 801454c:	6821      	ldr	r1, [r4, #0]
 801454e:	1d22      	adds	r2, r4, #4
 8014550:	9108      	str	r1, [sp, #32]
 8014552:	2900      	cmp	r1, #0
 8014554:	da02      	bge.n	801455c <_svfprintf_r+0x298>
 8014556:	2101      	movs	r1, #1
 8014558:	4249      	negs	r1, r1
 801455a:	9108      	str	r1, [sp, #32]
 801455c:	0014      	movs	r4, r2
 801455e:	9311      	str	r3, [sp, #68]	; 0x44
 8014560:	e71d      	b.n	801439e <_svfprintf_r+0xda>
 8014562:	200a      	movs	r0, #10
 8014564:	9a08      	ldr	r2, [sp, #32]
 8014566:	4342      	muls	r2, r0
 8014568:	1852      	adds	r2, r2, r1
 801456a:	9208      	str	r2, [sp, #32]
 801456c:	781a      	ldrb	r2, [r3, #0]
 801456e:	3301      	adds	r3, #1
 8014570:	920e      	str	r2, [sp, #56]	; 0x38
 8014572:	e7e4      	b.n	801453e <_svfprintf_r+0x27a>
 8014574:	2380      	movs	r3, #128	; 0x80
 8014576:	e7bc      	b.n	80144f2 <_svfprintf_r+0x22e>
 8014578:	2300      	movs	r3, #0
 801457a:	9316      	str	r3, [sp, #88]	; 0x58
 801457c:	220a      	movs	r2, #10
 801457e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014580:	4353      	muls	r3, r2
 8014582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014584:	3a30      	subs	r2, #48	; 0x30
 8014586:	18d3      	adds	r3, r2, r3
 8014588:	9316      	str	r3, [sp, #88]	; 0x58
 801458a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801458c:	1c5a      	adds	r2, r3, #1
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	9211      	str	r2, [sp, #68]	; 0x44
 8014592:	930e      	str	r3, [sp, #56]	; 0x38
 8014594:	3b30      	subs	r3, #48	; 0x30
 8014596:	2b09      	cmp	r3, #9
 8014598:	d9f0      	bls.n	801457c <_svfprintf_r+0x2b8>
 801459a:	e7d5      	b.n	8014548 <_svfprintf_r+0x284>
 801459c:	2308      	movs	r3, #8
 801459e:	e7a8      	b.n	80144f2 <_svfprintf_r+0x22e>
 80145a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	2b68      	cmp	r3, #104	; 0x68
 80145a6:	d105      	bne.n	80145b4 <_svfprintf_r+0x2f0>
 80145a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145aa:	3301      	adds	r3, #1
 80145ac:	9311      	str	r3, [sp, #68]	; 0x44
 80145ae:	2380      	movs	r3, #128	; 0x80
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	e79e      	b.n	80144f2 <_svfprintf_r+0x22e>
 80145b4:	2340      	movs	r3, #64	; 0x40
 80145b6:	e79c      	b.n	80144f2 <_svfprintf_r+0x22e>
 80145b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145ba:	781b      	ldrb	r3, [r3, #0]
 80145bc:	2b6c      	cmp	r3, #108	; 0x6c
 80145be:	d104      	bne.n	80145ca <_svfprintf_r+0x306>
 80145c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145c2:	3301      	adds	r3, #1
 80145c4:	9311      	str	r3, [sp, #68]	; 0x44
 80145c6:	432e      	orrs	r6, r5
 80145c8:	e6e9      	b.n	801439e <_svfprintf_r+0xda>
 80145ca:	2310      	movs	r3, #16
 80145cc:	e791      	b.n	80144f2 <_svfprintf_r+0x22e>
 80145ce:	1d23      	adds	r3, r4, #4
 80145d0:	6822      	ldr	r2, [r4, #0]
 80145d2:	9312      	str	r3, [sp, #72]	; 0x48
 80145d4:	ab3f      	add	r3, sp, #252	; 0xfc
 80145d6:	701a      	strb	r2, [r3, #0]
 80145d8:	221b      	movs	r2, #27
 80145da:	2000      	movs	r0, #0
 80145dc:	a91e      	add	r1, sp, #120	; 0x78
 80145de:	1852      	adds	r2, r2, r1
 80145e0:	7010      	strb	r0, [r2, #0]
 80145e2:	2201      	movs	r2, #1
 80145e4:	0005      	movs	r5, r0
 80145e6:	900c      	str	r0, [sp, #48]	; 0x30
 80145e8:	9208      	str	r2, [sp, #32]
 80145ea:	9017      	str	r0, [sp, #92]	; 0x5c
 80145ec:	9010      	str	r0, [sp, #64]	; 0x40
 80145ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80145f0:	9309      	str	r3, [sp, #36]	; 0x24
 80145f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80145f4:	9a08      	ldr	r2, [sp, #32]
 80145f6:	9318      	str	r3, [sp, #96]	; 0x60
 80145f8:	4293      	cmp	r3, r2
 80145fa:	da00      	bge.n	80145fe <_svfprintf_r+0x33a>
 80145fc:	9218      	str	r2, [sp, #96]	; 0x60
 80145fe:	231b      	movs	r3, #27
 8014600:	aa1e      	add	r2, sp, #120	; 0x78
 8014602:	189b      	adds	r3, r3, r2
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	1e5a      	subs	r2, r3, #1
 8014608:	4193      	sbcs	r3, r2
 801460a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801460c:	18d3      	adds	r3, r2, r3
 801460e:	9318      	str	r3, [sp, #96]	; 0x60
 8014610:	2302      	movs	r3, #2
 8014612:	4033      	ands	r3, r6
 8014614:	9320      	str	r3, [sp, #128]	; 0x80
 8014616:	d002      	beq.n	801461e <_svfprintf_r+0x35a>
 8014618:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801461a:	3302      	adds	r3, #2
 801461c:	9318      	str	r3, [sp, #96]	; 0x60
 801461e:	2384      	movs	r3, #132	; 0x84
 8014620:	4033      	ands	r3, r6
 8014622:	9321      	str	r3, [sp, #132]	; 0x84
 8014624:	d121      	bne.n	801466a <_svfprintf_r+0x3a6>
 8014626:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014628:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801462a:	1a9c      	subs	r4, r3, r2
 801462c:	2c00      	cmp	r4, #0
 801462e:	dd1c      	ble.n	801466a <_svfprintf_r+0x3a6>
 8014630:	0039      	movs	r1, r7
 8014632:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014634:	485d      	ldr	r0, [pc, #372]	; (80147ac <_svfprintf_r+0x4e8>)
 8014636:	9322      	str	r3, [sp, #136]	; 0x88
 8014638:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801463a:	3301      	adds	r3, #1
 801463c:	3108      	adds	r1, #8
 801463e:	6038      	str	r0, [r7, #0]
 8014640:	2c10      	cmp	r4, #16
 8014642:	dd01      	ble.n	8014648 <_svfprintf_r+0x384>
 8014644:	f000 fd08 	bl	8015058 <_svfprintf_r+0xd94>
 8014648:	607c      	str	r4, [r7, #4]
 801464a:	18a4      	adds	r4, r4, r2
 801464c:	942e      	str	r4, [sp, #184]	; 0xb8
 801464e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014650:	000f      	movs	r7, r1
 8014652:	2b07      	cmp	r3, #7
 8014654:	dd09      	ble.n	801466a <_svfprintf_r+0x3a6>
 8014656:	aa2c      	add	r2, sp, #176	; 0xb0
 8014658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801465a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801465c:	f002 ff86 	bl	801756c <__ssprint_r>
 8014660:	2800      	cmp	r0, #0
 8014662:	d001      	beq.n	8014668 <_svfprintf_r+0x3a4>
 8014664:	f001 f852 	bl	801570c <_svfprintf_r+0x1448>
 8014668:	af2f      	add	r7, sp, #188	; 0xbc
 801466a:	231b      	movs	r3, #27
 801466c:	aa1e      	add	r2, sp, #120	; 0x78
 801466e:	189b      	adds	r3, r3, r2
 8014670:	781a      	ldrb	r2, [r3, #0]
 8014672:	2a00      	cmp	r2, #0
 8014674:	d017      	beq.n	80146a6 <_svfprintf_r+0x3e2>
 8014676:	603b      	str	r3, [r7, #0]
 8014678:	2301      	movs	r3, #1
 801467a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801467c:	607b      	str	r3, [r7, #4]
 801467e:	0013      	movs	r3, r2
 8014680:	3301      	adds	r3, #1
 8014682:	932e      	str	r3, [sp, #184]	; 0xb8
 8014684:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014686:	3708      	adds	r7, #8
 8014688:	9322      	str	r3, [sp, #136]	; 0x88
 801468a:	3301      	adds	r3, #1
 801468c:	932d      	str	r3, [sp, #180]	; 0xb4
 801468e:	2b07      	cmp	r3, #7
 8014690:	dd09      	ble.n	80146a6 <_svfprintf_r+0x3e2>
 8014692:	aa2c      	add	r2, sp, #176	; 0xb0
 8014694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014696:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014698:	f002 ff68 	bl	801756c <__ssprint_r>
 801469c:	2800      	cmp	r0, #0
 801469e:	d001      	beq.n	80146a4 <_svfprintf_r+0x3e0>
 80146a0:	f001 f834 	bl	801570c <_svfprintf_r+0x1448>
 80146a4:	af2f      	add	r7, sp, #188	; 0xbc
 80146a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d019      	beq.n	80146e0 <_svfprintf_r+0x41c>
 80146ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80146ae:	9320      	str	r3, [sp, #128]	; 0x80
 80146b0:	ab25      	add	r3, sp, #148	; 0x94
 80146b2:	603b      	str	r3, [r7, #0]
 80146b4:	2302      	movs	r3, #2
 80146b6:	607b      	str	r3, [r7, #4]
 80146b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80146ba:	3708      	adds	r7, #8
 80146bc:	3302      	adds	r3, #2
 80146be:	932e      	str	r3, [sp, #184]	; 0xb8
 80146c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146c2:	9320      	str	r3, [sp, #128]	; 0x80
 80146c4:	3301      	adds	r3, #1
 80146c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80146c8:	2b07      	cmp	r3, #7
 80146ca:	dd09      	ble.n	80146e0 <_svfprintf_r+0x41c>
 80146cc:	aa2c      	add	r2, sp, #176	; 0xb0
 80146ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146d2:	f002 ff4b 	bl	801756c <__ssprint_r>
 80146d6:	2800      	cmp	r0, #0
 80146d8:	d001      	beq.n	80146de <_svfprintf_r+0x41a>
 80146da:	f001 f817 	bl	801570c <_svfprintf_r+0x1448>
 80146de:	af2f      	add	r7, sp, #188	; 0xbc
 80146e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146e2:	2b80      	cmp	r3, #128	; 0x80
 80146e4:	d121      	bne.n	801472a <_svfprintf_r+0x466>
 80146e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80146e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80146ea:	1a9c      	subs	r4, r3, r2
 80146ec:	2c00      	cmp	r4, #0
 80146ee:	dd1c      	ble.n	801472a <_svfprintf_r+0x466>
 80146f0:	0039      	movs	r1, r7
 80146f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146f4:	482e      	ldr	r0, [pc, #184]	; (80147b0 <_svfprintf_r+0x4ec>)
 80146f6:	9320      	str	r3, [sp, #128]	; 0x80
 80146f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80146fa:	3301      	adds	r3, #1
 80146fc:	3108      	adds	r1, #8
 80146fe:	6038      	str	r0, [r7, #0]
 8014700:	2c10      	cmp	r4, #16
 8014702:	dd01      	ble.n	8014708 <_svfprintf_r+0x444>
 8014704:	f000 fcbc 	bl	8015080 <_svfprintf_r+0xdbc>
 8014708:	607c      	str	r4, [r7, #4]
 801470a:	18a4      	adds	r4, r4, r2
 801470c:	942e      	str	r4, [sp, #184]	; 0xb8
 801470e:	932d      	str	r3, [sp, #180]	; 0xb4
 8014710:	000f      	movs	r7, r1
 8014712:	2b07      	cmp	r3, #7
 8014714:	dd09      	ble.n	801472a <_svfprintf_r+0x466>
 8014716:	aa2c      	add	r2, sp, #176	; 0xb0
 8014718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801471a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801471c:	f002 ff26 	bl	801756c <__ssprint_r>
 8014720:	2800      	cmp	r0, #0
 8014722:	d001      	beq.n	8014728 <_svfprintf_r+0x464>
 8014724:	f000 fff2 	bl	801570c <_svfprintf_r+0x1448>
 8014728:	af2f      	add	r7, sp, #188	; 0xbc
 801472a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801472c:	9a08      	ldr	r2, [sp, #32]
 801472e:	1a9c      	subs	r4, r3, r2
 8014730:	2c00      	cmp	r4, #0
 8014732:	dd1c      	ble.n	801476e <_svfprintf_r+0x4aa>
 8014734:	0039      	movs	r1, r7
 8014736:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014738:	481d      	ldr	r0, [pc, #116]	; (80147b0 <_svfprintf_r+0x4ec>)
 801473a:	9317      	str	r3, [sp, #92]	; 0x5c
 801473c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801473e:	3301      	adds	r3, #1
 8014740:	3108      	adds	r1, #8
 8014742:	6038      	str	r0, [r7, #0]
 8014744:	2c10      	cmp	r4, #16
 8014746:	dd01      	ble.n	801474c <_svfprintf_r+0x488>
 8014748:	f000 fcb4 	bl	80150b4 <_svfprintf_r+0xdf0>
 801474c:	18a2      	adds	r2, r4, r2
 801474e:	607c      	str	r4, [r7, #4]
 8014750:	922e      	str	r2, [sp, #184]	; 0xb8
 8014752:	932d      	str	r3, [sp, #180]	; 0xb4
 8014754:	000f      	movs	r7, r1
 8014756:	2b07      	cmp	r3, #7
 8014758:	dd09      	ble.n	801476e <_svfprintf_r+0x4aa>
 801475a:	aa2c      	add	r2, sp, #176	; 0xb0
 801475c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801475e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014760:	f002 ff04 	bl	801756c <__ssprint_r>
 8014764:	2800      	cmp	r0, #0
 8014766:	d001      	beq.n	801476c <_svfprintf_r+0x4a8>
 8014768:	f000 ffd0 	bl	801570c <_svfprintf_r+0x1448>
 801476c:	af2f      	add	r7, sp, #188	; 0xbc
 801476e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014770:	9317      	str	r3, [sp, #92]	; 0x5c
 8014772:	05f3      	lsls	r3, r6, #23
 8014774:	d501      	bpl.n	801477a <_svfprintf_r+0x4b6>
 8014776:	f000 fcb1 	bl	80150dc <_svfprintf_r+0xe18>
 801477a:	9a08      	ldr	r2, [sp, #32]
 801477c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801477e:	4694      	mov	ip, r2
 8014780:	603b      	str	r3, [r7, #0]
 8014782:	9b08      	ldr	r3, [sp, #32]
 8014784:	607b      	str	r3, [r7, #4]
 8014786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014788:	4463      	add	r3, ip
 801478a:	932e      	str	r3, [sp, #184]	; 0xb8
 801478c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801478e:	9308      	str	r3, [sp, #32]
 8014790:	3301      	adds	r3, #1
 8014792:	932d      	str	r3, [sp, #180]	; 0xb4
 8014794:	2b07      	cmp	r3, #7
 8014796:	dd01      	ble.n	801479c <_svfprintf_r+0x4d8>
 8014798:	f000 fd94 	bl	80152c4 <_svfprintf_r+0x1000>
 801479c:	3708      	adds	r7, #8
 801479e:	f000 fce4 	bl	801516a <_svfprintf_r+0xea6>
 80147a2:	46c0      	nop			; (mov r8, r8)
 80147a4:	0801a6c9 	.word	0x0801a6c9
 80147a8:	fffffbff 	.word	0xfffffbff
 80147ac:	0801a6dc 	.word	0x0801a6dc
 80147b0:	0801a6ec 	.word	0x0801a6ec
 80147b4:	2310      	movs	r3, #16
 80147b6:	431e      	orrs	r6, r3
 80147b8:	06b3      	lsls	r3, r6, #26
 80147ba:	d52c      	bpl.n	8014816 <_svfprintf_r+0x552>
 80147bc:	2307      	movs	r3, #7
 80147be:	3407      	adds	r4, #7
 80147c0:	439c      	bics	r4, r3
 80147c2:	0023      	movs	r3, r4
 80147c4:	3308      	adds	r3, #8
 80147c6:	9312      	str	r3, [sp, #72]	; 0x48
 80147c8:	6823      	ldr	r3, [r4, #0]
 80147ca:	6864      	ldr	r4, [r4, #4]
 80147cc:	9306      	str	r3, [sp, #24]
 80147ce:	9407      	str	r4, [sp, #28]
 80147d0:	9b07      	ldr	r3, [sp, #28]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	da0b      	bge.n	80147ee <_svfprintf_r+0x52a>
 80147d6:	9906      	ldr	r1, [sp, #24]
 80147d8:	9a07      	ldr	r2, [sp, #28]
 80147da:	2400      	movs	r4, #0
 80147dc:	424b      	negs	r3, r1
 80147de:	4194      	sbcs	r4, r2
 80147e0:	9306      	str	r3, [sp, #24]
 80147e2:	9407      	str	r4, [sp, #28]
 80147e4:	231b      	movs	r3, #27
 80147e6:	aa1e      	add	r2, sp, #120	; 0x78
 80147e8:	189b      	adds	r3, r3, r2
 80147ea:	222d      	movs	r2, #45	; 0x2d
 80147ec:	701a      	strb	r2, [r3, #0]
 80147ee:	9b08      	ldr	r3, [sp, #32]
 80147f0:	3301      	adds	r3, #1
 80147f2:	d000      	beq.n	80147f6 <_svfprintf_r+0x532>
 80147f4:	e382      	b.n	8014efc <_svfprintf_r+0xc38>
 80147f6:	9b07      	ldr	r3, [sp, #28]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d000      	beq.n	80147fe <_svfprintf_r+0x53a>
 80147fc:	e3b0      	b.n	8014f60 <_svfprintf_r+0xc9c>
 80147fe:	9b06      	ldr	r3, [sp, #24]
 8014800:	2b09      	cmp	r3, #9
 8014802:	d900      	bls.n	8014806 <_svfprintf_r+0x542>
 8014804:	e3ac      	b.n	8014f60 <_svfprintf_r+0xc9c>
 8014806:	23e7      	movs	r3, #231	; 0xe7
 8014808:	aa1e      	add	r2, sp, #120	; 0x78
 801480a:	189b      	adds	r3, r3, r2
 801480c:	9a06      	ldr	r2, [sp, #24]
 801480e:	3230      	adds	r2, #48	; 0x30
 8014810:	701a      	strb	r2, [r3, #0]
 8014812:	9309      	str	r3, [sp, #36]	; 0x24
 8014814:	e395      	b.n	8014f42 <_svfprintf_r+0xc7e>
 8014816:	1d23      	adds	r3, r4, #4
 8014818:	9312      	str	r3, [sp, #72]	; 0x48
 801481a:	06f3      	lsls	r3, r6, #27
 801481c:	d504      	bpl.n	8014828 <_svfprintf_r+0x564>
 801481e:	6823      	ldr	r3, [r4, #0]
 8014820:	9306      	str	r3, [sp, #24]
 8014822:	17db      	asrs	r3, r3, #31
 8014824:	9307      	str	r3, [sp, #28]
 8014826:	e7d3      	b.n	80147d0 <_svfprintf_r+0x50c>
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	0672      	lsls	r2, r6, #25
 801482c:	d501      	bpl.n	8014832 <_svfprintf_r+0x56e>
 801482e:	b21b      	sxth	r3, r3
 8014830:	e7f6      	b.n	8014820 <_svfprintf_r+0x55c>
 8014832:	05b2      	lsls	r2, r6, #22
 8014834:	d5f4      	bpl.n	8014820 <_svfprintf_r+0x55c>
 8014836:	b25b      	sxtb	r3, r3
 8014838:	e7f2      	b.n	8014820 <_svfprintf_r+0x55c>
 801483a:	2307      	movs	r3, #7
 801483c:	3407      	adds	r4, #7
 801483e:	439c      	bics	r4, r3
 8014840:	0023      	movs	r3, r4
 8014842:	2201      	movs	r2, #1
 8014844:	3308      	adds	r3, #8
 8014846:	9312      	str	r3, [sp, #72]	; 0x48
 8014848:	6823      	ldr	r3, [r4, #0]
 801484a:	4252      	negs	r2, r2
 801484c:	931a      	str	r3, [sp, #104]	; 0x68
 801484e:	6863      	ldr	r3, [r4, #4]
 8014850:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014852:	005c      	lsls	r4, r3, #1
 8014854:	0864      	lsrs	r4, r4, #1
 8014856:	9319      	str	r3, [sp, #100]	; 0x64
 8014858:	0028      	movs	r0, r5
 801485a:	4bcf      	ldr	r3, [pc, #828]	; (8014b98 <_svfprintf_r+0x8d4>)
 801485c:	0021      	movs	r1, r4
 801485e:	f7ee f8a3 	bl	80029a8 <__aeabi_dcmpun>
 8014862:	2800      	cmp	r0, #0
 8014864:	d125      	bne.n	80148b2 <_svfprintf_r+0x5ee>
 8014866:	2201      	movs	r2, #1
 8014868:	4bcb      	ldr	r3, [pc, #812]	; (8014b98 <_svfprintf_r+0x8d4>)
 801486a:	4252      	negs	r2, r2
 801486c:	0028      	movs	r0, r5
 801486e:	0021      	movs	r1, r4
 8014870:	f7eb fe04 	bl	800047c <__aeabi_dcmple>
 8014874:	2800      	cmp	r0, #0
 8014876:	d11c      	bne.n	80148b2 <_svfprintf_r+0x5ee>
 8014878:	2200      	movs	r2, #0
 801487a:	2300      	movs	r3, #0
 801487c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801487e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014880:	f7eb fdf2 	bl	8000468 <__aeabi_dcmplt>
 8014884:	2800      	cmp	r0, #0
 8014886:	d004      	beq.n	8014892 <_svfprintf_r+0x5ce>
 8014888:	231b      	movs	r3, #27
 801488a:	aa1e      	add	r2, sp, #120	; 0x78
 801488c:	189b      	adds	r3, r3, r2
 801488e:	222d      	movs	r2, #45	; 0x2d
 8014890:	701a      	strb	r2, [r3, #0]
 8014892:	4bc2      	ldr	r3, [pc, #776]	; (8014b9c <_svfprintf_r+0x8d8>)
 8014894:	9309      	str	r3, [sp, #36]	; 0x24
 8014896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014898:	2b47      	cmp	r3, #71	; 0x47
 801489a:	dc01      	bgt.n	80148a0 <_svfprintf_r+0x5dc>
 801489c:	4bc0      	ldr	r3, [pc, #768]	; (8014ba0 <_svfprintf_r+0x8dc>)
 801489e:	9309      	str	r3, [sp, #36]	; 0x24
 80148a0:	2380      	movs	r3, #128	; 0x80
 80148a2:	439e      	bics	r6, r3
 80148a4:	2300      	movs	r3, #0
 80148a6:	930c      	str	r3, [sp, #48]	; 0x30
 80148a8:	3303      	adds	r3, #3
 80148aa:	9308      	str	r3, [sp, #32]
 80148ac:	2300      	movs	r3, #0
 80148ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80148b0:	e34f      	b.n	8014f52 <_svfprintf_r+0xc8e>
 80148b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80148b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80148b8:	9919      	ldr	r1, [sp, #100]	; 0x64
 80148ba:	f7ee f875 	bl	80029a8 <__aeabi_dcmpun>
 80148be:	2800      	cmp	r0, #0
 80148c0:	d00e      	beq.n	80148e0 <_svfprintf_r+0x61c>
 80148c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	da04      	bge.n	80148d2 <_svfprintf_r+0x60e>
 80148c8:	231b      	movs	r3, #27
 80148ca:	aa1e      	add	r2, sp, #120	; 0x78
 80148cc:	189b      	adds	r3, r3, r2
 80148ce:	222d      	movs	r2, #45	; 0x2d
 80148d0:	701a      	strb	r2, [r3, #0]
 80148d2:	4bb4      	ldr	r3, [pc, #720]	; (8014ba4 <_svfprintf_r+0x8e0>)
 80148d4:	9309      	str	r3, [sp, #36]	; 0x24
 80148d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148d8:	2b47      	cmp	r3, #71	; 0x47
 80148da:	dce1      	bgt.n	80148a0 <_svfprintf_r+0x5dc>
 80148dc:	4bb2      	ldr	r3, [pc, #712]	; (8014ba8 <_svfprintf_r+0x8e4>)
 80148de:	e7de      	b.n	801489e <_svfprintf_r+0x5da>
 80148e0:	2320      	movs	r3, #32
 80148e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80148e4:	439a      	bics	r2, r3
 80148e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80148e8:	2a41      	cmp	r2, #65	; 0x41
 80148ea:	d124      	bne.n	8014936 <_svfprintf_r+0x672>
 80148ec:	2230      	movs	r2, #48	; 0x30
 80148ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80148f0:	ab25      	add	r3, sp, #148	; 0x94
 80148f2:	701a      	strb	r2, [r3, #0]
 80148f4:	3228      	adds	r2, #40	; 0x28
 80148f6:	2961      	cmp	r1, #97	; 0x61
 80148f8:	d100      	bne.n	80148fc <_svfprintf_r+0x638>
 80148fa:	3220      	adds	r2, #32
 80148fc:	705a      	strb	r2, [r3, #1]
 80148fe:	2302      	movs	r3, #2
 8014900:	431e      	orrs	r6, r3
 8014902:	9b08      	ldr	r3, [sp, #32]
 8014904:	2b63      	cmp	r3, #99	; 0x63
 8014906:	dc00      	bgt.n	801490a <_svfprintf_r+0x646>
 8014908:	e09e      	b.n	8014a48 <_svfprintf_r+0x784>
 801490a:	1c59      	adds	r1, r3, #1
 801490c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801490e:	f7fe f913 	bl	8012b38 <_malloc_r>
 8014912:	9009      	str	r0, [sp, #36]	; 0x24
 8014914:	2800      	cmp	r0, #0
 8014916:	d000      	beq.n	801491a <_svfprintf_r+0x656>
 8014918:	e09b      	b.n	8014a52 <_svfprintf_r+0x78e>
 801491a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801491c:	899a      	ldrh	r2, [r3, #12]
 801491e:	2340      	movs	r3, #64	; 0x40
 8014920:	4313      	orrs	r3, r2
 8014922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014924:	8193      	strh	r3, [r2, #12]
 8014926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014928:	899b      	ldrh	r3, [r3, #12]
 801492a:	065b      	lsls	r3, r3, #25
 801492c:	d400      	bmi.n	8014930 <_svfprintf_r+0x66c>
 801492e:	e4ee      	b.n	801430e <_svfprintf_r+0x4a>
 8014930:	2301      	movs	r3, #1
 8014932:	425b      	negs	r3, r3
 8014934:	e4ea      	b.n	801430c <_svfprintf_r+0x48>
 8014936:	9b08      	ldr	r3, [sp, #32]
 8014938:	900c      	str	r0, [sp, #48]	; 0x30
 801493a:	3301      	adds	r3, #1
 801493c:	d100      	bne.n	8014940 <_svfprintf_r+0x67c>
 801493e:	e08b      	b.n	8014a58 <_svfprintf_r+0x794>
 8014940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014942:	2b47      	cmp	r3, #71	; 0x47
 8014944:	d103      	bne.n	801494e <_svfprintf_r+0x68a>
 8014946:	9b08      	ldr	r3, [sp, #32]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d100      	bne.n	801494e <_svfprintf_r+0x68a>
 801494c:	e087      	b.n	8014a5e <_svfprintf_r+0x79a>
 801494e:	2380      	movs	r3, #128	; 0x80
 8014950:	005b      	lsls	r3, r3, #1
 8014952:	4333      	orrs	r3, r6
 8014954:	9320      	str	r3, [sp, #128]	; 0x80
 8014956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014958:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801495a:	2b00      	cmp	r3, #0
 801495c:	db00      	blt.n	8014960 <_svfprintf_r+0x69c>
 801495e:	e082      	b.n	8014a66 <_svfprintf_r+0x7a2>
 8014960:	2280      	movs	r2, #128	; 0x80
 8014962:	0612      	lsls	r2, r2, #24
 8014964:	4694      	mov	ip, r2
 8014966:	4463      	add	r3, ip
 8014968:	930d      	str	r3, [sp, #52]	; 0x34
 801496a:	232d      	movs	r3, #45	; 0x2d
 801496c:	9322      	str	r3, [sp, #136]	; 0x88
 801496e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014970:	2b41      	cmp	r3, #65	; 0x41
 8014972:	d000      	beq.n	8014976 <_svfprintf_r+0x6b2>
 8014974:	e105      	b.n	8014b82 <_svfprintf_r+0x8be>
 8014976:	aa26      	add	r2, sp, #152	; 0x98
 8014978:	0020      	movs	r0, r4
 801497a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801497c:	f002 fdc4 	bl	8017508 <frexp>
 8014980:	23ff      	movs	r3, #255	; 0xff
 8014982:	2200      	movs	r2, #0
 8014984:	059b      	lsls	r3, r3, #22
 8014986:	f7ed fa55 	bl	8001e34 <__aeabi_dmul>
 801498a:	2200      	movs	r2, #0
 801498c:	2300      	movs	r3, #0
 801498e:	0004      	movs	r4, r0
 8014990:	000d      	movs	r5, r1
 8014992:	f7eb fd63 	bl	800045c <__aeabi_dcmpeq>
 8014996:	2800      	cmp	r0, #0
 8014998:	d001      	beq.n	801499e <_svfprintf_r+0x6da>
 801499a:	2301      	movs	r3, #1
 801499c:	9326      	str	r3, [sp, #152]	; 0x98
 801499e:	4b83      	ldr	r3, [pc, #524]	; (8014bac <_svfprintf_r+0x8e8>)
 80149a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80149a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149a4:	2b61      	cmp	r3, #97	; 0x61
 80149a6:	d101      	bne.n	80149ac <_svfprintf_r+0x6e8>
 80149a8:	4b81      	ldr	r3, [pc, #516]	; (8014bb0 <_svfprintf_r+0x8ec>)
 80149aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80149ac:	9b08      	ldr	r3, [sp, #32]
 80149ae:	3b01      	subs	r3, #1
 80149b0:	9310      	str	r3, [sp, #64]	; 0x40
 80149b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149b4:	9318      	str	r3, [sp, #96]	; 0x60
 80149b6:	2200      	movs	r2, #0
 80149b8:	4b7e      	ldr	r3, [pc, #504]	; (8014bb4 <_svfprintf_r+0x8f0>)
 80149ba:	0020      	movs	r0, r4
 80149bc:	0029      	movs	r1, r5
 80149be:	f7ed fa39 	bl	8001e34 <__aeabi_dmul>
 80149c2:	000d      	movs	r5, r1
 80149c4:	0004      	movs	r4, r0
 80149c6:	f7ee f80b 	bl	80029e0 <__aeabi_d2iz>
 80149ca:	9021      	str	r0, [sp, #132]	; 0x84
 80149cc:	f7ee f83e 	bl	8002a4c <__aeabi_i2d>
 80149d0:	0002      	movs	r2, r0
 80149d2:	000b      	movs	r3, r1
 80149d4:	0020      	movs	r0, r4
 80149d6:	0029      	movs	r1, r5
 80149d8:	f7ed fc9e 	bl	8002318 <__aeabi_dsub>
 80149dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80149de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149e0:	3301      	adds	r3, #1
 80149e2:	930d      	str	r3, [sp, #52]	; 0x34
 80149e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80149e6:	0004      	movs	r4, r0
 80149e8:	5c9b      	ldrb	r3, [r3, r2]
 80149ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80149ec:	000d      	movs	r5, r1
 80149ee:	7013      	strb	r3, [r2, #0]
 80149f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149f2:	9323      	str	r3, [sp, #140]	; 0x8c
 80149f4:	3301      	adds	r3, #1
 80149f6:	d00a      	beq.n	8014a0e <_svfprintf_r+0x74a>
 80149f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149fa:	2200      	movs	r2, #0
 80149fc:	3b01      	subs	r3, #1
 80149fe:	9310      	str	r3, [sp, #64]	; 0x40
 8014a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a02:	9318      	str	r3, [sp, #96]	; 0x60
 8014a04:	2300      	movs	r3, #0
 8014a06:	f7eb fd29 	bl	800045c <__aeabi_dcmpeq>
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	d0d3      	beq.n	80149b6 <_svfprintf_r+0x6f2>
 8014a0e:	2200      	movs	r2, #0
 8014a10:	4b69      	ldr	r3, [pc, #420]	; (8014bb8 <_svfprintf_r+0x8f4>)
 8014a12:	0020      	movs	r0, r4
 8014a14:	0029      	movs	r1, r5
 8014a16:	f7eb fd3b 	bl	8000490 <__aeabi_dcmpgt>
 8014a1a:	2800      	cmp	r0, #0
 8014a1c:	d126      	bne.n	8014a6c <_svfprintf_r+0x7a8>
 8014a1e:	2200      	movs	r2, #0
 8014a20:	4b65      	ldr	r3, [pc, #404]	; (8014bb8 <_svfprintf_r+0x8f4>)
 8014a22:	0020      	movs	r0, r4
 8014a24:	0029      	movs	r1, r5
 8014a26:	f7eb fd19 	bl	800045c <__aeabi_dcmpeq>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	d002      	beq.n	8014a34 <_svfprintf_r+0x770>
 8014a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a30:	07db      	lsls	r3, r3, #31
 8014a32:	d41b      	bmi.n	8014a6c <_svfprintf_r+0x7a8>
 8014a34:	2130      	movs	r1, #48	; 0x30
 8014a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a38:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014a3a:	1898      	adds	r0, r3, r2
 8014a3c:	930d      	str	r3, [sp, #52]	; 0x34
 8014a3e:	1ac2      	subs	r2, r0, r3
 8014a40:	d426      	bmi.n	8014a90 <_svfprintf_r+0x7cc>
 8014a42:	7019      	strb	r1, [r3, #0]
 8014a44:	3301      	adds	r3, #1
 8014a46:	e7f9      	b.n	8014a3c <_svfprintf_r+0x778>
 8014a48:	2300      	movs	r3, #0
 8014a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8014a4c:	ab3f      	add	r3, sp, #252	; 0xfc
 8014a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a50:	e77d      	b.n	801494e <_svfprintf_r+0x68a>
 8014a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a54:	930c      	str	r3, [sp, #48]	; 0x30
 8014a56:	e77a      	b.n	801494e <_svfprintf_r+0x68a>
 8014a58:	2306      	movs	r3, #6
 8014a5a:	9308      	str	r3, [sp, #32]
 8014a5c:	e777      	b.n	801494e <_svfprintf_r+0x68a>
 8014a5e:	9b08      	ldr	r3, [sp, #32]
 8014a60:	930c      	str	r3, [sp, #48]	; 0x30
 8014a62:	2301      	movs	r3, #1
 8014a64:	e7f9      	b.n	8014a5a <_svfprintf_r+0x796>
 8014a66:	930d      	str	r3, [sp, #52]	; 0x34
 8014a68:	2300      	movs	r3, #0
 8014a6a:	e77f      	b.n	801496c <_svfprintf_r+0x6a8>
 8014a6c:	2030      	movs	r0, #48	; 0x30
 8014a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a70:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a74:	7bda      	ldrb	r2, [r3, #15]
 8014a76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a7c:	7819      	ldrb	r1, [r3, #0]
 8014a7e:	4291      	cmp	r1, r2
 8014a80:	d07d      	beq.n	8014b7e <_svfprintf_r+0x8ba>
 8014a82:	1c4a      	adds	r2, r1, #1
 8014a84:	b2d2      	uxtb	r2, r2
 8014a86:	2939      	cmp	r1, #57	; 0x39
 8014a88:	d101      	bne.n	8014a8e <_svfprintf_r+0x7ca>
 8014a8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014a8c:	7a92      	ldrb	r2, [r2, #10]
 8014a8e:	701a      	strb	r2, [r3, #0]
 8014a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a94:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014a96:	1a9b      	subs	r3, r3, r2
 8014a98:	930d      	str	r3, [sp, #52]	; 0x34
 8014a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a9c:	2b47      	cmp	r3, #71	; 0x47
 8014a9e:	d000      	beq.n	8014aa2 <_svfprintf_r+0x7de>
 8014aa0:	e0d2      	b.n	8014c48 <_svfprintf_r+0x984>
 8014aa2:	1ceb      	adds	r3, r5, #3
 8014aa4:	db03      	blt.n	8014aae <_svfprintf_r+0x7ea>
 8014aa6:	9b08      	ldr	r3, [sp, #32]
 8014aa8:	42ab      	cmp	r3, r5
 8014aaa:	db00      	blt.n	8014aae <_svfprintf_r+0x7ea>
 8014aac:	e0fd      	b.n	8014caa <_svfprintf_r+0x9e6>
 8014aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ab0:	3b02      	subs	r3, #2
 8014ab2:	930e      	str	r3, [sp, #56]	; 0x38
 8014ab4:	2238      	movs	r2, #56	; 0x38
 8014ab6:	466b      	mov	r3, sp
 8014ab8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014aba:	189b      	adds	r3, r3, r2
 8014abc:	3a18      	subs	r2, #24
 8014abe:	4391      	bics	r1, r2
 8014ac0:	1e6c      	subs	r4, r5, #1
 8014ac2:	000a      	movs	r2, r1
 8014ac4:	9426      	str	r4, [sp, #152]	; 0x98
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	2100      	movs	r1, #0
 8014aca:	2a41      	cmp	r2, #65	; 0x41
 8014acc:	d102      	bne.n	8014ad4 <_svfprintf_r+0x810>
 8014ace:	330f      	adds	r3, #15
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	3101      	adds	r1, #1
 8014ad4:	aa28      	add	r2, sp, #160	; 0xa0
 8014ad6:	7013      	strb	r3, [r2, #0]
 8014ad8:	232b      	movs	r3, #43	; 0x2b
 8014ada:	2c00      	cmp	r4, #0
 8014adc:	da02      	bge.n	8014ae4 <_svfprintf_r+0x820>
 8014ade:	2401      	movs	r4, #1
 8014ae0:	232d      	movs	r3, #45	; 0x2d
 8014ae2:	1b64      	subs	r4, r4, r5
 8014ae4:	7053      	strb	r3, [r2, #1]
 8014ae6:	2c09      	cmp	r4, #9
 8014ae8:	dc00      	bgt.n	8014aec <_svfprintf_r+0x828>
 8014aea:	e0c7      	b.n	8014c7c <_svfprintf_r+0x9b8>
 8014aec:	2537      	movs	r5, #55	; 0x37
 8014aee:	ab1e      	add	r3, sp, #120	; 0x78
 8014af0:	18ed      	adds	r5, r5, r3
 8014af2:	1e6b      	subs	r3, r5, #1
 8014af4:	0020      	movs	r0, r4
 8014af6:	210a      	movs	r1, #10
 8014af8:	9308      	str	r3, [sp, #32]
 8014afa:	f7eb fc99 	bl	8000430 <__aeabi_idivmod>
 8014afe:	1e6b      	subs	r3, r5, #1
 8014b00:	3130      	adds	r1, #48	; 0x30
 8014b02:	7019      	strb	r1, [r3, #0]
 8014b04:	0020      	movs	r0, r4
 8014b06:	210a      	movs	r1, #10
 8014b08:	f7eb fbac 	bl	8000264 <__divsi3>
 8014b0c:	0004      	movs	r4, r0
 8014b0e:	2809      	cmp	r0, #9
 8014b10:	dd00      	ble.n	8014b14 <_svfprintf_r+0x850>
 8014b12:	e0ac      	b.n	8014c6e <_svfprintf_r+0x9aa>
 8014b14:	232a      	movs	r3, #42	; 0x2a
 8014b16:	2137      	movs	r1, #55	; 0x37
 8014b18:	aa1e      	add	r2, sp, #120	; 0x78
 8014b1a:	3d02      	subs	r5, #2
 8014b1c:	3430      	adds	r4, #48	; 0x30
 8014b1e:	702c      	strb	r4, [r5, #0]
 8014b20:	189b      	adds	r3, r3, r2
 8014b22:	1889      	adds	r1, r1, r2
 8014b24:	001a      	movs	r2, r3
 8014b26:	428d      	cmp	r5, r1
 8014b28:	d200      	bcs.n	8014b2c <_svfprintf_r+0x868>
 8014b2a:	e0a2      	b.n	8014c72 <_svfprintf_r+0x9ae>
 8014b2c:	ab28      	add	r3, sp, #160	; 0xa0
 8014b2e:	1ad3      	subs	r3, r2, r3
 8014b30:	931d      	str	r3, [sp, #116]	; 0x74
 8014b32:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b36:	4694      	mov	ip, r2
 8014b38:	4463      	add	r3, ip
 8014b3a:	9308      	str	r3, [sp, #32]
 8014b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b3e:	2b01      	cmp	r3, #1
 8014b40:	dc01      	bgt.n	8014b46 <_svfprintf_r+0x882>
 8014b42:	07f3      	lsls	r3, r6, #31
 8014b44:	d504      	bpl.n	8014b50 <_svfprintf_r+0x88c>
 8014b46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b48:	9b08      	ldr	r3, [sp, #32]
 8014b4a:	4694      	mov	ip, r2
 8014b4c:	4463      	add	r3, ip
 8014b4e:	9308      	str	r3, [sp, #32]
 8014b50:	2280      	movs	r2, #128	; 0x80
 8014b52:	4b1a      	ldr	r3, [pc, #104]	; (8014bbc <_svfprintf_r+0x8f8>)
 8014b54:	0052      	lsls	r2, r2, #1
 8014b56:	4033      	ands	r3, r6
 8014b58:	431a      	orrs	r2, r3
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	001d      	movs	r5, r3
 8014b5e:	9220      	str	r2, [sp, #128]	; 0x80
 8014b60:	9310      	str	r3, [sp, #64]	; 0x40
 8014b62:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d100      	bne.n	8014b6c <_svfprintf_r+0x8a8>
 8014b6a:	e270      	b.n	801504e <_svfprintf_r+0xd8a>
 8014b6c:	231b      	movs	r3, #27
 8014b6e:	aa1e      	add	r2, sp, #120	; 0x78
 8014b70:	189b      	adds	r3, r3, r2
 8014b72:	222d      	movs	r2, #45	; 0x2d
 8014b74:	701a      	strb	r2, [r3, #0]
 8014b76:	2300      	movs	r3, #0
 8014b78:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014b7a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b7c:	e539      	b.n	80145f2 <_svfprintf_r+0x32e>
 8014b7e:	7018      	strb	r0, [r3, #0]
 8014b80:	e779      	b.n	8014a76 <_svfprintf_r+0x7b2>
 8014b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b84:	2b46      	cmp	r3, #70	; 0x46
 8014b86:	d01b      	beq.n	8014bc0 <_svfprintf_r+0x8fc>
 8014b88:	9d08      	ldr	r5, [sp, #32]
 8014b8a:	2b45      	cmp	r3, #69	; 0x45
 8014b8c:	d101      	bne.n	8014b92 <_svfprintf_r+0x8ce>
 8014b8e:	9b08      	ldr	r3, [sp, #32]
 8014b90:	1c5d      	adds	r5, r3, #1
 8014b92:	2302      	movs	r3, #2
 8014b94:	e016      	b.n	8014bc4 <_svfprintf_r+0x900>
 8014b96:	46c0      	nop			; (mov r8, r8)
 8014b98:	7fefffff 	.word	0x7fefffff
 8014b9c:	0801a6ac 	.word	0x0801a6ac
 8014ba0:	0801a6a8 	.word	0x0801a6a8
 8014ba4:	0801a6b4 	.word	0x0801a6b4
 8014ba8:	0801a6b0 	.word	0x0801a6b0
 8014bac:	0801a6c9 	.word	0x0801a6c9
 8014bb0:	0801a6b8 	.word	0x0801a6b8
 8014bb4:	40300000 	.word	0x40300000
 8014bb8:	3fe00000 	.word	0x3fe00000
 8014bbc:	fffffbff 	.word	0xfffffbff
 8014bc0:	2303      	movs	r3, #3
 8014bc2:	9d08      	ldr	r5, [sp, #32]
 8014bc4:	aa2a      	add	r2, sp, #168	; 0xa8
 8014bc6:	9204      	str	r2, [sp, #16]
 8014bc8:	aa27      	add	r2, sp, #156	; 0x9c
 8014bca:	9203      	str	r2, [sp, #12]
 8014bcc:	aa26      	add	r2, sp, #152	; 0x98
 8014bce:	9202      	str	r2, [sp, #8]
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	9501      	str	r5, [sp, #4]
 8014bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bd6:	0022      	movs	r2, r4
 8014bd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bda:	f000 fe79 	bl	80158d0 <_dtoa_r>
 8014bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014be0:	9009      	str	r0, [sp, #36]	; 0x24
 8014be2:	2b47      	cmp	r3, #71	; 0x47
 8014be4:	d101      	bne.n	8014bea <_svfprintf_r+0x926>
 8014be6:	07f3      	lsls	r3, r6, #31
 8014be8:	d524      	bpl.n	8014c34 <_svfprintf_r+0x970>
 8014bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bec:	195b      	adds	r3, r3, r5
 8014bee:	9310      	str	r3, [sp, #64]	; 0x40
 8014bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bf2:	2b46      	cmp	r3, #70	; 0x46
 8014bf4:	d113      	bne.n	8014c1e <_svfprintf_r+0x95a>
 8014bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	2b30      	cmp	r3, #48	; 0x30
 8014bfc:	d10a      	bne.n	8014c14 <_svfprintf_r+0x950>
 8014bfe:	2200      	movs	r2, #0
 8014c00:	2300      	movs	r3, #0
 8014c02:	0020      	movs	r0, r4
 8014c04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c06:	f7eb fc29 	bl	800045c <__aeabi_dcmpeq>
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	d102      	bne.n	8014c14 <_svfprintf_r+0x950>
 8014c0e:	2301      	movs	r3, #1
 8014c10:	1b5d      	subs	r5, r3, r5
 8014c12:	9526      	str	r5, [sp, #152]	; 0x98
 8014c14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014c16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c18:	4694      	mov	ip, r2
 8014c1a:	4463      	add	r3, ip
 8014c1c:	9310      	str	r3, [sp, #64]	; 0x40
 8014c1e:	2200      	movs	r2, #0
 8014c20:	2300      	movs	r3, #0
 8014c22:	0020      	movs	r0, r4
 8014c24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c26:	f7eb fc19 	bl	800045c <__aeabi_dcmpeq>
 8014c2a:	2230      	movs	r2, #48	; 0x30
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	d006      	beq.n	8014c3e <_svfprintf_r+0x97a>
 8014c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c32:	932a      	str	r3, [sp, #168]	; 0xa8
 8014c34:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014c36:	e72c      	b.n	8014a92 <_svfprintf_r+0x7ce>
 8014c38:	1c59      	adds	r1, r3, #1
 8014c3a:	912a      	str	r1, [sp, #168]	; 0xa8
 8014c3c:	701a      	strb	r2, [r3, #0]
 8014c3e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014c40:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014c42:	4299      	cmp	r1, r3
 8014c44:	d8f8      	bhi.n	8014c38 <_svfprintf_r+0x974>
 8014c46:	e7f5      	b.n	8014c34 <_svfprintf_r+0x970>
 8014c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c4a:	2b46      	cmp	r3, #70	; 0x46
 8014c4c:	d000      	beq.n	8014c50 <_svfprintf_r+0x98c>
 8014c4e:	e731      	b.n	8014ab4 <_svfprintf_r+0x7f0>
 8014c50:	9b08      	ldr	r3, [sp, #32]
 8014c52:	2d00      	cmp	r5, #0
 8014c54:	dd21      	ble.n	8014c9a <_svfprintf_r+0x9d6>
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d101      	bne.n	8014c5e <_svfprintf_r+0x99a>
 8014c5a:	07f3      	lsls	r3, r6, #31
 8014c5c:	d54a      	bpl.n	8014cf4 <_svfprintf_r+0xa30>
 8014c5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c60:	18eb      	adds	r3, r5, r3
 8014c62:	9a08      	ldr	r2, [sp, #32]
 8014c64:	18d3      	adds	r3, r2, r3
 8014c66:	9308      	str	r3, [sp, #32]
 8014c68:	2366      	movs	r3, #102	; 0x66
 8014c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8014c6c:	e034      	b.n	8014cd8 <_svfprintf_r+0xa14>
 8014c6e:	9d08      	ldr	r5, [sp, #32]
 8014c70:	e73f      	b.n	8014af2 <_svfprintf_r+0x82e>
 8014c72:	782a      	ldrb	r2, [r5, #0]
 8014c74:	3501      	adds	r5, #1
 8014c76:	701a      	strb	r2, [r3, #0]
 8014c78:	3301      	adds	r3, #1
 8014c7a:	e753      	b.n	8014b24 <_svfprintf_r+0x860>
 8014c7c:	232a      	movs	r3, #42	; 0x2a
 8014c7e:	aa1e      	add	r2, sp, #120	; 0x78
 8014c80:	189b      	adds	r3, r3, r2
 8014c82:	2900      	cmp	r1, #0
 8014c84:	d105      	bne.n	8014c92 <_svfprintf_r+0x9ce>
 8014c86:	2230      	movs	r2, #48	; 0x30
 8014c88:	ab28      	add	r3, sp, #160	; 0xa0
 8014c8a:	709a      	strb	r2, [r3, #2]
 8014c8c:	232b      	movs	r3, #43	; 0x2b
 8014c8e:	aa1e      	add	r2, sp, #120	; 0x78
 8014c90:	189b      	adds	r3, r3, r2
 8014c92:	3430      	adds	r4, #48	; 0x30
 8014c94:	1c5a      	adds	r2, r3, #1
 8014c96:	701c      	strb	r4, [r3, #0]
 8014c98:	e748      	b.n	8014b2c <_svfprintf_r+0x868>
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d102      	bne.n	8014ca4 <_svfprintf_r+0x9e0>
 8014c9e:	3301      	adds	r3, #1
 8014ca0:	421e      	tst	r6, r3
 8014ca2:	d029      	beq.n	8014cf8 <_svfprintf_r+0xa34>
 8014ca4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	e7db      	b.n	8014c62 <_svfprintf_r+0x99e>
 8014caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cac:	42ab      	cmp	r3, r5
 8014cae:	dc06      	bgt.n	8014cbe <_svfprintf_r+0x9fa>
 8014cb0:	07f3      	lsls	r3, r6, #31
 8014cb2:	d524      	bpl.n	8014cfe <_svfprintf_r+0xa3a>
 8014cb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014cb6:	18eb      	adds	r3, r5, r3
 8014cb8:	9308      	str	r3, [sp, #32]
 8014cba:	2367      	movs	r3, #103	; 0x67
 8014cbc:	e7d5      	b.n	8014c6a <_svfprintf_r+0x9a6>
 8014cbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cc2:	4694      	mov	ip, r2
 8014cc4:	4463      	add	r3, ip
 8014cc6:	9308      	str	r3, [sp, #32]
 8014cc8:	2367      	movs	r3, #103	; 0x67
 8014cca:	930e      	str	r3, [sp, #56]	; 0x38
 8014ccc:	2d00      	cmp	r5, #0
 8014cce:	dc03      	bgt.n	8014cd8 <_svfprintf_r+0xa14>
 8014cd0:	9b08      	ldr	r3, [sp, #32]
 8014cd2:	1b5b      	subs	r3, r3, r5
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	9308      	str	r3, [sp, #32]
 8014cd8:	2380      	movs	r3, #128	; 0x80
 8014cda:	00db      	lsls	r3, r3, #3
 8014cdc:	401e      	ands	r6, r3
 8014cde:	2300      	movs	r3, #0
 8014ce0:	960f      	str	r6, [sp, #60]	; 0x3c
 8014ce2:	9310      	str	r3, [sp, #64]	; 0x40
 8014ce4:	2e00      	cmp	r6, #0
 8014ce6:	d100      	bne.n	8014cea <_svfprintf_r+0xa26>
 8014ce8:	e73c      	b.n	8014b64 <_svfprintf_r+0x8a0>
 8014cea:	2d00      	cmp	r5, #0
 8014cec:	dc27      	bgt.n	8014d3e <_svfprintf_r+0xa7a>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014cf2:	e737      	b.n	8014b64 <_svfprintf_r+0x8a0>
 8014cf4:	9508      	str	r5, [sp, #32]
 8014cf6:	e7b7      	b.n	8014c68 <_svfprintf_r+0x9a4>
 8014cf8:	2266      	movs	r2, #102	; 0x66
 8014cfa:	920e      	str	r2, [sp, #56]	; 0x38
 8014cfc:	e7eb      	b.n	8014cd6 <_svfprintf_r+0xa12>
 8014cfe:	9508      	str	r5, [sp, #32]
 8014d00:	e7db      	b.n	8014cba <_svfprintf_r+0x9f6>
 8014d02:	42ab      	cmp	r3, r5
 8014d04:	da0e      	bge.n	8014d24 <_svfprintf_r+0xa60>
 8014d06:	1aed      	subs	r5, r5, r3
 8014d08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d0a:	785b      	ldrb	r3, [r3, #1]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d012      	beq.n	8014d36 <_svfprintf_r+0xa72>
 8014d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d12:	3301      	adds	r3, #1
 8014d14:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d18:	3301      	adds	r3, #1
 8014d1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	2bff      	cmp	r3, #255	; 0xff
 8014d22:	d1ee      	bne.n	8014d02 <_svfprintf_r+0xa3e>
 8014d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d28:	189b      	adds	r3, r3, r2
 8014d2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014d2c:	4353      	muls	r3, r2
 8014d2e:	9a08      	ldr	r2, [sp, #32]
 8014d30:	189b      	adds	r3, r3, r2
 8014d32:	9308      	str	r3, [sp, #32]
 8014d34:	e716      	b.n	8014b64 <_svfprintf_r+0x8a0>
 8014d36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d38:	3301      	adds	r3, #1
 8014d3a:	9310      	str	r3, [sp, #64]	; 0x40
 8014d3c:	e7ee      	b.n	8014d1c <_svfprintf_r+0xa58>
 8014d3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d42:	e7eb      	b.n	8014d1c <_svfprintf_r+0xa58>
 8014d44:	0022      	movs	r2, r4
 8014d46:	ca08      	ldmia	r2!, {r3}
 8014d48:	9212      	str	r2, [sp, #72]	; 0x48
 8014d4a:	06b2      	lsls	r2, r6, #26
 8014d4c:	d508      	bpl.n	8014d60 <_svfprintf_r+0xa9c>
 8014d4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d50:	601a      	str	r2, [r3, #0]
 8014d52:	17d2      	asrs	r2, r2, #31
 8014d54:	605a      	str	r2, [r3, #4]
 8014d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d58:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8014d5c:	f7ff faeb 	bl	8014336 <_svfprintf_r+0x72>
 8014d60:	06f2      	lsls	r2, r6, #27
 8014d62:	d502      	bpl.n	8014d6a <_svfprintf_r+0xaa6>
 8014d64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d66:	601a      	str	r2, [r3, #0]
 8014d68:	e7f5      	b.n	8014d56 <_svfprintf_r+0xa92>
 8014d6a:	0672      	lsls	r2, r6, #25
 8014d6c:	d502      	bpl.n	8014d74 <_svfprintf_r+0xab0>
 8014d6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d70:	801a      	strh	r2, [r3, #0]
 8014d72:	e7f0      	b.n	8014d56 <_svfprintf_r+0xa92>
 8014d74:	05b2      	lsls	r2, r6, #22
 8014d76:	d5f5      	bpl.n	8014d64 <_svfprintf_r+0xaa0>
 8014d78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d7a:	701a      	strb	r2, [r3, #0]
 8014d7c:	e7eb      	b.n	8014d56 <_svfprintf_r+0xa92>
 8014d7e:	2310      	movs	r3, #16
 8014d80:	431e      	orrs	r6, r3
 8014d82:	2220      	movs	r2, #32
 8014d84:	4032      	ands	r2, r6
 8014d86:	d025      	beq.n	8014dd4 <_svfprintf_r+0xb10>
 8014d88:	2307      	movs	r3, #7
 8014d8a:	3407      	adds	r4, #7
 8014d8c:	439c      	bics	r4, r3
 8014d8e:	0023      	movs	r3, r4
 8014d90:	3308      	adds	r3, #8
 8014d92:	9312      	str	r3, [sp, #72]	; 0x48
 8014d94:	6823      	ldr	r3, [r4, #0]
 8014d96:	6864      	ldr	r4, [r4, #4]
 8014d98:	9306      	str	r3, [sp, #24]
 8014d9a:	9407      	str	r4, [sp, #28]
 8014d9c:	4bc2      	ldr	r3, [pc, #776]	; (80150a8 <_svfprintf_r+0xde4>)
 8014d9e:	401e      	ands	r6, r3
 8014da0:	2300      	movs	r3, #0
 8014da2:	221b      	movs	r2, #27
 8014da4:	a91e      	add	r1, sp, #120	; 0x78
 8014da6:	1852      	adds	r2, r2, r1
 8014da8:	2100      	movs	r1, #0
 8014daa:	7011      	strb	r1, [r2, #0]
 8014dac:	9a08      	ldr	r2, [sp, #32]
 8014dae:	3201      	adds	r2, #1
 8014db0:	d100      	bne.n	8014db4 <_svfprintf_r+0xaf0>
 8014db2:	e0a6      	b.n	8014f02 <_svfprintf_r+0xc3e>
 8014db4:	0032      	movs	r2, r6
 8014db6:	2180      	movs	r1, #128	; 0x80
 8014db8:	9807      	ldr	r0, [sp, #28]
 8014dba:	438e      	bics	r6, r1
 8014dbc:	9906      	ldr	r1, [sp, #24]
 8014dbe:	4301      	orrs	r1, r0
 8014dc0:	d000      	beq.n	8014dc4 <_svfprintf_r+0xb00>
 8014dc2:	e09e      	b.n	8014f02 <_svfprintf_r+0xc3e>
 8014dc4:	9908      	ldr	r1, [sp, #32]
 8014dc6:	2900      	cmp	r1, #0
 8014dc8:	d100      	bne.n	8014dcc <_svfprintf_r+0xb08>
 8014dca:	e125      	b.n	8015018 <_svfprintf_r+0xd54>
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	d000      	beq.n	8014dd2 <_svfprintf_r+0xb0e>
 8014dd0:	e09a      	b.n	8014f08 <_svfprintf_r+0xc44>
 8014dd2:	e518      	b.n	8014806 <_svfprintf_r+0x542>
 8014dd4:	1d23      	adds	r3, r4, #4
 8014dd6:	9312      	str	r3, [sp, #72]	; 0x48
 8014dd8:	2310      	movs	r3, #16
 8014dda:	4033      	ands	r3, r6
 8014ddc:	d003      	beq.n	8014de6 <_svfprintf_r+0xb22>
 8014dde:	6823      	ldr	r3, [r4, #0]
 8014de0:	9306      	str	r3, [sp, #24]
 8014de2:	9207      	str	r2, [sp, #28]
 8014de4:	e7da      	b.n	8014d9c <_svfprintf_r+0xad8>
 8014de6:	2240      	movs	r2, #64	; 0x40
 8014de8:	4032      	ands	r2, r6
 8014dea:	d004      	beq.n	8014df6 <_svfprintf_r+0xb32>
 8014dec:	6822      	ldr	r2, [r4, #0]
 8014dee:	b292      	uxth	r2, r2
 8014df0:	9206      	str	r2, [sp, #24]
 8014df2:	9307      	str	r3, [sp, #28]
 8014df4:	e7d2      	b.n	8014d9c <_svfprintf_r+0xad8>
 8014df6:	2380      	movs	r3, #128	; 0x80
 8014df8:	009b      	lsls	r3, r3, #2
 8014dfa:	4033      	ands	r3, r6
 8014dfc:	d002      	beq.n	8014e04 <_svfprintf_r+0xb40>
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	b2db      	uxtb	r3, r3
 8014e02:	e7ed      	b.n	8014de0 <_svfprintf_r+0xb1c>
 8014e04:	6822      	ldr	r2, [r4, #0]
 8014e06:	e7f3      	b.n	8014df0 <_svfprintf_r+0xb2c>
 8014e08:	1d23      	adds	r3, r4, #4
 8014e0a:	49a8      	ldr	r1, [pc, #672]	; (80150ac <_svfprintf_r+0xde8>)
 8014e0c:	aa25      	add	r2, sp, #148	; 0x94
 8014e0e:	9312      	str	r3, [sp, #72]	; 0x48
 8014e10:	6823      	ldr	r3, [r4, #0]
 8014e12:	8011      	strh	r1, [r2, #0]
 8014e14:	4aa6      	ldr	r2, [pc, #664]	; (80150b0 <_svfprintf_r+0xdec>)
 8014e16:	9306      	str	r3, [sp, #24]
 8014e18:	2300      	movs	r3, #0
 8014e1a:	921e      	str	r2, [sp, #120]	; 0x78
 8014e1c:	2278      	movs	r2, #120	; 0x78
 8014e1e:	9307      	str	r3, [sp, #28]
 8014e20:	3302      	adds	r3, #2
 8014e22:	431e      	orrs	r6, r3
 8014e24:	920e      	str	r2, [sp, #56]	; 0x38
 8014e26:	e7bc      	b.n	8014da2 <_svfprintf_r+0xade>
 8014e28:	1d23      	adds	r3, r4, #4
 8014e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8014e2c:	6823      	ldr	r3, [r4, #0]
 8014e2e:	2400      	movs	r4, #0
 8014e30:	9309      	str	r3, [sp, #36]	; 0x24
 8014e32:	231b      	movs	r3, #27
 8014e34:	aa1e      	add	r2, sp, #120	; 0x78
 8014e36:	189b      	adds	r3, r3, r2
 8014e38:	701c      	strb	r4, [r3, #0]
 8014e3a:	9b08      	ldr	r3, [sp, #32]
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	d00e      	beq.n	8014e5e <_svfprintf_r+0xb9a>
 8014e40:	9a08      	ldr	r2, [sp, #32]
 8014e42:	0021      	movs	r1, r4
 8014e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e46:	f001 ff79 	bl	8016d3c <memchr>
 8014e4a:	900c      	str	r0, [sp, #48]	; 0x30
 8014e4c:	42a0      	cmp	r0, r4
 8014e4e:	d100      	bne.n	8014e52 <_svfprintf_r+0xb8e>
 8014e50:	e100      	b.n	8015054 <_svfprintf_r+0xd90>
 8014e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e54:	1a83      	subs	r3, r0, r2
 8014e56:	9308      	str	r3, [sp, #32]
 8014e58:	940c      	str	r4, [sp, #48]	; 0x30
 8014e5a:	0023      	movs	r3, r4
 8014e5c:	e527      	b.n	80148ae <_svfprintf_r+0x5ea>
 8014e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e60:	f7eb f95a 	bl	8000118 <strlen>
 8014e64:	9008      	str	r0, [sp, #32]
 8014e66:	e7f7      	b.n	8014e58 <_svfprintf_r+0xb94>
 8014e68:	2310      	movs	r3, #16
 8014e6a:	431e      	orrs	r6, r3
 8014e6c:	2220      	movs	r2, #32
 8014e6e:	4032      	ands	r2, r6
 8014e70:	d00b      	beq.n	8014e8a <_svfprintf_r+0xbc6>
 8014e72:	2307      	movs	r3, #7
 8014e74:	3407      	adds	r4, #7
 8014e76:	439c      	bics	r4, r3
 8014e78:	0023      	movs	r3, r4
 8014e7a:	3308      	adds	r3, #8
 8014e7c:	9312      	str	r3, [sp, #72]	; 0x48
 8014e7e:	6823      	ldr	r3, [r4, #0]
 8014e80:	6864      	ldr	r4, [r4, #4]
 8014e82:	9306      	str	r3, [sp, #24]
 8014e84:	9407      	str	r4, [sp, #28]
 8014e86:	2301      	movs	r3, #1
 8014e88:	e78b      	b.n	8014da2 <_svfprintf_r+0xade>
 8014e8a:	1d23      	adds	r3, r4, #4
 8014e8c:	9312      	str	r3, [sp, #72]	; 0x48
 8014e8e:	2310      	movs	r3, #16
 8014e90:	4033      	ands	r3, r6
 8014e92:	d003      	beq.n	8014e9c <_svfprintf_r+0xbd8>
 8014e94:	6823      	ldr	r3, [r4, #0]
 8014e96:	9306      	str	r3, [sp, #24]
 8014e98:	9207      	str	r2, [sp, #28]
 8014e9a:	e7f4      	b.n	8014e86 <_svfprintf_r+0xbc2>
 8014e9c:	2240      	movs	r2, #64	; 0x40
 8014e9e:	4032      	ands	r2, r6
 8014ea0:	d004      	beq.n	8014eac <_svfprintf_r+0xbe8>
 8014ea2:	6822      	ldr	r2, [r4, #0]
 8014ea4:	b292      	uxth	r2, r2
 8014ea6:	9206      	str	r2, [sp, #24]
 8014ea8:	9307      	str	r3, [sp, #28]
 8014eaa:	e7ec      	b.n	8014e86 <_svfprintf_r+0xbc2>
 8014eac:	2380      	movs	r3, #128	; 0x80
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	4033      	ands	r3, r6
 8014eb2:	d002      	beq.n	8014eba <_svfprintf_r+0xbf6>
 8014eb4:	6823      	ldr	r3, [r4, #0]
 8014eb6:	b2db      	uxtb	r3, r3
 8014eb8:	e7ed      	b.n	8014e96 <_svfprintf_r+0xbd2>
 8014eba:	6822      	ldr	r2, [r4, #0]
 8014ebc:	e7f3      	b.n	8014ea6 <_svfprintf_r+0xbe2>
 8014ebe:	4b7c      	ldr	r3, [pc, #496]	; (80150b0 <_svfprintf_r+0xdec>)
 8014ec0:	f7ff fad9 	bl	8014476 <_svfprintf_r+0x1b2>
 8014ec4:	1d23      	adds	r3, r4, #4
 8014ec6:	9312      	str	r3, [sp, #72]	; 0x48
 8014ec8:	2310      	movs	r3, #16
 8014eca:	4033      	ands	r3, r6
 8014ecc:	d004      	beq.n	8014ed8 <_svfprintf_r+0xc14>
 8014ece:	6823      	ldr	r3, [r4, #0]
 8014ed0:	9306      	str	r3, [sp, #24]
 8014ed2:	9207      	str	r2, [sp, #28]
 8014ed4:	f7ff fadf 	bl	8014496 <_svfprintf_r+0x1d2>
 8014ed8:	2240      	movs	r2, #64	; 0x40
 8014eda:	4032      	ands	r2, r6
 8014edc:	d005      	beq.n	8014eea <_svfprintf_r+0xc26>
 8014ede:	6822      	ldr	r2, [r4, #0]
 8014ee0:	b292      	uxth	r2, r2
 8014ee2:	9206      	str	r2, [sp, #24]
 8014ee4:	9307      	str	r3, [sp, #28]
 8014ee6:	f7ff fad6 	bl	8014496 <_svfprintf_r+0x1d2>
 8014eea:	2380      	movs	r3, #128	; 0x80
 8014eec:	009b      	lsls	r3, r3, #2
 8014eee:	4033      	ands	r3, r6
 8014ef0:	d002      	beq.n	8014ef8 <_svfprintf_r+0xc34>
 8014ef2:	6823      	ldr	r3, [r4, #0]
 8014ef4:	b2db      	uxtb	r3, r3
 8014ef6:	e7eb      	b.n	8014ed0 <_svfprintf_r+0xc0c>
 8014ef8:	6822      	ldr	r2, [r4, #0]
 8014efa:	e7f2      	b.n	8014ee2 <_svfprintf_r+0xc1e>
 8014efc:	0032      	movs	r2, r6
 8014efe:	2301      	movs	r3, #1
 8014f00:	e759      	b.n	8014db6 <_svfprintf_r+0xaf2>
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d100      	bne.n	8014f08 <_svfprintf_r+0xc44>
 8014f06:	e476      	b.n	80147f6 <_svfprintf_r+0x532>
 8014f08:	2b02      	cmp	r3, #2
 8014f0a:	d06b      	beq.n	8014fe4 <_svfprintf_r+0xd20>
 8014f0c:	2507      	movs	r5, #7
 8014f0e:	ab58      	add	r3, sp, #352	; 0x160
 8014f10:	1e5a      	subs	r2, r3, #1
 8014f12:	9209      	str	r2, [sp, #36]	; 0x24
 8014f14:	9a06      	ldr	r2, [sp, #24]
 8014f16:	1e59      	subs	r1, r3, #1
 8014f18:	402a      	ands	r2, r5
 8014f1a:	3230      	adds	r2, #48	; 0x30
 8014f1c:	700a      	strb	r2, [r1, #0]
 8014f1e:	9907      	ldr	r1, [sp, #28]
 8014f20:	074c      	lsls	r4, r1, #29
 8014f22:	9906      	ldr	r1, [sp, #24]
 8014f24:	08c8      	lsrs	r0, r1, #3
 8014f26:	9907      	ldr	r1, [sp, #28]
 8014f28:	4304      	orrs	r4, r0
 8014f2a:	08c9      	lsrs	r1, r1, #3
 8014f2c:	9107      	str	r1, [sp, #28]
 8014f2e:	0021      	movs	r1, r4
 8014f30:	9807      	ldr	r0, [sp, #28]
 8014f32:	9406      	str	r4, [sp, #24]
 8014f34:	4301      	orrs	r1, r0
 8014f36:	d111      	bne.n	8014f5c <_svfprintf_r+0xc98>
 8014f38:	07f1      	lsls	r1, r6, #31
 8014f3a:	d502      	bpl.n	8014f42 <_svfprintf_r+0xc7e>
 8014f3c:	3b02      	subs	r3, #2
 8014f3e:	2a30      	cmp	r2, #48	; 0x30
 8014f40:	d173      	bne.n	801502a <_svfprintf_r+0xd66>
 8014f42:	9b08      	ldr	r3, [sp, #32]
 8014f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f46:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f48:	ab58      	add	r3, sp, #352	; 0x160
 8014f4a:	1a9b      	subs	r3, r3, r2
 8014f4c:	9308      	str	r3, [sp, #32]
 8014f4e:	2300      	movs	r3, #0
 8014f50:	930c      	str	r3, [sp, #48]	; 0x30
 8014f52:	9310      	str	r3, [sp, #64]	; 0x40
 8014f54:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f56:	001d      	movs	r5, r3
 8014f58:	f7ff fb4b 	bl	80145f2 <_svfprintf_r+0x32e>
 8014f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f5e:	e7d7      	b.n	8014f10 <_svfprintf_r+0xc4c>
 8014f60:	2480      	movs	r4, #128	; 0x80
 8014f62:	2300      	movs	r3, #0
 8014f64:	00e4      	lsls	r4, r4, #3
 8014f66:	930d      	str	r3, [sp, #52]	; 0x34
 8014f68:	4034      	ands	r4, r6
 8014f6a:	ab58      	add	r3, sp, #352	; 0x160
 8014f6c:	3b01      	subs	r3, #1
 8014f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f70:	220a      	movs	r2, #10
 8014f72:	9806      	ldr	r0, [sp, #24]
 8014f74:	9907      	ldr	r1, [sp, #28]
 8014f76:	2300      	movs	r3, #0
 8014f78:	f7eb fad8 	bl	800052c <__aeabi_uldivmod>
 8014f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f7e:	3230      	adds	r2, #48	; 0x30
 8014f80:	701a      	strb	r2, [r3, #0]
 8014f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f84:	3301      	adds	r3, #1
 8014f86:	930d      	str	r3, [sp, #52]	; 0x34
 8014f88:	2c00      	cmp	r4, #0
 8014f8a:	d01d      	beq.n	8014fc8 <_svfprintf_r+0xd04>
 8014f8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d118      	bne.n	8014fc8 <_svfprintf_r+0xd04>
 8014f96:	2aff      	cmp	r2, #255	; 0xff
 8014f98:	d016      	beq.n	8014fc8 <_svfprintf_r+0xd04>
 8014f9a:	9b07      	ldr	r3, [sp, #28]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d102      	bne.n	8014fa6 <_svfprintf_r+0xce2>
 8014fa0:	9b06      	ldr	r3, [sp, #24]
 8014fa2:	2b09      	cmp	r3, #9
 8014fa4:	d910      	bls.n	8014fc8 <_svfprintf_r+0xd04>
 8014fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fa8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014faa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014fac:	1a9b      	subs	r3, r3, r2
 8014fae:	0018      	movs	r0, r3
 8014fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8014fb2:	f7fe fa52 	bl	801345a <strncpy>
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014fba:	920d      	str	r2, [sp, #52]	; 0x34
 8014fbc:	785b      	ldrb	r3, [r3, #1]
 8014fbe:	1e5a      	subs	r2, r3, #1
 8014fc0:	4193      	sbcs	r3, r2
 8014fc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014fc4:	18d3      	adds	r3, r2, r3
 8014fc6:	9313      	str	r3, [sp, #76]	; 0x4c
 8014fc8:	220a      	movs	r2, #10
 8014fca:	9806      	ldr	r0, [sp, #24]
 8014fcc:	9907      	ldr	r1, [sp, #28]
 8014fce:	2300      	movs	r3, #0
 8014fd0:	f7eb faac 	bl	800052c <__aeabi_uldivmod>
 8014fd4:	9006      	str	r0, [sp, #24]
 8014fd6:	9107      	str	r1, [sp, #28]
 8014fd8:	9b06      	ldr	r3, [sp, #24]
 8014fda:	9a07      	ldr	r2, [sp, #28]
 8014fdc:	4313      	orrs	r3, r2
 8014fde:	d0b0      	beq.n	8014f42 <_svfprintf_r+0xc7e>
 8014fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe2:	e7c3      	b.n	8014f6c <_svfprintf_r+0xca8>
 8014fe4:	200f      	movs	r0, #15
 8014fe6:	ab58      	add	r3, sp, #352	; 0x160
 8014fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8014fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8014ff2:	9b06      	ldr	r3, [sp, #24]
 8014ff4:	4003      	ands	r3, r0
 8014ff6:	5cd3      	ldrb	r3, [r2, r3]
 8014ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ffa:	7013      	strb	r3, [r2, #0]
 8014ffc:	9b07      	ldr	r3, [sp, #28]
 8014ffe:	0719      	lsls	r1, r3, #28
 8015000:	9b06      	ldr	r3, [sp, #24]
 8015002:	091a      	lsrs	r2, r3, #4
 8015004:	9b07      	ldr	r3, [sp, #28]
 8015006:	4311      	orrs	r1, r2
 8015008:	091b      	lsrs	r3, r3, #4
 801500a:	9307      	str	r3, [sp, #28]
 801500c:	000b      	movs	r3, r1
 801500e:	9a07      	ldr	r2, [sp, #28]
 8015010:	9106      	str	r1, [sp, #24]
 8015012:	4313      	orrs	r3, r2
 8015014:	d1e9      	bne.n	8014fea <_svfprintf_r+0xd26>
 8015016:	e794      	b.n	8014f42 <_svfprintf_r+0xc7e>
 8015018:	a958      	add	r1, sp, #352	; 0x160
 801501a:	9109      	str	r1, [sp, #36]	; 0x24
 801501c:	2b00      	cmp	r3, #0
 801501e:	d190      	bne.n	8014f42 <_svfprintf_r+0xc7e>
 8015020:	07d3      	lsls	r3, r2, #31
 8015022:	d58e      	bpl.n	8014f42 <_svfprintf_r+0xc7e>
 8015024:	23e7      	movs	r3, #231	; 0xe7
 8015026:	aa1e      	add	r2, sp, #120	; 0x78
 8015028:	189b      	adds	r3, r3, r2
 801502a:	2230      	movs	r2, #48	; 0x30
 801502c:	f7ff fbf0 	bl	8014810 <_svfprintf_r+0x54c>
 8015030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015032:	2b00      	cmp	r3, #0
 8015034:	d100      	bne.n	8015038 <_svfprintf_r+0xd74>
 8015036:	e38a      	b.n	801574e <_svfprintf_r+0x148a>
 8015038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801503a:	ab3f      	add	r3, sp, #252	; 0xfc
 801503c:	701a      	strb	r2, [r3, #0]
 801503e:	221b      	movs	r2, #27
 8015040:	2000      	movs	r0, #0
 8015042:	a91e      	add	r1, sp, #120	; 0x78
 8015044:	1852      	adds	r2, r2, r1
 8015046:	7010      	strb	r0, [r2, #0]
 8015048:	9412      	str	r4, [sp, #72]	; 0x48
 801504a:	f7ff faca 	bl	80145e2 <_svfprintf_r+0x31e>
 801504e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015050:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015052:	e592      	b.n	8014b7a <_svfprintf_r+0x8b6>
 8015054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015056:	e42a      	b.n	80148ae <_svfprintf_r+0x5ea>
 8015058:	2010      	movs	r0, #16
 801505a:	1812      	adds	r2, r2, r0
 801505c:	6078      	str	r0, [r7, #4]
 801505e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015060:	932d      	str	r3, [sp, #180]	; 0xb4
 8015062:	2b07      	cmp	r3, #7
 8015064:	dd08      	ble.n	8015078 <_svfprintf_r+0xdb4>
 8015066:	aa2c      	add	r2, sp, #176	; 0xb0
 8015068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801506a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801506c:	f002 fa7e 	bl	801756c <__ssprint_r>
 8015070:	2800      	cmp	r0, #0
 8015072:	d000      	beq.n	8015076 <_svfprintf_r+0xdb2>
 8015074:	e34a      	b.n	801570c <_svfprintf_r+0x1448>
 8015076:	a92f      	add	r1, sp, #188	; 0xbc
 8015078:	3c10      	subs	r4, #16
 801507a:	000f      	movs	r7, r1
 801507c:	f7ff fad8 	bl	8014630 <_svfprintf_r+0x36c>
 8015080:	2010      	movs	r0, #16
 8015082:	1812      	adds	r2, r2, r0
 8015084:	6078      	str	r0, [r7, #4]
 8015086:	922e      	str	r2, [sp, #184]	; 0xb8
 8015088:	932d      	str	r3, [sp, #180]	; 0xb4
 801508a:	2b07      	cmp	r3, #7
 801508c:	dd08      	ble.n	80150a0 <_svfprintf_r+0xddc>
 801508e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015092:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015094:	f002 fa6a 	bl	801756c <__ssprint_r>
 8015098:	2800      	cmp	r0, #0
 801509a:	d000      	beq.n	801509e <_svfprintf_r+0xdda>
 801509c:	e336      	b.n	801570c <_svfprintf_r+0x1448>
 801509e:	a92f      	add	r1, sp, #188	; 0xbc
 80150a0:	3c10      	subs	r4, #16
 80150a2:	000f      	movs	r7, r1
 80150a4:	f7ff fb24 	bl	80146f0 <_svfprintf_r+0x42c>
 80150a8:	fffffbff 	.word	0xfffffbff
 80150ac:	00007830 	.word	0x00007830
 80150b0:	0801a6b8 	.word	0x0801a6b8
 80150b4:	2010      	movs	r0, #16
 80150b6:	1812      	adds	r2, r2, r0
 80150b8:	6078      	str	r0, [r7, #4]
 80150ba:	922e      	str	r2, [sp, #184]	; 0xb8
 80150bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80150be:	2b07      	cmp	r3, #7
 80150c0:	dd08      	ble.n	80150d4 <_svfprintf_r+0xe10>
 80150c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80150c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150c8:	f002 fa50 	bl	801756c <__ssprint_r>
 80150cc:	2800      	cmp	r0, #0
 80150ce:	d000      	beq.n	80150d2 <_svfprintf_r+0xe0e>
 80150d0:	e31c      	b.n	801570c <_svfprintf_r+0x1448>
 80150d2:	a92f      	add	r1, sp, #188	; 0xbc
 80150d4:	3c10      	subs	r4, #16
 80150d6:	000f      	movs	r7, r1
 80150d8:	f7ff fb2c 	bl	8014734 <_svfprintf_r+0x470>
 80150dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150de:	2b65      	cmp	r3, #101	; 0x65
 80150e0:	dc00      	bgt.n	80150e4 <_svfprintf_r+0xe20>
 80150e2:	e259      	b.n	8015598 <_svfprintf_r+0x12d4>
 80150e4:	2200      	movs	r2, #0
 80150e6:	2300      	movs	r3, #0
 80150e8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80150ea:	9919      	ldr	r1, [sp, #100]	; 0x64
 80150ec:	f7eb f9b6 	bl	800045c <__aeabi_dcmpeq>
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d07c      	beq.n	80151ee <_svfprintf_r+0xf2a>
 80150f4:	4b81      	ldr	r3, [pc, #516]	; (80152fc <_svfprintf_r+0x1038>)
 80150f6:	603b      	str	r3, [r7, #0]
 80150f8:	2301      	movs	r3, #1
 80150fa:	607b      	str	r3, [r7, #4]
 80150fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80150fe:	3708      	adds	r7, #8
 8015100:	3301      	adds	r3, #1
 8015102:	932e      	str	r3, [sp, #184]	; 0xb8
 8015104:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015106:	9308      	str	r3, [sp, #32]
 8015108:	3301      	adds	r3, #1
 801510a:	932d      	str	r3, [sp, #180]	; 0xb4
 801510c:	2b07      	cmp	r3, #7
 801510e:	dd08      	ble.n	8015122 <_svfprintf_r+0xe5e>
 8015110:	aa2c      	add	r2, sp, #176	; 0xb0
 8015112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015114:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015116:	f002 fa29 	bl	801756c <__ssprint_r>
 801511a:	2800      	cmp	r0, #0
 801511c:	d000      	beq.n	8015120 <_svfprintf_r+0xe5c>
 801511e:	e2f5      	b.n	801570c <_svfprintf_r+0x1448>
 8015120:	af2f      	add	r7, sp, #188	; 0xbc
 8015122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015126:	4293      	cmp	r3, r2
 8015128:	db01      	blt.n	801512e <_svfprintf_r+0xe6a>
 801512a:	07f3      	lsls	r3, r6, #31
 801512c:	d51d      	bpl.n	801516a <_svfprintf_r+0xea6>
 801512e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015130:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015132:	4694      	mov	ip, r2
 8015134:	603b      	str	r3, [r7, #0]
 8015136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015138:	607b      	str	r3, [r7, #4]
 801513a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801513c:	3708      	adds	r7, #8
 801513e:	4463      	add	r3, ip
 8015140:	932e      	str	r3, [sp, #184]	; 0xb8
 8015142:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015144:	9308      	str	r3, [sp, #32]
 8015146:	3301      	adds	r3, #1
 8015148:	932d      	str	r3, [sp, #180]	; 0xb4
 801514a:	2b07      	cmp	r3, #7
 801514c:	dd08      	ble.n	8015160 <_svfprintf_r+0xe9c>
 801514e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015152:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015154:	f002 fa0a 	bl	801756c <__ssprint_r>
 8015158:	2800      	cmp	r0, #0
 801515a:	d000      	beq.n	801515e <_svfprintf_r+0xe9a>
 801515c:	e2d6      	b.n	801570c <_svfprintf_r+0x1448>
 801515e:	af2f      	add	r7, sp, #188	; 0xbc
 8015160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015162:	2510      	movs	r5, #16
 8015164:	1e5c      	subs	r4, r3, #1
 8015166:	2c00      	cmp	r4, #0
 8015168:	dc2f      	bgt.n	80151ca <_svfprintf_r+0xf06>
 801516a:	0773      	lsls	r3, r6, #29
 801516c:	d500      	bpl.n	8015170 <_svfprintf_r+0xeac>
 801516e:	e2af      	b.n	80156d0 <_svfprintf_r+0x140c>
 8015170:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015172:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015174:	4293      	cmp	r3, r2
 8015176:	da00      	bge.n	801517a <_svfprintf_r+0xeb6>
 8015178:	0013      	movs	r3, r2
 801517a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801517c:	18d3      	adds	r3, r2, r3
 801517e:	9315      	str	r3, [sp, #84]	; 0x54
 8015180:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015182:	9308      	str	r3, [sp, #32]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d007      	beq.n	8015198 <_svfprintf_r+0xed4>
 8015188:	aa2c      	add	r2, sp, #176	; 0xb0
 801518a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801518c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801518e:	f002 f9ed 	bl	801756c <__ssprint_r>
 8015192:	2800      	cmp	r0, #0
 8015194:	d000      	beq.n	8015198 <_svfprintf_r+0xed4>
 8015196:	e2b9      	b.n	801570c <_svfprintf_r+0x1448>
 8015198:	2300      	movs	r3, #0
 801519a:	932d      	str	r3, [sp, #180]	; 0xb4
 801519c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d000      	beq.n	80151a4 <_svfprintf_r+0xee0>
 80151a2:	e2cf      	b.n	8015744 <_svfprintf_r+0x1480>
 80151a4:	af2f      	add	r7, sp, #188	; 0xbc
 80151a6:	e5d6      	b.n	8014d56 <_svfprintf_r+0xa92>
 80151a8:	3210      	adds	r2, #16
 80151aa:	607d      	str	r5, [r7, #4]
 80151ac:	922e      	str	r2, [sp, #184]	; 0xb8
 80151ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80151b0:	2b07      	cmp	r3, #7
 80151b2:	dd08      	ble.n	80151c6 <_svfprintf_r+0xf02>
 80151b4:	aa2c      	add	r2, sp, #176	; 0xb0
 80151b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151ba:	f002 f9d7 	bl	801756c <__ssprint_r>
 80151be:	2800      	cmp	r0, #0
 80151c0:	d000      	beq.n	80151c4 <_svfprintf_r+0xf00>
 80151c2:	e2a3      	b.n	801570c <_svfprintf_r+0x1448>
 80151c4:	a92f      	add	r1, sp, #188	; 0xbc
 80151c6:	000f      	movs	r7, r1
 80151c8:	3c10      	subs	r4, #16
 80151ca:	0039      	movs	r1, r7
 80151cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151ce:	484c      	ldr	r0, [pc, #304]	; (8015300 <_svfprintf_r+0x103c>)
 80151d0:	9308      	str	r3, [sp, #32]
 80151d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80151d4:	3301      	adds	r3, #1
 80151d6:	3108      	adds	r1, #8
 80151d8:	6038      	str	r0, [r7, #0]
 80151da:	2c10      	cmp	r4, #16
 80151dc:	dce4      	bgt.n	80151a8 <_svfprintf_r+0xee4>
 80151de:	607c      	str	r4, [r7, #4]
 80151e0:	18a4      	adds	r4, r4, r2
 80151e2:	942e      	str	r4, [sp, #184]	; 0xb8
 80151e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80151e6:	000f      	movs	r7, r1
 80151e8:	2b07      	cmp	r3, #7
 80151ea:	ddbe      	ble.n	801516a <_svfprintf_r+0xea6>
 80151ec:	e06a      	b.n	80152c4 <_svfprintf_r+0x1000>
 80151ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	dd00      	ble.n	80151f6 <_svfprintf_r+0xf32>
 80151f4:	e086      	b.n	8015304 <_svfprintf_r+0x1040>
 80151f6:	4b41      	ldr	r3, [pc, #260]	; (80152fc <_svfprintf_r+0x1038>)
 80151f8:	603b      	str	r3, [r7, #0]
 80151fa:	2301      	movs	r3, #1
 80151fc:	607b      	str	r3, [r7, #4]
 80151fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015200:	3708      	adds	r7, #8
 8015202:	3301      	adds	r3, #1
 8015204:	932e      	str	r3, [sp, #184]	; 0xb8
 8015206:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015208:	9308      	str	r3, [sp, #32]
 801520a:	3301      	adds	r3, #1
 801520c:	932d      	str	r3, [sp, #180]	; 0xb4
 801520e:	2b07      	cmp	r3, #7
 8015210:	dd08      	ble.n	8015224 <_svfprintf_r+0xf60>
 8015212:	aa2c      	add	r2, sp, #176	; 0xb0
 8015214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015216:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015218:	f002 f9a8 	bl	801756c <__ssprint_r>
 801521c:	2800      	cmp	r0, #0
 801521e:	d000      	beq.n	8015222 <_svfprintf_r+0xf5e>
 8015220:	e274      	b.n	801570c <_svfprintf_r+0x1448>
 8015222:	af2f      	add	r7, sp, #188	; 0xbc
 8015224:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015226:	2b00      	cmp	r3, #0
 8015228:	d104      	bne.n	8015234 <_svfprintf_r+0xf70>
 801522a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801522c:	2b00      	cmp	r3, #0
 801522e:	d101      	bne.n	8015234 <_svfprintf_r+0xf70>
 8015230:	07f3      	lsls	r3, r6, #31
 8015232:	d59a      	bpl.n	801516a <_svfprintf_r+0xea6>
 8015234:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015236:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015238:	4694      	mov	ip, r2
 801523a:	603b      	str	r3, [r7, #0]
 801523c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801523e:	607b      	str	r3, [r7, #4]
 8015240:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015242:	3708      	adds	r7, #8
 8015244:	4463      	add	r3, ip
 8015246:	932e      	str	r3, [sp, #184]	; 0xb8
 8015248:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801524a:	9308      	str	r3, [sp, #32]
 801524c:	3301      	adds	r3, #1
 801524e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015250:	2b07      	cmp	r3, #7
 8015252:	dd08      	ble.n	8015266 <_svfprintf_r+0xfa2>
 8015254:	aa2c      	add	r2, sp, #176	; 0xb0
 8015256:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015258:	980a      	ldr	r0, [sp, #40]	; 0x28
 801525a:	f002 f987 	bl	801756c <__ssprint_r>
 801525e:	2800      	cmp	r0, #0
 8015260:	d000      	beq.n	8015264 <_svfprintf_r+0xfa0>
 8015262:	e253      	b.n	801570c <_svfprintf_r+0x1448>
 8015264:	af2f      	add	r7, sp, #188	; 0xbc
 8015266:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8015268:	2c00      	cmp	r4, #0
 801526a:	da1a      	bge.n	80152a2 <_svfprintf_r+0xfde>
 801526c:	0039      	movs	r1, r7
 801526e:	2510      	movs	r5, #16
 8015270:	4264      	negs	r4, r4
 8015272:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015274:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8015276:	9308      	str	r3, [sp, #32]
 8015278:	1c5a      	adds	r2, r3, #1
 801527a:	4b21      	ldr	r3, [pc, #132]	; (8015300 <_svfprintf_r+0x103c>)
 801527c:	3708      	adds	r7, #8
 801527e:	600b      	str	r3, [r1, #0]
 8015280:	2c10      	cmp	r4, #16
 8015282:	dc29      	bgt.n	80152d8 <_svfprintf_r+0x1014>
 8015284:	604c      	str	r4, [r1, #4]
 8015286:	1824      	adds	r4, r4, r0
 8015288:	942e      	str	r4, [sp, #184]	; 0xb8
 801528a:	922d      	str	r2, [sp, #180]	; 0xb4
 801528c:	2a07      	cmp	r2, #7
 801528e:	dd08      	ble.n	80152a2 <_svfprintf_r+0xfde>
 8015290:	aa2c      	add	r2, sp, #176	; 0xb0
 8015292:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015294:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015296:	f002 f969 	bl	801756c <__ssprint_r>
 801529a:	2800      	cmp	r0, #0
 801529c:	d000      	beq.n	80152a0 <_svfprintf_r+0xfdc>
 801529e:	e235      	b.n	801570c <_svfprintf_r+0x1448>
 80152a0:	af2f      	add	r7, sp, #188	; 0xbc
 80152a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80152a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a6:	468c      	mov	ip, r1
 80152a8:	603b      	str	r3, [r7, #0]
 80152aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152ac:	607b      	str	r3, [r7, #4]
 80152ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152b0:	4463      	add	r3, ip
 80152b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80152b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152b6:	1c5a      	adds	r2, r3, #1
 80152b8:	9308      	str	r3, [sp, #32]
 80152ba:	922d      	str	r2, [sp, #180]	; 0xb4
 80152bc:	2a07      	cmp	r2, #7
 80152be:	dc01      	bgt.n	80152c4 <_svfprintf_r+0x1000>
 80152c0:	f7ff fa6c 	bl	801479c <_svfprintf_r+0x4d8>
 80152c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80152c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152ca:	f002 f94f 	bl	801756c <__ssprint_r>
 80152ce:	2800      	cmp	r0, #0
 80152d0:	d000      	beq.n	80152d4 <_svfprintf_r+0x1010>
 80152d2:	e21b      	b.n	801570c <_svfprintf_r+0x1448>
 80152d4:	af2f      	add	r7, sp, #188	; 0xbc
 80152d6:	e748      	b.n	801516a <_svfprintf_r+0xea6>
 80152d8:	3010      	adds	r0, #16
 80152da:	604d      	str	r5, [r1, #4]
 80152dc:	902e      	str	r0, [sp, #184]	; 0xb8
 80152de:	922d      	str	r2, [sp, #180]	; 0xb4
 80152e0:	2a07      	cmp	r2, #7
 80152e2:	dd08      	ble.n	80152f6 <_svfprintf_r+0x1032>
 80152e4:	aa2c      	add	r2, sp, #176	; 0xb0
 80152e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152ea:	f002 f93f 	bl	801756c <__ssprint_r>
 80152ee:	2800      	cmp	r0, #0
 80152f0:	d000      	beq.n	80152f4 <_svfprintf_r+0x1030>
 80152f2:	e20b      	b.n	801570c <_svfprintf_r+0x1448>
 80152f4:	af2f      	add	r7, sp, #188	; 0xbc
 80152f6:	3c10      	subs	r4, #16
 80152f8:	0039      	movs	r1, r7
 80152fa:	e7ba      	b.n	8015272 <_svfprintf_r+0xfae>
 80152fc:	0801a6da 	.word	0x0801a6da
 8015300:	0801a6ec 	.word	0x0801a6ec
 8015304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015306:	002c      	movs	r4, r5
 8015308:	429d      	cmp	r5, r3
 801530a:	dd00      	ble.n	801530e <_svfprintf_r+0x104a>
 801530c:	001c      	movs	r4, r3
 801530e:	2c00      	cmp	r4, #0
 8015310:	dd15      	ble.n	801533e <_svfprintf_r+0x107a>
 8015312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015314:	607c      	str	r4, [r7, #4]
 8015316:	603b      	str	r3, [r7, #0]
 8015318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801531a:	3708      	adds	r7, #8
 801531c:	18e3      	adds	r3, r4, r3
 801531e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015320:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015322:	9308      	str	r3, [sp, #32]
 8015324:	3301      	adds	r3, #1
 8015326:	932d      	str	r3, [sp, #180]	; 0xb4
 8015328:	2b07      	cmp	r3, #7
 801532a:	dd08      	ble.n	801533e <_svfprintf_r+0x107a>
 801532c:	aa2c      	add	r2, sp, #176	; 0xb0
 801532e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015330:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015332:	f002 f91b 	bl	801756c <__ssprint_r>
 8015336:	2800      	cmp	r0, #0
 8015338:	d000      	beq.n	801533c <_svfprintf_r+0x1078>
 801533a:	e1e7      	b.n	801570c <_svfprintf_r+0x1448>
 801533c:	af2f      	add	r7, sp, #188	; 0xbc
 801533e:	43e3      	mvns	r3, r4
 8015340:	17db      	asrs	r3, r3, #31
 8015342:	401c      	ands	r4, r3
 8015344:	1b2c      	subs	r4, r5, r4
 8015346:	2c00      	cmp	r4, #0
 8015348:	dd1a      	ble.n	8015380 <_svfprintf_r+0x10bc>
 801534a:	0039      	movs	r1, r7
 801534c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801534e:	48d4      	ldr	r0, [pc, #848]	; (80156a0 <_svfprintf_r+0x13dc>)
 8015350:	9308      	str	r3, [sp, #32]
 8015352:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015354:	3301      	adds	r3, #1
 8015356:	3108      	adds	r1, #8
 8015358:	6038      	str	r0, [r7, #0]
 801535a:	2c10      	cmp	r4, #16
 801535c:	dd00      	ble.n	8015360 <_svfprintf_r+0x109c>
 801535e:	e089      	b.n	8015474 <_svfprintf_r+0x11b0>
 8015360:	607c      	str	r4, [r7, #4]
 8015362:	18a4      	adds	r4, r4, r2
 8015364:	942e      	str	r4, [sp, #184]	; 0xb8
 8015366:	932d      	str	r3, [sp, #180]	; 0xb4
 8015368:	000f      	movs	r7, r1
 801536a:	2b07      	cmp	r3, #7
 801536c:	dd08      	ble.n	8015380 <_svfprintf_r+0x10bc>
 801536e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015370:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015372:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015374:	f002 f8fa 	bl	801756c <__ssprint_r>
 8015378:	2800      	cmp	r0, #0
 801537a:	d000      	beq.n	801537e <_svfprintf_r+0x10ba>
 801537c:	e1c6      	b.n	801570c <_svfprintf_r+0x1448>
 801537e:	af2f      	add	r7, sp, #188	; 0xbc
 8015380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015382:	195d      	adds	r5, r3, r5
 8015384:	0573      	lsls	r3, r6, #21
 8015386:	d50d      	bpl.n	80153a4 <_svfprintf_r+0x10e0>
 8015388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801538a:	2b00      	cmp	r3, #0
 801538c:	d000      	beq.n	8015390 <_svfprintf_r+0x10cc>
 801538e:	e084      	b.n	801549a <_svfprintf_r+0x11d6>
 8015390:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015392:	2b00      	cmp	r3, #0
 8015394:	d000      	beq.n	8015398 <_svfprintf_r+0x10d4>
 8015396:	e083      	b.n	80154a0 <_svfprintf_r+0x11dc>
 8015398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801539a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801539c:	189b      	adds	r3, r3, r2
 801539e:	429d      	cmp	r5, r3
 80153a0:	d900      	bls.n	80153a4 <_svfprintf_r+0x10e0>
 80153a2:	001d      	movs	r5, r3
 80153a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80153a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153a8:	4293      	cmp	r3, r2
 80153aa:	db01      	blt.n	80153b0 <_svfprintf_r+0x10ec>
 80153ac:	07f3      	lsls	r3, r6, #31
 80153ae:	d518      	bpl.n	80153e2 <_svfprintf_r+0x111e>
 80153b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80153b4:	4694      	mov	ip, r2
 80153b6:	603b      	str	r3, [r7, #0]
 80153b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153ba:	607b      	str	r3, [r7, #4]
 80153bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153be:	3708      	adds	r7, #8
 80153c0:	4463      	add	r3, ip
 80153c2:	932e      	str	r3, [sp, #184]	; 0xb8
 80153c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153c6:	9308      	str	r3, [sp, #32]
 80153c8:	3301      	adds	r3, #1
 80153ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80153cc:	2b07      	cmp	r3, #7
 80153ce:	dd08      	ble.n	80153e2 <_svfprintf_r+0x111e>
 80153d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80153d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153d6:	f002 f8c9 	bl	801756c <__ssprint_r>
 80153da:	2800      	cmp	r0, #0
 80153dc:	d000      	beq.n	80153e0 <_svfprintf_r+0x111c>
 80153de:	e195      	b.n	801570c <_svfprintf_r+0x1448>
 80153e0:	af2f      	add	r7, sp, #188	; 0xbc
 80153e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153e6:	4694      	mov	ip, r2
 80153e8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80153ea:	4463      	add	r3, ip
 80153ec:	1b5b      	subs	r3, r3, r5
 80153ee:	1a54      	subs	r4, r2, r1
 80153f0:	429c      	cmp	r4, r3
 80153f2:	dd00      	ble.n	80153f6 <_svfprintf_r+0x1132>
 80153f4:	001c      	movs	r4, r3
 80153f6:	2c00      	cmp	r4, #0
 80153f8:	dd14      	ble.n	8015424 <_svfprintf_r+0x1160>
 80153fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153fc:	603d      	str	r5, [r7, #0]
 80153fe:	18e3      	adds	r3, r4, r3
 8015400:	932e      	str	r3, [sp, #184]	; 0xb8
 8015402:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015404:	607c      	str	r4, [r7, #4]
 8015406:	9308      	str	r3, [sp, #32]
 8015408:	3301      	adds	r3, #1
 801540a:	932d      	str	r3, [sp, #180]	; 0xb4
 801540c:	3708      	adds	r7, #8
 801540e:	2b07      	cmp	r3, #7
 8015410:	dd08      	ble.n	8015424 <_svfprintf_r+0x1160>
 8015412:	aa2c      	add	r2, sp, #176	; 0xb0
 8015414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015416:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015418:	f002 f8a8 	bl	801756c <__ssprint_r>
 801541c:	2800      	cmp	r0, #0
 801541e:	d000      	beq.n	8015422 <_svfprintf_r+0x115e>
 8015420:	e174      	b.n	801570c <_svfprintf_r+0x1448>
 8015422:	af2f      	add	r7, sp, #188	; 0xbc
 8015424:	43e3      	mvns	r3, r4
 8015426:	17db      	asrs	r3, r3, #31
 8015428:	401c      	ands	r4, r3
 801542a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801542c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801542e:	2510      	movs	r5, #16
 8015430:	1a9b      	subs	r3, r3, r2
 8015432:	1b1c      	subs	r4, r3, r4
 8015434:	2c00      	cmp	r4, #0
 8015436:	dc00      	bgt.n	801543a <_svfprintf_r+0x1176>
 8015438:	e697      	b.n	801516a <_svfprintf_r+0xea6>
 801543a:	0039      	movs	r1, r7
 801543c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801543e:	4898      	ldr	r0, [pc, #608]	; (80156a0 <_svfprintf_r+0x13dc>)
 8015440:	9308      	str	r3, [sp, #32]
 8015442:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015444:	3301      	adds	r3, #1
 8015446:	3108      	adds	r1, #8
 8015448:	6038      	str	r0, [r7, #0]
 801544a:	2c10      	cmp	r4, #16
 801544c:	dc00      	bgt.n	8015450 <_svfprintf_r+0x118c>
 801544e:	e6c6      	b.n	80151de <_svfprintf_r+0xf1a>
 8015450:	3210      	adds	r2, #16
 8015452:	607d      	str	r5, [r7, #4]
 8015454:	922e      	str	r2, [sp, #184]	; 0xb8
 8015456:	932d      	str	r3, [sp, #180]	; 0xb4
 8015458:	2b07      	cmp	r3, #7
 801545a:	dd08      	ble.n	801546e <_svfprintf_r+0x11aa>
 801545c:	aa2c      	add	r2, sp, #176	; 0xb0
 801545e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015460:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015462:	f002 f883 	bl	801756c <__ssprint_r>
 8015466:	2800      	cmp	r0, #0
 8015468:	d000      	beq.n	801546c <_svfprintf_r+0x11a8>
 801546a:	e14f      	b.n	801570c <_svfprintf_r+0x1448>
 801546c:	a92f      	add	r1, sp, #188	; 0xbc
 801546e:	3c10      	subs	r4, #16
 8015470:	000f      	movs	r7, r1
 8015472:	e7e2      	b.n	801543a <_svfprintf_r+0x1176>
 8015474:	2010      	movs	r0, #16
 8015476:	1812      	adds	r2, r2, r0
 8015478:	6078      	str	r0, [r7, #4]
 801547a:	922e      	str	r2, [sp, #184]	; 0xb8
 801547c:	932d      	str	r3, [sp, #180]	; 0xb4
 801547e:	2b07      	cmp	r3, #7
 8015480:	dd08      	ble.n	8015494 <_svfprintf_r+0x11d0>
 8015482:	aa2c      	add	r2, sp, #176	; 0xb0
 8015484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015486:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015488:	f002 f870 	bl	801756c <__ssprint_r>
 801548c:	2800      	cmp	r0, #0
 801548e:	d000      	beq.n	8015492 <_svfprintf_r+0x11ce>
 8015490:	e13c      	b.n	801570c <_svfprintf_r+0x1448>
 8015492:	a92f      	add	r1, sp, #188	; 0xbc
 8015494:	3c10      	subs	r4, #16
 8015496:	000f      	movs	r7, r1
 8015498:	e757      	b.n	801534a <_svfprintf_r+0x1086>
 801549a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801549c:	2b00      	cmp	r3, #0
 801549e:	d061      	beq.n	8015564 <_svfprintf_r+0x12a0>
 80154a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154a2:	3b01      	subs	r3, #1
 80154a4:	9310      	str	r3, [sp, #64]	; 0x40
 80154a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80154a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80154aa:	4694      	mov	ip, r2
 80154ac:	603b      	str	r3, [r7, #0]
 80154ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154b0:	607b      	str	r3, [r7, #4]
 80154b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154b4:	3708      	adds	r7, #8
 80154b6:	4463      	add	r3, ip
 80154b8:	932e      	str	r3, [sp, #184]	; 0xb8
 80154ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154bc:	9308      	str	r3, [sp, #32]
 80154be:	3301      	adds	r3, #1
 80154c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80154c2:	2b07      	cmp	r3, #7
 80154c4:	dd08      	ble.n	80154d8 <_svfprintf_r+0x1214>
 80154c6:	aa2c      	add	r2, sp, #176	; 0xb0
 80154c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154cc:	f002 f84e 	bl	801756c <__ssprint_r>
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d000      	beq.n	80154d6 <_svfprintf_r+0x1212>
 80154d4:	e11a      	b.n	801570c <_svfprintf_r+0x1448>
 80154d6:	af2f      	add	r7, sp, #188	; 0xbc
 80154d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154dc:	189b      	adds	r3, r3, r2
 80154de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80154e0:	1b5b      	subs	r3, r3, r5
 80154e2:	7814      	ldrb	r4, [r2, #0]
 80154e4:	429c      	cmp	r4, r3
 80154e6:	dd00      	ble.n	80154ea <_svfprintf_r+0x1226>
 80154e8:	001c      	movs	r4, r3
 80154ea:	2c00      	cmp	r4, #0
 80154ec:	dd14      	ble.n	8015518 <_svfprintf_r+0x1254>
 80154ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154f0:	603d      	str	r5, [r7, #0]
 80154f2:	18e3      	adds	r3, r4, r3
 80154f4:	932e      	str	r3, [sp, #184]	; 0xb8
 80154f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154f8:	607c      	str	r4, [r7, #4]
 80154fa:	9308      	str	r3, [sp, #32]
 80154fc:	3301      	adds	r3, #1
 80154fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8015500:	3708      	adds	r7, #8
 8015502:	2b07      	cmp	r3, #7
 8015504:	dd08      	ble.n	8015518 <_svfprintf_r+0x1254>
 8015506:	aa2c      	add	r2, sp, #176	; 0xb0
 8015508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801550a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801550c:	f002 f82e 	bl	801756c <__ssprint_r>
 8015510:	2800      	cmp	r0, #0
 8015512:	d000      	beq.n	8015516 <_svfprintf_r+0x1252>
 8015514:	e0fa      	b.n	801570c <_svfprintf_r+0x1448>
 8015516:	af2f      	add	r7, sp, #188	; 0xbc
 8015518:	43e3      	mvns	r3, r4
 801551a:	17db      	asrs	r3, r3, #31
 801551c:	401c      	ands	r4, r3
 801551e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015520:	781b      	ldrb	r3, [r3, #0]
 8015522:	1b1c      	subs	r4, r3, r4
 8015524:	2c00      	cmp	r4, #0
 8015526:	dd19      	ble.n	801555c <_svfprintf_r+0x1298>
 8015528:	0039      	movs	r1, r7
 801552a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801552c:	485c      	ldr	r0, [pc, #368]	; (80156a0 <_svfprintf_r+0x13dc>)
 801552e:	9308      	str	r3, [sp, #32]
 8015530:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015532:	3301      	adds	r3, #1
 8015534:	3108      	adds	r1, #8
 8015536:	6038      	str	r0, [r7, #0]
 8015538:	2c10      	cmp	r4, #16
 801553a:	dc1a      	bgt.n	8015572 <_svfprintf_r+0x12ae>
 801553c:	607c      	str	r4, [r7, #4]
 801553e:	18a4      	adds	r4, r4, r2
 8015540:	942e      	str	r4, [sp, #184]	; 0xb8
 8015542:	932d      	str	r3, [sp, #180]	; 0xb4
 8015544:	000f      	movs	r7, r1
 8015546:	2b07      	cmp	r3, #7
 8015548:	dd08      	ble.n	801555c <_svfprintf_r+0x1298>
 801554a:	aa2c      	add	r2, sp, #176	; 0xb0
 801554c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801554e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015550:	f002 f80c 	bl	801756c <__ssprint_r>
 8015554:	2800      	cmp	r0, #0
 8015556:	d000      	beq.n	801555a <_svfprintf_r+0x1296>
 8015558:	e0d8      	b.n	801570c <_svfprintf_r+0x1448>
 801555a:	af2f      	add	r7, sp, #188	; 0xbc
 801555c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	18ed      	adds	r5, r5, r3
 8015562:	e711      	b.n	8015388 <_svfprintf_r+0x10c4>
 8015564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015566:	3b01      	subs	r3, #1
 8015568:	9313      	str	r3, [sp, #76]	; 0x4c
 801556a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801556c:	3b01      	subs	r3, #1
 801556e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015570:	e799      	b.n	80154a6 <_svfprintf_r+0x11e2>
 8015572:	2010      	movs	r0, #16
 8015574:	1812      	adds	r2, r2, r0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	922e      	str	r2, [sp, #184]	; 0xb8
 801557a:	932d      	str	r3, [sp, #180]	; 0xb4
 801557c:	2b07      	cmp	r3, #7
 801557e:	dd08      	ble.n	8015592 <_svfprintf_r+0x12ce>
 8015580:	aa2c      	add	r2, sp, #176	; 0xb0
 8015582:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015584:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015586:	f001 fff1 	bl	801756c <__ssprint_r>
 801558a:	2800      	cmp	r0, #0
 801558c:	d000      	beq.n	8015590 <_svfprintf_r+0x12cc>
 801558e:	e0bd      	b.n	801570c <_svfprintf_r+0x1448>
 8015590:	a92f      	add	r1, sp, #188	; 0xbc
 8015592:	3c10      	subs	r4, #16
 8015594:	000f      	movs	r7, r1
 8015596:	e7c7      	b.n	8015528 <_svfprintf_r+0x1264>
 8015598:	003c      	movs	r4, r7
 801559a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801559c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801559e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155a0:	9308      	str	r3, [sp, #32]
 80155a2:	3101      	adds	r1, #1
 80155a4:	3301      	adds	r3, #1
 80155a6:	3408      	adds	r4, #8
 80155a8:	2a01      	cmp	r2, #1
 80155aa:	dc03      	bgt.n	80155b4 <_svfprintf_r+0x12f0>
 80155ac:	2201      	movs	r2, #1
 80155ae:	4216      	tst	r6, r2
 80155b0:	d100      	bne.n	80155b4 <_svfprintf_r+0x12f0>
 80155b2:	e088      	b.n	80156c6 <_svfprintf_r+0x1402>
 80155b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155b6:	912e      	str	r1, [sp, #184]	; 0xb8
 80155b8:	603a      	str	r2, [r7, #0]
 80155ba:	2201      	movs	r2, #1
 80155bc:	932d      	str	r3, [sp, #180]	; 0xb4
 80155be:	607a      	str	r2, [r7, #4]
 80155c0:	2b07      	cmp	r3, #7
 80155c2:	dd08      	ble.n	80155d6 <_svfprintf_r+0x1312>
 80155c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80155c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155ca:	f001 ffcf 	bl	801756c <__ssprint_r>
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d000      	beq.n	80155d4 <_svfprintf_r+0x1310>
 80155d2:	e09b      	b.n	801570c <_svfprintf_r+0x1448>
 80155d4:	ac2f      	add	r4, sp, #188	; 0xbc
 80155d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80155da:	4694      	mov	ip, r2
 80155dc:	6023      	str	r3, [r4, #0]
 80155de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155e0:	6063      	str	r3, [r4, #4]
 80155e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155e4:	3408      	adds	r4, #8
 80155e6:	4463      	add	r3, ip
 80155e8:	932e      	str	r3, [sp, #184]	; 0xb8
 80155ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155ec:	9308      	str	r3, [sp, #32]
 80155ee:	3301      	adds	r3, #1
 80155f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80155f2:	2b07      	cmp	r3, #7
 80155f4:	dd08      	ble.n	8015608 <_svfprintf_r+0x1344>
 80155f6:	aa2c      	add	r2, sp, #176	; 0xb0
 80155f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155fc:	f001 ffb6 	bl	801756c <__ssprint_r>
 8015600:	2800      	cmp	r0, #0
 8015602:	d000      	beq.n	8015606 <_svfprintf_r+0x1342>
 8015604:	e082      	b.n	801570c <_svfprintf_r+0x1448>
 8015606:	ac2f      	add	r4, sp, #188	; 0xbc
 8015608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801560a:	2200      	movs	r2, #0
 801560c:	1e5d      	subs	r5, r3, #1
 801560e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015610:	2300      	movs	r3, #0
 8015612:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015614:	f7ea ff22 	bl	800045c <__aeabi_dcmpeq>
 8015618:	2800      	cmp	r0, #0
 801561a:	d12c      	bne.n	8015676 <_svfprintf_r+0x13b2>
 801561c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801561e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015620:	9308      	str	r3, [sp, #32]
 8015622:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015624:	6065      	str	r5, [r4, #4]
 8015626:	1c5a      	adds	r2, r3, #1
 8015628:	930e      	str	r3, [sp, #56]	; 0x38
 801562a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801562c:	922d      	str	r2, [sp, #180]	; 0xb4
 801562e:	3301      	adds	r3, #1
 8015630:	6023      	str	r3, [r4, #0]
 8015632:	9b08      	ldr	r3, [sp, #32]
 8015634:	3408      	adds	r4, #8
 8015636:	3b01      	subs	r3, #1
 8015638:	185b      	adds	r3, r3, r1
 801563a:	932e      	str	r3, [sp, #184]	; 0xb8
 801563c:	2a07      	cmp	r2, #7
 801563e:	dd07      	ble.n	8015650 <_svfprintf_r+0x138c>
 8015640:	aa2c      	add	r2, sp, #176	; 0xb0
 8015642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015644:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015646:	f001 ff91 	bl	801756c <__ssprint_r>
 801564a:	2800      	cmp	r0, #0
 801564c:	d15e      	bne.n	801570c <_svfprintf_r+0x1448>
 801564e:	ac2f      	add	r4, sp, #188	; 0xbc
 8015650:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015652:	ab28      	add	r3, sp, #160	; 0xa0
 8015654:	4694      	mov	ip, r2
 8015656:	6023      	str	r3, [r4, #0]
 8015658:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801565a:	6063      	str	r3, [r4, #4]
 801565c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801565e:	4463      	add	r3, ip
 8015660:	932e      	str	r3, [sp, #184]	; 0xb8
 8015662:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015664:	9308      	str	r3, [sp, #32]
 8015666:	3301      	adds	r3, #1
 8015668:	932d      	str	r3, [sp, #180]	; 0xb4
 801566a:	2b07      	cmp	r3, #7
 801566c:	dd00      	ble.n	8015670 <_svfprintf_r+0x13ac>
 801566e:	e629      	b.n	80152c4 <_svfprintf_r+0x1000>
 8015670:	3408      	adds	r4, #8
 8015672:	0027      	movs	r7, r4
 8015674:	e579      	b.n	801516a <_svfprintf_r+0xea6>
 8015676:	2710      	movs	r7, #16
 8015678:	2d00      	cmp	r5, #0
 801567a:	dde9      	ble.n	8015650 <_svfprintf_r+0x138c>
 801567c:	0021      	movs	r1, r4
 801567e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015680:	4807      	ldr	r0, [pc, #28]	; (80156a0 <_svfprintf_r+0x13dc>)
 8015682:	9308      	str	r3, [sp, #32]
 8015684:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015686:	3301      	adds	r3, #1
 8015688:	3108      	adds	r1, #8
 801568a:	6020      	str	r0, [r4, #0]
 801568c:	2d10      	cmp	r5, #16
 801568e:	dc09      	bgt.n	80156a4 <_svfprintf_r+0x13e0>
 8015690:	6065      	str	r5, [r4, #4]
 8015692:	000c      	movs	r4, r1
 8015694:	18ad      	adds	r5, r5, r2
 8015696:	952e      	str	r5, [sp, #184]	; 0xb8
 8015698:	932d      	str	r3, [sp, #180]	; 0xb4
 801569a:	2b07      	cmp	r3, #7
 801569c:	ddd8      	ble.n	8015650 <_svfprintf_r+0x138c>
 801569e:	e7cf      	b.n	8015640 <_svfprintf_r+0x137c>
 80156a0:	0801a6ec 	.word	0x0801a6ec
 80156a4:	3210      	adds	r2, #16
 80156a6:	6067      	str	r7, [r4, #4]
 80156a8:	922e      	str	r2, [sp, #184]	; 0xb8
 80156aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80156ac:	2b07      	cmp	r3, #7
 80156ae:	dd07      	ble.n	80156c0 <_svfprintf_r+0x13fc>
 80156b0:	aa2c      	add	r2, sp, #176	; 0xb0
 80156b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156b6:	f001 ff59 	bl	801756c <__ssprint_r>
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d126      	bne.n	801570c <_svfprintf_r+0x1448>
 80156be:	a92f      	add	r1, sp, #188	; 0xbc
 80156c0:	3d10      	subs	r5, #16
 80156c2:	000c      	movs	r4, r1
 80156c4:	e7da      	b.n	801567c <_svfprintf_r+0x13b8>
 80156c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156c8:	912e      	str	r1, [sp, #184]	; 0xb8
 80156ca:	c705      	stmia	r7!, {r0, r2}
 80156cc:	932d      	str	r3, [sp, #180]	; 0xb4
 80156ce:	e7e4      	b.n	801569a <_svfprintf_r+0x13d6>
 80156d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80156d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80156d4:	2510      	movs	r5, #16
 80156d6:	1a9c      	subs	r4, r3, r2
 80156d8:	2c00      	cmp	r4, #0
 80156da:	dc00      	bgt.n	80156de <_svfprintf_r+0x141a>
 80156dc:	e548      	b.n	8015170 <_svfprintf_r+0xeac>
 80156de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156e0:	4921      	ldr	r1, [pc, #132]	; (8015768 <_svfprintf_r+0x14a4>)
 80156e2:	9308      	str	r3, [sp, #32]
 80156e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80156e6:	3301      	adds	r3, #1
 80156e8:	6039      	str	r1, [r7, #0]
 80156ea:	2c10      	cmp	r4, #16
 80156ec:	dc19      	bgt.n	8015722 <_svfprintf_r+0x145e>
 80156ee:	607c      	str	r4, [r7, #4]
 80156f0:	18a4      	adds	r4, r4, r2
 80156f2:	942e      	str	r4, [sp, #184]	; 0xb8
 80156f4:	932d      	str	r3, [sp, #180]	; 0xb4
 80156f6:	2b07      	cmp	r3, #7
 80156f8:	dc00      	bgt.n	80156fc <_svfprintf_r+0x1438>
 80156fa:	e539      	b.n	8015170 <_svfprintf_r+0xeac>
 80156fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80156fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015700:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015702:	f001 ff33 	bl	801756c <__ssprint_r>
 8015706:	2800      	cmp	r0, #0
 8015708:	d100      	bne.n	801570c <_svfprintf_r+0x1448>
 801570a:	e531      	b.n	8015170 <_svfprintf_r+0xeac>
 801570c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801570e:	2b00      	cmp	r3, #0
 8015710:	d101      	bne.n	8015716 <_svfprintf_r+0x1452>
 8015712:	f7ff f908 	bl	8014926 <_svfprintf_r+0x662>
 8015716:	0019      	movs	r1, r3
 8015718:	980a      	ldr	r0, [sp, #40]	; 0x28
 801571a:	f000 ff19 	bl	8016550 <_free_r>
 801571e:	f7ff f902 	bl	8014926 <_svfprintf_r+0x662>
 8015722:	3210      	adds	r2, #16
 8015724:	607d      	str	r5, [r7, #4]
 8015726:	922e      	str	r2, [sp, #184]	; 0xb8
 8015728:	932d      	str	r3, [sp, #180]	; 0xb4
 801572a:	3708      	adds	r7, #8
 801572c:	2b07      	cmp	r3, #7
 801572e:	dd07      	ble.n	8015740 <_svfprintf_r+0x147c>
 8015730:	aa2c      	add	r2, sp, #176	; 0xb0
 8015732:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015734:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015736:	f001 ff19 	bl	801756c <__ssprint_r>
 801573a:	2800      	cmp	r0, #0
 801573c:	d1e6      	bne.n	801570c <_svfprintf_r+0x1448>
 801573e:	af2f      	add	r7, sp, #188	; 0xbc
 8015740:	3c10      	subs	r4, #16
 8015742:	e7cc      	b.n	80156de <_svfprintf_r+0x141a>
 8015744:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015746:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015748:	f000 ff02 	bl	8016550 <_free_r>
 801574c:	e52a      	b.n	80151a4 <_svfprintf_r+0xee0>
 801574e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015750:	9306      	str	r3, [sp, #24]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d101      	bne.n	801575a <_svfprintf_r+0x1496>
 8015756:	f7ff f8e6 	bl	8014926 <_svfprintf_r+0x662>
 801575a:	aa2c      	add	r2, sp, #176	; 0xb0
 801575c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801575e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015760:	f001 ff04 	bl	801756c <__ssprint_r>
 8015764:	f7ff f8df 	bl	8014926 <_svfprintf_r+0x662>
 8015768:	0801a6dc 	.word	0x0801a6dc

0801576c <sysconf>:
 801576c:	2380      	movs	r3, #128	; 0x80
 801576e:	b510      	push	{r4, lr}
 8015770:	015b      	lsls	r3, r3, #5
 8015772:	2808      	cmp	r0, #8
 8015774:	d004      	beq.n	8015780 <sysconf+0x14>
 8015776:	f000 fe7d 	bl	8016474 <__errno>
 801577a:	2316      	movs	r3, #22
 801577c:	6003      	str	r3, [r0, #0]
 801577e:	3b17      	subs	r3, #23
 8015780:	0018      	movs	r0, r3
 8015782:	bd10      	pop	{r4, pc}

08015784 <__ascii_wctomb>:
 8015784:	1e0b      	subs	r3, r1, #0
 8015786:	d004      	beq.n	8015792 <__ascii_wctomb+0xe>
 8015788:	2aff      	cmp	r2, #255	; 0xff
 801578a:	d904      	bls.n	8015796 <__ascii_wctomb+0x12>
 801578c:	238a      	movs	r3, #138	; 0x8a
 801578e:	6003      	str	r3, [r0, #0]
 8015790:	3b8b      	subs	r3, #139	; 0x8b
 8015792:	0018      	movs	r0, r3
 8015794:	4770      	bx	lr
 8015796:	700a      	strb	r2, [r1, #0]
 8015798:	2301      	movs	r3, #1
 801579a:	e7fa      	b.n	8015792 <__ascii_wctomb+0xe>

0801579c <register_fini>:
 801579c:	4b03      	ldr	r3, [pc, #12]	; (80157ac <register_fini+0x10>)
 801579e:	b510      	push	{r4, lr}
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d002      	beq.n	80157aa <register_fini+0xe>
 80157a4:	4802      	ldr	r0, [pc, #8]	; (80157b0 <register_fini+0x14>)
 80157a6:	f000 f805 	bl	80157b4 <atexit>
 80157aa:	bd10      	pop	{r4, pc}
 80157ac:	00000000 	.word	0x00000000
 80157b0:	08016481 	.word	0x08016481

080157b4 <atexit>:
 80157b4:	2300      	movs	r3, #0
 80157b6:	b510      	push	{r4, lr}
 80157b8:	0001      	movs	r1, r0
 80157ba:	001a      	movs	r2, r3
 80157bc:	0018      	movs	r0, r3
 80157be:	f001 ff53 	bl	8017668 <__register_exitproc>
 80157c2:	bd10      	pop	{r4, pc}

080157c4 <quorem>:
 80157c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157c6:	6903      	ldr	r3, [r0, #16]
 80157c8:	690c      	ldr	r4, [r1, #16]
 80157ca:	b089      	sub	sp, #36	; 0x24
 80157cc:	0007      	movs	r7, r0
 80157ce:	9105      	str	r1, [sp, #20]
 80157d0:	2600      	movs	r6, #0
 80157d2:	42a3      	cmp	r3, r4
 80157d4:	db65      	blt.n	80158a2 <quorem+0xde>
 80157d6:	000b      	movs	r3, r1
 80157d8:	3c01      	subs	r4, #1
 80157da:	3314      	adds	r3, #20
 80157dc:	00a5      	lsls	r5, r4, #2
 80157de:	9303      	str	r3, [sp, #12]
 80157e0:	195b      	adds	r3, r3, r5
 80157e2:	9304      	str	r3, [sp, #16]
 80157e4:	0003      	movs	r3, r0
 80157e6:	3314      	adds	r3, #20
 80157e8:	9302      	str	r3, [sp, #8]
 80157ea:	195d      	adds	r5, r3, r5
 80157ec:	9b04      	ldr	r3, [sp, #16]
 80157ee:	6828      	ldr	r0, [r5, #0]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	1c59      	adds	r1, r3, #1
 80157f4:	9301      	str	r3, [sp, #4]
 80157f6:	f7ea fcab 	bl	8000150 <__udivsi3>
 80157fa:	9001      	str	r0, [sp, #4]
 80157fc:	42b0      	cmp	r0, r6
 80157fe:	d029      	beq.n	8015854 <quorem+0x90>
 8015800:	9b03      	ldr	r3, [sp, #12]
 8015802:	9802      	ldr	r0, [sp, #8]
 8015804:	469c      	mov	ip, r3
 8015806:	9606      	str	r6, [sp, #24]
 8015808:	4662      	mov	r2, ip
 801580a:	ca08      	ldmia	r2!, {r3}
 801580c:	4694      	mov	ip, r2
 801580e:	9a01      	ldr	r2, [sp, #4]
 8015810:	b299      	uxth	r1, r3
 8015812:	4351      	muls	r1, r2
 8015814:	0c1b      	lsrs	r3, r3, #16
 8015816:	4353      	muls	r3, r2
 8015818:	1989      	adds	r1, r1, r6
 801581a:	0c0a      	lsrs	r2, r1, #16
 801581c:	189b      	adds	r3, r3, r2
 801581e:	9307      	str	r3, [sp, #28]
 8015820:	0c1e      	lsrs	r6, r3, #16
 8015822:	6803      	ldr	r3, [r0, #0]
 8015824:	b289      	uxth	r1, r1
 8015826:	b29a      	uxth	r2, r3
 8015828:	9b06      	ldr	r3, [sp, #24]
 801582a:	18d2      	adds	r2, r2, r3
 801582c:	6803      	ldr	r3, [r0, #0]
 801582e:	1a52      	subs	r2, r2, r1
 8015830:	0c19      	lsrs	r1, r3, #16
 8015832:	466b      	mov	r3, sp
 8015834:	8b9b      	ldrh	r3, [r3, #28]
 8015836:	1acb      	subs	r3, r1, r3
 8015838:	1411      	asrs	r1, r2, #16
 801583a:	185b      	adds	r3, r3, r1
 801583c:	1419      	asrs	r1, r3, #16
 801583e:	b292      	uxth	r2, r2
 8015840:	041b      	lsls	r3, r3, #16
 8015842:	431a      	orrs	r2, r3
 8015844:	9b04      	ldr	r3, [sp, #16]
 8015846:	9106      	str	r1, [sp, #24]
 8015848:	c004      	stmia	r0!, {r2}
 801584a:	4563      	cmp	r3, ip
 801584c:	d2dc      	bcs.n	8015808 <quorem+0x44>
 801584e:	682b      	ldr	r3, [r5, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d02d      	beq.n	80158b0 <quorem+0xec>
 8015854:	9905      	ldr	r1, [sp, #20]
 8015856:	0038      	movs	r0, r7
 8015858:	f001 fcb2 	bl	80171c0 <__mcmp>
 801585c:	2800      	cmp	r0, #0
 801585e:	db1f      	blt.n	80158a0 <quorem+0xdc>
 8015860:	2500      	movs	r5, #0
 8015862:	9b01      	ldr	r3, [sp, #4]
 8015864:	9802      	ldr	r0, [sp, #8]
 8015866:	3301      	adds	r3, #1
 8015868:	9903      	ldr	r1, [sp, #12]
 801586a:	9301      	str	r3, [sp, #4]
 801586c:	6802      	ldr	r2, [r0, #0]
 801586e:	c908      	ldmia	r1!, {r3}
 8015870:	b292      	uxth	r2, r2
 8015872:	1955      	adds	r5, r2, r5
 8015874:	b29a      	uxth	r2, r3
 8015876:	1aaa      	subs	r2, r5, r2
 8015878:	6805      	ldr	r5, [r0, #0]
 801587a:	0c1b      	lsrs	r3, r3, #16
 801587c:	0c2d      	lsrs	r5, r5, #16
 801587e:	1aeb      	subs	r3, r5, r3
 8015880:	1415      	asrs	r5, r2, #16
 8015882:	195b      	adds	r3, r3, r5
 8015884:	141d      	asrs	r5, r3, #16
 8015886:	b292      	uxth	r2, r2
 8015888:	041b      	lsls	r3, r3, #16
 801588a:	4313      	orrs	r3, r2
 801588c:	c008      	stmia	r0!, {r3}
 801588e:	9b04      	ldr	r3, [sp, #16]
 8015890:	428b      	cmp	r3, r1
 8015892:	d2eb      	bcs.n	801586c <quorem+0xa8>
 8015894:	9a02      	ldr	r2, [sp, #8]
 8015896:	00a3      	lsls	r3, r4, #2
 8015898:	18d3      	adds	r3, r2, r3
 801589a:	681a      	ldr	r2, [r3, #0]
 801589c:	2a00      	cmp	r2, #0
 801589e:	d011      	beq.n	80158c4 <quorem+0x100>
 80158a0:	9e01      	ldr	r6, [sp, #4]
 80158a2:	0030      	movs	r0, r6
 80158a4:	b009      	add	sp, #36	; 0x24
 80158a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158a8:	682b      	ldr	r3, [r5, #0]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d104      	bne.n	80158b8 <quorem+0xf4>
 80158ae:	3c01      	subs	r4, #1
 80158b0:	9b02      	ldr	r3, [sp, #8]
 80158b2:	3d04      	subs	r5, #4
 80158b4:	42ab      	cmp	r3, r5
 80158b6:	d3f7      	bcc.n	80158a8 <quorem+0xe4>
 80158b8:	613c      	str	r4, [r7, #16]
 80158ba:	e7cb      	b.n	8015854 <quorem+0x90>
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	2a00      	cmp	r2, #0
 80158c0:	d104      	bne.n	80158cc <quorem+0x108>
 80158c2:	3c01      	subs	r4, #1
 80158c4:	9a02      	ldr	r2, [sp, #8]
 80158c6:	3b04      	subs	r3, #4
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d3f7      	bcc.n	80158bc <quorem+0xf8>
 80158cc:	613c      	str	r4, [r7, #16]
 80158ce:	e7e7      	b.n	80158a0 <quorem+0xdc>

080158d0 <_dtoa_r>:
 80158d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158d2:	0014      	movs	r4, r2
 80158d4:	001d      	movs	r5, r3
 80158d6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80158d8:	b09b      	sub	sp, #108	; 0x6c
 80158da:	9002      	str	r0, [sp, #8]
 80158dc:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80158de:	9406      	str	r4, [sp, #24]
 80158e0:	9507      	str	r5, [sp, #28]
 80158e2:	2900      	cmp	r1, #0
 80158e4:	d009      	beq.n	80158fa <_dtoa_r+0x2a>
 80158e6:	2301      	movs	r3, #1
 80158e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80158ea:	4093      	lsls	r3, r2
 80158ec:	604a      	str	r2, [r1, #4]
 80158ee:	608b      	str	r3, [r1, #8]
 80158f0:	f001 fa6a 	bl	8016dc8 <_Bfree>
 80158f4:	2300      	movs	r3, #0
 80158f6:	9a02      	ldr	r2, [sp, #8]
 80158f8:	6413      	str	r3, [r2, #64]	; 0x40
 80158fa:	2d00      	cmp	r5, #0
 80158fc:	da20      	bge.n	8015940 <_dtoa_r+0x70>
 80158fe:	2301      	movs	r3, #1
 8015900:	6033      	str	r3, [r6, #0]
 8015902:	006b      	lsls	r3, r5, #1
 8015904:	085b      	lsrs	r3, r3, #1
 8015906:	9307      	str	r3, [sp, #28]
 8015908:	9c07      	ldr	r4, [sp, #28]
 801590a:	4bb2      	ldr	r3, [pc, #712]	; (8015bd4 <_dtoa_r+0x304>)
 801590c:	0022      	movs	r2, r4
 801590e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015910:	401a      	ands	r2, r3
 8015912:	429a      	cmp	r2, r3
 8015914:	d117      	bne.n	8015946 <_dtoa_r+0x76>
 8015916:	4bb0      	ldr	r3, [pc, #704]	; (8015bd8 <_dtoa_r+0x308>)
 8015918:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801591a:	6013      	str	r3, [r2, #0]
 801591c:	9b06      	ldr	r3, [sp, #24]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d103      	bne.n	801592a <_dtoa_r+0x5a>
 8015922:	0324      	lsls	r4, r4, #12
 8015924:	d101      	bne.n	801592a <_dtoa_r+0x5a>
 8015926:	f000 fd89 	bl	801643c <_dtoa_r+0xb6c>
 801592a:	4bac      	ldr	r3, [pc, #688]	; (8015bdc <_dtoa_r+0x30c>)
 801592c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801592e:	9308      	str	r3, [sp, #32]
 8015930:	2a00      	cmp	r2, #0
 8015932:	d002      	beq.n	801593a <_dtoa_r+0x6a>
 8015934:	4baa      	ldr	r3, [pc, #680]	; (8015be0 <_dtoa_r+0x310>)
 8015936:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015938:	6013      	str	r3, [r2, #0]
 801593a:	9808      	ldr	r0, [sp, #32]
 801593c:	b01b      	add	sp, #108	; 0x6c
 801593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015940:	2300      	movs	r3, #0
 8015942:	6033      	str	r3, [r6, #0]
 8015944:	e7e0      	b.n	8015908 <_dtoa_r+0x38>
 8015946:	9e06      	ldr	r6, [sp, #24]
 8015948:	9f07      	ldr	r7, [sp, #28]
 801594a:	2200      	movs	r2, #0
 801594c:	2300      	movs	r3, #0
 801594e:	0030      	movs	r0, r6
 8015950:	0039      	movs	r1, r7
 8015952:	f7ea fd83 	bl	800045c <__aeabi_dcmpeq>
 8015956:	1e05      	subs	r5, r0, #0
 8015958:	d00b      	beq.n	8015972 <_dtoa_r+0xa2>
 801595a:	2301      	movs	r3, #1
 801595c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801595e:	6013      	str	r3, [r2, #0]
 8015960:	4ba0      	ldr	r3, [pc, #640]	; (8015be4 <_dtoa_r+0x314>)
 8015962:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015964:	9308      	str	r3, [sp, #32]
 8015966:	2a00      	cmp	r2, #0
 8015968:	d0e7      	beq.n	801593a <_dtoa_r+0x6a>
 801596a:	4a9f      	ldr	r2, [pc, #636]	; (8015be8 <_dtoa_r+0x318>)
 801596c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801596e:	600a      	str	r2, [r1, #0]
 8015970:	e7e3      	b.n	801593a <_dtoa_r+0x6a>
 8015972:	ab18      	add	r3, sp, #96	; 0x60
 8015974:	9301      	str	r3, [sp, #4]
 8015976:	ab19      	add	r3, sp, #100	; 0x64
 8015978:	9300      	str	r3, [sp, #0]
 801597a:	0032      	movs	r2, r6
 801597c:	003b      	movs	r3, r7
 801597e:	9802      	ldr	r0, [sp, #8]
 8015980:	f001 fd0e 	bl	80173a0 <__d2b>
 8015984:	0063      	lsls	r3, r4, #1
 8015986:	9003      	str	r0, [sp, #12]
 8015988:	0d5b      	lsrs	r3, r3, #21
 801598a:	d074      	beq.n	8015a76 <_dtoa_r+0x1a6>
 801598c:	033a      	lsls	r2, r7, #12
 801598e:	4c97      	ldr	r4, [pc, #604]	; (8015bec <_dtoa_r+0x31c>)
 8015990:	0b12      	lsrs	r2, r2, #12
 8015992:	4314      	orrs	r4, r2
 8015994:	0021      	movs	r1, r4
 8015996:	4a96      	ldr	r2, [pc, #600]	; (8015bf0 <_dtoa_r+0x320>)
 8015998:	0030      	movs	r0, r6
 801599a:	9516      	str	r5, [sp, #88]	; 0x58
 801599c:	189e      	adds	r6, r3, r2
 801599e:	2200      	movs	r2, #0
 80159a0:	4b94      	ldr	r3, [pc, #592]	; (8015bf4 <_dtoa_r+0x324>)
 80159a2:	f7ec fcb9 	bl	8002318 <__aeabi_dsub>
 80159a6:	4a94      	ldr	r2, [pc, #592]	; (8015bf8 <_dtoa_r+0x328>)
 80159a8:	4b94      	ldr	r3, [pc, #592]	; (8015bfc <_dtoa_r+0x32c>)
 80159aa:	f7ec fa43 	bl	8001e34 <__aeabi_dmul>
 80159ae:	4a94      	ldr	r2, [pc, #592]	; (8015c00 <_dtoa_r+0x330>)
 80159b0:	4b94      	ldr	r3, [pc, #592]	; (8015c04 <_dtoa_r+0x334>)
 80159b2:	f7eb fb19 	bl	8000fe8 <__aeabi_dadd>
 80159b6:	0004      	movs	r4, r0
 80159b8:	0030      	movs	r0, r6
 80159ba:	000d      	movs	r5, r1
 80159bc:	f7ed f846 	bl	8002a4c <__aeabi_i2d>
 80159c0:	4a91      	ldr	r2, [pc, #580]	; (8015c08 <_dtoa_r+0x338>)
 80159c2:	4b92      	ldr	r3, [pc, #584]	; (8015c0c <_dtoa_r+0x33c>)
 80159c4:	f7ec fa36 	bl	8001e34 <__aeabi_dmul>
 80159c8:	0002      	movs	r2, r0
 80159ca:	000b      	movs	r3, r1
 80159cc:	0020      	movs	r0, r4
 80159ce:	0029      	movs	r1, r5
 80159d0:	f7eb fb0a 	bl	8000fe8 <__aeabi_dadd>
 80159d4:	0004      	movs	r4, r0
 80159d6:	000d      	movs	r5, r1
 80159d8:	f7ed f802 	bl	80029e0 <__aeabi_d2iz>
 80159dc:	2200      	movs	r2, #0
 80159de:	0007      	movs	r7, r0
 80159e0:	2300      	movs	r3, #0
 80159e2:	0020      	movs	r0, r4
 80159e4:	0029      	movs	r1, r5
 80159e6:	f7ea fd3f 	bl	8000468 <__aeabi_dcmplt>
 80159ea:	2800      	cmp	r0, #0
 80159ec:	d009      	beq.n	8015a02 <_dtoa_r+0x132>
 80159ee:	0038      	movs	r0, r7
 80159f0:	f7ed f82c 	bl	8002a4c <__aeabi_i2d>
 80159f4:	002b      	movs	r3, r5
 80159f6:	0022      	movs	r2, r4
 80159f8:	f7ea fd30 	bl	800045c <__aeabi_dcmpeq>
 80159fc:	4243      	negs	r3, r0
 80159fe:	4158      	adcs	r0, r3
 8015a00:	1a3f      	subs	r7, r7, r0
 8015a02:	2301      	movs	r3, #1
 8015a04:	9314      	str	r3, [sp, #80]	; 0x50
 8015a06:	2f16      	cmp	r7, #22
 8015a08:	d80d      	bhi.n	8015a26 <_dtoa_r+0x156>
 8015a0a:	4981      	ldr	r1, [pc, #516]	; (8015c10 <_dtoa_r+0x340>)
 8015a0c:	00fb      	lsls	r3, r7, #3
 8015a0e:	18c9      	adds	r1, r1, r3
 8015a10:	6808      	ldr	r0, [r1, #0]
 8015a12:	6849      	ldr	r1, [r1, #4]
 8015a14:	9a06      	ldr	r2, [sp, #24]
 8015a16:	9b07      	ldr	r3, [sp, #28]
 8015a18:	f7ea fd3a 	bl	8000490 <__aeabi_dcmpgt>
 8015a1c:	2800      	cmp	r0, #0
 8015a1e:	d046      	beq.n	8015aae <_dtoa_r+0x1de>
 8015a20:	2300      	movs	r3, #0
 8015a22:	3f01      	subs	r7, #1
 8015a24:	9314      	str	r3, [sp, #80]	; 0x50
 8015a26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a28:	1b9e      	subs	r6, r3, r6
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8015a2e:	0033      	movs	r3, r6
 8015a30:	3b01      	subs	r3, #1
 8015a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a34:	d504      	bpl.n	8015a40 <_dtoa_r+0x170>
 8015a36:	2301      	movs	r3, #1
 8015a38:	1b9b      	subs	r3, r3, r6
 8015a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a40:	2f00      	cmp	r7, #0
 8015a42:	db36      	blt.n	8015ab2 <_dtoa_r+0x1e2>
 8015a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a46:	9711      	str	r7, [sp, #68]	; 0x44
 8015a48:	19db      	adds	r3, r3, r7
 8015a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	9304      	str	r3, [sp, #16]
 8015a50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a52:	2401      	movs	r4, #1
 8015a54:	2b09      	cmp	r3, #9
 8015a56:	d900      	bls.n	8015a5a <_dtoa_r+0x18a>
 8015a58:	e082      	b.n	8015b60 <_dtoa_r+0x290>
 8015a5a:	2b05      	cmp	r3, #5
 8015a5c:	dd02      	ble.n	8015a64 <_dtoa_r+0x194>
 8015a5e:	2400      	movs	r4, #0
 8015a60:	3b04      	subs	r3, #4
 8015a62:	9320      	str	r3, [sp, #128]	; 0x80
 8015a64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a66:	1e98      	subs	r0, r3, #2
 8015a68:	2803      	cmp	r0, #3
 8015a6a:	d900      	bls.n	8015a6e <_dtoa_r+0x19e>
 8015a6c:	e082      	b.n	8015b74 <_dtoa_r+0x2a4>
 8015a6e:	f7ea fb5b 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015a72:	7573      	.short	0x7573
 8015a74:	6828      	.short	0x6828
 8015a76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015a7a:	189e      	adds	r6, r3, r2
 8015a7c:	4b65      	ldr	r3, [pc, #404]	; (8015c14 <_dtoa_r+0x344>)
 8015a7e:	18f2      	adds	r2, r6, r3
 8015a80:	2a20      	cmp	r2, #32
 8015a82:	dd0f      	ble.n	8015aa4 <_dtoa_r+0x1d4>
 8015a84:	2340      	movs	r3, #64	; 0x40
 8015a86:	1a9b      	subs	r3, r3, r2
 8015a88:	409c      	lsls	r4, r3
 8015a8a:	4b63      	ldr	r3, [pc, #396]	; (8015c18 <_dtoa_r+0x348>)
 8015a8c:	9806      	ldr	r0, [sp, #24]
 8015a8e:	18f3      	adds	r3, r6, r3
 8015a90:	40d8      	lsrs	r0, r3
 8015a92:	4320      	orrs	r0, r4
 8015a94:	f7ed f814 	bl	8002ac0 <__aeabi_ui2d>
 8015a98:	2301      	movs	r3, #1
 8015a9a:	4c60      	ldr	r4, [pc, #384]	; (8015c1c <_dtoa_r+0x34c>)
 8015a9c:	3e01      	subs	r6, #1
 8015a9e:	1909      	adds	r1, r1, r4
 8015aa0:	9316      	str	r3, [sp, #88]	; 0x58
 8015aa2:	e77c      	b.n	801599e <_dtoa_r+0xce>
 8015aa4:	2320      	movs	r3, #32
 8015aa6:	9806      	ldr	r0, [sp, #24]
 8015aa8:	1a9b      	subs	r3, r3, r2
 8015aaa:	4098      	lsls	r0, r3
 8015aac:	e7f2      	b.n	8015a94 <_dtoa_r+0x1c4>
 8015aae:	9014      	str	r0, [sp, #80]	; 0x50
 8015ab0:	e7b9      	b.n	8015a26 <_dtoa_r+0x156>
 8015ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ab4:	1bdb      	subs	r3, r3, r7
 8015ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ab8:	427b      	negs	r3, r7
 8015aba:	9304      	str	r3, [sp, #16]
 8015abc:	2300      	movs	r3, #0
 8015abe:	9311      	str	r3, [sp, #68]	; 0x44
 8015ac0:	e7c6      	b.n	8015a50 <_dtoa_r+0x180>
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	930d      	str	r3, [sp, #52]	; 0x34
 8015ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	dd57      	ble.n	8015b7c <_dtoa_r+0x2ac>
 8015acc:	930c      	str	r3, [sp, #48]	; 0x30
 8015ace:	9309      	str	r3, [sp, #36]	; 0x24
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	9902      	ldr	r1, [sp, #8]
 8015ad4:	644a      	str	r2, [r1, #68]	; 0x44
 8015ad6:	3204      	adds	r2, #4
 8015ad8:	0010      	movs	r0, r2
 8015ada:	9902      	ldr	r1, [sp, #8]
 8015adc:	3014      	adds	r0, #20
 8015ade:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015ae0:	4298      	cmp	r0, r3
 8015ae2:	d950      	bls.n	8015b86 <_dtoa_r+0x2b6>
 8015ae4:	9802      	ldr	r0, [sp, #8]
 8015ae6:	f001 f947 	bl	8016d78 <_Balloc>
 8015aea:	9b02      	ldr	r3, [sp, #8]
 8015aec:	9008      	str	r0, [sp, #32]
 8015aee:	6418      	str	r0, [r3, #64]	; 0x40
 8015af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015af2:	2b0e      	cmp	r3, #14
 8015af4:	d900      	bls.n	8015af8 <_dtoa_r+0x228>
 8015af6:	e10c      	b.n	8015d12 <_dtoa_r+0x442>
 8015af8:	2c00      	cmp	r4, #0
 8015afa:	d100      	bne.n	8015afe <_dtoa_r+0x22e>
 8015afc:	e109      	b.n	8015d12 <_dtoa_r+0x442>
 8015afe:	9b06      	ldr	r3, [sp, #24]
 8015b00:	9c07      	ldr	r4, [sp, #28]
 8015b02:	9312      	str	r3, [sp, #72]	; 0x48
 8015b04:	9413      	str	r4, [sp, #76]	; 0x4c
 8015b06:	2f00      	cmp	r7, #0
 8015b08:	dc00      	bgt.n	8015b0c <_dtoa_r+0x23c>
 8015b0a:	e08b      	b.n	8015c24 <_dtoa_r+0x354>
 8015b0c:	210f      	movs	r1, #15
 8015b0e:	003a      	movs	r2, r7
 8015b10:	4b3f      	ldr	r3, [pc, #252]	; (8015c10 <_dtoa_r+0x340>)
 8015b12:	400a      	ands	r2, r1
 8015b14:	00d2      	lsls	r2, r2, #3
 8015b16:	189b      	adds	r3, r3, r2
 8015b18:	681d      	ldr	r5, [r3, #0]
 8015b1a:	685e      	ldr	r6, [r3, #4]
 8015b1c:	2302      	movs	r3, #2
 8015b1e:	113c      	asrs	r4, r7, #4
 8015b20:	930e      	str	r3, [sp, #56]	; 0x38
 8015b22:	06e3      	lsls	r3, r4, #27
 8015b24:	d50b      	bpl.n	8015b3e <_dtoa_r+0x26e>
 8015b26:	4b3e      	ldr	r3, [pc, #248]	; (8015c20 <_dtoa_r+0x350>)
 8015b28:	400c      	ands	r4, r1
 8015b2a:	6a1a      	ldr	r2, [r3, #32]
 8015b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015b30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015b32:	f7eb fd75 	bl	8001620 <__aeabi_ddiv>
 8015b36:	2303      	movs	r3, #3
 8015b38:	9006      	str	r0, [sp, #24]
 8015b3a:	9107      	str	r1, [sp, #28]
 8015b3c:	930e      	str	r3, [sp, #56]	; 0x38
 8015b3e:	2300      	movs	r3, #0
 8015b40:	e03b      	b.n	8015bba <_dtoa_r+0x2ea>
 8015b42:	2301      	movs	r3, #1
 8015b44:	930d      	str	r3, [sp, #52]	; 0x34
 8015b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b48:	18fb      	adds	r3, r7, r3
 8015b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8015b4c:	3301      	adds	r3, #1
 8015b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	dcbd      	bgt.n	8015ad0 <_dtoa_r+0x200>
 8015b54:	2301      	movs	r3, #1
 8015b56:	e7bb      	b.n	8015ad0 <_dtoa_r+0x200>
 8015b58:	2300      	movs	r3, #0
 8015b5a:	e7b3      	b.n	8015ac4 <_dtoa_r+0x1f4>
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	e7f1      	b.n	8015b44 <_dtoa_r+0x274>
 8015b60:	2300      	movs	r3, #0
 8015b62:	940d      	str	r4, [sp, #52]	; 0x34
 8015b64:	9320      	str	r3, [sp, #128]	; 0x80
 8015b66:	3b01      	subs	r3, #1
 8015b68:	2200      	movs	r2, #0
 8015b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8015b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8015b6e:	3313      	adds	r3, #19
 8015b70:	9221      	str	r2, [sp, #132]	; 0x84
 8015b72:	e7ad      	b.n	8015ad0 <_dtoa_r+0x200>
 8015b74:	2301      	movs	r3, #1
 8015b76:	930d      	str	r3, [sp, #52]	; 0x34
 8015b78:	3b02      	subs	r3, #2
 8015b7a:	e7f5      	b.n	8015b68 <_dtoa_r+0x298>
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8015b80:	9309      	str	r3, [sp, #36]	; 0x24
 8015b82:	001a      	movs	r2, r3
 8015b84:	e7f4      	b.n	8015b70 <_dtoa_r+0x2a0>
 8015b86:	9802      	ldr	r0, [sp, #8]
 8015b88:	3101      	adds	r1, #1
 8015b8a:	6441      	str	r1, [r0, #68]	; 0x44
 8015b8c:	0052      	lsls	r2, r2, #1
 8015b8e:	e7a3      	b.n	8015ad8 <_dtoa_r+0x208>
 8015b90:	2301      	movs	r3, #1
 8015b92:	421c      	tst	r4, r3
 8015b94:	d00e      	beq.n	8015bb4 <_dtoa_r+0x2e4>
 8015b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b98:	4a21      	ldr	r2, [pc, #132]	; (8015c20 <_dtoa_r+0x350>)
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	930e      	str	r3, [sp, #56]	; 0x38
 8015b9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ba0:	0028      	movs	r0, r5
 8015ba2:	00db      	lsls	r3, r3, #3
 8015ba4:	189b      	adds	r3, r3, r2
 8015ba6:	0031      	movs	r1, r6
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	f7ec f942 	bl	8001e34 <__aeabi_dmul>
 8015bb0:	0005      	movs	r5, r0
 8015bb2:	000e      	movs	r6, r1
 8015bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bb6:	1064      	asrs	r4, r4, #1
 8015bb8:	3301      	adds	r3, #1
 8015bba:	9310      	str	r3, [sp, #64]	; 0x40
 8015bbc:	2c00      	cmp	r4, #0
 8015bbe:	d1e7      	bne.n	8015b90 <_dtoa_r+0x2c0>
 8015bc0:	9806      	ldr	r0, [sp, #24]
 8015bc2:	9907      	ldr	r1, [sp, #28]
 8015bc4:	002a      	movs	r2, r5
 8015bc6:	0033      	movs	r3, r6
 8015bc8:	f7eb fd2a 	bl	8001620 <__aeabi_ddiv>
 8015bcc:	9006      	str	r0, [sp, #24]
 8015bce:	9107      	str	r1, [sp, #28]
 8015bd0:	e043      	b.n	8015c5a <_dtoa_r+0x38a>
 8015bd2:	46c0      	nop			; (mov r8, r8)
 8015bd4:	7ff00000 	.word	0x7ff00000
 8015bd8:	0000270f 	.word	0x0000270f
 8015bdc:	0801a806 	.word	0x0801a806
 8015be0:	0801a809 	.word	0x0801a809
 8015be4:	0801a6da 	.word	0x0801a6da
 8015be8:	0801a6db 	.word	0x0801a6db
 8015bec:	3ff00000 	.word	0x3ff00000
 8015bf0:	fffffc01 	.word	0xfffffc01
 8015bf4:	3ff80000 	.word	0x3ff80000
 8015bf8:	636f4361 	.word	0x636f4361
 8015bfc:	3fd287a7 	.word	0x3fd287a7
 8015c00:	8b60c8b3 	.word	0x8b60c8b3
 8015c04:	3fc68a28 	.word	0x3fc68a28
 8015c08:	509f79fb 	.word	0x509f79fb
 8015c0c:	3fd34413 	.word	0x3fd34413
 8015c10:	0801a838 	.word	0x0801a838
 8015c14:	00000432 	.word	0x00000432
 8015c18:	00000412 	.word	0x00000412
 8015c1c:	fe100000 	.word	0xfe100000
 8015c20:	0801a810 	.word	0x0801a810
 8015c24:	2302      	movs	r3, #2
 8015c26:	930e      	str	r3, [sp, #56]	; 0x38
 8015c28:	2f00      	cmp	r7, #0
 8015c2a:	d016      	beq.n	8015c5a <_dtoa_r+0x38a>
 8015c2c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015c2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015c30:	427c      	negs	r4, r7
 8015c32:	330d      	adds	r3, #13
 8015c34:	4023      	ands	r3, r4
 8015c36:	4acf      	ldr	r2, [pc, #828]	; (8015f74 <_dtoa_r+0x6a4>)
 8015c38:	00db      	lsls	r3, r3, #3
 8015c3a:	18d3      	adds	r3, r2, r3
 8015c3c:	681a      	ldr	r2, [r3, #0]
 8015c3e:	685b      	ldr	r3, [r3, #4]
 8015c40:	f7ec f8f8 	bl	8001e34 <__aeabi_dmul>
 8015c44:	2300      	movs	r3, #0
 8015c46:	2601      	movs	r6, #1
 8015c48:	001d      	movs	r5, r3
 8015c4a:	9006      	str	r0, [sp, #24]
 8015c4c:	9107      	str	r1, [sp, #28]
 8015c4e:	1124      	asrs	r4, r4, #4
 8015c50:	2c00      	cmp	r4, #0
 8015c52:	d000      	beq.n	8015c56 <_dtoa_r+0x386>
 8015c54:	e08c      	b.n	8015d70 <_dtoa_r+0x4a0>
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d1b8      	bne.n	8015bcc <_dtoa_r+0x2fc>
 8015c5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d100      	bne.n	8015c62 <_dtoa_r+0x392>
 8015c60:	e096      	b.n	8015d90 <_dtoa_r+0x4c0>
 8015c62:	9c06      	ldr	r4, [sp, #24]
 8015c64:	9d07      	ldr	r5, [sp, #28]
 8015c66:	2200      	movs	r2, #0
 8015c68:	4bc3      	ldr	r3, [pc, #780]	; (8015f78 <_dtoa_r+0x6a8>)
 8015c6a:	0020      	movs	r0, r4
 8015c6c:	0029      	movs	r1, r5
 8015c6e:	f7ea fbfb 	bl	8000468 <__aeabi_dcmplt>
 8015c72:	2800      	cmp	r0, #0
 8015c74:	d100      	bne.n	8015c78 <_dtoa_r+0x3a8>
 8015c76:	e08b      	b.n	8015d90 <_dtoa_r+0x4c0>
 8015c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d100      	bne.n	8015c80 <_dtoa_r+0x3b0>
 8015c7e:	e087      	b.n	8015d90 <_dtoa_r+0x4c0>
 8015c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	dd41      	ble.n	8015d0a <_dtoa_r+0x43a>
 8015c86:	4bbd      	ldr	r3, [pc, #756]	; (8015f7c <_dtoa_r+0x6ac>)
 8015c88:	2200      	movs	r2, #0
 8015c8a:	0020      	movs	r0, r4
 8015c8c:	0029      	movs	r1, r5
 8015c8e:	f7ec f8d1 	bl	8001e34 <__aeabi_dmul>
 8015c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c94:	9006      	str	r0, [sp, #24]
 8015c96:	9107      	str	r1, [sp, #28]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8015c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c9e:	1e7e      	subs	r6, r7, #1
 8015ca0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8015ca4:	f7ec fed2 	bl	8002a4c <__aeabi_i2d>
 8015ca8:	9a06      	ldr	r2, [sp, #24]
 8015caa:	9b07      	ldr	r3, [sp, #28]
 8015cac:	f7ec f8c2 	bl	8001e34 <__aeabi_dmul>
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	4bb3      	ldr	r3, [pc, #716]	; (8015f80 <_dtoa_r+0x6b0>)
 8015cb4:	f7eb f998 	bl	8000fe8 <__aeabi_dadd>
 8015cb8:	4ab2      	ldr	r2, [pc, #712]	; (8015f84 <_dtoa_r+0x6b4>)
 8015cba:	900e      	str	r0, [sp, #56]	; 0x38
 8015cbc:	910f      	str	r1, [sp, #60]	; 0x3c
 8015cbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015cc0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015cc2:	4694      	mov	ip, r2
 8015cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cc6:	4463      	add	r3, ip
 8015cc8:	9315      	str	r3, [sp, #84]	; 0x54
 8015cca:	001d      	movs	r5, r3
 8015ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d161      	bne.n	8015d96 <_dtoa_r+0x4c6>
 8015cd2:	9806      	ldr	r0, [sp, #24]
 8015cd4:	9907      	ldr	r1, [sp, #28]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	4bab      	ldr	r3, [pc, #684]	; (8015f88 <_dtoa_r+0x6b8>)
 8015cda:	f7ec fb1d 	bl	8002318 <__aeabi_dsub>
 8015cde:	0022      	movs	r2, r4
 8015ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ce2:	9006      	str	r0, [sp, #24]
 8015ce4:	9107      	str	r1, [sp, #28]
 8015ce6:	f7ea fbd3 	bl	8000490 <__aeabi_dcmpgt>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d000      	beq.n	8015cf0 <_dtoa_r+0x420>
 8015cee:	e2aa      	b.n	8016246 <_dtoa_r+0x976>
 8015cf0:	48a6      	ldr	r0, [pc, #664]	; (8015f8c <_dtoa_r+0x6bc>)
 8015cf2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015cf4:	4684      	mov	ip, r0
 8015cf6:	4461      	add	r1, ip
 8015cf8:	000b      	movs	r3, r1
 8015cfa:	9806      	ldr	r0, [sp, #24]
 8015cfc:	9907      	ldr	r1, [sp, #28]
 8015cfe:	0022      	movs	r2, r4
 8015d00:	f7ea fbb2 	bl	8000468 <__aeabi_dcmplt>
 8015d04:	2800      	cmp	r0, #0
 8015d06:	d000      	beq.n	8015d0a <_dtoa_r+0x43a>
 8015d08:	e297      	b.n	801623a <_dtoa_r+0x96a>
 8015d0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015d0e:	9306      	str	r3, [sp, #24]
 8015d10:	9407      	str	r4, [sp, #28]
 8015d12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	da00      	bge.n	8015d1a <_dtoa_r+0x44a>
 8015d18:	e15e      	b.n	8015fd8 <_dtoa_r+0x708>
 8015d1a:	2f0e      	cmp	r7, #14
 8015d1c:	dd00      	ble.n	8015d20 <_dtoa_r+0x450>
 8015d1e:	e15b      	b.n	8015fd8 <_dtoa_r+0x708>
 8015d20:	4b94      	ldr	r3, [pc, #592]	; (8015f74 <_dtoa_r+0x6a4>)
 8015d22:	00fa      	lsls	r2, r7, #3
 8015d24:	189b      	adds	r3, r3, r2
 8015d26:	685c      	ldr	r4, [r3, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	9304      	str	r3, [sp, #16]
 8015d2c:	9405      	str	r4, [sp, #20]
 8015d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	db00      	blt.n	8015d36 <_dtoa_r+0x466>
 8015d34:	e0da      	b.n	8015eec <_dtoa_r+0x61c>
 8015d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	dd00      	ble.n	8015d3e <_dtoa_r+0x46e>
 8015d3c:	e0d6      	b.n	8015eec <_dtoa_r+0x61c>
 8015d3e:	d000      	beq.n	8015d42 <_dtoa_r+0x472>
 8015d40:	e27f      	b.n	8016242 <_dtoa_r+0x972>
 8015d42:	9804      	ldr	r0, [sp, #16]
 8015d44:	9905      	ldr	r1, [sp, #20]
 8015d46:	2200      	movs	r2, #0
 8015d48:	4b8f      	ldr	r3, [pc, #572]	; (8015f88 <_dtoa_r+0x6b8>)
 8015d4a:	f7ec f873 	bl	8001e34 <__aeabi_dmul>
 8015d4e:	9a06      	ldr	r2, [sp, #24]
 8015d50:	9b07      	ldr	r3, [sp, #28]
 8015d52:	f7ea fba7 	bl	80004a4 <__aeabi_dcmpge>
 8015d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d58:	9304      	str	r3, [sp, #16]
 8015d5a:	001e      	movs	r6, r3
 8015d5c:	2800      	cmp	r0, #0
 8015d5e:	d000      	beq.n	8015d62 <_dtoa_r+0x492>
 8015d60:	e251      	b.n	8016206 <_dtoa_r+0x936>
 8015d62:	9b08      	ldr	r3, [sp, #32]
 8015d64:	9a08      	ldr	r2, [sp, #32]
 8015d66:	1c5d      	adds	r5, r3, #1
 8015d68:	2331      	movs	r3, #49	; 0x31
 8015d6a:	3701      	adds	r7, #1
 8015d6c:	7013      	strb	r3, [r2, #0]
 8015d6e:	e24d      	b.n	801620c <_dtoa_r+0x93c>
 8015d70:	4234      	tst	r4, r6
 8015d72:	d00a      	beq.n	8015d8a <_dtoa_r+0x4ba>
 8015d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d76:	4a86      	ldr	r2, [pc, #536]	; (8015f90 <_dtoa_r+0x6c0>)
 8015d78:	3301      	adds	r3, #1
 8015d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8015d7c:	00eb      	lsls	r3, r5, #3
 8015d7e:	189b      	adds	r3, r3, r2
 8015d80:	681a      	ldr	r2, [r3, #0]
 8015d82:	685b      	ldr	r3, [r3, #4]
 8015d84:	f7ec f856 	bl	8001e34 <__aeabi_dmul>
 8015d88:	0033      	movs	r3, r6
 8015d8a:	1064      	asrs	r4, r4, #1
 8015d8c:	3501      	adds	r5, #1
 8015d8e:	e75f      	b.n	8015c50 <_dtoa_r+0x380>
 8015d90:	003e      	movs	r6, r7
 8015d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d94:	e784      	b.n	8015ca0 <_dtoa_r+0x3d0>
 8015d96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d98:	1e5a      	subs	r2, r3, #1
 8015d9a:	4b76      	ldr	r3, [pc, #472]	; (8015f74 <_dtoa_r+0x6a4>)
 8015d9c:	00d2      	lsls	r2, r2, #3
 8015d9e:	189b      	adds	r3, r3, r2
 8015da0:	6818      	ldr	r0, [r3, #0]
 8015da2:	6859      	ldr	r1, [r3, #4]
 8015da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d04b      	beq.n	8015e42 <_dtoa_r+0x572>
 8015daa:	0002      	movs	r2, r0
 8015dac:	000b      	movs	r3, r1
 8015dae:	2000      	movs	r0, #0
 8015db0:	4978      	ldr	r1, [pc, #480]	; (8015f94 <_dtoa_r+0x6c4>)
 8015db2:	f7eb fc35 	bl	8001620 <__aeabi_ddiv>
 8015db6:	002b      	movs	r3, r5
 8015db8:	0022      	movs	r2, r4
 8015dba:	f7ec faad 	bl	8002318 <__aeabi_dsub>
 8015dbe:	9b08      	ldr	r3, [sp, #32]
 8015dc0:	900e      	str	r0, [sp, #56]	; 0x38
 8015dc2:	910f      	str	r1, [sp, #60]	; 0x3c
 8015dc4:	9315      	str	r3, [sp, #84]	; 0x54
 8015dc6:	9806      	ldr	r0, [sp, #24]
 8015dc8:	9907      	ldr	r1, [sp, #28]
 8015dca:	f7ec fe09 	bl	80029e0 <__aeabi_d2iz>
 8015dce:	0004      	movs	r4, r0
 8015dd0:	f7ec fe3c 	bl	8002a4c <__aeabi_i2d>
 8015dd4:	0002      	movs	r2, r0
 8015dd6:	000b      	movs	r3, r1
 8015dd8:	9806      	ldr	r0, [sp, #24]
 8015dda:	9907      	ldr	r1, [sp, #28]
 8015ddc:	f7ec fa9c 	bl	8002318 <__aeabi_dsub>
 8015de0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015de2:	3430      	adds	r4, #48	; 0x30
 8015de4:	1c5d      	adds	r5, r3, #1
 8015de6:	701c      	strb	r4, [r3, #0]
 8015de8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015dec:	9006      	str	r0, [sp, #24]
 8015dee:	9107      	str	r1, [sp, #28]
 8015df0:	f7ea fb3a 	bl	8000468 <__aeabi_dcmplt>
 8015df4:	2800      	cmp	r0, #0
 8015df6:	d16c      	bne.n	8015ed2 <_dtoa_r+0x602>
 8015df8:	9a06      	ldr	r2, [sp, #24]
 8015dfa:	9b07      	ldr	r3, [sp, #28]
 8015dfc:	2000      	movs	r0, #0
 8015dfe:	495e      	ldr	r1, [pc, #376]	; (8015f78 <_dtoa_r+0x6a8>)
 8015e00:	f7ec fa8a 	bl	8002318 <__aeabi_dsub>
 8015e04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e08:	f7ea fb2e 	bl	8000468 <__aeabi_dcmplt>
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	d000      	beq.n	8015e12 <_dtoa_r+0x542>
 8015e10:	e0c3      	b.n	8015f9a <_dtoa_r+0x6ca>
 8015e12:	9b08      	ldr	r3, [sp, #32]
 8015e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e16:	1aeb      	subs	r3, r5, r3
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	dc00      	bgt.n	8015e1e <_dtoa_r+0x54e>
 8015e1c:	e775      	b.n	8015d0a <_dtoa_r+0x43a>
 8015e1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015e20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015e22:	2200      	movs	r2, #0
 8015e24:	4b55      	ldr	r3, [pc, #340]	; (8015f7c <_dtoa_r+0x6ac>)
 8015e26:	f7ec f805 	bl	8001e34 <__aeabi_dmul>
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	900e      	str	r0, [sp, #56]	; 0x38
 8015e2e:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e30:	9806      	ldr	r0, [sp, #24]
 8015e32:	9907      	ldr	r1, [sp, #28]
 8015e34:	4b51      	ldr	r3, [pc, #324]	; (8015f7c <_dtoa_r+0x6ac>)
 8015e36:	f7eb fffd 	bl	8001e34 <__aeabi_dmul>
 8015e3a:	9515      	str	r5, [sp, #84]	; 0x54
 8015e3c:	9006      	str	r0, [sp, #24]
 8015e3e:	9107      	str	r1, [sp, #28]
 8015e40:	e7c1      	b.n	8015dc6 <_dtoa_r+0x4f6>
 8015e42:	0022      	movs	r2, r4
 8015e44:	002b      	movs	r3, r5
 8015e46:	f7eb fff5 	bl	8001e34 <__aeabi_dmul>
 8015e4a:	9c08      	ldr	r4, [sp, #32]
 8015e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e4e:	0023      	movs	r3, r4
 8015e50:	4694      	mov	ip, r2
 8015e52:	900e      	str	r0, [sp, #56]	; 0x38
 8015e54:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e56:	4463      	add	r3, ip
 8015e58:	9315      	str	r3, [sp, #84]	; 0x54
 8015e5a:	9806      	ldr	r0, [sp, #24]
 8015e5c:	9907      	ldr	r1, [sp, #28]
 8015e5e:	f7ec fdbf 	bl	80029e0 <__aeabi_d2iz>
 8015e62:	0005      	movs	r5, r0
 8015e64:	f7ec fdf2 	bl	8002a4c <__aeabi_i2d>
 8015e68:	000b      	movs	r3, r1
 8015e6a:	0002      	movs	r2, r0
 8015e6c:	9806      	ldr	r0, [sp, #24]
 8015e6e:	9907      	ldr	r1, [sp, #28]
 8015e70:	f7ec fa52 	bl	8002318 <__aeabi_dsub>
 8015e74:	3530      	adds	r5, #48	; 0x30
 8015e76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e78:	7025      	strb	r5, [r4, #0]
 8015e7a:	3401      	adds	r4, #1
 8015e7c:	9006      	str	r0, [sp, #24]
 8015e7e:	9107      	str	r1, [sp, #28]
 8015e80:	42a3      	cmp	r3, r4
 8015e82:	d12a      	bne.n	8015eda <_dtoa_r+0x60a>
 8015e84:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015e86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015e88:	9a08      	ldr	r2, [sp, #32]
 8015e8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e8c:	4694      	mov	ip, r2
 8015e8e:	4463      	add	r3, ip
 8015e90:	2200      	movs	r2, #0
 8015e92:	001d      	movs	r5, r3
 8015e94:	4b3f      	ldr	r3, [pc, #252]	; (8015f94 <_dtoa_r+0x6c4>)
 8015e96:	f7eb f8a7 	bl	8000fe8 <__aeabi_dadd>
 8015e9a:	0002      	movs	r2, r0
 8015e9c:	000b      	movs	r3, r1
 8015e9e:	9806      	ldr	r0, [sp, #24]
 8015ea0:	9907      	ldr	r1, [sp, #28]
 8015ea2:	f7ea faf5 	bl	8000490 <__aeabi_dcmpgt>
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	d000      	beq.n	8015eac <_dtoa_r+0x5dc>
 8015eaa:	e076      	b.n	8015f9a <_dtoa_r+0x6ca>
 8015eac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015eb0:	2000      	movs	r0, #0
 8015eb2:	4938      	ldr	r1, [pc, #224]	; (8015f94 <_dtoa_r+0x6c4>)
 8015eb4:	f7ec fa30 	bl	8002318 <__aeabi_dsub>
 8015eb8:	0002      	movs	r2, r0
 8015eba:	000b      	movs	r3, r1
 8015ebc:	9806      	ldr	r0, [sp, #24]
 8015ebe:	9907      	ldr	r1, [sp, #28]
 8015ec0:	f7ea fad2 	bl	8000468 <__aeabi_dcmplt>
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d100      	bne.n	8015eca <_dtoa_r+0x5fa>
 8015ec8:	e71f      	b.n	8015d0a <_dtoa_r+0x43a>
 8015eca:	1e6b      	subs	r3, r5, #1
 8015ecc:	781a      	ldrb	r2, [r3, #0]
 8015ece:	2a30      	cmp	r2, #48	; 0x30
 8015ed0:	d001      	beq.n	8015ed6 <_dtoa_r+0x606>
 8015ed2:	0037      	movs	r7, r6
 8015ed4:	e03f      	b.n	8015f56 <_dtoa_r+0x686>
 8015ed6:	001d      	movs	r5, r3
 8015ed8:	e7f7      	b.n	8015eca <_dtoa_r+0x5fa>
 8015eda:	9806      	ldr	r0, [sp, #24]
 8015edc:	9907      	ldr	r1, [sp, #28]
 8015ede:	2200      	movs	r2, #0
 8015ee0:	4b26      	ldr	r3, [pc, #152]	; (8015f7c <_dtoa_r+0x6ac>)
 8015ee2:	f7eb ffa7 	bl	8001e34 <__aeabi_dmul>
 8015ee6:	9006      	str	r0, [sp, #24]
 8015ee8:	9107      	str	r1, [sp, #28]
 8015eea:	e7b6      	b.n	8015e5a <_dtoa_r+0x58a>
 8015eec:	9e08      	ldr	r6, [sp, #32]
 8015eee:	9a04      	ldr	r2, [sp, #16]
 8015ef0:	9b05      	ldr	r3, [sp, #20]
 8015ef2:	9806      	ldr	r0, [sp, #24]
 8015ef4:	9907      	ldr	r1, [sp, #28]
 8015ef6:	f7eb fb93 	bl	8001620 <__aeabi_ddiv>
 8015efa:	f7ec fd71 	bl	80029e0 <__aeabi_d2iz>
 8015efe:	0004      	movs	r4, r0
 8015f00:	f7ec fda4 	bl	8002a4c <__aeabi_i2d>
 8015f04:	9a04      	ldr	r2, [sp, #16]
 8015f06:	9b05      	ldr	r3, [sp, #20]
 8015f08:	f7eb ff94 	bl	8001e34 <__aeabi_dmul>
 8015f0c:	0002      	movs	r2, r0
 8015f0e:	000b      	movs	r3, r1
 8015f10:	9806      	ldr	r0, [sp, #24]
 8015f12:	9907      	ldr	r1, [sp, #28]
 8015f14:	f7ec fa00 	bl	8002318 <__aeabi_dsub>
 8015f18:	0023      	movs	r3, r4
 8015f1a:	3330      	adds	r3, #48	; 0x30
 8015f1c:	7033      	strb	r3, [r6, #0]
 8015f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f20:	9b08      	ldr	r3, [sp, #32]
 8015f22:	1c75      	adds	r5, r6, #1
 8015f24:	1aeb      	subs	r3, r5, r3
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d148      	bne.n	8015fbc <_dtoa_r+0x6ec>
 8015f2a:	0002      	movs	r2, r0
 8015f2c:	000b      	movs	r3, r1
 8015f2e:	f7eb f85b 	bl	8000fe8 <__aeabi_dadd>
 8015f32:	9a04      	ldr	r2, [sp, #16]
 8015f34:	9b05      	ldr	r3, [sp, #20]
 8015f36:	9006      	str	r0, [sp, #24]
 8015f38:	9107      	str	r1, [sp, #28]
 8015f3a:	f7ea faa9 	bl	8000490 <__aeabi_dcmpgt>
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	d12a      	bne.n	8015f98 <_dtoa_r+0x6c8>
 8015f42:	9a04      	ldr	r2, [sp, #16]
 8015f44:	9b05      	ldr	r3, [sp, #20]
 8015f46:	9806      	ldr	r0, [sp, #24]
 8015f48:	9907      	ldr	r1, [sp, #28]
 8015f4a:	f7ea fa87 	bl	800045c <__aeabi_dcmpeq>
 8015f4e:	2800      	cmp	r0, #0
 8015f50:	d001      	beq.n	8015f56 <_dtoa_r+0x686>
 8015f52:	07e3      	lsls	r3, r4, #31
 8015f54:	d420      	bmi.n	8015f98 <_dtoa_r+0x6c8>
 8015f56:	9903      	ldr	r1, [sp, #12]
 8015f58:	9802      	ldr	r0, [sp, #8]
 8015f5a:	f000 ff35 	bl	8016dc8 <_Bfree>
 8015f5e:	2300      	movs	r3, #0
 8015f60:	702b      	strb	r3, [r5, #0]
 8015f62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f64:	3701      	adds	r7, #1
 8015f66:	601f      	str	r7, [r3, #0]
 8015f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d100      	bne.n	8015f70 <_dtoa_r+0x6a0>
 8015f6e:	e4e4      	b.n	801593a <_dtoa_r+0x6a>
 8015f70:	601d      	str	r5, [r3, #0]
 8015f72:	e4e2      	b.n	801593a <_dtoa_r+0x6a>
 8015f74:	0801a838 	.word	0x0801a838
 8015f78:	3ff00000 	.word	0x3ff00000
 8015f7c:	40240000 	.word	0x40240000
 8015f80:	401c0000 	.word	0x401c0000
 8015f84:	fcc00000 	.word	0xfcc00000
 8015f88:	40140000 	.word	0x40140000
 8015f8c:	7cc00000 	.word	0x7cc00000
 8015f90:	0801a810 	.word	0x0801a810
 8015f94:	3fe00000 	.word	0x3fe00000
 8015f98:	003e      	movs	r6, r7
 8015f9a:	1e6b      	subs	r3, r5, #1
 8015f9c:	781a      	ldrb	r2, [r3, #0]
 8015f9e:	2a39      	cmp	r2, #57	; 0x39
 8015fa0:	d106      	bne.n	8015fb0 <_dtoa_r+0x6e0>
 8015fa2:	9a08      	ldr	r2, [sp, #32]
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	d107      	bne.n	8015fb8 <_dtoa_r+0x6e8>
 8015fa8:	2330      	movs	r3, #48	; 0x30
 8015faa:	7013      	strb	r3, [r2, #0]
 8015fac:	0013      	movs	r3, r2
 8015fae:	3601      	adds	r6, #1
 8015fb0:	781a      	ldrb	r2, [r3, #0]
 8015fb2:	3201      	adds	r2, #1
 8015fb4:	701a      	strb	r2, [r3, #0]
 8015fb6:	e78c      	b.n	8015ed2 <_dtoa_r+0x602>
 8015fb8:	001d      	movs	r5, r3
 8015fba:	e7ee      	b.n	8015f9a <_dtoa_r+0x6ca>
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	4ba4      	ldr	r3, [pc, #656]	; (8016250 <_dtoa_r+0x980>)
 8015fc0:	f7eb ff38 	bl	8001e34 <__aeabi_dmul>
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	9006      	str	r0, [sp, #24]
 8015fca:	9107      	str	r1, [sp, #28]
 8015fcc:	002e      	movs	r6, r5
 8015fce:	f7ea fa45 	bl	800045c <__aeabi_dcmpeq>
 8015fd2:	2800      	cmp	r0, #0
 8015fd4:	d08b      	beq.n	8015eee <_dtoa_r+0x61e>
 8015fd6:	e7be      	b.n	8015f56 <_dtoa_r+0x686>
 8015fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fda:	2a00      	cmp	r2, #0
 8015fdc:	d100      	bne.n	8015fe0 <_dtoa_r+0x710>
 8015fde:	e0da      	b.n	8016196 <_dtoa_r+0x8c6>
 8015fe0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015fe2:	2a01      	cmp	r2, #1
 8015fe4:	dd00      	ble.n	8015fe8 <_dtoa_r+0x718>
 8015fe6:	e0bd      	b.n	8016164 <_dtoa_r+0x894>
 8015fe8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015fea:	2a00      	cmp	r2, #0
 8015fec:	d100      	bne.n	8015ff0 <_dtoa_r+0x720>
 8015fee:	e0b5      	b.n	801615c <_dtoa_r+0x88c>
 8015ff0:	4a98      	ldr	r2, [pc, #608]	; (8016254 <_dtoa_r+0x984>)
 8015ff2:	189b      	adds	r3, r3, r2
 8015ff4:	9d04      	ldr	r5, [sp, #16]
 8015ff6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ffa:	2101      	movs	r1, #1
 8015ffc:	18d2      	adds	r2, r2, r3
 8015ffe:	920a      	str	r2, [sp, #40]	; 0x28
 8016000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016002:	9802      	ldr	r0, [sp, #8]
 8016004:	18d3      	adds	r3, r2, r3
 8016006:	930b      	str	r3, [sp, #44]	; 0x2c
 8016008:	f000 ffad 	bl	8016f66 <__i2b>
 801600c:	0006      	movs	r6, r0
 801600e:	2c00      	cmp	r4, #0
 8016010:	dd0e      	ble.n	8016030 <_dtoa_r+0x760>
 8016012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016014:	2b00      	cmp	r3, #0
 8016016:	dd0b      	ble.n	8016030 <_dtoa_r+0x760>
 8016018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801601a:	0023      	movs	r3, r4
 801601c:	4294      	cmp	r4, r2
 801601e:	dd00      	ble.n	8016022 <_dtoa_r+0x752>
 8016020:	0013      	movs	r3, r2
 8016022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016024:	1ae4      	subs	r4, r4, r3
 8016026:	1ad2      	subs	r2, r2, r3
 8016028:	920a      	str	r2, [sp, #40]	; 0x28
 801602a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801602c:	1ad3      	subs	r3, r2, r3
 801602e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016030:	9b04      	ldr	r3, [sp, #16]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d01f      	beq.n	8016076 <_dtoa_r+0x7a6>
 8016036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016038:	2b00      	cmp	r3, #0
 801603a:	d100      	bne.n	801603e <_dtoa_r+0x76e>
 801603c:	e0af      	b.n	801619e <_dtoa_r+0x8ce>
 801603e:	2d00      	cmp	r5, #0
 8016040:	d011      	beq.n	8016066 <_dtoa_r+0x796>
 8016042:	0031      	movs	r1, r6
 8016044:	002a      	movs	r2, r5
 8016046:	9802      	ldr	r0, [sp, #8]
 8016048:	f001 f826 	bl	8017098 <__pow5mult>
 801604c:	9a03      	ldr	r2, [sp, #12]
 801604e:	0001      	movs	r1, r0
 8016050:	0006      	movs	r6, r0
 8016052:	9802      	ldr	r0, [sp, #8]
 8016054:	f000 ff90 	bl	8016f78 <__multiply>
 8016058:	9903      	ldr	r1, [sp, #12]
 801605a:	9010      	str	r0, [sp, #64]	; 0x40
 801605c:	9802      	ldr	r0, [sp, #8]
 801605e:	f000 feb3 	bl	8016dc8 <_Bfree>
 8016062:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016064:	9303      	str	r3, [sp, #12]
 8016066:	9b04      	ldr	r3, [sp, #16]
 8016068:	1b5a      	subs	r2, r3, r5
 801606a:	d004      	beq.n	8016076 <_dtoa_r+0x7a6>
 801606c:	9903      	ldr	r1, [sp, #12]
 801606e:	9802      	ldr	r0, [sp, #8]
 8016070:	f001 f812 	bl	8017098 <__pow5mult>
 8016074:	9003      	str	r0, [sp, #12]
 8016076:	2101      	movs	r1, #1
 8016078:	9802      	ldr	r0, [sp, #8]
 801607a:	f000 ff74 	bl	8016f66 <__i2b>
 801607e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016080:	9004      	str	r0, [sp, #16]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d100      	bne.n	8016088 <_dtoa_r+0x7b8>
 8016086:	e1e3      	b.n	8016450 <_dtoa_r+0xb80>
 8016088:	001a      	movs	r2, r3
 801608a:	0001      	movs	r1, r0
 801608c:	9802      	ldr	r0, [sp, #8]
 801608e:	f001 f803 	bl	8017098 <__pow5mult>
 8016092:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016094:	9004      	str	r0, [sp, #16]
 8016096:	2b01      	cmp	r3, #1
 8016098:	dd00      	ble.n	801609c <_dtoa_r+0x7cc>
 801609a:	e082      	b.n	80161a2 <_dtoa_r+0x8d2>
 801609c:	2500      	movs	r5, #0
 801609e:	9b06      	ldr	r3, [sp, #24]
 80160a0:	42ab      	cmp	r3, r5
 80160a2:	d10e      	bne.n	80160c2 <_dtoa_r+0x7f2>
 80160a4:	9b07      	ldr	r3, [sp, #28]
 80160a6:	031b      	lsls	r3, r3, #12
 80160a8:	42ab      	cmp	r3, r5
 80160aa:	d10a      	bne.n	80160c2 <_dtoa_r+0x7f2>
 80160ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160ae:	9a07      	ldr	r2, [sp, #28]
 80160b0:	4213      	tst	r3, r2
 80160b2:	d006      	beq.n	80160c2 <_dtoa_r+0x7f2>
 80160b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160b6:	3501      	adds	r5, #1
 80160b8:	3301      	adds	r3, #1
 80160ba:	930a      	str	r3, [sp, #40]	; 0x28
 80160bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160be:	3301      	adds	r3, #1
 80160c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80160c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160c4:	2001      	movs	r0, #1
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d16c      	bne.n	80161a4 <_dtoa_r+0x8d4>
 80160ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160cc:	1818      	adds	r0, r3, r0
 80160ce:	231f      	movs	r3, #31
 80160d0:	4018      	ands	r0, r3
 80160d2:	d07e      	beq.n	80161d2 <_dtoa_r+0x902>
 80160d4:	3301      	adds	r3, #1
 80160d6:	1a1b      	subs	r3, r3, r0
 80160d8:	2b04      	cmp	r3, #4
 80160da:	dd70      	ble.n	80161be <_dtoa_r+0x8ee>
 80160dc:	231c      	movs	r3, #28
 80160de:	1a18      	subs	r0, r3, r0
 80160e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160e2:	1824      	adds	r4, r4, r0
 80160e4:	181b      	adds	r3, r3, r0
 80160e6:	930a      	str	r3, [sp, #40]	; 0x28
 80160e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160ea:	181b      	adds	r3, r3, r0
 80160ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80160ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	dd05      	ble.n	8016100 <_dtoa_r+0x830>
 80160f4:	001a      	movs	r2, r3
 80160f6:	9903      	ldr	r1, [sp, #12]
 80160f8:	9802      	ldr	r0, [sp, #8]
 80160fa:	f001 f80f 	bl	801711c <__lshift>
 80160fe:	9003      	str	r0, [sp, #12]
 8016100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016102:	2b00      	cmp	r3, #0
 8016104:	dd05      	ble.n	8016112 <_dtoa_r+0x842>
 8016106:	001a      	movs	r2, r3
 8016108:	9904      	ldr	r1, [sp, #16]
 801610a:	9802      	ldr	r0, [sp, #8]
 801610c:	f001 f806 	bl	801711c <__lshift>
 8016110:	9004      	str	r0, [sp, #16]
 8016112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016114:	2b00      	cmp	r3, #0
 8016116:	d05e      	beq.n	80161d6 <_dtoa_r+0x906>
 8016118:	9904      	ldr	r1, [sp, #16]
 801611a:	9803      	ldr	r0, [sp, #12]
 801611c:	f001 f850 	bl	80171c0 <__mcmp>
 8016120:	2800      	cmp	r0, #0
 8016122:	da58      	bge.n	80161d6 <_dtoa_r+0x906>
 8016124:	2300      	movs	r3, #0
 8016126:	220a      	movs	r2, #10
 8016128:	9903      	ldr	r1, [sp, #12]
 801612a:	9802      	ldr	r0, [sp, #8]
 801612c:	f000 fe56 	bl	8016ddc <__multadd>
 8016130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016132:	3f01      	subs	r7, #1
 8016134:	9003      	str	r0, [sp, #12]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d100      	bne.n	801613c <_dtoa_r+0x86c>
 801613a:	e190      	b.n	801645e <_dtoa_r+0xb8e>
 801613c:	2300      	movs	r3, #0
 801613e:	0031      	movs	r1, r6
 8016140:	220a      	movs	r2, #10
 8016142:	9802      	ldr	r0, [sp, #8]
 8016144:	f000 fe4a 	bl	8016ddc <__multadd>
 8016148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801614a:	0006      	movs	r6, r0
 801614c:	2b00      	cmp	r3, #0
 801614e:	dd00      	ble.n	8016152 <_dtoa_r+0x882>
 8016150:	e088      	b.n	8016264 <_dtoa_r+0x994>
 8016152:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016154:	2b02      	cmp	r3, #2
 8016156:	dc00      	bgt.n	801615a <_dtoa_r+0x88a>
 8016158:	e084      	b.n	8016264 <_dtoa_r+0x994>
 801615a:	e044      	b.n	80161e6 <_dtoa_r+0x916>
 801615c:	2336      	movs	r3, #54	; 0x36
 801615e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016160:	1a9b      	subs	r3, r3, r2
 8016162:	e747      	b.n	8015ff4 <_dtoa_r+0x724>
 8016164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016166:	1e5d      	subs	r5, r3, #1
 8016168:	9b04      	ldr	r3, [sp, #16]
 801616a:	42ab      	cmp	r3, r5
 801616c:	db08      	blt.n	8016180 <_dtoa_r+0x8b0>
 801616e:	1b5d      	subs	r5, r3, r5
 8016170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016172:	2b00      	cmp	r3, #0
 8016174:	da0c      	bge.n	8016190 <_dtoa_r+0x8c0>
 8016176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801617a:	1a9c      	subs	r4, r3, r2
 801617c:	2300      	movs	r3, #0
 801617e:	e73b      	b.n	8015ff8 <_dtoa_r+0x728>
 8016180:	9b04      	ldr	r3, [sp, #16]
 8016182:	9504      	str	r5, [sp, #16]
 8016184:	1aea      	subs	r2, r5, r3
 8016186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016188:	2500      	movs	r5, #0
 801618a:	189b      	adds	r3, r3, r2
 801618c:	9311      	str	r3, [sp, #68]	; 0x44
 801618e:	e7ef      	b.n	8016170 <_dtoa_r+0x8a0>
 8016190:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016194:	e730      	b.n	8015ff8 <_dtoa_r+0x728>
 8016196:	9d04      	ldr	r5, [sp, #16]
 8016198:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801619a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801619c:	e737      	b.n	801600e <_dtoa_r+0x73e>
 801619e:	9a04      	ldr	r2, [sp, #16]
 80161a0:	e764      	b.n	801606c <_dtoa_r+0x79c>
 80161a2:	2500      	movs	r5, #0
 80161a4:	9b04      	ldr	r3, [sp, #16]
 80161a6:	9a04      	ldr	r2, [sp, #16]
 80161a8:	691b      	ldr	r3, [r3, #16]
 80161aa:	9310      	str	r3, [sp, #64]	; 0x40
 80161ac:	3303      	adds	r3, #3
 80161ae:	009b      	lsls	r3, r3, #2
 80161b0:	18d3      	adds	r3, r2, r3
 80161b2:	6858      	ldr	r0, [r3, #4]
 80161b4:	f000 fe8e 	bl	8016ed4 <__hi0bits>
 80161b8:	2320      	movs	r3, #32
 80161ba:	1a18      	subs	r0, r3, r0
 80161bc:	e785      	b.n	80160ca <_dtoa_r+0x7fa>
 80161be:	2b04      	cmp	r3, #4
 80161c0:	d095      	beq.n	80160ee <_dtoa_r+0x81e>
 80161c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161c4:	331c      	adds	r3, #28
 80161c6:	18d2      	adds	r2, r2, r3
 80161c8:	920a      	str	r2, [sp, #40]	; 0x28
 80161ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80161cc:	18e4      	adds	r4, r4, r3
 80161ce:	18d3      	adds	r3, r2, r3
 80161d0:	e78c      	b.n	80160ec <_dtoa_r+0x81c>
 80161d2:	0003      	movs	r3, r0
 80161d4:	e7f5      	b.n	80161c2 <_dtoa_r+0x8f2>
 80161d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161d8:	2b00      	cmp	r3, #0
 80161da:	dc3d      	bgt.n	8016258 <_dtoa_r+0x988>
 80161dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161de:	2b02      	cmp	r3, #2
 80161e0:	dd3a      	ble.n	8016258 <_dtoa_r+0x988>
 80161e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161e4:	930c      	str	r3, [sp, #48]	; 0x30
 80161e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d10c      	bne.n	8016206 <_dtoa_r+0x936>
 80161ec:	9904      	ldr	r1, [sp, #16]
 80161ee:	2205      	movs	r2, #5
 80161f0:	9802      	ldr	r0, [sp, #8]
 80161f2:	f000 fdf3 	bl	8016ddc <__multadd>
 80161f6:	9004      	str	r0, [sp, #16]
 80161f8:	0001      	movs	r1, r0
 80161fa:	9803      	ldr	r0, [sp, #12]
 80161fc:	f000 ffe0 	bl	80171c0 <__mcmp>
 8016200:	2800      	cmp	r0, #0
 8016202:	dd00      	ble.n	8016206 <_dtoa_r+0x936>
 8016204:	e5ad      	b.n	8015d62 <_dtoa_r+0x492>
 8016206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016208:	9d08      	ldr	r5, [sp, #32]
 801620a:	43df      	mvns	r7, r3
 801620c:	2300      	movs	r3, #0
 801620e:	9309      	str	r3, [sp, #36]	; 0x24
 8016210:	9904      	ldr	r1, [sp, #16]
 8016212:	9802      	ldr	r0, [sp, #8]
 8016214:	f000 fdd8 	bl	8016dc8 <_Bfree>
 8016218:	2e00      	cmp	r6, #0
 801621a:	d100      	bne.n	801621e <_dtoa_r+0x94e>
 801621c:	e69b      	b.n	8015f56 <_dtoa_r+0x686>
 801621e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016220:	2b00      	cmp	r3, #0
 8016222:	d005      	beq.n	8016230 <_dtoa_r+0x960>
 8016224:	42b3      	cmp	r3, r6
 8016226:	d003      	beq.n	8016230 <_dtoa_r+0x960>
 8016228:	0019      	movs	r1, r3
 801622a:	9802      	ldr	r0, [sp, #8]
 801622c:	f000 fdcc 	bl	8016dc8 <_Bfree>
 8016230:	0031      	movs	r1, r6
 8016232:	9802      	ldr	r0, [sp, #8]
 8016234:	f000 fdc8 	bl	8016dc8 <_Bfree>
 8016238:	e68d      	b.n	8015f56 <_dtoa_r+0x686>
 801623a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801623c:	9304      	str	r3, [sp, #16]
 801623e:	001e      	movs	r6, r3
 8016240:	e7e1      	b.n	8016206 <_dtoa_r+0x936>
 8016242:	2300      	movs	r3, #0
 8016244:	e7fa      	b.n	801623c <_dtoa_r+0x96c>
 8016246:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016248:	0037      	movs	r7, r6
 801624a:	9304      	str	r3, [sp, #16]
 801624c:	001e      	movs	r6, r3
 801624e:	e588      	b.n	8015d62 <_dtoa_r+0x492>
 8016250:	40240000 	.word	0x40240000
 8016254:	00000433 	.word	0x00000433
 8016258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801625a:	2b00      	cmp	r3, #0
 801625c:	d100      	bne.n	8016260 <_dtoa_r+0x990>
 801625e:	e0b2      	b.n	80163c6 <_dtoa_r+0xaf6>
 8016260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016262:	930c      	str	r3, [sp, #48]	; 0x30
 8016264:	2c00      	cmp	r4, #0
 8016266:	dd05      	ble.n	8016274 <_dtoa_r+0x9a4>
 8016268:	0031      	movs	r1, r6
 801626a:	0022      	movs	r2, r4
 801626c:	9802      	ldr	r0, [sp, #8]
 801626e:	f000 ff55 	bl	801711c <__lshift>
 8016272:	0006      	movs	r6, r0
 8016274:	0030      	movs	r0, r6
 8016276:	2d00      	cmp	r5, #0
 8016278:	d011      	beq.n	801629e <_dtoa_r+0x9ce>
 801627a:	6871      	ldr	r1, [r6, #4]
 801627c:	9802      	ldr	r0, [sp, #8]
 801627e:	f000 fd7b 	bl	8016d78 <_Balloc>
 8016282:	0031      	movs	r1, r6
 8016284:	0004      	movs	r4, r0
 8016286:	6933      	ldr	r3, [r6, #16]
 8016288:	310c      	adds	r1, #12
 801628a:	1c9a      	adds	r2, r3, #2
 801628c:	0092      	lsls	r2, r2, #2
 801628e:	300c      	adds	r0, #12
 8016290:	f7fc fe8b 	bl	8012faa <memcpy>
 8016294:	2201      	movs	r2, #1
 8016296:	0021      	movs	r1, r4
 8016298:	9802      	ldr	r0, [sp, #8]
 801629a:	f000 ff3f 	bl	801711c <__lshift>
 801629e:	9609      	str	r6, [sp, #36]	; 0x24
 80162a0:	0006      	movs	r6, r0
 80162a2:	9b08      	ldr	r3, [sp, #32]
 80162a4:	930a      	str	r3, [sp, #40]	; 0x28
 80162a6:	9904      	ldr	r1, [sp, #16]
 80162a8:	9803      	ldr	r0, [sp, #12]
 80162aa:	f7ff fa8b 	bl	80157c4 <quorem>
 80162ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162b0:	900d      	str	r0, [sp, #52]	; 0x34
 80162b2:	0004      	movs	r4, r0
 80162b4:	9803      	ldr	r0, [sp, #12]
 80162b6:	f000 ff83 	bl	80171c0 <__mcmp>
 80162ba:	0032      	movs	r2, r6
 80162bc:	9010      	str	r0, [sp, #64]	; 0x40
 80162be:	9904      	ldr	r1, [sp, #16]
 80162c0:	9802      	ldr	r0, [sp, #8]
 80162c2:	f000 ff97 	bl	80171f4 <__mdiff>
 80162c6:	2301      	movs	r3, #1
 80162c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80162ca:	68c3      	ldr	r3, [r0, #12]
 80162cc:	3430      	adds	r4, #48	; 0x30
 80162ce:	0005      	movs	r5, r0
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d104      	bne.n	80162de <_dtoa_r+0xa0e>
 80162d4:	0001      	movs	r1, r0
 80162d6:	9803      	ldr	r0, [sp, #12]
 80162d8:	f000 ff72 	bl	80171c0 <__mcmp>
 80162dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80162de:	0029      	movs	r1, r5
 80162e0:	9802      	ldr	r0, [sp, #8]
 80162e2:	f000 fd71 	bl	8016dc8 <_Bfree>
 80162e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80162ea:	4313      	orrs	r3, r2
 80162ec:	d10e      	bne.n	801630c <_dtoa_r+0xa3c>
 80162ee:	9a06      	ldr	r2, [sp, #24]
 80162f0:	3301      	adds	r3, #1
 80162f2:	4213      	tst	r3, r2
 80162f4:	d10a      	bne.n	801630c <_dtoa_r+0xa3c>
 80162f6:	2c39      	cmp	r4, #57	; 0x39
 80162f8:	d026      	beq.n	8016348 <_dtoa_r+0xa78>
 80162fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	dd01      	ble.n	8016304 <_dtoa_r+0xa34>
 8016300:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016302:	3431      	adds	r4, #49	; 0x31
 8016304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016306:	1c5d      	adds	r5, r3, #1
 8016308:	701c      	strb	r4, [r3, #0]
 801630a:	e781      	b.n	8016210 <_dtoa_r+0x940>
 801630c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801630e:	2b00      	cmp	r3, #0
 8016310:	db07      	blt.n	8016322 <_dtoa_r+0xa52>
 8016312:	001d      	movs	r5, r3
 8016314:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016316:	431d      	orrs	r5, r3
 8016318:	d122      	bne.n	8016360 <_dtoa_r+0xa90>
 801631a:	2301      	movs	r3, #1
 801631c:	9a06      	ldr	r2, [sp, #24]
 801631e:	4213      	tst	r3, r2
 8016320:	d11e      	bne.n	8016360 <_dtoa_r+0xa90>
 8016322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016324:	2b00      	cmp	r3, #0
 8016326:	dded      	ble.n	8016304 <_dtoa_r+0xa34>
 8016328:	9903      	ldr	r1, [sp, #12]
 801632a:	2201      	movs	r2, #1
 801632c:	9802      	ldr	r0, [sp, #8]
 801632e:	f000 fef5 	bl	801711c <__lshift>
 8016332:	9904      	ldr	r1, [sp, #16]
 8016334:	9003      	str	r0, [sp, #12]
 8016336:	f000 ff43 	bl	80171c0 <__mcmp>
 801633a:	2800      	cmp	r0, #0
 801633c:	dc02      	bgt.n	8016344 <_dtoa_r+0xa74>
 801633e:	d1e1      	bne.n	8016304 <_dtoa_r+0xa34>
 8016340:	07e3      	lsls	r3, r4, #31
 8016342:	d5df      	bpl.n	8016304 <_dtoa_r+0xa34>
 8016344:	2c39      	cmp	r4, #57	; 0x39
 8016346:	d1db      	bne.n	8016300 <_dtoa_r+0xa30>
 8016348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801634a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801634c:	1c5d      	adds	r5, r3, #1
 801634e:	2339      	movs	r3, #57	; 0x39
 8016350:	7013      	strb	r3, [r2, #0]
 8016352:	1e6b      	subs	r3, r5, #1
 8016354:	781a      	ldrb	r2, [r3, #0]
 8016356:	2a39      	cmp	r2, #57	; 0x39
 8016358:	d067      	beq.n	801642a <_dtoa_r+0xb5a>
 801635a:	3201      	adds	r2, #1
 801635c:	701a      	strb	r2, [r3, #0]
 801635e:	e757      	b.n	8016210 <_dtoa_r+0x940>
 8016360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016362:	1c5d      	adds	r5, r3, #1
 8016364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016366:	2b00      	cmp	r3, #0
 8016368:	dd04      	ble.n	8016374 <_dtoa_r+0xaa4>
 801636a:	2c39      	cmp	r4, #57	; 0x39
 801636c:	d0ec      	beq.n	8016348 <_dtoa_r+0xa78>
 801636e:	3401      	adds	r4, #1
 8016370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016372:	e7c9      	b.n	8016308 <_dtoa_r+0xa38>
 8016374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016378:	701c      	strb	r4, [r3, #0]
 801637a:	9b08      	ldr	r3, [sp, #32]
 801637c:	1aeb      	subs	r3, r5, r3
 801637e:	4293      	cmp	r3, r2
 8016380:	d03e      	beq.n	8016400 <_dtoa_r+0xb30>
 8016382:	2300      	movs	r3, #0
 8016384:	220a      	movs	r2, #10
 8016386:	9903      	ldr	r1, [sp, #12]
 8016388:	9802      	ldr	r0, [sp, #8]
 801638a:	f000 fd27 	bl	8016ddc <__multadd>
 801638e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016390:	9003      	str	r0, [sp, #12]
 8016392:	42b3      	cmp	r3, r6
 8016394:	d109      	bne.n	80163aa <_dtoa_r+0xada>
 8016396:	2300      	movs	r3, #0
 8016398:	220a      	movs	r2, #10
 801639a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801639c:	9802      	ldr	r0, [sp, #8]
 801639e:	f000 fd1d 	bl	8016ddc <__multadd>
 80163a2:	9009      	str	r0, [sp, #36]	; 0x24
 80163a4:	0006      	movs	r6, r0
 80163a6:	950a      	str	r5, [sp, #40]	; 0x28
 80163a8:	e77d      	b.n	80162a6 <_dtoa_r+0x9d6>
 80163aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163ac:	2300      	movs	r3, #0
 80163ae:	220a      	movs	r2, #10
 80163b0:	9802      	ldr	r0, [sp, #8]
 80163b2:	f000 fd13 	bl	8016ddc <__multadd>
 80163b6:	2300      	movs	r3, #0
 80163b8:	9009      	str	r0, [sp, #36]	; 0x24
 80163ba:	220a      	movs	r2, #10
 80163bc:	0031      	movs	r1, r6
 80163be:	9802      	ldr	r0, [sp, #8]
 80163c0:	f000 fd0c 	bl	8016ddc <__multadd>
 80163c4:	e7ee      	b.n	80163a4 <_dtoa_r+0xad4>
 80163c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163c8:	930c      	str	r3, [sp, #48]	; 0x30
 80163ca:	9b08      	ldr	r3, [sp, #32]
 80163cc:	9306      	str	r3, [sp, #24]
 80163ce:	9904      	ldr	r1, [sp, #16]
 80163d0:	9803      	ldr	r0, [sp, #12]
 80163d2:	f7ff f9f7 	bl	80157c4 <quorem>
 80163d6:	9b06      	ldr	r3, [sp, #24]
 80163d8:	3030      	adds	r0, #48	; 0x30
 80163da:	1c5d      	adds	r5, r3, #1
 80163dc:	7018      	strb	r0, [r3, #0]
 80163de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80163e0:	9b08      	ldr	r3, [sp, #32]
 80163e2:	0004      	movs	r4, r0
 80163e4:	1aeb      	subs	r3, r5, r3
 80163e6:	429a      	cmp	r2, r3
 80163e8:	dd08      	ble.n	80163fc <_dtoa_r+0xb2c>
 80163ea:	2300      	movs	r3, #0
 80163ec:	220a      	movs	r2, #10
 80163ee:	9903      	ldr	r1, [sp, #12]
 80163f0:	9802      	ldr	r0, [sp, #8]
 80163f2:	f000 fcf3 	bl	8016ddc <__multadd>
 80163f6:	9506      	str	r5, [sp, #24]
 80163f8:	9003      	str	r0, [sp, #12]
 80163fa:	e7e8      	b.n	80163ce <_dtoa_r+0xafe>
 80163fc:	2300      	movs	r3, #0
 80163fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016400:	9903      	ldr	r1, [sp, #12]
 8016402:	2201      	movs	r2, #1
 8016404:	9802      	ldr	r0, [sp, #8]
 8016406:	f000 fe89 	bl	801711c <__lshift>
 801640a:	9904      	ldr	r1, [sp, #16]
 801640c:	9003      	str	r0, [sp, #12]
 801640e:	f000 fed7 	bl	80171c0 <__mcmp>
 8016412:	2800      	cmp	r0, #0
 8016414:	dc9d      	bgt.n	8016352 <_dtoa_r+0xa82>
 8016416:	d101      	bne.n	801641c <_dtoa_r+0xb4c>
 8016418:	07e3      	lsls	r3, r4, #31
 801641a:	d49a      	bmi.n	8016352 <_dtoa_r+0xa82>
 801641c:	1e6b      	subs	r3, r5, #1
 801641e:	781a      	ldrb	r2, [r3, #0]
 8016420:	2a30      	cmp	r2, #48	; 0x30
 8016422:	d000      	beq.n	8016426 <_dtoa_r+0xb56>
 8016424:	e6f4      	b.n	8016210 <_dtoa_r+0x940>
 8016426:	001d      	movs	r5, r3
 8016428:	e7f8      	b.n	801641c <_dtoa_r+0xb4c>
 801642a:	9a08      	ldr	r2, [sp, #32]
 801642c:	429a      	cmp	r2, r3
 801642e:	d103      	bne.n	8016438 <_dtoa_r+0xb68>
 8016430:	2331      	movs	r3, #49	; 0x31
 8016432:	3701      	adds	r7, #1
 8016434:	7013      	strb	r3, [r2, #0]
 8016436:	e6eb      	b.n	8016210 <_dtoa_r+0x940>
 8016438:	001d      	movs	r5, r3
 801643a:	e78a      	b.n	8016352 <_dtoa_r+0xa82>
 801643c:	4b0b      	ldr	r3, [pc, #44]	; (801646c <_dtoa_r+0xb9c>)
 801643e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016440:	9308      	str	r3, [sp, #32]
 8016442:	4b0b      	ldr	r3, [pc, #44]	; (8016470 <_dtoa_r+0xba0>)
 8016444:	2a00      	cmp	r2, #0
 8016446:	d001      	beq.n	801644c <_dtoa_r+0xb7c>
 8016448:	f7ff fa75 	bl	8015936 <_dtoa_r+0x66>
 801644c:	f7ff fa75 	bl	801593a <_dtoa_r+0x6a>
 8016450:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016452:	2b01      	cmp	r3, #1
 8016454:	dc00      	bgt.n	8016458 <_dtoa_r+0xb88>
 8016456:	e621      	b.n	801609c <_dtoa_r+0x7cc>
 8016458:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801645a:	2001      	movs	r0, #1
 801645c:	e635      	b.n	80160ca <_dtoa_r+0x7fa>
 801645e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016460:	2b00      	cmp	r3, #0
 8016462:	dcb2      	bgt.n	80163ca <_dtoa_r+0xafa>
 8016464:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016466:	2b02      	cmp	r3, #2
 8016468:	ddaf      	ble.n	80163ca <_dtoa_r+0xafa>
 801646a:	e6bc      	b.n	80161e6 <_dtoa_r+0x916>
 801646c:	0801a7fd 	.word	0x0801a7fd
 8016470:	0801a805 	.word	0x0801a805

08016474 <__errno>:
 8016474:	4b01      	ldr	r3, [pc, #4]	; (801647c <__errno+0x8>)
 8016476:	6818      	ldr	r0, [r3, #0]
 8016478:	4770      	bx	lr
 801647a:	46c0      	nop			; (mov r8, r8)
 801647c:	200000a8 	.word	0x200000a8

08016480 <__libc_fini_array>:
 8016480:	b570      	push	{r4, r5, r6, lr}
 8016482:	4d07      	ldr	r5, [pc, #28]	; (80164a0 <__libc_fini_array+0x20>)
 8016484:	4c07      	ldr	r4, [pc, #28]	; (80164a4 <__libc_fini_array+0x24>)
 8016486:	1b64      	subs	r4, r4, r5
 8016488:	10a4      	asrs	r4, r4, #2
 801648a:	2c00      	cmp	r4, #0
 801648c:	d102      	bne.n	8016494 <__libc_fini_array+0x14>
 801648e:	f001 f987 	bl	80177a0 <_fini>
 8016492:	bd70      	pop	{r4, r5, r6, pc}
 8016494:	3c01      	subs	r4, #1
 8016496:	00a3      	lsls	r3, r4, #2
 8016498:	58eb      	ldr	r3, [r5, r3]
 801649a:	4798      	blx	r3
 801649c:	e7f5      	b.n	801648a <__libc_fini_array+0xa>
 801649e:	46c0      	nop			; (mov r8, r8)
 80164a0:	0801a91c 	.word	0x0801a91c
 80164a4:	0801a920 	.word	0x0801a920

080164a8 <_malloc_trim_r>:
 80164a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164aa:	0005      	movs	r5, r0
 80164ac:	2008      	movs	r0, #8
 80164ae:	000c      	movs	r4, r1
 80164b0:	f7ff f95c 	bl	801576c <sysconf>
 80164b4:	0007      	movs	r7, r0
 80164b6:	0028      	movs	r0, r5
 80164b8:	f7fc fd88 	bl	8012fcc <__malloc_lock>
 80164bc:	2203      	movs	r2, #3
 80164be:	4e21      	ldr	r6, [pc, #132]	; (8016544 <_malloc_trim_r+0x9c>)
 80164c0:	0039      	movs	r1, r7
 80164c2:	68b3      	ldr	r3, [r6, #8]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	4393      	bics	r3, r2
 80164c8:	1b18      	subs	r0, r3, r4
 80164ca:	3811      	subs	r0, #17
 80164cc:	19c0      	adds	r0, r0, r7
 80164ce:	9301      	str	r3, [sp, #4]
 80164d0:	f7e9 fe3e 	bl	8000150 <__udivsi3>
 80164d4:	1e44      	subs	r4, r0, #1
 80164d6:	437c      	muls	r4, r7
 80164d8:	42a7      	cmp	r7, r4
 80164da:	dd04      	ble.n	80164e6 <_malloc_trim_r+0x3e>
 80164dc:	0028      	movs	r0, r5
 80164de:	f7fc fd7d 	bl	8012fdc <__malloc_unlock>
 80164e2:	2000      	movs	r0, #0
 80164e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80164e6:	2100      	movs	r1, #0
 80164e8:	0028      	movs	r0, r5
 80164ea:	f7fc ff4f 	bl	801338c <_sbrk_r>
 80164ee:	68b3      	ldr	r3, [r6, #8]
 80164f0:	9a01      	ldr	r2, [sp, #4]
 80164f2:	189b      	adds	r3, r3, r2
 80164f4:	4298      	cmp	r0, r3
 80164f6:	d1f1      	bne.n	80164dc <_malloc_trim_r+0x34>
 80164f8:	4261      	negs	r1, r4
 80164fa:	0028      	movs	r0, r5
 80164fc:	f7fc ff46 	bl	801338c <_sbrk_r>
 8016500:	1c43      	adds	r3, r0, #1
 8016502:	d110      	bne.n	8016526 <_malloc_trim_r+0x7e>
 8016504:	2100      	movs	r1, #0
 8016506:	0028      	movs	r0, r5
 8016508:	f7fc ff40 	bl	801338c <_sbrk_r>
 801650c:	68b2      	ldr	r2, [r6, #8]
 801650e:	1a81      	subs	r1, r0, r2
 8016510:	290f      	cmp	r1, #15
 8016512:	dde3      	ble.n	80164dc <_malloc_trim_r+0x34>
 8016514:	4b0c      	ldr	r3, [pc, #48]	; (8016548 <_malloc_trim_r+0xa0>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	1ac0      	subs	r0, r0, r3
 801651a:	4b0c      	ldr	r3, [pc, #48]	; (801654c <_malloc_trim_r+0xa4>)
 801651c:	6018      	str	r0, [r3, #0]
 801651e:	2301      	movs	r3, #1
 8016520:	430b      	orrs	r3, r1
 8016522:	6053      	str	r3, [r2, #4]
 8016524:	e7da      	b.n	80164dc <_malloc_trim_r+0x34>
 8016526:	68b2      	ldr	r2, [r6, #8]
 8016528:	2601      	movs	r6, #1
 801652a:	9b01      	ldr	r3, [sp, #4]
 801652c:	0028      	movs	r0, r5
 801652e:	1b1b      	subs	r3, r3, r4
 8016530:	4333      	orrs	r3, r6
 8016532:	6053      	str	r3, [r2, #4]
 8016534:	4b05      	ldr	r3, [pc, #20]	; (801654c <_malloc_trim_r+0xa4>)
 8016536:	681a      	ldr	r2, [r3, #0]
 8016538:	1b14      	subs	r4, r2, r4
 801653a:	601c      	str	r4, [r3, #0]
 801653c:	f7fc fd4e 	bl	8012fdc <__malloc_unlock>
 8016540:	0030      	movs	r0, r6
 8016542:	e7cf      	b.n	80164e4 <_malloc_trim_r+0x3c>
 8016544:	20000644 	.word	0x20000644
 8016548:	20000a4c 	.word	0x20000a4c
 801654c:	20006910 	.word	0x20006910

08016550 <_free_r>:
 8016550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016552:	1e0d      	subs	r5, r1, #0
 8016554:	9001      	str	r0, [sp, #4]
 8016556:	d02d      	beq.n	80165b4 <_free_r+0x64>
 8016558:	f7fc fd38 	bl	8012fcc <__malloc_lock>
 801655c:	2301      	movs	r3, #1
 801655e:	0029      	movs	r1, r5
 8016560:	469c      	mov	ip, r3
 8016562:	3908      	subs	r1, #8
 8016564:	684f      	ldr	r7, [r1, #4]
 8016566:	4662      	mov	r2, ip
 8016568:	003b      	movs	r3, r7
 801656a:	4666      	mov	r6, ip
 801656c:	4393      	bics	r3, r2
 801656e:	18c8      	adds	r0, r1, r3
 8016570:	6845      	ldr	r5, [r0, #4]
 8016572:	3202      	adds	r2, #2
 8016574:	4395      	bics	r5, r2
 8016576:	4a4a      	ldr	r2, [pc, #296]	; (80166a0 <_free_r+0x150>)
 8016578:	4037      	ands	r7, r6
 801657a:	6896      	ldr	r6, [r2, #8]
 801657c:	4286      	cmp	r6, r0
 801657e:	d11a      	bne.n	80165b6 <_free_r+0x66>
 8016580:	195b      	adds	r3, r3, r5
 8016582:	2f00      	cmp	r7, #0
 8016584:	d106      	bne.n	8016594 <_free_r+0x44>
 8016586:	6808      	ldr	r0, [r1, #0]
 8016588:	1a09      	subs	r1, r1, r0
 801658a:	688d      	ldr	r5, [r1, #8]
 801658c:	181b      	adds	r3, r3, r0
 801658e:	68c8      	ldr	r0, [r1, #12]
 8016590:	60e8      	str	r0, [r5, #12]
 8016592:	6085      	str	r5, [r0, #8]
 8016594:	2001      	movs	r0, #1
 8016596:	4318      	orrs	r0, r3
 8016598:	6048      	str	r0, [r1, #4]
 801659a:	6091      	str	r1, [r2, #8]
 801659c:	4a41      	ldr	r2, [pc, #260]	; (80166a4 <_free_r+0x154>)
 801659e:	6812      	ldr	r2, [r2, #0]
 80165a0:	429a      	cmp	r2, r3
 80165a2:	d804      	bhi.n	80165ae <_free_r+0x5e>
 80165a4:	4b40      	ldr	r3, [pc, #256]	; (80166a8 <_free_r+0x158>)
 80165a6:	9801      	ldr	r0, [sp, #4]
 80165a8:	6819      	ldr	r1, [r3, #0]
 80165aa:	f7ff ff7d 	bl	80164a8 <_malloc_trim_r>
 80165ae:	9801      	ldr	r0, [sp, #4]
 80165b0:	f7fc fd14 	bl	8012fdc <__malloc_unlock>
 80165b4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80165b6:	2600      	movs	r6, #0
 80165b8:	6045      	str	r5, [r0, #4]
 80165ba:	42b7      	cmp	r7, r6
 80165bc:	d109      	bne.n	80165d2 <_free_r+0x82>
 80165be:	680f      	ldr	r7, [r1, #0]
 80165c0:	4c3a      	ldr	r4, [pc, #232]	; (80166ac <_free_r+0x15c>)
 80165c2:	1bc9      	subs	r1, r1, r7
 80165c4:	19db      	adds	r3, r3, r7
 80165c6:	688f      	ldr	r7, [r1, #8]
 80165c8:	42a7      	cmp	r7, r4
 80165ca:	d02b      	beq.n	8016624 <_free_r+0xd4>
 80165cc:	68cc      	ldr	r4, [r1, #12]
 80165ce:	60fc      	str	r4, [r7, #12]
 80165d0:	60a7      	str	r7, [r4, #8]
 80165d2:	1947      	adds	r7, r0, r5
 80165d4:	687c      	ldr	r4, [r7, #4]
 80165d6:	2701      	movs	r7, #1
 80165d8:	423c      	tst	r4, r7
 80165da:	d10b      	bne.n	80165f4 <_free_r+0xa4>
 80165dc:	195b      	adds	r3, r3, r5
 80165de:	6885      	ldr	r5, [r0, #8]
 80165e0:	2e00      	cmp	r6, #0
 80165e2:	d121      	bne.n	8016628 <_free_r+0xd8>
 80165e4:	4c31      	ldr	r4, [pc, #196]	; (80166ac <_free_r+0x15c>)
 80165e6:	42a5      	cmp	r5, r4
 80165e8:	d11e      	bne.n	8016628 <_free_r+0xd8>
 80165ea:	003e      	movs	r6, r7
 80165ec:	6151      	str	r1, [r2, #20]
 80165ee:	6111      	str	r1, [r2, #16]
 80165f0:	60cd      	str	r5, [r1, #12]
 80165f2:	608d      	str	r5, [r1, #8]
 80165f4:	2001      	movs	r0, #1
 80165f6:	0005      	movs	r5, r0
 80165f8:	431d      	orrs	r5, r3
 80165fa:	604d      	str	r5, [r1, #4]
 80165fc:	50cb      	str	r3, [r1, r3]
 80165fe:	2e00      	cmp	r6, #0
 8016600:	d1d5      	bne.n	80165ae <_free_r+0x5e>
 8016602:	4d2b      	ldr	r5, [pc, #172]	; (80166b0 <_free_r+0x160>)
 8016604:	42ab      	cmp	r3, r5
 8016606:	d813      	bhi.n	8016630 <_free_r+0xe0>
 8016608:	08db      	lsrs	r3, r3, #3
 801660a:	109d      	asrs	r5, r3, #2
 801660c:	40a8      	lsls	r0, r5
 801660e:	6854      	ldr	r4, [r2, #4]
 8016610:	00db      	lsls	r3, r3, #3
 8016612:	4320      	orrs	r0, r4
 8016614:	6050      	str	r0, [r2, #4]
 8016616:	189a      	adds	r2, r3, r2
 8016618:	6893      	ldr	r3, [r2, #8]
 801661a:	60ca      	str	r2, [r1, #12]
 801661c:	608b      	str	r3, [r1, #8]
 801661e:	6091      	str	r1, [r2, #8]
 8016620:	60d9      	str	r1, [r3, #12]
 8016622:	e7c4      	b.n	80165ae <_free_r+0x5e>
 8016624:	4666      	mov	r6, ip
 8016626:	e7d4      	b.n	80165d2 <_free_r+0x82>
 8016628:	68c0      	ldr	r0, [r0, #12]
 801662a:	60e8      	str	r0, [r5, #12]
 801662c:	6085      	str	r5, [r0, #8]
 801662e:	e7e1      	b.n	80165f4 <_free_r+0xa4>
 8016630:	0a5d      	lsrs	r5, r3, #9
 8016632:	2d04      	cmp	r5, #4
 8016634:	d812      	bhi.n	801665c <_free_r+0x10c>
 8016636:	0998      	lsrs	r0, r3, #6
 8016638:	3038      	adds	r0, #56	; 0x38
 801663a:	00c6      	lsls	r6, r0, #3
 801663c:	18b6      	adds	r6, r6, r2
 801663e:	68b5      	ldr	r5, [r6, #8]
 8016640:	2703      	movs	r7, #3
 8016642:	42ae      	cmp	r6, r5
 8016644:	d125      	bne.n	8016692 <_free_r+0x142>
 8016646:	2301      	movs	r3, #1
 8016648:	1080      	asrs	r0, r0, #2
 801664a:	4083      	lsls	r3, r0
 801664c:	6850      	ldr	r0, [r2, #4]
 801664e:	4303      	orrs	r3, r0
 8016650:	6053      	str	r3, [r2, #4]
 8016652:	60ce      	str	r6, [r1, #12]
 8016654:	608d      	str	r5, [r1, #8]
 8016656:	60b1      	str	r1, [r6, #8]
 8016658:	60e9      	str	r1, [r5, #12]
 801665a:	e7a8      	b.n	80165ae <_free_r+0x5e>
 801665c:	2d14      	cmp	r5, #20
 801665e:	d802      	bhi.n	8016666 <_free_r+0x116>
 8016660:	0028      	movs	r0, r5
 8016662:	305b      	adds	r0, #91	; 0x5b
 8016664:	e7e9      	b.n	801663a <_free_r+0xea>
 8016666:	2d54      	cmp	r5, #84	; 0x54
 8016668:	d802      	bhi.n	8016670 <_free_r+0x120>
 801666a:	0b18      	lsrs	r0, r3, #12
 801666c:	306e      	adds	r0, #110	; 0x6e
 801666e:	e7e4      	b.n	801663a <_free_r+0xea>
 8016670:	20aa      	movs	r0, #170	; 0xaa
 8016672:	0040      	lsls	r0, r0, #1
 8016674:	4285      	cmp	r5, r0
 8016676:	d802      	bhi.n	801667e <_free_r+0x12e>
 8016678:	0bd8      	lsrs	r0, r3, #15
 801667a:	3077      	adds	r0, #119	; 0x77
 801667c:	e7dd      	b.n	801663a <_free_r+0xea>
 801667e:	4e0d      	ldr	r6, [pc, #52]	; (80166b4 <_free_r+0x164>)
 8016680:	207e      	movs	r0, #126	; 0x7e
 8016682:	42b5      	cmp	r5, r6
 8016684:	d8d9      	bhi.n	801663a <_free_r+0xea>
 8016686:	0c98      	lsrs	r0, r3, #18
 8016688:	307c      	adds	r0, #124	; 0x7c
 801668a:	e7d6      	b.n	801663a <_free_r+0xea>
 801668c:	68ad      	ldr	r5, [r5, #8]
 801668e:	42ae      	cmp	r6, r5
 8016690:	d003      	beq.n	801669a <_free_r+0x14a>
 8016692:	686a      	ldr	r2, [r5, #4]
 8016694:	43ba      	bics	r2, r7
 8016696:	429a      	cmp	r2, r3
 8016698:	d8f8      	bhi.n	801668c <_free_r+0x13c>
 801669a:	68ee      	ldr	r6, [r5, #12]
 801669c:	e7d9      	b.n	8016652 <_free_r+0x102>
 801669e:	46c0      	nop			; (mov r8, r8)
 80166a0:	20000644 	.word	0x20000644
 80166a4:	20000a50 	.word	0x20000a50
 80166a8:	20006940 	.word	0x20006940
 80166ac:	2000064c 	.word	0x2000064c
 80166b0:	000001ff 	.word	0x000001ff
 80166b4:	00000554 	.word	0x00000554

080166b8 <rshift>:
 80166b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166ba:	0004      	movs	r4, r0
 80166bc:	6905      	ldr	r5, [r0, #16]
 80166be:	3414      	adds	r4, #20
 80166c0:	114b      	asrs	r3, r1, #5
 80166c2:	0026      	movs	r6, r4
 80166c4:	429d      	cmp	r5, r3
 80166c6:	dd14      	ble.n	80166f2 <rshift+0x3a>
 80166c8:	221f      	movs	r2, #31
 80166ca:	00ad      	lsls	r5, r5, #2
 80166cc:	009b      	lsls	r3, r3, #2
 80166ce:	4011      	ands	r1, r2
 80166d0:	1965      	adds	r5, r4, r5
 80166d2:	18e3      	adds	r3, r4, r3
 80166d4:	0022      	movs	r2, r4
 80166d6:	2900      	cmp	r1, #0
 80166d8:	d01e      	beq.n	8016718 <rshift+0x60>
 80166da:	cb04      	ldmia	r3!, {r2}
 80166dc:	2720      	movs	r7, #32
 80166de:	40ca      	lsrs	r2, r1
 80166e0:	46a4      	mov	ip, r4
 80166e2:	1a7f      	subs	r7, r7, r1
 80166e4:	4666      	mov	r6, ip
 80166e6:	429d      	cmp	r5, r3
 80166e8:	d80b      	bhi.n	8016702 <rshift+0x4a>
 80166ea:	6032      	str	r2, [r6, #0]
 80166ec:	2a00      	cmp	r2, #0
 80166ee:	d000      	beq.n	80166f2 <rshift+0x3a>
 80166f0:	3604      	adds	r6, #4
 80166f2:	1b33      	subs	r3, r6, r4
 80166f4:	109b      	asrs	r3, r3, #2
 80166f6:	6103      	str	r3, [r0, #16]
 80166f8:	42a6      	cmp	r6, r4
 80166fa:	d101      	bne.n	8016700 <rshift+0x48>
 80166fc:	2300      	movs	r3, #0
 80166fe:	6143      	str	r3, [r0, #20]
 8016700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016702:	681e      	ldr	r6, [r3, #0]
 8016704:	40be      	lsls	r6, r7
 8016706:	4332      	orrs	r2, r6
 8016708:	4666      	mov	r6, ip
 801670a:	c604      	stmia	r6!, {r2}
 801670c:	cb04      	ldmia	r3!, {r2}
 801670e:	46b4      	mov	ip, r6
 8016710:	40ca      	lsrs	r2, r1
 8016712:	e7e7      	b.n	80166e4 <rshift+0x2c>
 8016714:	cb02      	ldmia	r3!, {r1}
 8016716:	c202      	stmia	r2!, {r1}
 8016718:	0016      	movs	r6, r2
 801671a:	429d      	cmp	r5, r3
 801671c:	d8fa      	bhi.n	8016714 <rshift+0x5c>
 801671e:	e7e8      	b.n	80166f2 <rshift+0x3a>

08016720 <__hexdig_fun>:
 8016720:	0003      	movs	r3, r0
 8016722:	3b30      	subs	r3, #48	; 0x30
 8016724:	2b09      	cmp	r3, #9
 8016726:	d803      	bhi.n	8016730 <__hexdig_fun+0x10>
 8016728:	3820      	subs	r0, #32
 801672a:	b2c3      	uxtb	r3, r0
 801672c:	0018      	movs	r0, r3
 801672e:	4770      	bx	lr
 8016730:	0003      	movs	r3, r0
 8016732:	3b61      	subs	r3, #97	; 0x61
 8016734:	2b05      	cmp	r3, #5
 8016736:	d801      	bhi.n	801673c <__hexdig_fun+0x1c>
 8016738:	3847      	subs	r0, #71	; 0x47
 801673a:	e7f6      	b.n	801672a <__hexdig_fun+0xa>
 801673c:	0002      	movs	r2, r0
 801673e:	3a41      	subs	r2, #65	; 0x41
 8016740:	2300      	movs	r3, #0
 8016742:	2a05      	cmp	r2, #5
 8016744:	d8f2      	bhi.n	801672c <__hexdig_fun+0xc>
 8016746:	3827      	subs	r0, #39	; 0x27
 8016748:	e7ef      	b.n	801672a <__hexdig_fun+0xa>

0801674a <__gethex>:
 801674a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801674c:	b08d      	sub	sp, #52	; 0x34
 801674e:	9005      	str	r0, [sp, #20]
 8016750:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016752:	9109      	str	r1, [sp, #36]	; 0x24
 8016754:	9202      	str	r2, [sp, #8]
 8016756:	930a      	str	r3, [sp, #40]	; 0x28
 8016758:	f000 fadf 	bl	8016d1a <__localeconv_l>
 801675c:	6803      	ldr	r3, [r0, #0]
 801675e:	0018      	movs	r0, r3
 8016760:	9307      	str	r3, [sp, #28]
 8016762:	f7e9 fcd9 	bl	8000118 <strlen>
 8016766:	2202      	movs	r2, #2
 8016768:	9b07      	ldr	r3, [sp, #28]
 801676a:	4252      	negs	r2, r2
 801676c:	181b      	adds	r3, r3, r0
 801676e:	3b01      	subs	r3, #1
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	9004      	str	r0, [sp, #16]
 8016774:	930b      	str	r3, [sp, #44]	; 0x2c
 8016776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016778:	6819      	ldr	r1, [r3, #0]
 801677a:	1c8b      	adds	r3, r1, #2
 801677c:	1a52      	subs	r2, r2, r1
 801677e:	18d1      	adds	r1, r2, r3
 8016780:	9301      	str	r3, [sp, #4]
 8016782:	9108      	str	r1, [sp, #32]
 8016784:	9901      	ldr	r1, [sp, #4]
 8016786:	3301      	adds	r3, #1
 8016788:	7808      	ldrb	r0, [r1, #0]
 801678a:	2830      	cmp	r0, #48	; 0x30
 801678c:	d0f7      	beq.n	801677e <__gethex+0x34>
 801678e:	f7ff ffc7 	bl	8016720 <__hexdig_fun>
 8016792:	1e07      	subs	r7, r0, #0
 8016794:	d000      	beq.n	8016798 <__gethex+0x4e>
 8016796:	e06f      	b.n	8016878 <__gethex+0x12e>
 8016798:	9a04      	ldr	r2, [sp, #16]
 801679a:	9907      	ldr	r1, [sp, #28]
 801679c:	9801      	ldr	r0, [sp, #4]
 801679e:	f7fc fe4b 	bl	8013438 <strncmp>
 80167a2:	2800      	cmp	r0, #0
 80167a4:	d000      	beq.n	80167a8 <__gethex+0x5e>
 80167a6:	e06d      	b.n	8016884 <__gethex+0x13a>
 80167a8:	9b01      	ldr	r3, [sp, #4]
 80167aa:	9a04      	ldr	r2, [sp, #16]
 80167ac:	189c      	adds	r4, r3, r2
 80167ae:	7820      	ldrb	r0, [r4, #0]
 80167b0:	f7ff ffb6 	bl	8016720 <__hexdig_fun>
 80167b4:	2800      	cmp	r0, #0
 80167b6:	d069      	beq.n	801688c <__gethex+0x142>
 80167b8:	9401      	str	r4, [sp, #4]
 80167ba:	9b01      	ldr	r3, [sp, #4]
 80167bc:	7818      	ldrb	r0, [r3, #0]
 80167be:	2830      	cmp	r0, #48	; 0x30
 80167c0:	d009      	beq.n	80167d6 <__gethex+0x8c>
 80167c2:	f7ff ffad 	bl	8016720 <__hexdig_fun>
 80167c6:	4243      	negs	r3, r0
 80167c8:	4143      	adcs	r3, r0
 80167ca:	9303      	str	r3, [sp, #12]
 80167cc:	2301      	movs	r3, #1
 80167ce:	0026      	movs	r6, r4
 80167d0:	9308      	str	r3, [sp, #32]
 80167d2:	9c01      	ldr	r4, [sp, #4]
 80167d4:	e004      	b.n	80167e0 <__gethex+0x96>
 80167d6:	9b01      	ldr	r3, [sp, #4]
 80167d8:	3301      	adds	r3, #1
 80167da:	9301      	str	r3, [sp, #4]
 80167dc:	e7ed      	b.n	80167ba <__gethex+0x70>
 80167de:	3401      	adds	r4, #1
 80167e0:	7820      	ldrb	r0, [r4, #0]
 80167e2:	f7ff ff9d 	bl	8016720 <__hexdig_fun>
 80167e6:	2800      	cmp	r0, #0
 80167e8:	d1f9      	bne.n	80167de <__gethex+0x94>
 80167ea:	9a04      	ldr	r2, [sp, #16]
 80167ec:	9907      	ldr	r1, [sp, #28]
 80167ee:	0020      	movs	r0, r4
 80167f0:	f7fc fe22 	bl	8013438 <strncmp>
 80167f4:	2800      	cmp	r0, #0
 80167f6:	d109      	bne.n	801680c <__gethex+0xc2>
 80167f8:	2e00      	cmp	r6, #0
 80167fa:	d10a      	bne.n	8016812 <__gethex+0xc8>
 80167fc:	9b04      	ldr	r3, [sp, #16]
 80167fe:	18e4      	adds	r4, r4, r3
 8016800:	0026      	movs	r6, r4
 8016802:	7820      	ldrb	r0, [r4, #0]
 8016804:	f7ff ff8c 	bl	8016720 <__hexdig_fun>
 8016808:	2800      	cmp	r0, #0
 801680a:	d139      	bne.n	8016880 <__gethex+0x136>
 801680c:	2700      	movs	r7, #0
 801680e:	42be      	cmp	r6, r7
 8016810:	d001      	beq.n	8016816 <__gethex+0xcc>
 8016812:	1b37      	subs	r7, r6, r4
 8016814:	00bf      	lsls	r7, r7, #2
 8016816:	7823      	ldrb	r3, [r4, #0]
 8016818:	2b50      	cmp	r3, #80	; 0x50
 801681a:	d001      	beq.n	8016820 <__gethex+0xd6>
 801681c:	2b70      	cmp	r3, #112	; 0x70
 801681e:	d142      	bne.n	80168a6 <__gethex+0x15c>
 8016820:	7863      	ldrb	r3, [r4, #1]
 8016822:	2b2b      	cmp	r3, #43	; 0x2b
 8016824:	d034      	beq.n	8016890 <__gethex+0x146>
 8016826:	2b2d      	cmp	r3, #45	; 0x2d
 8016828:	d036      	beq.n	8016898 <__gethex+0x14e>
 801682a:	2300      	movs	r3, #0
 801682c:	1c66      	adds	r6, r4, #1
 801682e:	9306      	str	r3, [sp, #24]
 8016830:	7830      	ldrb	r0, [r6, #0]
 8016832:	f7ff ff75 	bl	8016720 <__hexdig_fun>
 8016836:	1e43      	subs	r3, r0, #1
 8016838:	b2db      	uxtb	r3, r3
 801683a:	2b18      	cmp	r3, #24
 801683c:	d833      	bhi.n	80168a6 <__gethex+0x15c>
 801683e:	3810      	subs	r0, #16
 8016840:	0005      	movs	r5, r0
 8016842:	3601      	adds	r6, #1
 8016844:	7830      	ldrb	r0, [r6, #0]
 8016846:	f7ff ff6b 	bl	8016720 <__hexdig_fun>
 801684a:	1e43      	subs	r3, r0, #1
 801684c:	b2db      	uxtb	r3, r3
 801684e:	2b18      	cmp	r3, #24
 8016850:	d924      	bls.n	801689c <__gethex+0x152>
 8016852:	9b06      	ldr	r3, [sp, #24]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d000      	beq.n	801685a <__gethex+0x110>
 8016858:	426d      	negs	r5, r5
 801685a:	197f      	adds	r7, r7, r5
 801685c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801685e:	601e      	str	r6, [r3, #0]
 8016860:	9b03      	ldr	r3, [sp, #12]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d021      	beq.n	80168aa <__gethex+0x160>
 8016866:	9b08      	ldr	r3, [sp, #32]
 8016868:	2606      	movs	r6, #6
 801686a:	425a      	negs	r2, r3
 801686c:	4153      	adcs	r3, r2
 801686e:	425b      	negs	r3, r3
 8016870:	401e      	ands	r6, r3
 8016872:	0030      	movs	r0, r6
 8016874:	b00d      	add	sp, #52	; 0x34
 8016876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016878:	2300      	movs	r3, #0
 801687a:	9303      	str	r3, [sp, #12]
 801687c:	001e      	movs	r6, r3
 801687e:	e7a8      	b.n	80167d2 <__gethex+0x88>
 8016880:	3401      	adds	r4, #1
 8016882:	e7be      	b.n	8016802 <__gethex+0xb8>
 8016884:	9c01      	ldr	r4, [sp, #4]
 8016886:	2301      	movs	r3, #1
 8016888:	9303      	str	r3, [sp, #12]
 801688a:	e7c4      	b.n	8016816 <__gethex+0xcc>
 801688c:	0007      	movs	r7, r0
 801688e:	e7fa      	b.n	8016886 <__gethex+0x13c>
 8016890:	2300      	movs	r3, #0
 8016892:	9306      	str	r3, [sp, #24]
 8016894:	1ca6      	adds	r6, r4, #2
 8016896:	e7cb      	b.n	8016830 <__gethex+0xe6>
 8016898:	2301      	movs	r3, #1
 801689a:	e7fa      	b.n	8016892 <__gethex+0x148>
 801689c:	230a      	movs	r3, #10
 801689e:	435d      	muls	r5, r3
 80168a0:	182d      	adds	r5, r5, r0
 80168a2:	3d10      	subs	r5, #16
 80168a4:	e7cd      	b.n	8016842 <__gethex+0xf8>
 80168a6:	0026      	movs	r6, r4
 80168a8:	e7d8      	b.n	801685c <__gethex+0x112>
 80168aa:	9b01      	ldr	r3, [sp, #4]
 80168ac:	9903      	ldr	r1, [sp, #12]
 80168ae:	1ae3      	subs	r3, r4, r3
 80168b0:	3b01      	subs	r3, #1
 80168b2:	2b07      	cmp	r3, #7
 80168b4:	dc47      	bgt.n	8016946 <__gethex+0x1fc>
 80168b6:	9805      	ldr	r0, [sp, #20]
 80168b8:	f000 fa5e 	bl	8016d78 <_Balloc>
 80168bc:	0003      	movs	r3, r0
 80168be:	3314      	adds	r3, #20
 80168c0:	9303      	str	r3, [sp, #12]
 80168c2:	9308      	str	r3, [sp, #32]
 80168c4:	2300      	movs	r3, #0
 80168c6:	0005      	movs	r5, r0
 80168c8:	001e      	movs	r6, r3
 80168ca:	9306      	str	r3, [sp, #24]
 80168cc:	9b01      	ldr	r3, [sp, #4]
 80168ce:	42a3      	cmp	r3, r4
 80168d0:	d33c      	bcc.n	801694c <__gethex+0x202>
 80168d2:	9c08      	ldr	r4, [sp, #32]
 80168d4:	9b03      	ldr	r3, [sp, #12]
 80168d6:	c440      	stmia	r4!, {r6}
 80168d8:	1ae4      	subs	r4, r4, r3
 80168da:	10a4      	asrs	r4, r4, #2
 80168dc:	612c      	str	r4, [r5, #16]
 80168de:	0030      	movs	r0, r6
 80168e0:	f000 faf8 	bl	8016ed4 <__hi0bits>
 80168e4:	9b02      	ldr	r3, [sp, #8]
 80168e6:	0164      	lsls	r4, r4, #5
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	1a26      	subs	r6, r4, r0
 80168ec:	9301      	str	r3, [sp, #4]
 80168ee:	429e      	cmp	r6, r3
 80168f0:	dd5f      	ble.n	80169b2 <__gethex+0x268>
 80168f2:	1af6      	subs	r6, r6, r3
 80168f4:	0031      	movs	r1, r6
 80168f6:	0028      	movs	r0, r5
 80168f8:	f000 fde3 	bl	80174c2 <__any_on>
 80168fc:	1e04      	subs	r4, r0, #0
 80168fe:	d00f      	beq.n	8016920 <__gethex+0x1d6>
 8016900:	2401      	movs	r4, #1
 8016902:	211f      	movs	r1, #31
 8016904:	0020      	movs	r0, r4
 8016906:	1e73      	subs	r3, r6, #1
 8016908:	4019      	ands	r1, r3
 801690a:	4088      	lsls	r0, r1
 801690c:	0001      	movs	r1, r0
 801690e:	115a      	asrs	r2, r3, #5
 8016910:	9803      	ldr	r0, [sp, #12]
 8016912:	0092      	lsls	r2, r2, #2
 8016914:	5812      	ldr	r2, [r2, r0]
 8016916:	420a      	tst	r2, r1
 8016918:	d002      	beq.n	8016920 <__gethex+0x1d6>
 801691a:	42a3      	cmp	r3, r4
 801691c:	dc41      	bgt.n	80169a2 <__gethex+0x258>
 801691e:	2402      	movs	r4, #2
 8016920:	0031      	movs	r1, r6
 8016922:	0028      	movs	r0, r5
 8016924:	f7ff fec8 	bl	80166b8 <rshift>
 8016928:	19bf      	adds	r7, r7, r6
 801692a:	9b02      	ldr	r3, [sp, #8]
 801692c:	689b      	ldr	r3, [r3, #8]
 801692e:	9304      	str	r3, [sp, #16]
 8016930:	42bb      	cmp	r3, r7
 8016932:	da4e      	bge.n	80169d2 <__gethex+0x288>
 8016934:	0029      	movs	r1, r5
 8016936:	9805      	ldr	r0, [sp, #20]
 8016938:	f000 fa46 	bl	8016dc8 <_Bfree>
 801693c:	2300      	movs	r3, #0
 801693e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016940:	26a3      	movs	r6, #163	; 0xa3
 8016942:	6013      	str	r3, [r2, #0]
 8016944:	e795      	b.n	8016872 <__gethex+0x128>
 8016946:	3101      	adds	r1, #1
 8016948:	105b      	asrs	r3, r3, #1
 801694a:	e7b2      	b.n	80168b2 <__gethex+0x168>
 801694c:	1e63      	subs	r3, r4, #1
 801694e:	9309      	str	r3, [sp, #36]	; 0x24
 8016950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	4293      	cmp	r3, r2
 8016956:	d015      	beq.n	8016984 <__gethex+0x23a>
 8016958:	9b06      	ldr	r3, [sp, #24]
 801695a:	2b20      	cmp	r3, #32
 801695c:	d105      	bne.n	801696a <__gethex+0x220>
 801695e:	9b08      	ldr	r3, [sp, #32]
 8016960:	601e      	str	r6, [r3, #0]
 8016962:	2600      	movs	r6, #0
 8016964:	3304      	adds	r3, #4
 8016966:	9308      	str	r3, [sp, #32]
 8016968:	9606      	str	r6, [sp, #24]
 801696a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801696c:	7818      	ldrb	r0, [r3, #0]
 801696e:	f7ff fed7 	bl	8016720 <__hexdig_fun>
 8016972:	230f      	movs	r3, #15
 8016974:	4018      	ands	r0, r3
 8016976:	9b06      	ldr	r3, [sp, #24]
 8016978:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801697a:	4098      	lsls	r0, r3
 801697c:	3304      	adds	r3, #4
 801697e:	4306      	orrs	r6, r0
 8016980:	9306      	str	r3, [sp, #24]
 8016982:	e7a3      	b.n	80168cc <__gethex+0x182>
 8016984:	2301      	movs	r3, #1
 8016986:	9a04      	ldr	r2, [sp, #16]
 8016988:	1a9c      	subs	r4, r3, r2
 801698a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801698c:	191c      	adds	r4, r3, r4
 801698e:	9b01      	ldr	r3, [sp, #4]
 8016990:	429c      	cmp	r4, r3
 8016992:	d3e1      	bcc.n	8016958 <__gethex+0x20e>
 8016994:	9907      	ldr	r1, [sp, #28]
 8016996:	0020      	movs	r0, r4
 8016998:	f7fc fd4e 	bl	8013438 <strncmp>
 801699c:	2800      	cmp	r0, #0
 801699e:	d1db      	bne.n	8016958 <__gethex+0x20e>
 80169a0:	e794      	b.n	80168cc <__gethex+0x182>
 80169a2:	1eb1      	subs	r1, r6, #2
 80169a4:	0028      	movs	r0, r5
 80169a6:	f000 fd8c 	bl	80174c2 <__any_on>
 80169aa:	2800      	cmp	r0, #0
 80169ac:	d0b7      	beq.n	801691e <__gethex+0x1d4>
 80169ae:	2403      	movs	r4, #3
 80169b0:	e7b6      	b.n	8016920 <__gethex+0x1d6>
 80169b2:	9b01      	ldr	r3, [sp, #4]
 80169b4:	2400      	movs	r4, #0
 80169b6:	429e      	cmp	r6, r3
 80169b8:	dab7      	bge.n	801692a <__gethex+0x1e0>
 80169ba:	1b9e      	subs	r6, r3, r6
 80169bc:	0029      	movs	r1, r5
 80169be:	0032      	movs	r2, r6
 80169c0:	9805      	ldr	r0, [sp, #20]
 80169c2:	f000 fbab 	bl	801711c <__lshift>
 80169c6:	0003      	movs	r3, r0
 80169c8:	3314      	adds	r3, #20
 80169ca:	0005      	movs	r5, r0
 80169cc:	1bbf      	subs	r7, r7, r6
 80169ce:	9303      	str	r3, [sp, #12]
 80169d0:	e7ab      	b.n	801692a <__gethex+0x1e0>
 80169d2:	9b02      	ldr	r3, [sp, #8]
 80169d4:	685e      	ldr	r6, [r3, #4]
 80169d6:	42be      	cmp	r6, r7
 80169d8:	dd6b      	ble.n	8016ab2 <__gethex+0x368>
 80169da:	9b01      	ldr	r3, [sp, #4]
 80169dc:	1bf6      	subs	r6, r6, r7
 80169de:	42b3      	cmp	r3, r6
 80169e0:	dc32      	bgt.n	8016a48 <__gethex+0x2fe>
 80169e2:	9b02      	ldr	r3, [sp, #8]
 80169e4:	68db      	ldr	r3, [r3, #12]
 80169e6:	2b02      	cmp	r3, #2
 80169e8:	d026      	beq.n	8016a38 <__gethex+0x2ee>
 80169ea:	2b03      	cmp	r3, #3
 80169ec:	d028      	beq.n	8016a40 <__gethex+0x2f6>
 80169ee:	2b01      	cmp	r3, #1
 80169f0:	d119      	bne.n	8016a26 <__gethex+0x2dc>
 80169f2:	9b01      	ldr	r3, [sp, #4]
 80169f4:	42b3      	cmp	r3, r6
 80169f6:	d116      	bne.n	8016a26 <__gethex+0x2dc>
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	dc0d      	bgt.n	8016a18 <__gethex+0x2ce>
 80169fc:	9b02      	ldr	r3, [sp, #8]
 80169fe:	2662      	movs	r6, #98	; 0x62
 8016a00:	685b      	ldr	r3, [r3, #4]
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	9a01      	ldr	r2, [sp, #4]
 8016a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a08:	601a      	str	r2, [r3, #0]
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	9a03      	ldr	r2, [sp, #12]
 8016a0e:	612b      	str	r3, [r5, #16]
 8016a10:	6013      	str	r3, [r2, #0]
 8016a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a14:	601d      	str	r5, [r3, #0]
 8016a16:	e72c      	b.n	8016872 <__gethex+0x128>
 8016a18:	9901      	ldr	r1, [sp, #4]
 8016a1a:	0028      	movs	r0, r5
 8016a1c:	3901      	subs	r1, #1
 8016a1e:	f000 fd50 	bl	80174c2 <__any_on>
 8016a22:	2800      	cmp	r0, #0
 8016a24:	d1ea      	bne.n	80169fc <__gethex+0x2b2>
 8016a26:	0029      	movs	r1, r5
 8016a28:	9805      	ldr	r0, [sp, #20]
 8016a2a:	f000 f9cd 	bl	8016dc8 <_Bfree>
 8016a2e:	2300      	movs	r3, #0
 8016a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a32:	2650      	movs	r6, #80	; 0x50
 8016a34:	6013      	str	r3, [r2, #0]
 8016a36:	e71c      	b.n	8016872 <__gethex+0x128>
 8016a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d0de      	beq.n	80169fc <__gethex+0x2b2>
 8016a3e:	e7f2      	b.n	8016a26 <__gethex+0x2dc>
 8016a40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d1da      	bne.n	80169fc <__gethex+0x2b2>
 8016a46:	e7ee      	b.n	8016a26 <__gethex+0x2dc>
 8016a48:	1e77      	subs	r7, r6, #1
 8016a4a:	2c00      	cmp	r4, #0
 8016a4c:	d12f      	bne.n	8016aae <__gethex+0x364>
 8016a4e:	2f00      	cmp	r7, #0
 8016a50:	d004      	beq.n	8016a5c <__gethex+0x312>
 8016a52:	0039      	movs	r1, r7
 8016a54:	0028      	movs	r0, r5
 8016a56:	f000 fd34 	bl	80174c2 <__any_on>
 8016a5a:	0004      	movs	r4, r0
 8016a5c:	231f      	movs	r3, #31
 8016a5e:	117a      	asrs	r2, r7, #5
 8016a60:	401f      	ands	r7, r3
 8016a62:	3b1e      	subs	r3, #30
 8016a64:	40bb      	lsls	r3, r7
 8016a66:	9903      	ldr	r1, [sp, #12]
 8016a68:	0092      	lsls	r2, r2, #2
 8016a6a:	5852      	ldr	r2, [r2, r1]
 8016a6c:	421a      	tst	r2, r3
 8016a6e:	d001      	beq.n	8016a74 <__gethex+0x32a>
 8016a70:	2302      	movs	r3, #2
 8016a72:	431c      	orrs	r4, r3
 8016a74:	9b01      	ldr	r3, [sp, #4]
 8016a76:	0031      	movs	r1, r6
 8016a78:	1b9b      	subs	r3, r3, r6
 8016a7a:	2602      	movs	r6, #2
 8016a7c:	0028      	movs	r0, r5
 8016a7e:	9301      	str	r3, [sp, #4]
 8016a80:	f7ff fe1a 	bl	80166b8 <rshift>
 8016a84:	9b02      	ldr	r3, [sp, #8]
 8016a86:	685f      	ldr	r7, [r3, #4]
 8016a88:	2c00      	cmp	r4, #0
 8016a8a:	d040      	beq.n	8016b0e <__gethex+0x3c4>
 8016a8c:	9b02      	ldr	r3, [sp, #8]
 8016a8e:	68db      	ldr	r3, [r3, #12]
 8016a90:	2b02      	cmp	r3, #2
 8016a92:	d010      	beq.n	8016ab6 <__gethex+0x36c>
 8016a94:	2b03      	cmp	r3, #3
 8016a96:	d012      	beq.n	8016abe <__gethex+0x374>
 8016a98:	2b01      	cmp	r3, #1
 8016a9a:	d106      	bne.n	8016aaa <__gethex+0x360>
 8016a9c:	07a2      	lsls	r2, r4, #30
 8016a9e:	d504      	bpl.n	8016aaa <__gethex+0x360>
 8016aa0:	9a03      	ldr	r2, [sp, #12]
 8016aa2:	6812      	ldr	r2, [r2, #0]
 8016aa4:	4314      	orrs	r4, r2
 8016aa6:	421c      	tst	r4, r3
 8016aa8:	d10c      	bne.n	8016ac4 <__gethex+0x37a>
 8016aaa:	2310      	movs	r3, #16
 8016aac:	e02e      	b.n	8016b0c <__gethex+0x3c2>
 8016aae:	2401      	movs	r4, #1
 8016ab0:	e7d4      	b.n	8016a5c <__gethex+0x312>
 8016ab2:	2601      	movs	r6, #1
 8016ab4:	e7e8      	b.n	8016a88 <__gethex+0x33e>
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016aba:	1a9b      	subs	r3, r3, r2
 8016abc:	9313      	str	r3, [sp, #76]	; 0x4c
 8016abe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d0f2      	beq.n	8016aaa <__gethex+0x360>
 8016ac4:	692c      	ldr	r4, [r5, #16]
 8016ac6:	00a3      	lsls	r3, r4, #2
 8016ac8:	9304      	str	r3, [sp, #16]
 8016aca:	002b      	movs	r3, r5
 8016acc:	00a2      	lsls	r2, r4, #2
 8016ace:	3314      	adds	r3, #20
 8016ad0:	1899      	adds	r1, r3, r2
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	4694      	mov	ip, r2
 8016ad6:	681a      	ldr	r2, [r3, #0]
 8016ad8:	1c50      	adds	r0, r2, #1
 8016ada:	d01d      	beq.n	8016b18 <__gethex+0x3ce>
 8016adc:	3201      	adds	r2, #1
 8016ade:	601a      	str	r2, [r3, #0]
 8016ae0:	002b      	movs	r3, r5
 8016ae2:	3314      	adds	r3, #20
 8016ae4:	2e02      	cmp	r6, #2
 8016ae6:	d13a      	bne.n	8016b5e <__gethex+0x414>
 8016ae8:	9a02      	ldr	r2, [sp, #8]
 8016aea:	9901      	ldr	r1, [sp, #4]
 8016aec:	6812      	ldr	r2, [r2, #0]
 8016aee:	3a01      	subs	r2, #1
 8016af0:	428a      	cmp	r2, r1
 8016af2:	d10a      	bne.n	8016b0a <__gethex+0x3c0>
 8016af4:	114a      	asrs	r2, r1, #5
 8016af6:	211f      	movs	r1, #31
 8016af8:	9801      	ldr	r0, [sp, #4]
 8016afa:	0092      	lsls	r2, r2, #2
 8016afc:	4001      	ands	r1, r0
 8016afe:	2001      	movs	r0, #1
 8016b00:	0004      	movs	r4, r0
 8016b02:	408c      	lsls	r4, r1
 8016b04:	58d3      	ldr	r3, [r2, r3]
 8016b06:	4223      	tst	r3, r4
 8016b08:	d148      	bne.n	8016b9c <__gethex+0x452>
 8016b0a:	2320      	movs	r3, #32
 8016b0c:	431e      	orrs	r6, r3
 8016b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016b10:	601d      	str	r5, [r3, #0]
 8016b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b14:	601f      	str	r7, [r3, #0]
 8016b16:	e6ac      	b.n	8016872 <__gethex+0x128>
 8016b18:	4662      	mov	r2, ip
 8016b1a:	c304      	stmia	r3!, {r2}
 8016b1c:	4299      	cmp	r1, r3
 8016b1e:	d8da      	bhi.n	8016ad6 <__gethex+0x38c>
 8016b20:	68ab      	ldr	r3, [r5, #8]
 8016b22:	429c      	cmp	r4, r3
 8016b24:	db12      	blt.n	8016b4c <__gethex+0x402>
 8016b26:	686b      	ldr	r3, [r5, #4]
 8016b28:	9805      	ldr	r0, [sp, #20]
 8016b2a:	1c59      	adds	r1, r3, #1
 8016b2c:	f000 f924 	bl	8016d78 <_Balloc>
 8016b30:	0029      	movs	r1, r5
 8016b32:	692b      	ldr	r3, [r5, #16]
 8016b34:	9003      	str	r0, [sp, #12]
 8016b36:	1c9a      	adds	r2, r3, #2
 8016b38:	0092      	lsls	r2, r2, #2
 8016b3a:	310c      	adds	r1, #12
 8016b3c:	300c      	adds	r0, #12
 8016b3e:	f7fc fa34 	bl	8012faa <memcpy>
 8016b42:	0029      	movs	r1, r5
 8016b44:	9805      	ldr	r0, [sp, #20]
 8016b46:	f000 f93f 	bl	8016dc8 <_Bfree>
 8016b4a:	9d03      	ldr	r5, [sp, #12]
 8016b4c:	692b      	ldr	r3, [r5, #16]
 8016b4e:	1c5a      	adds	r2, r3, #1
 8016b50:	612a      	str	r2, [r5, #16]
 8016b52:	2201      	movs	r2, #1
 8016b54:	3304      	adds	r3, #4
 8016b56:	009b      	lsls	r3, r3, #2
 8016b58:	18eb      	adds	r3, r5, r3
 8016b5a:	605a      	str	r2, [r3, #4]
 8016b5c:	e7c0      	b.n	8016ae0 <__gethex+0x396>
 8016b5e:	692a      	ldr	r2, [r5, #16]
 8016b60:	42a2      	cmp	r2, r4
 8016b62:	dd0a      	ble.n	8016b7a <__gethex+0x430>
 8016b64:	2101      	movs	r1, #1
 8016b66:	0028      	movs	r0, r5
 8016b68:	f7ff fda6 	bl	80166b8 <rshift>
 8016b6c:	9b02      	ldr	r3, [sp, #8]
 8016b6e:	3701      	adds	r7, #1
 8016b70:	689b      	ldr	r3, [r3, #8]
 8016b72:	2601      	movs	r6, #1
 8016b74:	42bb      	cmp	r3, r7
 8016b76:	dac8      	bge.n	8016b0a <__gethex+0x3c0>
 8016b78:	e6dc      	b.n	8016934 <__gethex+0x1ea>
 8016b7a:	241f      	movs	r4, #31
 8016b7c:	9a01      	ldr	r2, [sp, #4]
 8016b7e:	2601      	movs	r6, #1
 8016b80:	4022      	ands	r2, r4
 8016b82:	1e14      	subs	r4, r2, #0
 8016b84:	d0c1      	beq.n	8016b0a <__gethex+0x3c0>
 8016b86:	9a04      	ldr	r2, [sp, #16]
 8016b88:	189b      	adds	r3, r3, r2
 8016b8a:	3b04      	subs	r3, #4
 8016b8c:	6818      	ldr	r0, [r3, #0]
 8016b8e:	f000 f9a1 	bl	8016ed4 <__hi0bits>
 8016b92:	2120      	movs	r1, #32
 8016b94:	1b0c      	subs	r4, r1, r4
 8016b96:	42a0      	cmp	r0, r4
 8016b98:	dbe4      	blt.n	8016b64 <__gethex+0x41a>
 8016b9a:	e7b6      	b.n	8016b0a <__gethex+0x3c0>
 8016b9c:	0006      	movs	r6, r0
 8016b9e:	e7b4      	b.n	8016b0a <__gethex+0x3c0>

08016ba0 <L_shift>:
 8016ba0:	2308      	movs	r3, #8
 8016ba2:	b570      	push	{r4, r5, r6, lr}
 8016ba4:	2520      	movs	r5, #32
 8016ba6:	1a9a      	subs	r2, r3, r2
 8016ba8:	0092      	lsls	r2, r2, #2
 8016baa:	1aad      	subs	r5, r5, r2
 8016bac:	6843      	ldr	r3, [r0, #4]
 8016bae:	6806      	ldr	r6, [r0, #0]
 8016bb0:	001c      	movs	r4, r3
 8016bb2:	40ac      	lsls	r4, r5
 8016bb4:	40d3      	lsrs	r3, r2
 8016bb6:	4334      	orrs	r4, r6
 8016bb8:	6004      	str	r4, [r0, #0]
 8016bba:	6043      	str	r3, [r0, #4]
 8016bbc:	3004      	adds	r0, #4
 8016bbe:	4288      	cmp	r0, r1
 8016bc0:	d3f4      	bcc.n	8016bac <L_shift+0xc>
 8016bc2:	bd70      	pop	{r4, r5, r6, pc}

08016bc4 <__match>:
 8016bc4:	b530      	push	{r4, r5, lr}
 8016bc6:	6803      	ldr	r3, [r0, #0]
 8016bc8:	780c      	ldrb	r4, [r1, #0]
 8016bca:	3301      	adds	r3, #1
 8016bcc:	2c00      	cmp	r4, #0
 8016bce:	d102      	bne.n	8016bd6 <__match+0x12>
 8016bd0:	6003      	str	r3, [r0, #0]
 8016bd2:	2001      	movs	r0, #1
 8016bd4:	bd30      	pop	{r4, r5, pc}
 8016bd6:	781a      	ldrb	r2, [r3, #0]
 8016bd8:	0015      	movs	r5, r2
 8016bda:	3d41      	subs	r5, #65	; 0x41
 8016bdc:	2d19      	cmp	r5, #25
 8016bde:	d800      	bhi.n	8016be2 <__match+0x1e>
 8016be0:	3220      	adds	r2, #32
 8016be2:	3101      	adds	r1, #1
 8016be4:	42a2      	cmp	r2, r4
 8016be6:	d0ef      	beq.n	8016bc8 <__match+0x4>
 8016be8:	2000      	movs	r0, #0
 8016bea:	e7f3      	b.n	8016bd4 <__match+0x10>

08016bec <__hexnan>:
 8016bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bee:	b08b      	sub	sp, #44	; 0x2c
 8016bf0:	9201      	str	r2, [sp, #4]
 8016bf2:	680a      	ldr	r2, [r1, #0]
 8016bf4:	9901      	ldr	r1, [sp, #4]
 8016bf6:	1153      	asrs	r3, r2, #5
 8016bf8:	009b      	lsls	r3, r3, #2
 8016bfa:	18cb      	adds	r3, r1, r3
 8016bfc:	9304      	str	r3, [sp, #16]
 8016bfe:	231f      	movs	r3, #31
 8016c00:	401a      	ands	r2, r3
 8016c02:	9008      	str	r0, [sp, #32]
 8016c04:	9206      	str	r2, [sp, #24]
 8016c06:	d002      	beq.n	8016c0e <__hexnan+0x22>
 8016c08:	9b04      	ldr	r3, [sp, #16]
 8016c0a:	3304      	adds	r3, #4
 8016c0c:	9304      	str	r3, [sp, #16]
 8016c0e:	9b04      	ldr	r3, [sp, #16]
 8016c10:	2500      	movs	r5, #0
 8016c12:	1f1e      	subs	r6, r3, #4
 8016c14:	0037      	movs	r7, r6
 8016c16:	0034      	movs	r4, r6
 8016c18:	9b08      	ldr	r3, [sp, #32]
 8016c1a:	6035      	str	r5, [r6, #0]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	9507      	str	r5, [sp, #28]
 8016c20:	9305      	str	r3, [sp, #20]
 8016c22:	9502      	str	r5, [sp, #8]
 8016c24:	9b05      	ldr	r3, [sp, #20]
 8016c26:	3301      	adds	r3, #1
 8016c28:	9309      	str	r3, [sp, #36]	; 0x24
 8016c2a:	9b05      	ldr	r3, [sp, #20]
 8016c2c:	785b      	ldrb	r3, [r3, #1]
 8016c2e:	9303      	str	r3, [sp, #12]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d028      	beq.n	8016c86 <__hexnan+0x9a>
 8016c34:	9803      	ldr	r0, [sp, #12]
 8016c36:	f7ff fd73 	bl	8016720 <__hexdig_fun>
 8016c3a:	2800      	cmp	r0, #0
 8016c3c:	d145      	bne.n	8016cca <__hexnan+0xde>
 8016c3e:	9b03      	ldr	r3, [sp, #12]
 8016c40:	2b20      	cmp	r3, #32
 8016c42:	d819      	bhi.n	8016c78 <__hexnan+0x8c>
 8016c44:	9b02      	ldr	r3, [sp, #8]
 8016c46:	9a07      	ldr	r2, [sp, #28]
 8016c48:	4293      	cmp	r3, r2
 8016c4a:	dd12      	ble.n	8016c72 <__hexnan+0x86>
 8016c4c:	42bc      	cmp	r4, r7
 8016c4e:	d206      	bcs.n	8016c5e <__hexnan+0x72>
 8016c50:	2d07      	cmp	r5, #7
 8016c52:	dc04      	bgt.n	8016c5e <__hexnan+0x72>
 8016c54:	002a      	movs	r2, r5
 8016c56:	0039      	movs	r1, r7
 8016c58:	0020      	movs	r0, r4
 8016c5a:	f7ff ffa1 	bl	8016ba0 <L_shift>
 8016c5e:	9b01      	ldr	r3, [sp, #4]
 8016c60:	2508      	movs	r5, #8
 8016c62:	429c      	cmp	r4, r3
 8016c64:	d905      	bls.n	8016c72 <__hexnan+0x86>
 8016c66:	1f27      	subs	r7, r4, #4
 8016c68:	2500      	movs	r5, #0
 8016c6a:	003c      	movs	r4, r7
 8016c6c:	9b02      	ldr	r3, [sp, #8]
 8016c6e:	603d      	str	r5, [r7, #0]
 8016c70:	9307      	str	r3, [sp, #28]
 8016c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c74:	9305      	str	r3, [sp, #20]
 8016c76:	e7d5      	b.n	8016c24 <__hexnan+0x38>
 8016c78:	9b03      	ldr	r3, [sp, #12]
 8016c7a:	2b29      	cmp	r3, #41	; 0x29
 8016c7c:	d14a      	bne.n	8016d14 <__hexnan+0x128>
 8016c7e:	9b05      	ldr	r3, [sp, #20]
 8016c80:	9a08      	ldr	r2, [sp, #32]
 8016c82:	3302      	adds	r3, #2
 8016c84:	6013      	str	r3, [r2, #0]
 8016c86:	9b02      	ldr	r3, [sp, #8]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d043      	beq.n	8016d14 <__hexnan+0x128>
 8016c8c:	42bc      	cmp	r4, r7
 8016c8e:	d206      	bcs.n	8016c9e <__hexnan+0xb2>
 8016c90:	2d07      	cmp	r5, #7
 8016c92:	dc04      	bgt.n	8016c9e <__hexnan+0xb2>
 8016c94:	002a      	movs	r2, r5
 8016c96:	0039      	movs	r1, r7
 8016c98:	0020      	movs	r0, r4
 8016c9a:	f7ff ff81 	bl	8016ba0 <L_shift>
 8016c9e:	9b01      	ldr	r3, [sp, #4]
 8016ca0:	429c      	cmp	r4, r3
 8016ca2:	d926      	bls.n	8016cf2 <__hexnan+0x106>
 8016ca4:	cc04      	ldmia	r4!, {r2}
 8016ca6:	601a      	str	r2, [r3, #0]
 8016ca8:	3304      	adds	r3, #4
 8016caa:	42a6      	cmp	r6, r4
 8016cac:	d2fa      	bcs.n	8016ca4 <__hexnan+0xb8>
 8016cae:	2200      	movs	r2, #0
 8016cb0:	c304      	stmia	r3!, {r2}
 8016cb2:	429e      	cmp	r6, r3
 8016cb4:	d2fc      	bcs.n	8016cb0 <__hexnan+0xc4>
 8016cb6:	6833      	ldr	r3, [r6, #0]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d104      	bne.n	8016cc6 <__hexnan+0xda>
 8016cbc:	9b01      	ldr	r3, [sp, #4]
 8016cbe:	429e      	cmp	r6, r3
 8016cc0:	d126      	bne.n	8016d10 <__hexnan+0x124>
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	6033      	str	r3, [r6, #0]
 8016cc6:	2005      	movs	r0, #5
 8016cc8:	e025      	b.n	8016d16 <__hexnan+0x12a>
 8016cca:	9b02      	ldr	r3, [sp, #8]
 8016ccc:	3501      	adds	r5, #1
 8016cce:	3301      	adds	r3, #1
 8016cd0:	9302      	str	r3, [sp, #8]
 8016cd2:	2d08      	cmp	r5, #8
 8016cd4:	dd06      	ble.n	8016ce4 <__hexnan+0xf8>
 8016cd6:	9b01      	ldr	r3, [sp, #4]
 8016cd8:	429c      	cmp	r4, r3
 8016cda:	d9ca      	bls.n	8016c72 <__hexnan+0x86>
 8016cdc:	2300      	movs	r3, #0
 8016cde:	2501      	movs	r5, #1
 8016ce0:	3c04      	subs	r4, #4
 8016ce2:	6023      	str	r3, [r4, #0]
 8016ce4:	220f      	movs	r2, #15
 8016ce6:	6823      	ldr	r3, [r4, #0]
 8016ce8:	4010      	ands	r0, r2
 8016cea:	011b      	lsls	r3, r3, #4
 8016cec:	4318      	orrs	r0, r3
 8016cee:	6020      	str	r0, [r4, #0]
 8016cf0:	e7bf      	b.n	8016c72 <__hexnan+0x86>
 8016cf2:	9b06      	ldr	r3, [sp, #24]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d0de      	beq.n	8016cb6 <__hexnan+0xca>
 8016cf8:	2120      	movs	r1, #32
 8016cfa:	9a06      	ldr	r2, [sp, #24]
 8016cfc:	9b04      	ldr	r3, [sp, #16]
 8016cfe:	1a89      	subs	r1, r1, r2
 8016d00:	2201      	movs	r2, #1
 8016d02:	4252      	negs	r2, r2
 8016d04:	40ca      	lsrs	r2, r1
 8016d06:	3b04      	subs	r3, #4
 8016d08:	6819      	ldr	r1, [r3, #0]
 8016d0a:	400a      	ands	r2, r1
 8016d0c:	601a      	str	r2, [r3, #0]
 8016d0e:	e7d2      	b.n	8016cb6 <__hexnan+0xca>
 8016d10:	3e04      	subs	r6, #4
 8016d12:	e7d0      	b.n	8016cb6 <__hexnan+0xca>
 8016d14:	2004      	movs	r0, #4
 8016d16:	b00b      	add	sp, #44	; 0x2c
 8016d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d1a <__localeconv_l>:
 8016d1a:	30f0      	adds	r0, #240	; 0xf0
 8016d1c:	4770      	bx	lr
	...

08016d20 <_localeconv_r>:
 8016d20:	4b03      	ldr	r3, [pc, #12]	; (8016d30 <_localeconv_r+0x10>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d100      	bne.n	8016d2c <_localeconv_r+0xc>
 8016d2a:	4802      	ldr	r0, [pc, #8]	; (8016d34 <_localeconv_r+0x14>)
 8016d2c:	30f0      	adds	r0, #240	; 0xf0
 8016d2e:	4770      	bx	lr
 8016d30:	200000a8 	.word	0x200000a8
 8016d34:	200004d8 	.word	0x200004d8

08016d38 <__retarget_lock_acquire_recursive>:
 8016d38:	4770      	bx	lr

08016d3a <__retarget_lock_release_recursive>:
 8016d3a:	4770      	bx	lr

08016d3c <memchr>:
 8016d3c:	b2c9      	uxtb	r1, r1
 8016d3e:	1882      	adds	r2, r0, r2
 8016d40:	4290      	cmp	r0, r2
 8016d42:	d101      	bne.n	8016d48 <memchr+0xc>
 8016d44:	2000      	movs	r0, #0
 8016d46:	4770      	bx	lr
 8016d48:	7803      	ldrb	r3, [r0, #0]
 8016d4a:	428b      	cmp	r3, r1
 8016d4c:	d0fb      	beq.n	8016d46 <memchr+0xa>
 8016d4e:	3001      	adds	r0, #1
 8016d50:	e7f6      	b.n	8016d40 <memchr+0x4>

08016d52 <memmove>:
 8016d52:	b510      	push	{r4, lr}
 8016d54:	4288      	cmp	r0, r1
 8016d56:	d902      	bls.n	8016d5e <memmove+0xc>
 8016d58:	188b      	adds	r3, r1, r2
 8016d5a:	4298      	cmp	r0, r3
 8016d5c:	d303      	bcc.n	8016d66 <memmove+0x14>
 8016d5e:	2300      	movs	r3, #0
 8016d60:	e007      	b.n	8016d72 <memmove+0x20>
 8016d62:	5c8b      	ldrb	r3, [r1, r2]
 8016d64:	5483      	strb	r3, [r0, r2]
 8016d66:	3a01      	subs	r2, #1
 8016d68:	d2fb      	bcs.n	8016d62 <memmove+0x10>
 8016d6a:	bd10      	pop	{r4, pc}
 8016d6c:	5ccc      	ldrb	r4, [r1, r3]
 8016d6e:	54c4      	strb	r4, [r0, r3]
 8016d70:	3301      	adds	r3, #1
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d1fa      	bne.n	8016d6c <memmove+0x1a>
 8016d76:	e7f8      	b.n	8016d6a <memmove+0x18>

08016d78 <_Balloc>:
 8016d78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016d7a:	b570      	push	{r4, r5, r6, lr}
 8016d7c:	0004      	movs	r4, r0
 8016d7e:	000d      	movs	r5, r1
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d012      	beq.n	8016daa <_Balloc+0x32>
 8016d84:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016d86:	00ab      	lsls	r3, r5, #2
 8016d88:	18d3      	adds	r3, r2, r3
 8016d8a:	6818      	ldr	r0, [r3, #0]
 8016d8c:	2800      	cmp	r0, #0
 8016d8e:	d115      	bne.n	8016dbc <_Balloc+0x44>
 8016d90:	2101      	movs	r1, #1
 8016d92:	000e      	movs	r6, r1
 8016d94:	40ae      	lsls	r6, r5
 8016d96:	1d72      	adds	r2, r6, #5
 8016d98:	0092      	lsls	r2, r2, #2
 8016d9a:	0020      	movs	r0, r4
 8016d9c:	f000 fcbe 	bl	801771c <_calloc_r>
 8016da0:	2800      	cmp	r0, #0
 8016da2:	d009      	beq.n	8016db8 <_Balloc+0x40>
 8016da4:	6045      	str	r5, [r0, #4]
 8016da6:	6086      	str	r6, [r0, #8]
 8016da8:	e00a      	b.n	8016dc0 <_Balloc+0x48>
 8016daa:	2221      	movs	r2, #33	; 0x21
 8016dac:	2104      	movs	r1, #4
 8016dae:	f000 fcb5 	bl	801771c <_calloc_r>
 8016db2:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016db4:	2800      	cmp	r0, #0
 8016db6:	d1e5      	bne.n	8016d84 <_Balloc+0xc>
 8016db8:	2000      	movs	r0, #0
 8016dba:	bd70      	pop	{r4, r5, r6, pc}
 8016dbc:	6802      	ldr	r2, [r0, #0]
 8016dbe:	601a      	str	r2, [r3, #0]
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	6103      	str	r3, [r0, #16]
 8016dc4:	60c3      	str	r3, [r0, #12]
 8016dc6:	e7f8      	b.n	8016dba <_Balloc+0x42>

08016dc8 <_Bfree>:
 8016dc8:	2900      	cmp	r1, #0
 8016dca:	d006      	beq.n	8016dda <_Bfree+0x12>
 8016dcc:	684b      	ldr	r3, [r1, #4]
 8016dce:	009a      	lsls	r2, r3, #2
 8016dd0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016dd2:	189b      	adds	r3, r3, r2
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	600a      	str	r2, [r1, #0]
 8016dd8:	6019      	str	r1, [r3, #0]
 8016dda:	4770      	bx	lr

08016ddc <__multadd>:
 8016ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016dde:	001e      	movs	r6, r3
 8016de0:	2314      	movs	r3, #20
 8016de2:	469c      	mov	ip, r3
 8016de4:	0007      	movs	r7, r0
 8016de6:	000c      	movs	r4, r1
 8016de8:	2000      	movs	r0, #0
 8016dea:	690d      	ldr	r5, [r1, #16]
 8016dec:	448c      	add	ip, r1
 8016dee:	4663      	mov	r3, ip
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	3001      	adds	r0, #1
 8016df4:	b299      	uxth	r1, r3
 8016df6:	4663      	mov	r3, ip
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	4351      	muls	r1, r2
 8016dfc:	0c1b      	lsrs	r3, r3, #16
 8016dfe:	4353      	muls	r3, r2
 8016e00:	1989      	adds	r1, r1, r6
 8016e02:	0c0e      	lsrs	r6, r1, #16
 8016e04:	199b      	adds	r3, r3, r6
 8016e06:	b289      	uxth	r1, r1
 8016e08:	0c1e      	lsrs	r6, r3, #16
 8016e0a:	041b      	lsls	r3, r3, #16
 8016e0c:	185b      	adds	r3, r3, r1
 8016e0e:	4661      	mov	r1, ip
 8016e10:	c108      	stmia	r1!, {r3}
 8016e12:	468c      	mov	ip, r1
 8016e14:	4285      	cmp	r5, r0
 8016e16:	dcea      	bgt.n	8016dee <__multadd+0x12>
 8016e18:	2e00      	cmp	r6, #0
 8016e1a:	d01b      	beq.n	8016e54 <__multadd+0x78>
 8016e1c:	68a3      	ldr	r3, [r4, #8]
 8016e1e:	42ab      	cmp	r3, r5
 8016e20:	dc12      	bgt.n	8016e48 <__multadd+0x6c>
 8016e22:	6863      	ldr	r3, [r4, #4]
 8016e24:	0038      	movs	r0, r7
 8016e26:	1c59      	adds	r1, r3, #1
 8016e28:	f7ff ffa6 	bl	8016d78 <_Balloc>
 8016e2c:	0021      	movs	r1, r4
 8016e2e:	6923      	ldr	r3, [r4, #16]
 8016e30:	9001      	str	r0, [sp, #4]
 8016e32:	1c9a      	adds	r2, r3, #2
 8016e34:	0092      	lsls	r2, r2, #2
 8016e36:	310c      	adds	r1, #12
 8016e38:	300c      	adds	r0, #12
 8016e3a:	f7fc f8b6 	bl	8012faa <memcpy>
 8016e3e:	0021      	movs	r1, r4
 8016e40:	0038      	movs	r0, r7
 8016e42:	f7ff ffc1 	bl	8016dc8 <_Bfree>
 8016e46:	9c01      	ldr	r4, [sp, #4]
 8016e48:	1d2b      	adds	r3, r5, #4
 8016e4a:	009b      	lsls	r3, r3, #2
 8016e4c:	18e3      	adds	r3, r4, r3
 8016e4e:	3501      	adds	r5, #1
 8016e50:	605e      	str	r6, [r3, #4]
 8016e52:	6125      	str	r5, [r4, #16]
 8016e54:	0020      	movs	r0, r4
 8016e56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016e58 <__s2b>:
 8016e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e5a:	0006      	movs	r6, r0
 8016e5c:	0018      	movs	r0, r3
 8016e5e:	000c      	movs	r4, r1
 8016e60:	3008      	adds	r0, #8
 8016e62:	2109      	movs	r1, #9
 8016e64:	9301      	str	r3, [sp, #4]
 8016e66:	0015      	movs	r5, r2
 8016e68:	f7e9 f9fc 	bl	8000264 <__divsi3>
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	2100      	movs	r1, #0
 8016e70:	4283      	cmp	r3, r0
 8016e72:	db1f      	blt.n	8016eb4 <__s2b+0x5c>
 8016e74:	0030      	movs	r0, r6
 8016e76:	f7ff ff7f 	bl	8016d78 <_Balloc>
 8016e7a:	9b08      	ldr	r3, [sp, #32]
 8016e7c:	6143      	str	r3, [r0, #20]
 8016e7e:	2301      	movs	r3, #1
 8016e80:	6103      	str	r3, [r0, #16]
 8016e82:	2d09      	cmp	r5, #9
 8016e84:	dd19      	ble.n	8016eba <__s2b+0x62>
 8016e86:	0023      	movs	r3, r4
 8016e88:	3309      	adds	r3, #9
 8016e8a:	001f      	movs	r7, r3
 8016e8c:	9300      	str	r3, [sp, #0]
 8016e8e:	1964      	adds	r4, r4, r5
 8016e90:	783b      	ldrb	r3, [r7, #0]
 8016e92:	0001      	movs	r1, r0
 8016e94:	3b30      	subs	r3, #48	; 0x30
 8016e96:	220a      	movs	r2, #10
 8016e98:	0030      	movs	r0, r6
 8016e9a:	3701      	adds	r7, #1
 8016e9c:	f7ff ff9e 	bl	8016ddc <__multadd>
 8016ea0:	42a7      	cmp	r7, r4
 8016ea2:	d1f5      	bne.n	8016e90 <__s2b+0x38>
 8016ea4:	9b00      	ldr	r3, [sp, #0]
 8016ea6:	195c      	adds	r4, r3, r5
 8016ea8:	3c08      	subs	r4, #8
 8016eaa:	002f      	movs	r7, r5
 8016eac:	9b01      	ldr	r3, [sp, #4]
 8016eae:	429f      	cmp	r7, r3
 8016eb0:	db06      	blt.n	8016ec0 <__s2b+0x68>
 8016eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016eb4:	005b      	lsls	r3, r3, #1
 8016eb6:	3101      	adds	r1, #1
 8016eb8:	e7da      	b.n	8016e70 <__s2b+0x18>
 8016eba:	340a      	adds	r4, #10
 8016ebc:	2509      	movs	r5, #9
 8016ebe:	e7f4      	b.n	8016eaa <__s2b+0x52>
 8016ec0:	1b63      	subs	r3, r4, r5
 8016ec2:	5ddb      	ldrb	r3, [r3, r7]
 8016ec4:	0001      	movs	r1, r0
 8016ec6:	3b30      	subs	r3, #48	; 0x30
 8016ec8:	220a      	movs	r2, #10
 8016eca:	0030      	movs	r0, r6
 8016ecc:	f7ff ff86 	bl	8016ddc <__multadd>
 8016ed0:	3701      	adds	r7, #1
 8016ed2:	e7eb      	b.n	8016eac <__s2b+0x54>

08016ed4 <__hi0bits>:
 8016ed4:	0003      	movs	r3, r0
 8016ed6:	0c02      	lsrs	r2, r0, #16
 8016ed8:	2000      	movs	r0, #0
 8016eda:	4282      	cmp	r2, r0
 8016edc:	d101      	bne.n	8016ee2 <__hi0bits+0xe>
 8016ede:	041b      	lsls	r3, r3, #16
 8016ee0:	3010      	adds	r0, #16
 8016ee2:	0e1a      	lsrs	r2, r3, #24
 8016ee4:	d101      	bne.n	8016eea <__hi0bits+0x16>
 8016ee6:	3008      	adds	r0, #8
 8016ee8:	021b      	lsls	r3, r3, #8
 8016eea:	0f1a      	lsrs	r2, r3, #28
 8016eec:	d101      	bne.n	8016ef2 <__hi0bits+0x1e>
 8016eee:	3004      	adds	r0, #4
 8016ef0:	011b      	lsls	r3, r3, #4
 8016ef2:	0f9a      	lsrs	r2, r3, #30
 8016ef4:	d101      	bne.n	8016efa <__hi0bits+0x26>
 8016ef6:	3002      	adds	r0, #2
 8016ef8:	009b      	lsls	r3, r3, #2
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	db03      	blt.n	8016f06 <__hi0bits+0x32>
 8016efe:	3001      	adds	r0, #1
 8016f00:	005b      	lsls	r3, r3, #1
 8016f02:	d400      	bmi.n	8016f06 <__hi0bits+0x32>
 8016f04:	2020      	movs	r0, #32
 8016f06:	4770      	bx	lr

08016f08 <__lo0bits>:
 8016f08:	2207      	movs	r2, #7
 8016f0a:	6803      	ldr	r3, [r0, #0]
 8016f0c:	b510      	push	{r4, lr}
 8016f0e:	0001      	movs	r1, r0
 8016f10:	401a      	ands	r2, r3
 8016f12:	d00d      	beq.n	8016f30 <__lo0bits+0x28>
 8016f14:	2401      	movs	r4, #1
 8016f16:	2000      	movs	r0, #0
 8016f18:	4223      	tst	r3, r4
 8016f1a:	d105      	bne.n	8016f28 <__lo0bits+0x20>
 8016f1c:	3002      	adds	r0, #2
 8016f1e:	4203      	tst	r3, r0
 8016f20:	d003      	beq.n	8016f2a <__lo0bits+0x22>
 8016f22:	40e3      	lsrs	r3, r4
 8016f24:	0020      	movs	r0, r4
 8016f26:	600b      	str	r3, [r1, #0]
 8016f28:	bd10      	pop	{r4, pc}
 8016f2a:	089b      	lsrs	r3, r3, #2
 8016f2c:	600b      	str	r3, [r1, #0]
 8016f2e:	e7fb      	b.n	8016f28 <__lo0bits+0x20>
 8016f30:	b29c      	uxth	r4, r3
 8016f32:	0010      	movs	r0, r2
 8016f34:	2c00      	cmp	r4, #0
 8016f36:	d101      	bne.n	8016f3c <__lo0bits+0x34>
 8016f38:	2010      	movs	r0, #16
 8016f3a:	0c1b      	lsrs	r3, r3, #16
 8016f3c:	b2da      	uxtb	r2, r3
 8016f3e:	2a00      	cmp	r2, #0
 8016f40:	d101      	bne.n	8016f46 <__lo0bits+0x3e>
 8016f42:	3008      	adds	r0, #8
 8016f44:	0a1b      	lsrs	r3, r3, #8
 8016f46:	071a      	lsls	r2, r3, #28
 8016f48:	d101      	bne.n	8016f4e <__lo0bits+0x46>
 8016f4a:	3004      	adds	r0, #4
 8016f4c:	091b      	lsrs	r3, r3, #4
 8016f4e:	079a      	lsls	r2, r3, #30
 8016f50:	d101      	bne.n	8016f56 <__lo0bits+0x4e>
 8016f52:	3002      	adds	r0, #2
 8016f54:	089b      	lsrs	r3, r3, #2
 8016f56:	07da      	lsls	r2, r3, #31
 8016f58:	d4e8      	bmi.n	8016f2c <__lo0bits+0x24>
 8016f5a:	085b      	lsrs	r3, r3, #1
 8016f5c:	d001      	beq.n	8016f62 <__lo0bits+0x5a>
 8016f5e:	3001      	adds	r0, #1
 8016f60:	e7e4      	b.n	8016f2c <__lo0bits+0x24>
 8016f62:	2020      	movs	r0, #32
 8016f64:	e7e0      	b.n	8016f28 <__lo0bits+0x20>

08016f66 <__i2b>:
 8016f66:	b510      	push	{r4, lr}
 8016f68:	000c      	movs	r4, r1
 8016f6a:	2101      	movs	r1, #1
 8016f6c:	f7ff ff04 	bl	8016d78 <_Balloc>
 8016f70:	2301      	movs	r3, #1
 8016f72:	6144      	str	r4, [r0, #20]
 8016f74:	6103      	str	r3, [r0, #16]
 8016f76:	bd10      	pop	{r4, pc}

08016f78 <__multiply>:
 8016f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f7a:	690b      	ldr	r3, [r1, #16]
 8016f7c:	0014      	movs	r4, r2
 8016f7e:	6912      	ldr	r2, [r2, #16]
 8016f80:	b089      	sub	sp, #36	; 0x24
 8016f82:	000d      	movs	r5, r1
 8016f84:	4293      	cmp	r3, r2
 8016f86:	da01      	bge.n	8016f8c <__multiply+0x14>
 8016f88:	0025      	movs	r5, r4
 8016f8a:	000c      	movs	r4, r1
 8016f8c:	692f      	ldr	r7, [r5, #16]
 8016f8e:	6926      	ldr	r6, [r4, #16]
 8016f90:	6869      	ldr	r1, [r5, #4]
 8016f92:	19bb      	adds	r3, r7, r6
 8016f94:	9302      	str	r3, [sp, #8]
 8016f96:	68ab      	ldr	r3, [r5, #8]
 8016f98:	19ba      	adds	r2, r7, r6
 8016f9a:	4293      	cmp	r3, r2
 8016f9c:	da00      	bge.n	8016fa0 <__multiply+0x28>
 8016f9e:	3101      	adds	r1, #1
 8016fa0:	f7ff feea 	bl	8016d78 <_Balloc>
 8016fa4:	0002      	movs	r2, r0
 8016fa6:	19bb      	adds	r3, r7, r6
 8016fa8:	3214      	adds	r2, #20
 8016faa:	009b      	lsls	r3, r3, #2
 8016fac:	18d3      	adds	r3, r2, r3
 8016fae:	469c      	mov	ip, r3
 8016fb0:	2100      	movs	r1, #0
 8016fb2:	0013      	movs	r3, r2
 8016fb4:	9004      	str	r0, [sp, #16]
 8016fb6:	4563      	cmp	r3, ip
 8016fb8:	d31d      	bcc.n	8016ff6 <__multiply+0x7e>
 8016fba:	3514      	adds	r5, #20
 8016fbc:	00bf      	lsls	r7, r7, #2
 8016fbe:	19eb      	adds	r3, r5, r7
 8016fc0:	3414      	adds	r4, #20
 8016fc2:	00b6      	lsls	r6, r6, #2
 8016fc4:	9305      	str	r3, [sp, #20]
 8016fc6:	19a3      	adds	r3, r4, r6
 8016fc8:	9503      	str	r5, [sp, #12]
 8016fca:	9401      	str	r4, [sp, #4]
 8016fcc:	9307      	str	r3, [sp, #28]
 8016fce:	9b07      	ldr	r3, [sp, #28]
 8016fd0:	9901      	ldr	r1, [sp, #4]
 8016fd2:	4299      	cmp	r1, r3
 8016fd4:	d311      	bcc.n	8016ffa <__multiply+0x82>
 8016fd6:	9b02      	ldr	r3, [sp, #8]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	dd06      	ble.n	8016fea <__multiply+0x72>
 8016fdc:	2304      	movs	r3, #4
 8016fde:	425b      	negs	r3, r3
 8016fe0:	449c      	add	ip, r3
 8016fe2:	4663      	mov	r3, ip
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d051      	beq.n	801708e <__multiply+0x116>
 8016fea:	9b04      	ldr	r3, [sp, #16]
 8016fec:	9a02      	ldr	r2, [sp, #8]
 8016fee:	0018      	movs	r0, r3
 8016ff0:	611a      	str	r2, [r3, #16]
 8016ff2:	b009      	add	sp, #36	; 0x24
 8016ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ff6:	c302      	stmia	r3!, {r1}
 8016ff8:	e7dd      	b.n	8016fb6 <__multiply+0x3e>
 8016ffa:	9b01      	ldr	r3, [sp, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	b298      	uxth	r0, r3
 8017000:	2800      	cmp	r0, #0
 8017002:	d01c      	beq.n	801703e <__multiply+0xc6>
 8017004:	0015      	movs	r5, r2
 8017006:	2600      	movs	r6, #0
 8017008:	9f03      	ldr	r7, [sp, #12]
 801700a:	cf02      	ldmia	r7!, {r1}
 801700c:	682c      	ldr	r4, [r5, #0]
 801700e:	b28b      	uxth	r3, r1
 8017010:	4343      	muls	r3, r0
 8017012:	0c09      	lsrs	r1, r1, #16
 8017014:	4341      	muls	r1, r0
 8017016:	b2a4      	uxth	r4, r4
 8017018:	191b      	adds	r3, r3, r4
 801701a:	199b      	adds	r3, r3, r6
 801701c:	000e      	movs	r6, r1
 801701e:	6829      	ldr	r1, [r5, #0]
 8017020:	9506      	str	r5, [sp, #24]
 8017022:	0c09      	lsrs	r1, r1, #16
 8017024:	1871      	adds	r1, r6, r1
 8017026:	0c1e      	lsrs	r6, r3, #16
 8017028:	1989      	adds	r1, r1, r6
 801702a:	0c0e      	lsrs	r6, r1, #16
 801702c:	b29b      	uxth	r3, r3
 801702e:	0409      	lsls	r1, r1, #16
 8017030:	430b      	orrs	r3, r1
 8017032:	c508      	stmia	r5!, {r3}
 8017034:	9b05      	ldr	r3, [sp, #20]
 8017036:	42bb      	cmp	r3, r7
 8017038:	d8e7      	bhi.n	801700a <__multiply+0x92>
 801703a:	9b06      	ldr	r3, [sp, #24]
 801703c:	605e      	str	r6, [r3, #4]
 801703e:	9b01      	ldr	r3, [sp, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	0c1d      	lsrs	r5, r3, #16
 8017044:	d01e      	beq.n	8017084 <__multiply+0x10c>
 8017046:	0010      	movs	r0, r2
 8017048:	2700      	movs	r7, #0
 801704a:	6813      	ldr	r3, [r2, #0]
 801704c:	9e03      	ldr	r6, [sp, #12]
 801704e:	6831      	ldr	r1, [r6, #0]
 8017050:	6804      	ldr	r4, [r0, #0]
 8017052:	b289      	uxth	r1, r1
 8017054:	4369      	muls	r1, r5
 8017056:	0c24      	lsrs	r4, r4, #16
 8017058:	1909      	adds	r1, r1, r4
 801705a:	19c9      	adds	r1, r1, r7
 801705c:	040f      	lsls	r7, r1, #16
 801705e:	b29b      	uxth	r3, r3
 8017060:	433b      	orrs	r3, r7
 8017062:	6003      	str	r3, [r0, #0]
 8017064:	ce80      	ldmia	r6!, {r7}
 8017066:	6843      	ldr	r3, [r0, #4]
 8017068:	0c3f      	lsrs	r7, r7, #16
 801706a:	436f      	muls	r7, r5
 801706c:	b29b      	uxth	r3, r3
 801706e:	18fb      	adds	r3, r7, r3
 8017070:	0c09      	lsrs	r1, r1, #16
 8017072:	185b      	adds	r3, r3, r1
 8017074:	9905      	ldr	r1, [sp, #20]
 8017076:	9006      	str	r0, [sp, #24]
 8017078:	0c1f      	lsrs	r7, r3, #16
 801707a:	3004      	adds	r0, #4
 801707c:	42b1      	cmp	r1, r6
 801707e:	d8e6      	bhi.n	801704e <__multiply+0xd6>
 8017080:	9906      	ldr	r1, [sp, #24]
 8017082:	604b      	str	r3, [r1, #4]
 8017084:	9b01      	ldr	r3, [sp, #4]
 8017086:	3204      	adds	r2, #4
 8017088:	3304      	adds	r3, #4
 801708a:	9301      	str	r3, [sp, #4]
 801708c:	e79f      	b.n	8016fce <__multiply+0x56>
 801708e:	9b02      	ldr	r3, [sp, #8]
 8017090:	3b01      	subs	r3, #1
 8017092:	9302      	str	r3, [sp, #8]
 8017094:	e79f      	b.n	8016fd6 <__multiply+0x5e>
	...

08017098 <__pow5mult>:
 8017098:	2303      	movs	r3, #3
 801709a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801709c:	4013      	ands	r3, r2
 801709e:	0006      	movs	r6, r0
 80170a0:	000f      	movs	r7, r1
 80170a2:	0015      	movs	r5, r2
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d008      	beq.n	80170ba <__pow5mult+0x22>
 80170a8:	491a      	ldr	r1, [pc, #104]	; (8017114 <__pow5mult+0x7c>)
 80170aa:	3b01      	subs	r3, #1
 80170ac:	009a      	lsls	r2, r3, #2
 80170ae:	5852      	ldr	r2, [r2, r1]
 80170b0:	2300      	movs	r3, #0
 80170b2:	0039      	movs	r1, r7
 80170b4:	f7ff fe92 	bl	8016ddc <__multadd>
 80170b8:	0007      	movs	r7, r0
 80170ba:	10ad      	asrs	r5, r5, #2
 80170bc:	d027      	beq.n	801710e <__pow5mult+0x76>
 80170be:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80170c0:	2c00      	cmp	r4, #0
 80170c2:	d107      	bne.n	80170d4 <__pow5mult+0x3c>
 80170c4:	4914      	ldr	r1, [pc, #80]	; (8017118 <__pow5mult+0x80>)
 80170c6:	0030      	movs	r0, r6
 80170c8:	f7ff ff4d 	bl	8016f66 <__i2b>
 80170cc:	2300      	movs	r3, #0
 80170ce:	0004      	movs	r4, r0
 80170d0:	64b0      	str	r0, [r6, #72]	; 0x48
 80170d2:	6003      	str	r3, [r0, #0]
 80170d4:	2301      	movs	r3, #1
 80170d6:	421d      	tst	r5, r3
 80170d8:	d00a      	beq.n	80170f0 <__pow5mult+0x58>
 80170da:	0039      	movs	r1, r7
 80170dc:	0022      	movs	r2, r4
 80170de:	0030      	movs	r0, r6
 80170e0:	f7ff ff4a 	bl	8016f78 <__multiply>
 80170e4:	0039      	movs	r1, r7
 80170e6:	9001      	str	r0, [sp, #4]
 80170e8:	0030      	movs	r0, r6
 80170ea:	f7ff fe6d 	bl	8016dc8 <_Bfree>
 80170ee:	9f01      	ldr	r7, [sp, #4]
 80170f0:	106d      	asrs	r5, r5, #1
 80170f2:	d00c      	beq.n	801710e <__pow5mult+0x76>
 80170f4:	6820      	ldr	r0, [r4, #0]
 80170f6:	2800      	cmp	r0, #0
 80170f8:	d107      	bne.n	801710a <__pow5mult+0x72>
 80170fa:	0022      	movs	r2, r4
 80170fc:	0021      	movs	r1, r4
 80170fe:	0030      	movs	r0, r6
 8017100:	f7ff ff3a 	bl	8016f78 <__multiply>
 8017104:	2300      	movs	r3, #0
 8017106:	6020      	str	r0, [r4, #0]
 8017108:	6003      	str	r3, [r0, #0]
 801710a:	0004      	movs	r4, r0
 801710c:	e7e2      	b.n	80170d4 <__pow5mult+0x3c>
 801710e:	0038      	movs	r0, r7
 8017110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017112:	46c0      	nop			; (mov r8, r8)
 8017114:	0801a900 	.word	0x0801a900
 8017118:	00000271 	.word	0x00000271

0801711c <__lshift>:
 801711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801711e:	000d      	movs	r5, r1
 8017120:	0017      	movs	r7, r2
 8017122:	692b      	ldr	r3, [r5, #16]
 8017124:	1154      	asrs	r4, r2, #5
 8017126:	b085      	sub	sp, #20
 8017128:	18e3      	adds	r3, r4, r3
 801712a:	9301      	str	r3, [sp, #4]
 801712c:	3301      	adds	r3, #1
 801712e:	9300      	str	r3, [sp, #0]
 8017130:	6849      	ldr	r1, [r1, #4]
 8017132:	68ab      	ldr	r3, [r5, #8]
 8017134:	9002      	str	r0, [sp, #8]
 8017136:	9a00      	ldr	r2, [sp, #0]
 8017138:	4293      	cmp	r3, r2
 801713a:	db35      	blt.n	80171a8 <__lshift+0x8c>
 801713c:	9802      	ldr	r0, [sp, #8]
 801713e:	f7ff fe1b 	bl	8016d78 <_Balloc>
 8017142:	2300      	movs	r3, #0
 8017144:	0002      	movs	r2, r0
 8017146:	0006      	movs	r6, r0
 8017148:	0019      	movs	r1, r3
 801714a:	3214      	adds	r2, #20
 801714c:	42a3      	cmp	r3, r4
 801714e:	db2e      	blt.n	80171ae <__lshift+0x92>
 8017150:	43e3      	mvns	r3, r4
 8017152:	17db      	asrs	r3, r3, #31
 8017154:	401c      	ands	r4, r3
 8017156:	002b      	movs	r3, r5
 8017158:	00a4      	lsls	r4, r4, #2
 801715a:	1914      	adds	r4, r2, r4
 801715c:	692a      	ldr	r2, [r5, #16]
 801715e:	3314      	adds	r3, #20
 8017160:	0092      	lsls	r2, r2, #2
 8017162:	189a      	adds	r2, r3, r2
 8017164:	4694      	mov	ip, r2
 8017166:	221f      	movs	r2, #31
 8017168:	4017      	ands	r7, r2
 801716a:	d024      	beq.n	80171b6 <__lshift+0x9a>
 801716c:	3201      	adds	r2, #1
 801716e:	1bd2      	subs	r2, r2, r7
 8017170:	9203      	str	r2, [sp, #12]
 8017172:	2200      	movs	r2, #0
 8017174:	6819      	ldr	r1, [r3, #0]
 8017176:	0020      	movs	r0, r4
 8017178:	40b9      	lsls	r1, r7
 801717a:	430a      	orrs	r2, r1
 801717c:	c404      	stmia	r4!, {r2}
 801717e:	cb04      	ldmia	r3!, {r2}
 8017180:	9903      	ldr	r1, [sp, #12]
 8017182:	40ca      	lsrs	r2, r1
 8017184:	459c      	cmp	ip, r3
 8017186:	d8f5      	bhi.n	8017174 <__lshift+0x58>
 8017188:	6042      	str	r2, [r0, #4]
 801718a:	2a00      	cmp	r2, #0
 801718c:	d002      	beq.n	8017194 <__lshift+0x78>
 801718e:	9b01      	ldr	r3, [sp, #4]
 8017190:	3302      	adds	r3, #2
 8017192:	9300      	str	r3, [sp, #0]
 8017194:	9b00      	ldr	r3, [sp, #0]
 8017196:	9802      	ldr	r0, [sp, #8]
 8017198:	3b01      	subs	r3, #1
 801719a:	6133      	str	r3, [r6, #16]
 801719c:	0029      	movs	r1, r5
 801719e:	f7ff fe13 	bl	8016dc8 <_Bfree>
 80171a2:	0030      	movs	r0, r6
 80171a4:	b005      	add	sp, #20
 80171a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171a8:	3101      	adds	r1, #1
 80171aa:	005b      	lsls	r3, r3, #1
 80171ac:	e7c3      	b.n	8017136 <__lshift+0x1a>
 80171ae:	0098      	lsls	r0, r3, #2
 80171b0:	5011      	str	r1, [r2, r0]
 80171b2:	3301      	adds	r3, #1
 80171b4:	e7ca      	b.n	801714c <__lshift+0x30>
 80171b6:	cb04      	ldmia	r3!, {r2}
 80171b8:	c404      	stmia	r4!, {r2}
 80171ba:	459c      	cmp	ip, r3
 80171bc:	d8fb      	bhi.n	80171b6 <__lshift+0x9a>
 80171be:	e7e9      	b.n	8017194 <__lshift+0x78>

080171c0 <__mcmp>:
 80171c0:	690a      	ldr	r2, [r1, #16]
 80171c2:	6903      	ldr	r3, [r0, #16]
 80171c4:	b530      	push	{r4, r5, lr}
 80171c6:	1a9b      	subs	r3, r3, r2
 80171c8:	d10d      	bne.n	80171e6 <__mcmp+0x26>
 80171ca:	0092      	lsls	r2, r2, #2
 80171cc:	3014      	adds	r0, #20
 80171ce:	3114      	adds	r1, #20
 80171d0:	1884      	adds	r4, r0, r2
 80171d2:	1889      	adds	r1, r1, r2
 80171d4:	3c04      	subs	r4, #4
 80171d6:	3904      	subs	r1, #4
 80171d8:	6825      	ldr	r5, [r4, #0]
 80171da:	680a      	ldr	r2, [r1, #0]
 80171dc:	4295      	cmp	r5, r2
 80171de:	d004      	beq.n	80171ea <__mcmp+0x2a>
 80171e0:	2301      	movs	r3, #1
 80171e2:	4295      	cmp	r5, r2
 80171e4:	d304      	bcc.n	80171f0 <__mcmp+0x30>
 80171e6:	0018      	movs	r0, r3
 80171e8:	bd30      	pop	{r4, r5, pc}
 80171ea:	42a0      	cmp	r0, r4
 80171ec:	d3f2      	bcc.n	80171d4 <__mcmp+0x14>
 80171ee:	e7fa      	b.n	80171e6 <__mcmp+0x26>
 80171f0:	425b      	negs	r3, r3
 80171f2:	e7f8      	b.n	80171e6 <__mcmp+0x26>

080171f4 <__mdiff>:
 80171f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171f6:	000d      	movs	r5, r1
 80171f8:	b085      	sub	sp, #20
 80171fa:	0007      	movs	r7, r0
 80171fc:	0011      	movs	r1, r2
 80171fe:	0028      	movs	r0, r5
 8017200:	0014      	movs	r4, r2
 8017202:	f7ff ffdd 	bl	80171c0 <__mcmp>
 8017206:	1e06      	subs	r6, r0, #0
 8017208:	d108      	bne.n	801721c <__mdiff+0x28>
 801720a:	0001      	movs	r1, r0
 801720c:	0038      	movs	r0, r7
 801720e:	f7ff fdb3 	bl	8016d78 <_Balloc>
 8017212:	2301      	movs	r3, #1
 8017214:	6146      	str	r6, [r0, #20]
 8017216:	6103      	str	r3, [r0, #16]
 8017218:	b005      	add	sp, #20
 801721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801721c:	2301      	movs	r3, #1
 801721e:	9301      	str	r3, [sp, #4]
 8017220:	2800      	cmp	r0, #0
 8017222:	db04      	blt.n	801722e <__mdiff+0x3a>
 8017224:	0023      	movs	r3, r4
 8017226:	002c      	movs	r4, r5
 8017228:	001d      	movs	r5, r3
 801722a:	2300      	movs	r3, #0
 801722c:	9301      	str	r3, [sp, #4]
 801722e:	6861      	ldr	r1, [r4, #4]
 8017230:	0038      	movs	r0, r7
 8017232:	f7ff fda1 	bl	8016d78 <_Balloc>
 8017236:	002f      	movs	r7, r5
 8017238:	2200      	movs	r2, #0
 801723a:	9b01      	ldr	r3, [sp, #4]
 801723c:	6926      	ldr	r6, [r4, #16]
 801723e:	60c3      	str	r3, [r0, #12]
 8017240:	3414      	adds	r4, #20
 8017242:	00b3      	lsls	r3, r6, #2
 8017244:	18e3      	adds	r3, r4, r3
 8017246:	9302      	str	r3, [sp, #8]
 8017248:	692b      	ldr	r3, [r5, #16]
 801724a:	3714      	adds	r7, #20
 801724c:	009b      	lsls	r3, r3, #2
 801724e:	18fb      	adds	r3, r7, r3
 8017250:	9303      	str	r3, [sp, #12]
 8017252:	0003      	movs	r3, r0
 8017254:	4694      	mov	ip, r2
 8017256:	3314      	adds	r3, #20
 8017258:	cc20      	ldmia	r4!, {r5}
 801725a:	cf04      	ldmia	r7!, {r2}
 801725c:	9201      	str	r2, [sp, #4]
 801725e:	b2aa      	uxth	r2, r5
 8017260:	4494      	add	ip, r2
 8017262:	466a      	mov	r2, sp
 8017264:	4661      	mov	r1, ip
 8017266:	8892      	ldrh	r2, [r2, #4]
 8017268:	0c2d      	lsrs	r5, r5, #16
 801726a:	1a8a      	subs	r2, r1, r2
 801726c:	9901      	ldr	r1, [sp, #4]
 801726e:	0c09      	lsrs	r1, r1, #16
 8017270:	1a69      	subs	r1, r5, r1
 8017272:	1415      	asrs	r5, r2, #16
 8017274:	1949      	adds	r1, r1, r5
 8017276:	140d      	asrs	r5, r1, #16
 8017278:	b292      	uxth	r2, r2
 801727a:	0409      	lsls	r1, r1, #16
 801727c:	430a      	orrs	r2, r1
 801727e:	601a      	str	r2, [r3, #0]
 8017280:	9a03      	ldr	r2, [sp, #12]
 8017282:	46ac      	mov	ip, r5
 8017284:	3304      	adds	r3, #4
 8017286:	42ba      	cmp	r2, r7
 8017288:	d8e6      	bhi.n	8017258 <__mdiff+0x64>
 801728a:	9902      	ldr	r1, [sp, #8]
 801728c:	001a      	movs	r2, r3
 801728e:	428c      	cmp	r4, r1
 8017290:	d305      	bcc.n	801729e <__mdiff+0xaa>
 8017292:	3a04      	subs	r2, #4
 8017294:	6813      	ldr	r3, [r2, #0]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d00e      	beq.n	80172b8 <__mdiff+0xc4>
 801729a:	6106      	str	r6, [r0, #16]
 801729c:	e7bc      	b.n	8017218 <__mdiff+0x24>
 801729e:	cc04      	ldmia	r4!, {r2}
 80172a0:	b291      	uxth	r1, r2
 80172a2:	4461      	add	r1, ip
 80172a4:	140d      	asrs	r5, r1, #16
 80172a6:	0c12      	lsrs	r2, r2, #16
 80172a8:	1952      	adds	r2, r2, r5
 80172aa:	1415      	asrs	r5, r2, #16
 80172ac:	b289      	uxth	r1, r1
 80172ae:	0412      	lsls	r2, r2, #16
 80172b0:	430a      	orrs	r2, r1
 80172b2:	46ac      	mov	ip, r5
 80172b4:	c304      	stmia	r3!, {r2}
 80172b6:	e7e8      	b.n	801728a <__mdiff+0x96>
 80172b8:	3e01      	subs	r6, #1
 80172ba:	e7ea      	b.n	8017292 <__mdiff+0x9e>

080172bc <__ulp>:
 80172bc:	000b      	movs	r3, r1
 80172be:	4910      	ldr	r1, [pc, #64]	; (8017300 <__ulp+0x44>)
 80172c0:	b510      	push	{r4, lr}
 80172c2:	4019      	ands	r1, r3
 80172c4:	4b0f      	ldr	r3, [pc, #60]	; (8017304 <__ulp+0x48>)
 80172c6:	18c9      	adds	r1, r1, r3
 80172c8:	2900      	cmp	r1, #0
 80172ca:	dd04      	ble.n	80172d6 <__ulp+0x1a>
 80172cc:	2200      	movs	r2, #0
 80172ce:	000b      	movs	r3, r1
 80172d0:	0010      	movs	r0, r2
 80172d2:	0019      	movs	r1, r3
 80172d4:	bd10      	pop	{r4, pc}
 80172d6:	4249      	negs	r1, r1
 80172d8:	1509      	asrs	r1, r1, #20
 80172da:	2200      	movs	r2, #0
 80172dc:	2300      	movs	r3, #0
 80172de:	2913      	cmp	r1, #19
 80172e0:	dc04      	bgt.n	80172ec <__ulp+0x30>
 80172e2:	2080      	movs	r0, #128	; 0x80
 80172e4:	0300      	lsls	r0, r0, #12
 80172e6:	4108      	asrs	r0, r1
 80172e8:	0003      	movs	r3, r0
 80172ea:	e7f1      	b.n	80172d0 <__ulp+0x14>
 80172ec:	3914      	subs	r1, #20
 80172ee:	2001      	movs	r0, #1
 80172f0:	291e      	cmp	r1, #30
 80172f2:	dc02      	bgt.n	80172fa <__ulp+0x3e>
 80172f4:	241f      	movs	r4, #31
 80172f6:	1a61      	subs	r1, r4, r1
 80172f8:	4088      	lsls	r0, r1
 80172fa:	0002      	movs	r2, r0
 80172fc:	e7e8      	b.n	80172d0 <__ulp+0x14>
 80172fe:	46c0      	nop			; (mov r8, r8)
 8017300:	7ff00000 	.word	0x7ff00000
 8017304:	fcc00000 	.word	0xfcc00000

08017308 <__b2d>:
 8017308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801730a:	0006      	movs	r6, r0
 801730c:	6903      	ldr	r3, [r0, #16]
 801730e:	3614      	adds	r6, #20
 8017310:	009b      	lsls	r3, r3, #2
 8017312:	18f3      	adds	r3, r6, r3
 8017314:	1f1d      	subs	r5, r3, #4
 8017316:	682c      	ldr	r4, [r5, #0]
 8017318:	000f      	movs	r7, r1
 801731a:	0020      	movs	r0, r4
 801731c:	9301      	str	r3, [sp, #4]
 801731e:	f7ff fdd9 	bl	8016ed4 <__hi0bits>
 8017322:	2320      	movs	r3, #32
 8017324:	1a1b      	subs	r3, r3, r0
 8017326:	603b      	str	r3, [r7, #0]
 8017328:	491c      	ldr	r1, [pc, #112]	; (801739c <__b2d+0x94>)
 801732a:	280a      	cmp	r0, #10
 801732c:	dc16      	bgt.n	801735c <__b2d+0x54>
 801732e:	230b      	movs	r3, #11
 8017330:	0027      	movs	r7, r4
 8017332:	1a1b      	subs	r3, r3, r0
 8017334:	40df      	lsrs	r7, r3
 8017336:	4339      	orrs	r1, r7
 8017338:	469c      	mov	ip, r3
 801733a:	000b      	movs	r3, r1
 801733c:	2100      	movs	r1, #0
 801733e:	42ae      	cmp	r6, r5
 8017340:	d202      	bcs.n	8017348 <__b2d+0x40>
 8017342:	9901      	ldr	r1, [sp, #4]
 8017344:	3908      	subs	r1, #8
 8017346:	6809      	ldr	r1, [r1, #0]
 8017348:	3015      	adds	r0, #21
 801734a:	4084      	lsls	r4, r0
 801734c:	4660      	mov	r0, ip
 801734e:	40c1      	lsrs	r1, r0
 8017350:	430c      	orrs	r4, r1
 8017352:	0022      	movs	r2, r4
 8017354:	0010      	movs	r0, r2
 8017356:	0019      	movs	r1, r3
 8017358:	b003      	add	sp, #12
 801735a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801735c:	2700      	movs	r7, #0
 801735e:	42ae      	cmp	r6, r5
 8017360:	d202      	bcs.n	8017368 <__b2d+0x60>
 8017362:	9d01      	ldr	r5, [sp, #4]
 8017364:	3d08      	subs	r5, #8
 8017366:	682f      	ldr	r7, [r5, #0]
 8017368:	380b      	subs	r0, #11
 801736a:	4684      	mov	ip, r0
 801736c:	1e03      	subs	r3, r0, #0
 801736e:	d012      	beq.n	8017396 <__b2d+0x8e>
 8017370:	409c      	lsls	r4, r3
 8017372:	2020      	movs	r0, #32
 8017374:	4321      	orrs	r1, r4
 8017376:	003c      	movs	r4, r7
 8017378:	1ac0      	subs	r0, r0, r3
 801737a:	40c4      	lsrs	r4, r0
 801737c:	4321      	orrs	r1, r4
 801737e:	000b      	movs	r3, r1
 8017380:	2100      	movs	r1, #0
 8017382:	42b5      	cmp	r5, r6
 8017384:	d901      	bls.n	801738a <__b2d+0x82>
 8017386:	3d04      	subs	r5, #4
 8017388:	6829      	ldr	r1, [r5, #0]
 801738a:	4664      	mov	r4, ip
 801738c:	40c1      	lsrs	r1, r0
 801738e:	40a7      	lsls	r7, r4
 8017390:	430f      	orrs	r7, r1
 8017392:	003a      	movs	r2, r7
 8017394:	e7de      	b.n	8017354 <__b2d+0x4c>
 8017396:	4321      	orrs	r1, r4
 8017398:	000b      	movs	r3, r1
 801739a:	e7fa      	b.n	8017392 <__b2d+0x8a>
 801739c:	3ff00000 	.word	0x3ff00000

080173a0 <__d2b>:
 80173a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173a2:	001d      	movs	r5, r3
 80173a4:	2101      	movs	r1, #1
 80173a6:	0014      	movs	r4, r2
 80173a8:	9f08      	ldr	r7, [sp, #32]
 80173aa:	f7ff fce5 	bl	8016d78 <_Balloc>
 80173ae:	032b      	lsls	r3, r5, #12
 80173b0:	006d      	lsls	r5, r5, #1
 80173b2:	0006      	movs	r6, r0
 80173b4:	0b1b      	lsrs	r3, r3, #12
 80173b6:	0d6d      	lsrs	r5, r5, #21
 80173b8:	d124      	bne.n	8017404 <__d2b+0x64>
 80173ba:	9301      	str	r3, [sp, #4]
 80173bc:	2c00      	cmp	r4, #0
 80173be:	d027      	beq.n	8017410 <__d2b+0x70>
 80173c0:	4668      	mov	r0, sp
 80173c2:	9400      	str	r4, [sp, #0]
 80173c4:	f7ff fda0 	bl	8016f08 <__lo0bits>
 80173c8:	9c00      	ldr	r4, [sp, #0]
 80173ca:	2800      	cmp	r0, #0
 80173cc:	d01e      	beq.n	801740c <__d2b+0x6c>
 80173ce:	9b01      	ldr	r3, [sp, #4]
 80173d0:	2120      	movs	r1, #32
 80173d2:	001a      	movs	r2, r3
 80173d4:	1a09      	subs	r1, r1, r0
 80173d6:	408a      	lsls	r2, r1
 80173d8:	40c3      	lsrs	r3, r0
 80173da:	4322      	orrs	r2, r4
 80173dc:	6172      	str	r2, [r6, #20]
 80173de:	9301      	str	r3, [sp, #4]
 80173e0:	9c01      	ldr	r4, [sp, #4]
 80173e2:	61b4      	str	r4, [r6, #24]
 80173e4:	1e63      	subs	r3, r4, #1
 80173e6:	419c      	sbcs	r4, r3
 80173e8:	3401      	adds	r4, #1
 80173ea:	6134      	str	r4, [r6, #16]
 80173ec:	2d00      	cmp	r5, #0
 80173ee:	d018      	beq.n	8017422 <__d2b+0x82>
 80173f0:	4b12      	ldr	r3, [pc, #72]	; (801743c <__d2b+0x9c>)
 80173f2:	18ed      	adds	r5, r5, r3
 80173f4:	2335      	movs	r3, #53	; 0x35
 80173f6:	182d      	adds	r5, r5, r0
 80173f8:	603d      	str	r5, [r7, #0]
 80173fa:	1a18      	subs	r0, r3, r0
 80173fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173fe:	6018      	str	r0, [r3, #0]
 8017400:	0030      	movs	r0, r6
 8017402:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017404:	2280      	movs	r2, #128	; 0x80
 8017406:	0352      	lsls	r2, r2, #13
 8017408:	4313      	orrs	r3, r2
 801740a:	e7d6      	b.n	80173ba <__d2b+0x1a>
 801740c:	6174      	str	r4, [r6, #20]
 801740e:	e7e7      	b.n	80173e0 <__d2b+0x40>
 8017410:	a801      	add	r0, sp, #4
 8017412:	f7ff fd79 	bl	8016f08 <__lo0bits>
 8017416:	2401      	movs	r4, #1
 8017418:	9b01      	ldr	r3, [sp, #4]
 801741a:	6134      	str	r4, [r6, #16]
 801741c:	6173      	str	r3, [r6, #20]
 801741e:	3020      	adds	r0, #32
 8017420:	e7e4      	b.n	80173ec <__d2b+0x4c>
 8017422:	4b07      	ldr	r3, [pc, #28]	; (8017440 <__d2b+0xa0>)
 8017424:	18c0      	adds	r0, r0, r3
 8017426:	4b07      	ldr	r3, [pc, #28]	; (8017444 <__d2b+0xa4>)
 8017428:	6038      	str	r0, [r7, #0]
 801742a:	18e3      	adds	r3, r4, r3
 801742c:	009b      	lsls	r3, r3, #2
 801742e:	18f3      	adds	r3, r6, r3
 8017430:	6958      	ldr	r0, [r3, #20]
 8017432:	f7ff fd4f 	bl	8016ed4 <__hi0bits>
 8017436:	0164      	lsls	r4, r4, #5
 8017438:	1a20      	subs	r0, r4, r0
 801743a:	e7df      	b.n	80173fc <__d2b+0x5c>
 801743c:	fffffbcd 	.word	0xfffffbcd
 8017440:	fffffbce 	.word	0xfffffbce
 8017444:	3fffffff 	.word	0x3fffffff

08017448 <__ratio>:
 8017448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801744a:	b085      	sub	sp, #20
 801744c:	000f      	movs	r7, r1
 801744e:	a902      	add	r1, sp, #8
 8017450:	0006      	movs	r6, r0
 8017452:	f7ff ff59 	bl	8017308 <__b2d>
 8017456:	0004      	movs	r4, r0
 8017458:	000d      	movs	r5, r1
 801745a:	0038      	movs	r0, r7
 801745c:	a903      	add	r1, sp, #12
 801745e:	9400      	str	r4, [sp, #0]
 8017460:	9501      	str	r5, [sp, #4]
 8017462:	f7ff ff51 	bl	8017308 <__b2d>
 8017466:	6936      	ldr	r6, [r6, #16]
 8017468:	693f      	ldr	r7, [r7, #16]
 801746a:	0002      	movs	r2, r0
 801746c:	1bf7      	subs	r7, r6, r7
 801746e:	017e      	lsls	r6, r7, #5
 8017470:	46b4      	mov	ip, r6
 8017472:	9f03      	ldr	r7, [sp, #12]
 8017474:	9e02      	ldr	r6, [sp, #8]
 8017476:	000b      	movs	r3, r1
 8017478:	1bf6      	subs	r6, r6, r7
 801747a:	4466      	add	r6, ip
 801747c:	0537      	lsls	r7, r6, #20
 801747e:	2e00      	cmp	r6, #0
 8017480:	dd07      	ble.n	8017492 <__ratio+0x4a>
 8017482:	1979      	adds	r1, r7, r5
 8017484:	9101      	str	r1, [sp, #4]
 8017486:	9800      	ldr	r0, [sp, #0]
 8017488:	9901      	ldr	r1, [sp, #4]
 801748a:	f7ea f8c9 	bl	8001620 <__aeabi_ddiv>
 801748e:	b005      	add	sp, #20
 8017490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017492:	1bcb      	subs	r3, r1, r7
 8017494:	e7f7      	b.n	8017486 <__ratio+0x3e>

08017496 <__copybits>:
 8017496:	0013      	movs	r3, r2
 8017498:	3901      	subs	r1, #1
 801749a:	b510      	push	{r4, lr}
 801749c:	1149      	asrs	r1, r1, #5
 801749e:	6912      	ldr	r2, [r2, #16]
 80174a0:	3101      	adds	r1, #1
 80174a2:	0089      	lsls	r1, r1, #2
 80174a4:	3314      	adds	r3, #20
 80174a6:	0092      	lsls	r2, r2, #2
 80174a8:	1841      	adds	r1, r0, r1
 80174aa:	189a      	adds	r2, r3, r2
 80174ac:	429a      	cmp	r2, r3
 80174ae:	d803      	bhi.n	80174b8 <__copybits+0x22>
 80174b0:	2300      	movs	r3, #0
 80174b2:	4281      	cmp	r1, r0
 80174b4:	d803      	bhi.n	80174be <__copybits+0x28>
 80174b6:	bd10      	pop	{r4, pc}
 80174b8:	cb10      	ldmia	r3!, {r4}
 80174ba:	c010      	stmia	r0!, {r4}
 80174bc:	e7f6      	b.n	80174ac <__copybits+0x16>
 80174be:	c008      	stmia	r0!, {r3}
 80174c0:	e7f7      	b.n	80174b2 <__copybits+0x1c>

080174c2 <__any_on>:
 80174c2:	0002      	movs	r2, r0
 80174c4:	6900      	ldr	r0, [r0, #16]
 80174c6:	b510      	push	{r4, lr}
 80174c8:	3214      	adds	r2, #20
 80174ca:	114b      	asrs	r3, r1, #5
 80174cc:	4298      	cmp	r0, r3
 80174ce:	db12      	blt.n	80174f6 <__any_on+0x34>
 80174d0:	dd0b      	ble.n	80174ea <__any_on+0x28>
 80174d2:	201f      	movs	r0, #31
 80174d4:	4001      	ands	r1, r0
 80174d6:	d008      	beq.n	80174ea <__any_on+0x28>
 80174d8:	0098      	lsls	r0, r3, #2
 80174da:	5884      	ldr	r4, [r0, r2]
 80174dc:	0020      	movs	r0, r4
 80174de:	40c8      	lsrs	r0, r1
 80174e0:	4088      	lsls	r0, r1
 80174e2:	0001      	movs	r1, r0
 80174e4:	2001      	movs	r0, #1
 80174e6:	428c      	cmp	r4, r1
 80174e8:	d104      	bne.n	80174f4 <__any_on+0x32>
 80174ea:	009b      	lsls	r3, r3, #2
 80174ec:	18d3      	adds	r3, r2, r3
 80174ee:	4293      	cmp	r3, r2
 80174f0:	d803      	bhi.n	80174fa <__any_on+0x38>
 80174f2:	2000      	movs	r0, #0
 80174f4:	bd10      	pop	{r4, pc}
 80174f6:	0003      	movs	r3, r0
 80174f8:	e7f7      	b.n	80174ea <__any_on+0x28>
 80174fa:	3b04      	subs	r3, #4
 80174fc:	6819      	ldr	r1, [r3, #0]
 80174fe:	2900      	cmp	r1, #0
 8017500:	d0f5      	beq.n	80174ee <__any_on+0x2c>
 8017502:	2001      	movs	r0, #1
 8017504:	e7f6      	b.n	80174f4 <__any_on+0x32>
	...

08017508 <frexp>:
 8017508:	b570      	push	{r4, r5, r6, lr}
 801750a:	0014      	movs	r4, r2
 801750c:	2500      	movs	r5, #0
 801750e:	6025      	str	r5, [r4, #0]
 8017510:	4d10      	ldr	r5, [pc, #64]	; (8017554 <frexp+0x4c>)
 8017512:	004b      	lsls	r3, r1, #1
 8017514:	000a      	movs	r2, r1
 8017516:	085b      	lsrs	r3, r3, #1
 8017518:	42ab      	cmp	r3, r5
 801751a:	dc1a      	bgt.n	8017552 <frexp+0x4a>
 801751c:	001d      	movs	r5, r3
 801751e:	4305      	orrs	r5, r0
 8017520:	d017      	beq.n	8017552 <frexp+0x4a>
 8017522:	4d0d      	ldr	r5, [pc, #52]	; (8017558 <frexp+0x50>)
 8017524:	42ab      	cmp	r3, r5
 8017526:	dc09      	bgt.n	801753c <frexp+0x34>
 8017528:	2200      	movs	r2, #0
 801752a:	4b0c      	ldr	r3, [pc, #48]	; (801755c <frexp+0x54>)
 801752c:	f7ea fc82 	bl	8001e34 <__aeabi_dmul>
 8017530:	2536      	movs	r5, #54	; 0x36
 8017532:	000a      	movs	r2, r1
 8017534:	004b      	lsls	r3, r1, #1
 8017536:	426d      	negs	r5, r5
 8017538:	085b      	lsrs	r3, r3, #1
 801753a:	6025      	str	r5, [r4, #0]
 801753c:	4d08      	ldr	r5, [pc, #32]	; (8017560 <frexp+0x58>)
 801753e:	151b      	asrs	r3, r3, #20
 8017540:	195b      	adds	r3, r3, r5
 8017542:	6825      	ldr	r5, [r4, #0]
 8017544:	18eb      	adds	r3, r5, r3
 8017546:	6023      	str	r3, [r4, #0]
 8017548:	4b06      	ldr	r3, [pc, #24]	; (8017564 <frexp+0x5c>)
 801754a:	401a      	ands	r2, r3
 801754c:	4b06      	ldr	r3, [pc, #24]	; (8017568 <frexp+0x60>)
 801754e:	4313      	orrs	r3, r2
 8017550:	0019      	movs	r1, r3
 8017552:	bd70      	pop	{r4, r5, r6, pc}
 8017554:	7fefffff 	.word	0x7fefffff
 8017558:	000fffff 	.word	0x000fffff
 801755c:	43500000 	.word	0x43500000
 8017560:	fffffc02 	.word	0xfffffc02
 8017564:	800fffff 	.word	0x800fffff
 8017568:	3fe00000 	.word	0x3fe00000

0801756c <__ssprint_r>:
 801756c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801756e:	6893      	ldr	r3, [r2, #8]
 8017570:	b087      	sub	sp, #28
 8017572:	9002      	str	r0, [sp, #8]
 8017574:	000c      	movs	r4, r1
 8017576:	0016      	movs	r6, r2
 8017578:	2b00      	cmp	r3, #0
 801757a:	d063      	beq.n	8017644 <__ssprint_r+0xd8>
 801757c:	6813      	ldr	r3, [r2, #0]
 801757e:	9303      	str	r3, [sp, #12]
 8017580:	2300      	movs	r3, #0
 8017582:	001f      	movs	r7, r3
 8017584:	9305      	str	r3, [sp, #20]
 8017586:	2f00      	cmp	r7, #0
 8017588:	d02e      	beq.n	80175e8 <__ssprint_r+0x7c>
 801758a:	68a5      	ldr	r5, [r4, #8]
 801758c:	42af      	cmp	r7, r5
 801758e:	d347      	bcc.n	8017620 <__ssprint_r+0xb4>
 8017590:	2390      	movs	r3, #144	; 0x90
 8017592:	89a2      	ldrh	r2, [r4, #12]
 8017594:	00db      	lsls	r3, r3, #3
 8017596:	421a      	tst	r2, r3
 8017598:	d042      	beq.n	8017620 <__ssprint_r+0xb4>
 801759a:	2003      	movs	r0, #3
 801759c:	6921      	ldr	r1, [r4, #16]
 801759e:	6823      	ldr	r3, [r4, #0]
 80175a0:	1a5b      	subs	r3, r3, r1
 80175a2:	9304      	str	r3, [sp, #16]
 80175a4:	6963      	ldr	r3, [r4, #20]
 80175a6:	4343      	muls	r3, r0
 80175a8:	0fd8      	lsrs	r0, r3, #31
 80175aa:	18c3      	adds	r3, r0, r3
 80175ac:	105b      	asrs	r3, r3, #1
 80175ae:	9301      	str	r3, [sp, #4]
 80175b0:	9b04      	ldr	r3, [sp, #16]
 80175b2:	9801      	ldr	r0, [sp, #4]
 80175b4:	3301      	adds	r3, #1
 80175b6:	19db      	adds	r3, r3, r7
 80175b8:	4283      	cmp	r3, r0
 80175ba:	d900      	bls.n	80175be <__ssprint_r+0x52>
 80175bc:	9301      	str	r3, [sp, #4]
 80175be:	0553      	lsls	r3, r2, #21
 80175c0:	d544      	bpl.n	801764c <__ssprint_r+0xe0>
 80175c2:	9901      	ldr	r1, [sp, #4]
 80175c4:	9802      	ldr	r0, [sp, #8]
 80175c6:	f7fb fab7 	bl	8012b38 <_malloc_r>
 80175ca:	1e05      	subs	r5, r0, #0
 80175cc:	d114      	bne.n	80175f8 <__ssprint_r+0x8c>
 80175ce:	230c      	movs	r3, #12
 80175d0:	9a02      	ldr	r2, [sp, #8]
 80175d2:	2001      	movs	r0, #1
 80175d4:	6013      	str	r3, [r2, #0]
 80175d6:	2340      	movs	r3, #64	; 0x40
 80175d8:	89a2      	ldrh	r2, [r4, #12]
 80175da:	4240      	negs	r0, r0
 80175dc:	4313      	orrs	r3, r2
 80175de:	81a3      	strh	r3, [r4, #12]
 80175e0:	2300      	movs	r3, #0
 80175e2:	60b3      	str	r3, [r6, #8]
 80175e4:	6073      	str	r3, [r6, #4]
 80175e6:	e02f      	b.n	8017648 <__ssprint_r+0xdc>
 80175e8:	9b03      	ldr	r3, [sp, #12]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	9305      	str	r3, [sp, #20]
 80175ee:	9b03      	ldr	r3, [sp, #12]
 80175f0:	685f      	ldr	r7, [r3, #4]
 80175f2:	3308      	adds	r3, #8
 80175f4:	9303      	str	r3, [sp, #12]
 80175f6:	e7c6      	b.n	8017586 <__ssprint_r+0x1a>
 80175f8:	9a04      	ldr	r2, [sp, #16]
 80175fa:	6921      	ldr	r1, [r4, #16]
 80175fc:	f7fb fcd5 	bl	8012faa <memcpy>
 8017600:	89a3      	ldrh	r3, [r4, #12]
 8017602:	4a18      	ldr	r2, [pc, #96]	; (8017664 <__ssprint_r+0xf8>)
 8017604:	401a      	ands	r2, r3
 8017606:	2380      	movs	r3, #128	; 0x80
 8017608:	4313      	orrs	r3, r2
 801760a:	81a3      	strh	r3, [r4, #12]
 801760c:	9b04      	ldr	r3, [sp, #16]
 801760e:	6125      	str	r5, [r4, #16]
 8017610:	18ed      	adds	r5, r5, r3
 8017612:	6025      	str	r5, [r4, #0]
 8017614:	003d      	movs	r5, r7
 8017616:	9b01      	ldr	r3, [sp, #4]
 8017618:	9a04      	ldr	r2, [sp, #16]
 801761a:	6163      	str	r3, [r4, #20]
 801761c:	1a9b      	subs	r3, r3, r2
 801761e:	60a3      	str	r3, [r4, #8]
 8017620:	42bd      	cmp	r5, r7
 8017622:	d900      	bls.n	8017626 <__ssprint_r+0xba>
 8017624:	003d      	movs	r5, r7
 8017626:	002a      	movs	r2, r5
 8017628:	9905      	ldr	r1, [sp, #20]
 801762a:	6820      	ldr	r0, [r4, #0]
 801762c:	f7ff fb91 	bl	8016d52 <memmove>
 8017630:	68a3      	ldr	r3, [r4, #8]
 8017632:	1b5b      	subs	r3, r3, r5
 8017634:	60a3      	str	r3, [r4, #8]
 8017636:	6823      	ldr	r3, [r4, #0]
 8017638:	195d      	adds	r5, r3, r5
 801763a:	68b3      	ldr	r3, [r6, #8]
 801763c:	6025      	str	r5, [r4, #0]
 801763e:	1bdb      	subs	r3, r3, r7
 8017640:	60b3      	str	r3, [r6, #8]
 8017642:	d1d1      	bne.n	80175e8 <__ssprint_r+0x7c>
 8017644:	2000      	movs	r0, #0
 8017646:	6070      	str	r0, [r6, #4]
 8017648:	b007      	add	sp, #28
 801764a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801764c:	9a01      	ldr	r2, [sp, #4]
 801764e:	9802      	ldr	r0, [sp, #8]
 8017650:	f7fb fcf0 	bl	8013034 <_realloc_r>
 8017654:	1e05      	subs	r5, r0, #0
 8017656:	d1d9      	bne.n	801760c <__ssprint_r+0xa0>
 8017658:	6921      	ldr	r1, [r4, #16]
 801765a:	9802      	ldr	r0, [sp, #8]
 801765c:	f7fe ff78 	bl	8016550 <_free_r>
 8017660:	e7b5      	b.n	80175ce <__ssprint_r+0x62>
 8017662:	46c0      	nop			; (mov r8, r8)
 8017664:	fffffb7f 	.word	0xfffffb7f

08017668 <__register_exitproc>:
 8017668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801766a:	4d29      	ldr	r5, [pc, #164]	; (8017710 <__register_exitproc+0xa8>)
 801766c:	0006      	movs	r6, r0
 801766e:	6828      	ldr	r0, [r5, #0]
 8017670:	9301      	str	r3, [sp, #4]
 8017672:	9100      	str	r1, [sp, #0]
 8017674:	0017      	movs	r7, r2
 8017676:	f7ff fb5f 	bl	8016d38 <__retarget_lock_acquire_recursive>
 801767a:	4b26      	ldr	r3, [pc, #152]	; (8017714 <__register_exitproc+0xac>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	001c      	movs	r4, r3
 8017680:	34fc      	adds	r4, #252	; 0xfc
 8017682:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017684:	2800      	cmp	r0, #0
 8017686:	d103      	bne.n	8017690 <__register_exitproc+0x28>
 8017688:	334d      	adds	r3, #77	; 0x4d
 801768a:	33ff      	adds	r3, #255	; 0xff
 801768c:	0018      	movs	r0, r3
 801768e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017690:	6843      	ldr	r3, [r0, #4]
 8017692:	2b1f      	cmp	r3, #31
 8017694:	dd18      	ble.n	80176c8 <__register_exitproc+0x60>
 8017696:	4b20      	ldr	r3, [pc, #128]	; (8017718 <__register_exitproc+0xb0>)
 8017698:	2b00      	cmp	r3, #0
 801769a:	d105      	bne.n	80176a8 <__register_exitproc+0x40>
 801769c:	6828      	ldr	r0, [r5, #0]
 801769e:	f7ff fb4c 	bl	8016d3a <__retarget_lock_release_recursive>
 80176a2:	2001      	movs	r0, #1
 80176a4:	4240      	negs	r0, r0
 80176a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80176a8:	20c8      	movs	r0, #200	; 0xc8
 80176aa:	0040      	lsls	r0, r0, #1
 80176ac:	f7fb fa30 	bl	8012b10 <malloc>
 80176b0:	2800      	cmp	r0, #0
 80176b2:	d0f3      	beq.n	801769c <__register_exitproc+0x34>
 80176b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80176b6:	2300      	movs	r3, #0
 80176b8:	6002      	str	r2, [r0, #0]
 80176ba:	22c4      	movs	r2, #196	; 0xc4
 80176bc:	0052      	lsls	r2, r2, #1
 80176be:	6043      	str	r3, [r0, #4]
 80176c0:	64e0      	str	r0, [r4, #76]	; 0x4c
 80176c2:	5083      	str	r3, [r0, r2]
 80176c4:	3204      	adds	r2, #4
 80176c6:	5083      	str	r3, [r0, r2]
 80176c8:	6843      	ldr	r3, [r0, #4]
 80176ca:	2e00      	cmp	r6, #0
 80176cc:	d014      	beq.n	80176f8 <__register_exitproc+0x90>
 80176ce:	009a      	lsls	r2, r3, #2
 80176d0:	1882      	adds	r2, r0, r2
 80176d2:	0011      	movs	r1, r2
 80176d4:	3188      	adds	r1, #136	; 0x88
 80176d6:	600f      	str	r7, [r1, #0]
 80176d8:	2101      	movs	r1, #1
 80176da:	0004      	movs	r4, r0
 80176dc:	4099      	lsls	r1, r3
 80176de:	3485      	adds	r4, #133	; 0x85
 80176e0:	34ff      	adds	r4, #255	; 0xff
 80176e2:	6865      	ldr	r5, [r4, #4]
 80176e4:	32fc      	adds	r2, #252	; 0xfc
 80176e6:	430d      	orrs	r5, r1
 80176e8:	6065      	str	r5, [r4, #4]
 80176ea:	9d01      	ldr	r5, [sp, #4]
 80176ec:	60d5      	str	r5, [r2, #12]
 80176ee:	2e02      	cmp	r6, #2
 80176f0:	d102      	bne.n	80176f8 <__register_exitproc+0x90>
 80176f2:	68a2      	ldr	r2, [r4, #8]
 80176f4:	4311      	orrs	r1, r2
 80176f6:	60a1      	str	r1, [r4, #8]
 80176f8:	1c5a      	adds	r2, r3, #1
 80176fa:	6042      	str	r2, [r0, #4]
 80176fc:	3302      	adds	r3, #2
 80176fe:	9a00      	ldr	r2, [sp, #0]
 8017700:	009b      	lsls	r3, r3, #2
 8017702:	501a      	str	r2, [r3, r0]
 8017704:	4b02      	ldr	r3, [pc, #8]	; (8017710 <__register_exitproc+0xa8>)
 8017706:	6818      	ldr	r0, [r3, #0]
 8017708:	f7ff fb17 	bl	8016d3a <__retarget_lock_release_recursive>
 801770c:	2000      	movs	r0, #0
 801770e:	e7ca      	b.n	80176a6 <__register_exitproc+0x3e>
 8017710:	20000a54 	.word	0x20000a54
 8017714:	0801a648 	.word	0x0801a648
 8017718:	08012b11 	.word	0x08012b11

0801771c <_calloc_r>:
 801771c:	b510      	push	{r4, lr}
 801771e:	4351      	muls	r1, r2
 8017720:	f7fb fa0a 	bl	8012b38 <_malloc_r>
 8017724:	1e04      	subs	r4, r0, #0
 8017726:	d01a      	beq.n	801775e <_calloc_r+0x42>
 8017728:	0003      	movs	r3, r0
 801772a:	3b08      	subs	r3, #8
 801772c:	685a      	ldr	r2, [r3, #4]
 801772e:	2303      	movs	r3, #3
 8017730:	439a      	bics	r2, r3
 8017732:	3a04      	subs	r2, #4
 8017734:	2a24      	cmp	r2, #36	; 0x24
 8017736:	d819      	bhi.n	801776c <_calloc_r+0x50>
 8017738:	0003      	movs	r3, r0
 801773a:	2a13      	cmp	r2, #19
 801773c:	d90b      	bls.n	8017756 <_calloc_r+0x3a>
 801773e:	2100      	movs	r1, #0
 8017740:	3308      	adds	r3, #8
 8017742:	6001      	str	r1, [r0, #0]
 8017744:	6041      	str	r1, [r0, #4]
 8017746:	2a1b      	cmp	r2, #27
 8017748:	d905      	bls.n	8017756 <_calloc_r+0x3a>
 801774a:	6081      	str	r1, [r0, #8]
 801774c:	60c1      	str	r1, [r0, #12]
 801774e:	2a24      	cmp	r2, #36	; 0x24
 8017750:	d007      	beq.n	8017762 <_calloc_r+0x46>
 8017752:	0003      	movs	r3, r0
 8017754:	3310      	adds	r3, #16
 8017756:	2200      	movs	r2, #0
 8017758:	601a      	str	r2, [r3, #0]
 801775a:	605a      	str	r2, [r3, #4]
 801775c:	609a      	str	r2, [r3, #8]
 801775e:	0020      	movs	r0, r4
 8017760:	bd10      	pop	{r4, pc}
 8017762:	0003      	movs	r3, r0
 8017764:	6101      	str	r1, [r0, #16]
 8017766:	3318      	adds	r3, #24
 8017768:	6141      	str	r1, [r0, #20]
 801776a:	e7f4      	b.n	8017756 <_calloc_r+0x3a>
 801776c:	2100      	movs	r1, #0
 801776e:	f7fb fc25 	bl	8012fbc <memset>
 8017772:	e7f4      	b.n	801775e <_calloc_r+0x42>

08017774 <_sbrk>:
 8017774:	4b05      	ldr	r3, [pc, #20]	; (801778c <_sbrk+0x18>)
 8017776:	0002      	movs	r2, r0
 8017778:	6819      	ldr	r1, [r3, #0]
 801777a:	2900      	cmp	r1, #0
 801777c:	d101      	bne.n	8017782 <_sbrk+0xe>
 801777e:	4904      	ldr	r1, [pc, #16]	; (8017790 <_sbrk+0x1c>)
 8017780:	6019      	str	r1, [r3, #0]
 8017782:	6818      	ldr	r0, [r3, #0]
 8017784:	1882      	adds	r2, r0, r2
 8017786:	601a      	str	r2, [r3, #0]
 8017788:	4770      	bx	lr
 801778a:	46c0      	nop			; (mov r8, r8)
 801778c:	20006944 	.word	0x20006944
 8017790:	20006ee8 	.word	0x20006ee8

08017794 <_init>:
 8017794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017796:	46c0      	nop			; (mov r8, r8)
 8017798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801779a:	bc08      	pop	{r3}
 801779c:	469e      	mov	lr, r3
 801779e:	4770      	bx	lr

080177a0 <_fini>:
 80177a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177a2:	46c0      	nop			; (mov r8, r8)
 80177a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177a6:	bc08      	pop	{r3}
 80177a8:	469e      	mov	lr, r3
 80177aa:	4770      	bx	lr
